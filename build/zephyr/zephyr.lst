
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	28 3f 00 20 c5 48 00 00 69 d7 01 00 f5 48 00 00     (?. .H..i....H..
  10:	f5 48 00 00 f5 48 00 00 f5 48 00 00 00 00 00 00     .H...H...H......
	...
  2c:	61 46 00 00 f5 48 00 00 00 00 00 00 19 46 00 00     aF...H.......F..
  3c:	01 d3 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	85 48 00 00 15 64 01 00 85 48 00 00 85 48 00 00     .H...d...H...H..
  50:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  60:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  70:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  80:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  90:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  a0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  b0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  c0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  d0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  e0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..
  f0:	85 48 00 00 85 48 00 00 85 48 00 00 85 48 00 00     .H...H...H...H..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b974 	b.w	400 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	4688      	mov	r8, r1
     13c:	2b00      	cmp	r3, #0
     13e:	d14d      	bne.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     140:	428a      	cmp	r2, r1
     142:	4694      	mov	ip, r2
     144:	d968      	bls.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     146:	fab2 f282 	clz	r2, r2
     14a:	b152      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14c:	fa01 f302 	lsl.w	r3, r1, r2
     150:	f1c2 0120 	rsb	r1, r2, #32
     154:	fa20 f101 	lsr.w	r1, r0, r1
     158:	fa0c fc02 	lsl.w	ip, ip, r2
     15c:	ea41 0803 	orr.w	r8, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 451c 	mov.w	r5, ip, lsr #16
     166:	0c21      	lsrs	r1, r4, #16
     168:	fbb8 fef5 	udiv	lr, r8, r5
     16c:	fa1f f78c 	uxth.w	r7, ip
     170:	fb05 831e 	mls	r3, r5, lr, r8
     174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     178:	fb0e f107 	mul.w	r1, lr, r7
     17c:	4299      	cmp	r1, r3
     17e:	d90b      	bls.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     180:	eb1c 0303 	adds.w	r3, ip, r3
     184:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     188:	f080 811e 	bcs.w	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     18c:	4299      	cmp	r1, r3
     18e:	f240 811b 	bls.w	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     192:	f1ae 0e02 	sub.w	lr, lr, #2
     196:	4463      	add	r3, ip
     198:	1a5b      	subs	r3, r3, r1
     19a:	b2a4      	uxth	r4, r4
     19c:	fbb3 f0f5 	udiv	r0, r3, r5
     1a0:	fb05 3310 	mls	r3, r5, r0, r3
     1a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a8:	fb00 f707 	mul.w	r7, r0, r7
     1ac:	42a7      	cmp	r7, r4
     1ae:	d90a      	bls.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     1b0:	eb1c 0404 	adds.w	r4, ip, r4
     1b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b8:	f080 8108 	bcs.w	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     1bc:	42a7      	cmp	r7, r4
     1be:	f240 8105 	bls.w	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     1c2:	4464      	add	r4, ip
     1c4:	3802      	subs	r0, #2
     1c6:	1be4      	subs	r4, r4, r7
     1c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1cc:	2100      	movs	r1, #0
     1ce:	b11e      	cbz	r6, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d0:	40d4      	lsrs	r4, r2
     1d2:	2300      	movs	r3, #0
     1d4:	e9c6 4300 	strd	r4, r3, [r6]
     1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1dc:	428b      	cmp	r3, r1
     1de:	d908      	bls.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e0:	2e00      	cmp	r6, #0
     1e2:	f000 80ee 	beq.w	3c2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc2>
     1e6:	2100      	movs	r1, #0
     1e8:	e9c6 0500 	strd	r0, r5, [r6]
     1ec:	4608      	mov	r0, r1
     1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1f2:	fab3 f183 	clz	r1, r3
     1f6:	2900      	cmp	r1, #0
     1f8:	d14a      	bne.n	290 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd0>
     1fa:	42ab      	cmp	r3, r5
     1fc:	d302      	bcc.n	204 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x44>
     1fe:	4282      	cmp	r2, r0
     200:	f200 80f9 	bhi.w	3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
     204:	1a84      	subs	r4, r0, r2
     206:	eb65 0303 	sbc.w	r3, r5, r3
     20a:	2001      	movs	r0, #1
     20c:	4698      	mov	r8, r3
     20e:	2e00      	cmp	r6, #0
     210:	d0e2      	beq.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     212:	e9c6 4800 	strd	r4, r8, [r6]
     216:	e7df      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     218:	b902      	cbnz	r2, 21c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5c>
     21a:	deff      	udf	#255	; 0xff
     21c:	fab2 f282 	clz	r2, r2
     220:	2a00      	cmp	r2, #0
     222:	f040 8091 	bne.w	348 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x48>
     226:	eba1 050c 	sub.w	r5, r1, ip
     22a:	ea4f 471c 	mov.w	r7, ip, lsr #16
     22e:	fa1f fe8c 	uxth.w	lr, ip
     232:	2101      	movs	r1, #1
     234:	fbb5 f3f7 	udiv	r3, r5, r7
     238:	fb07 5013 	mls	r0, r7, r3, r5
     23c:	0c25      	lsrs	r5, r4, #16
     23e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     242:	fb0e f003 	mul.w	r0, lr, r3
     246:	42a8      	cmp	r0, r5
     248:	d908      	bls.n	25c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9c>
     24a:	eb1c 0505 	adds.w	r5, ip, r5
     24e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     252:	d202      	bcs.n	25a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9a>
     254:	42a8      	cmp	r0, r5
     256:	f200 80cb 	bhi.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     25a:	4643      	mov	r3, r8
     25c:	1a2d      	subs	r5, r5, r0
     25e:	b2a4      	uxth	r4, r4
     260:	fbb5 f0f7 	udiv	r0, r5, r7
     264:	fb07 5510 	mls	r5, r7, r0, r5
     268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     26c:	fb0e fe00 	mul.w	lr, lr, r0
     270:	45a6      	cmp	lr, r4
     272:	d908      	bls.n	286 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc6>
     274:	eb1c 0404 	adds.w	r4, ip, r4
     278:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     27c:	d202      	bcs.n	284 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc4>
     27e:	45a6      	cmp	lr, r4
     280:	f200 80bb 	bhi.w	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     284:	4628      	mov	r0, r5
     286:	eba4 040e 	sub.w	r4, r4, lr
     28a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     28e:	e79e      	b.n	1ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xe>
     290:	f1c1 0720 	rsb	r7, r1, #32
     294:	408b      	lsls	r3, r1
     296:	fa22 fc07 	lsr.w	ip, r2, r7
     29a:	ea4c 0c03 	orr.w	ip, ip, r3
     29e:	fa20 f407 	lsr.w	r4, r0, r7
     2a2:	fa05 f301 	lsl.w	r3, r5, r1
     2a6:	431c      	orrs	r4, r3
     2a8:	40fd      	lsrs	r5, r7
     2aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
     2ae:	fa00 f301 	lsl.w	r3, r0, r1
     2b2:	fbb5 f8f9 	udiv	r8, r5, r9
     2b6:	0c20      	lsrs	r0, r4, #16
     2b8:	fa1f fe8c 	uxth.w	lr, ip
     2bc:	fb09 5518 	mls	r5, r9, r8, r5
     2c0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2c4:	fb08 f00e 	mul.w	r0, r8, lr
     2c8:	42a8      	cmp	r0, r5
     2ca:	fa02 f201 	lsl.w	r2, r2, r1
     2ce:	d90b      	bls.n	2e8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x128>
     2d0:	eb1c 0505 	adds.w	r5, ip, r5
     2d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2d8:	f080 8088 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2dc:	42a8      	cmp	r0, r5
     2de:	f240 8085 	bls.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2e2:	f1a8 0802 	sub.w	r8, r8, #2
     2e6:	4465      	add	r5, ip
     2e8:	1a2d      	subs	r5, r5, r0
     2ea:	b2a4      	uxth	r4, r4
     2ec:	fbb5 f0f9 	udiv	r0, r5, r9
     2f0:	fb09 5510 	mls	r5, r9, r0, r5
     2f4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2f8:	fb00 fe0e 	mul.w	lr, r0, lr
     2fc:	45ae      	cmp	lr, r5
     2fe:	d908      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     300:	eb1c 0505 	adds.w	r5, ip, r5
     304:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     308:	d26c      	bcs.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     30a:	45ae      	cmp	lr, r5
     30c:	d96a      	bls.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     30e:	3802      	subs	r0, #2
     310:	4465      	add	r5, ip
     312:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     316:	fba0 9402 	umull	r9, r4, r0, r2
     31a:	eba5 050e 	sub.w	r5, r5, lr
     31e:	42a5      	cmp	r5, r4
     320:	46c8      	mov	r8, r9
     322:	46a6      	mov	lr, r4
     324:	d356      	bcc.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     326:	d053      	beq.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     328:	b15e      	cbz	r6, 342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     32a:	ebb3 0208 	subs.w	r2, r3, r8
     32e:	eb65 050e 	sbc.w	r5, r5, lr
     332:	fa05 f707 	lsl.w	r7, r5, r7
     336:	fa22 f301 	lsr.w	r3, r2, r1
     33a:	40cd      	lsrs	r5, r1
     33c:	431f      	orrs	r7, r3
     33e:	e9c6 7500 	strd	r7, r5, [r6]
     342:	2100      	movs	r1, #0
     344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     348:	f1c2 0320 	rsb	r3, r2, #32
     34c:	fa20 f103 	lsr.w	r1, r0, r3
     350:	fa0c fc02 	lsl.w	ip, ip, r2
     354:	fa25 f303 	lsr.w	r3, r5, r3
     358:	4095      	lsls	r5, r2
     35a:	430d      	orrs	r5, r1
     35c:	ea4f 471c 	mov.w	r7, ip, lsr #16
     360:	fa1f fe8c 	uxth.w	lr, ip
     364:	fbb3 f1f7 	udiv	r1, r3, r7
     368:	fb07 3011 	mls	r0, r7, r1, r3
     36c:	0c2b      	lsrs	r3, r5, #16
     36e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     372:	fb01 f00e 	mul.w	r0, r1, lr
     376:	4298      	cmp	r0, r3
     378:	fa04 f402 	lsl.w	r4, r4, r2
     37c:	d908      	bls.n	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     37e:	eb1c 0303 	adds.w	r3, ip, r3
     382:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     386:	d22f      	bcs.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     388:	4298      	cmp	r0, r3
     38a:	d92d      	bls.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     38c:	3902      	subs	r1, #2
     38e:	4463      	add	r3, ip
     390:	1a1b      	subs	r3, r3, r0
     392:	b2ad      	uxth	r5, r5
     394:	fbb3 f0f7 	udiv	r0, r3, r7
     398:	fb07 3310 	mls	r3, r7, r0, r3
     39c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3a0:	fb00 f30e 	mul.w	r3, r0, lr
     3a4:	42ab      	cmp	r3, r5
     3a6:	d908      	bls.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3a8:	eb1c 0505 	adds.w	r5, ip, r5
     3ac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     3b0:	d216      	bcs.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3b2:	42ab      	cmp	r3, r5
     3b4:	d914      	bls.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3b6:	3802      	subs	r0, #2
     3b8:	4465      	add	r5, ip
     3ba:	1aed      	subs	r5, r5, r3
     3bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3c0:	e738      	b.n	234 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x74>
     3c2:	4631      	mov	r1, r6
     3c4:	4630      	mov	r0, r6
     3c6:	e707      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     3c8:	4686      	mov	lr, r0
     3ca:	e6e5      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     3cc:	4618      	mov	r0, r3
     3ce:	e6fa      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     3d0:	454b      	cmp	r3, r9
     3d2:	d2a9      	bcs.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     3d4:	ebb9 0802 	subs.w	r8, r9, r2
     3d8:	eb64 0e0c 	sbc.w	lr, r4, ip
     3dc:	3801      	subs	r0, #1
     3de:	e7a3      	b.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     3e0:	4640      	mov	r0, r8
     3e2:	e7ea      	b.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3e4:	4620      	mov	r0, r4
     3e6:	e794      	b.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     3e8:	4641      	mov	r1, r8
     3ea:	e7d1      	b.n	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     3ec:	46d0      	mov	r8, sl
     3ee:	e77b      	b.n	2e8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x128>
     3f0:	3b02      	subs	r3, #2
     3f2:	4465      	add	r5, ip
     3f4:	e732      	b.n	25c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9c>
     3f6:	4608      	mov	r0, r1
     3f8:	e709      	b.n	20e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4e>
     3fa:	4464      	add	r4, ip
     3fc:	3802      	subs	r0, #2
     3fe:	e742      	b.n	286 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc6>

00000400 <__aeabi_idiv0>:
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	0000      	movs	r0, r0
	...

00000408 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     40c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     410:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     412:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     414:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     416:	42a6      	cmp	r6, r4
{
     418:	4688      	mov	r8, r1
     41a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     41c:	d818      	bhi.n	450 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     41e:	4d1c      	ldr	r5, [pc, #112]	; (490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>)
     420:	fba3 0105 	umull	r0, r1, r3, r5
     424:	a318      	add	r3, pc, #96	; (adr r3, 488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>)
     426:	e9d3 2300 	ldrd	r2, r3, [r3]
     42a:	f7ff fe69 	bl	100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     42e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     430:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     434:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     438:	a313      	add	r3, pc, #76	; (adr r3, 488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>)
     43a:	e9d3 2300 	ldrd	r2, r3, [r3]
     43e:	fba4 0105 	umull	r0, r1, r4, r5
     442:	f7ff fe5d 	bl	100 <__aeabi_uldivmod>
     446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     44a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     450:	4c0f      	ldr	r4, [pc, #60]	; (490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>)
     452:	a30d      	add	r3, pc, #52	; (adr r3, 488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>)
     454:	e9d3 2300 	ldrd	r2, r3, [r3]
     458:	fba6 0104 	umull	r0, r1, r6, r4
     45c:	f7ff fe50 	bl	100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     460:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     468:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     46c:	a306      	add	r3, pc, #24	; (adr r3, 488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>)
     46e:	e9d3 2300 	ldrd	r2, r3, [r3]
     472:	fba1 0104 	umull	r0, r1, r1, r4
     476:	f7ff fe43 	bl	100 <__aeabi_uldivmod>
     47a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     47e:	6038      	str	r0, [r7, #0]
}
     480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     484:	f3af 8000 	nop.w
     488:	1afd498d 	.word	0x1afd498d
     48c:	00000007 	.word	0x00000007
     490:	3b9aca00 	.word	0x3b9aca00
     494:	00000000 	.word	0x00000000

00000498 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     49c:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     49e:	2800      	cmp	r0, #0
     4a0:	f000 815c 	beq.w	75c <CONFIG_BT_COMPANY_ID+0x16b>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     4a4:	4cba      	ldr	r4, [pc, #744]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
     4a6:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
     4aa:	f016 0601 	ands.w	r6, r6, #1
     4ae:	d136      	bne.n	51e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4b0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	ull_filter_adv_update(lll->filter_policy);
     4b8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
     4bc:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     4c6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
     4ca:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4ce:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4d2:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
     4d6:	f015 faaf 	bl	15a38 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     4da:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
     4de:	0741      	lsls	r1, r0, #29
     4e0:	f100 8121 	bmi.w	726 <CONFIG_BT_COMPANY_ID+0x135>
	if (pdu_adv_to_update) {
     4e4:	f1b8 0f00 	cmp.w	r8, #0
     4e8:	d011      	beq.n	50e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     4ea:	48a9      	ldr	r0, [pc, #676]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
     4ec:	4641      	mov	r1, r8
     4ee:	f00e ff63 	bl	f3b8 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     4f2:	f898 3000 	ldrb.w	r3, [r8]
     4f6:	065a      	lsls	r2, r3, #25
     4f8:	d505      	bpl.n	506 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     4fa:	2106      	movs	r1, #6
     4fc:	f009 ff3a 	bl	a374 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     500:	2800      	cmp	r0, #0
     502:	f000 81fa 	beq.w	8fa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfa>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     506:	48a2      	ldr	r0, [pc, #648]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
     508:	4649      	mov	r1, r9
     50a:	f00e ff55 	bl	f3b8 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     50e:	f898 3000 	ldrb.w	r3, [r8]
     512:	f013 0f0e 	tst.w	r3, #14
     516:	f040 80df 	bne.w	6d8 <CONFIG_BT_COMPANY_ID+0xe7>
		if (lll->conn) {
     51a:	6a23      	ldr	r3, [r4, #32]
     51c:	b123      	cbz	r3, 528 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
     51e:	260c      	movs	r6, #12
}
     520:	4630      	mov	r0, r6
     522:	b00f      	add	sp, #60	; 0x3c
     524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     528:	f00e f802 	bl	e530 <ll_rx_link_alloc>
		if (!link) {
     52c:	4682      	mov	sl, r0
     52e:	2800      	cmp	r0, #0
     530:	f000 81f2 	beq.w	918 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x118>
		node_rx = ll_rx_alloc();
     534:	f00e f808 	bl	e548 <ll_rx_alloc>
		if (!node_rx) {
     538:	4683      	mov	fp, r0
     53a:	2800      	cmp	r0, #0
     53c:	f000 81f1 	beq.w	922 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x122>
		conn = ll_conn_acquire();
     540:	f00f ff0e 	bl	10360 <ll_conn_acquire>
		if (!conn) {
     544:	4605      	mov	r5, r0
     546:	2800      	cmp	r0, #0
     548:	f000 81e8 	beq.w	91c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x11c>
		if (!conn_lll->link_tx_free) {
     54c:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
     54e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     552:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     554:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
     558:	2800      	cmp	r0, #0
     55a:	f000 81d9 	beq.w	910 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x110>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     55e:	f105 0268 	add.w	r2, r5, #104	; 0x68
     562:	f105 0164 	add.w	r1, r5, #100	; 0x64
     566:	930b      	str	r3, [sp, #44]	; 0x2c
     568:	f009 ff10 	bl	a38c <memq_init>
			conn_lll->phy_tx = PHY_1M;
     56c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     570:	4b88      	ldr	r3, [pc, #544]	; (794 <CONFIG_BT_COMPANY_ID+0x1a3>)
			conn_lll->phy_tx = PHY_1M;
     572:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     576:	f022 0207 	bic.w	r2, r2, #7
     57a:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     57e:	f042 0201 	orr.w	r2, r2, #1
     582:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
     586:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
     58a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     58e:	f062 027f 	orn	r2, r2, #127	; 0x7f
     592:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     596:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
     59a:	f022 0207 	bic.w	r2, r2, #7
     59e:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->slave.initiated = 0;
     5a2:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
     5a6:	f022 0207 	bic.w	r2, r2, #7
     5aa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
     5ae:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
     5b2:	f022 0207 	bic.w	r2, r2, #7
     5b6:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     5ba:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
     5be:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     5c0:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
     5c4:	2206      	movs	r2, #6
     5c6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
     5ca:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     5ce:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
     5d0:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
     5d4:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
     5d6:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     5d8:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
     5dc:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     5de:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
     5e2:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
     5e6:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
     5ea:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     5ee:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
     5f2:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
     5f6:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     5fa:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     5fe:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
     602:	f00d f855 	bl	d6b0 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     606:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     60a:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     60e:	f022 0203 	bic.w	r2, r2, #3
     612:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     616:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     61a:	f8a5 7140 	strh.w	r7, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     61e:	f022 0218 	bic.w	r2, r2, #24
     622:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     626:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
     62a:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     62e:	f022 0207 	bic.w	r2, r2, #7
     632:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
     636:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
     63a:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
     63e:	f367 1204 	bfi	r2, r7, #4, #1
     642:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
     646:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     64a:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
     64e:	f367 02c3 	bfi	r2, r7, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
     652:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
     656:	2100      	movs	r1, #0
     658:	2000      	movs	r0, #0
     65a:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
     65e:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->slave.llcp_type = 0U;
     662:	f885 70d9 	strb.w	r7, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
     666:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->slave.ticks_to_offset = 0;
     66a:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     66e:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
     672:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     676:	f010 f9b5 	bl	109e4 <ull_conn_default_tx_octets_get>
     67a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
     67e:	f010 f9b7 	bl	109f0 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     682:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
     686:	4a44      	ldr	r2, [pc, #272]	; (798 <CONFIG_BT_COMPANY_ID+0x1a7>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     688:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     68c:	400a      	ands	r2, r1
     68e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     692:	f010 f9b3 	bl	109fc <ull_conn_default_phy_tx_get>
     696:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
     69a:	f360 0202 	bfi	r2, r0, #0, #3
     69e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6a2:	f010 f9b1 	bl	10a08 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
     6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     6a8:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6aa:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6ae:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6b2:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
     6b6:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_data = conn->tx_data_last = 0;
     6ba:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6be:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     6c2:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
     6c6:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     6c8:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6ca:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
     6ce:	f016 fb03 	bl	16cd8 <lll_clock_wait>
		if (err) {
     6d2:	2800      	cmp	r0, #0
     6d4:	f040 8113 	bne.w	8fe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfe>
	uint8_t ch_map = lll->chan_map;
     6d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6dc:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     6de:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     6e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6ea:	f009 ffc9 	bl	a680 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     6ee:	b370      	cbz	r0, 74e <CONFIG_BT_COMPANY_ID+0x15d>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     6f0:	f898 2000 	ldrb.w	r2, [r8]
     6f4:	f002 020f 	and.w	r2, r2, #15
     6f8:	2a02      	cmp	r2, #2
     6fa:	d04f      	beq.n	79c <CONFIG_BT_COMPANY_ID+0x1ab>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     6fc:	2a01      	cmp	r2, #1
     6fe:	f000 8102 	beq.w	906 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x106>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     702:	f899 3001 	ldrb.w	r3, [r9, #1]
     706:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
     708:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     70a:	2a00      	cmp	r2, #0
     70c:	f000 80ea 	beq.w	8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     710:	2a06      	cmp	r2, #6
     712:	f000 810b 	beq.w	92c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x12c>
     716:	f44f 71da 	mov.w	r1, #436	; 0x1b4
     71a:	f44f 731b 	mov.w	r3, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     71e:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     720:	fb01 3100 	mla	r1, r1, r0, r3
     724:	e046      	b.n	7b4 <CONFIG_BT_COMPANY_ID+0x1c3>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     726:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     72a:	4632      	mov	r2, r6
     72c:	f104 014b 	add.w	r1, r4, #75	; 0x4b
     730:	f015 fb18 	bl	15d64 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     734:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     736:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
     73a:	f43f aed3 	beq.w	4e4 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     73e:	4630      	mov	r0, r6
     740:	f015 f9c0 	bl	15ac4 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     744:	f1b8 0f00 	cmp.w	r8, #0
     748:	f47f aecf 	bne.w	4ea <ll_adv_enable+0x52>
     74c:	e6df      	b.n	50e <ll_adv_enable+0x76>
	if (adv->lll.conn) {
     74e:	6a23      	ldr	r3, [r4, #32]
     750:	2b00      	cmp	r3, #0
     752:	f43f aee4 	beq.w	51e <ll_adv_enable+0x86>
		conn_release(adv);
     756:	f00e fb9b 	bl	ee90 <conn_release.constprop.0>
     75a:	e6e0      	b.n	51e <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
     75c:	4b0c      	ldr	r3, [pc, #48]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
     75e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     762:	07d4      	lsls	r4, r2, #31
     764:	f57f aedb 	bpl.w	51e <ll_adv_enable+0x86>
	if (!adv) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     768:	6a1a      	ldr	r2, [r3, #32]
     76a:	b15a      	cbz	r2, 784 <CONFIG_BT_COMPANY_ID+0x193>
		/* Indicate to LLL that a cancellation is requested */
		adv->lll.conn->slave.cancelled = 1U;
     76c:	f892 1020 	ldrb.w	r1, [r2, #32]
     770:	f041 0102 	orr.w	r1, r1, #2
     774:	f882 1020 	strb.w	r1, [r2, #32]
		cpu_dmb();

		/* Check if a connection was initiated (connection
		 * establishment race between LLL and ULL).
		 */
		if (unlikely(adv->lll.conn->slave.initiated)) {
     778:	6a1b      	ldr	r3, [r3, #32]
     77a:	f893 3020 	ldrb.w	r3, [r3, #32]
     77e:	07d8      	lsls	r0, r3, #31
     780:	f53f aecd 	bmi.w	51e <ll_adv_enable+0x86>
}
     784:	b00f      	add	sp, #60	; 0x3c
     786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78a:	f00e bbc3 	b.w	ef14 <disable.part.0>
     78e:	bf00      	nop
     790:	20001d74 	.word	0x20001d74
     794:	01480148 	.word	0x01480148
     798:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
     79c:	f898 3001 	ldrb.w	r3, [r8, #1]
     7a0:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     7a2:	00db      	lsls	r3, r3, #3
     7a4:	fb00 f303 	mul.w	r3, r0, r3
     7a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     7ac:	3801      	subs	r0, #1
     7ae:	2164      	movs	r1, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     7b0:	fb01 3100 	mla	r1, r1, r0, r3
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     7b4:	4866      	ldr	r0, [pc, #408]	; (950 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x150>)
     7b6:	61e4      	str	r4, [r4, #28]
     7b8:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
     7ba:	2331      	movs	r3, #49	; 0x31
     7bc:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     7be:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     7c2:	a361      	add	r3, pc, #388	; (adr r3, 948 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x148>)
     7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
     7c8:	fba1 0100 	umull	r0, r1, r1, r0
	hdr->ref = 0U;
     7cc:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     7ce:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     7d0:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     7d2:	f7ff fc95 	bl	100 <__aeabi_uldivmod>
     7d6:	6120      	str	r0, [r4, #16]
	uint16_t interval = adv->interval;
     7d8:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
	ticks_anchor = ticker_ticks_now_get();
     7dc:	f00b f960 	bl	baa0 <ticker_ticks_now_get>
     7e0:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     7e2:	b947      	cbnz	r7, 7f6 <CONFIG_BT_COMPANY_ID+0x205>
     7e4:	f898 5000 	ldrb.w	r5, [r8]
     7e8:	f005 050f 	and.w	r5, r5, #15
     7ec:	f1a5 0501 	sub.w	r5, r5, #1
     7f0:	fab5 f585 	clz	r5, r5
     7f4:	096d      	lsrs	r5, r5, #5
     7f6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     7fa:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     7fe:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     802:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     806:	d043      	beq.n	890 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x90>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     808:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     80a:	4a52      	ldr	r2, [pc, #328]	; (954 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x154>)
     80c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 958 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x158>
     810:	9304      	str	r3, [sp, #16]
     812:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     814:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     816:	af0d      	add	r7, sp, #52	; 0x34
     818:	9301      	str	r3, [sp, #4]
     81a:	9205      	str	r2, [sp, #20]
     81c:	2103      	movs	r1, #3
     81e:	e9cd 0002 	strd	r0, r0, [sp, #8]
     822:	9406      	str	r4, [sp, #24]
     824:	464b      	mov	r3, r9
     826:	9000      	str	r0, [sp, #0]
     828:	9708      	str	r7, [sp, #32]
     82a:	f8cd 801c 	str.w	r8, [sp, #28]
     82e:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     830:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     832:	f00b f80b 	bl	b84c <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     836:	4639      	mov	r1, r7
     838:	f00d ff0a 	bl	e650 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     83c:	2800      	cmp	r0, #0
     83e:	d186      	bne.n	74e <CONFIG_BT_COMPANY_ID+0x15d>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     840:	4a46      	ldr	r2, [pc, #280]	; (95c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15c>)
     842:	9205      	str	r2, [sp, #20]
     844:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     848:	9200      	str	r2, [sp, #0]
     84a:	e9cd 0003 	strd	r0, r0, [sp, #12]
     84e:	e9cd 0001 	strd	r0, r0, [sp, #4]
     852:	f8cd 801c 	str.w	r8, [sp, #28]
     856:	9708      	str	r7, [sp, #32]
     858:	9406      	str	r4, [sp, #24]
     85a:	464b      	mov	r3, r9
     85c:	2201      	movs	r2, #1
     85e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     860:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     862:	f00a fff3 	bl	b84c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     866:	4639      	mov	r1, r7
     868:	f00d fef2 	bl	e650 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     86c:	2800      	cmp	r0, #0
     86e:	f47f af6e 	bne.w	74e <CONFIG_BT_COMPANY_ID+0x15d>
	adv->is_enabled = 1;
     872:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
     876:	f043 0301 	orr.w	r3, r3, #1
     87a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     87e:	f00e fed1 	bl	f624 <ull_scan_is_enabled_get>
     882:	2800      	cmp	r0, #0
     884:	f47f ae4c 	bne.w	520 <ll_adv_enable+0x88>
		ull_filter_adv_scan_state_cb(BIT(0));
     888:	2001      	movs	r0, #1
     88a:	f015 f8b7 	bl	159fc <ull_filter_adv_scan_state_cb>
     88e:	e647      	b.n	520 <ll_adv_enable+0x88>
		ret = ticker_start_ext(
     890:	9406      	str	r4, [sp, #24]
     892:	9502      	str	r5, [sp, #8]
		const uint32_t ticks_slot = adv->ull.ticks_slot +
     894:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     896:	4a32      	ldr	r2, [pc, #200]	; (960 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x160>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     898:	4832      	ldr	r0, [pc, #200]	; (964 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x164>)
		ret = ticker_start_ext(
     89a:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     89c:	f203 1347 	addw	r3, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     8a0:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     8a2:	fba7 0100 	umull	r0, r1, r7, r0
     8a6:	2391      	movs	r3, #145	; 0x91
     8a8:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
     8ac:	4b2a      	ldr	r3, [pc, #168]	; (958 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x158>)
     8ae:	9307      	str	r3, [sp, #28]
     8b0:	4b28      	ldr	r3, [pc, #160]	; (954 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x154>)
     8b2:	9305      	str	r3, [sp, #20]
     8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     8b8:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
     8ba:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
     8be:	9303      	str	r3, [sp, #12]
     8c0:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     8c2:	a321      	add	r3, pc, #132	; (adr r3, 948 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x148>)
     8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     8c8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
     8cc:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     8ce:	f7ff fc17 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     8d2:	464b      	mov	r3, r9
     8d4:	e9cd 5000 	strd	r5, r0, [sp]
     8d8:	4642      	mov	r2, r8
     8da:	4628      	mov	r0, r5
     8dc:	2103      	movs	r1, #3
     8de:	f00a ff5f 	bl	b7a0 <ticker_start_ext>
     8e2:	e7c0      	b.n	866 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66>
				adv_size += pdu_adv->len;
     8e4:	f898 1001 	ldrb.w	r1, [r8, #1]
     8e8:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
     8ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     8ee:	00c9      	lsls	r1, r1, #3
     8f0:	f503 734d 	add.w	r3, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     8f4:	f501 719a 	add.w	r1, r1, #308	; 0x134
     8f8:	e711      	b.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
			return BT_HCI_ERR_INVALID_PARAM;
     8fa:	2612      	movs	r6, #18
     8fc:	e610      	b.n	520 <ll_adv_enable+0x88>
			conn_release(adv);
     8fe:	f00e fac7 	bl	ee90 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     902:	2603      	movs	r6, #3
     904:	e60c      	b.n	520 <ll_adv_enable+0x88>
     906:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
     90a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
     90e:	e706      	b.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     910:	f105 006c 	add.w	r0, r5, #108	; 0x6c
     914:	6768      	str	r0, [r5, #116]	; 0x74
     916:	e622      	b.n	55e <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     918:	2607      	movs	r6, #7
     91a:	e601      	b.n	520 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
     91c:	4658      	mov	r0, fp
     91e:	f00d fe19 	bl	e554 <ll_rx_release>
			ll_rx_link_release(link);
     922:	4650      	mov	r0, sl
     924:	f00d fe0a 	bl	e53c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     928:	2607      	movs	r6, #7
     92a:	e5f9      	b.n	520 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
     92c:	f898 2001 	ldrb.w	r2, [r8, #1]
     930:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     936:	00d1      	lsls	r1, r2, #3
     938:	f503 734d 	add.w	r3, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     93c:	f501 719a 	add.w	r1, r1, #308	; 0x134
     940:	e6ed      	b.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
     942:	bf00      	nop
     944:	f3af 8000 	nop.w
     948:	1afd498d 	.word	0x1afd498d
     94c:	00000007 	.word	0x00000007
     950:	3b9aca00 	.word	0x3b9aca00
     954:	0000ec19 	.word	0x0000ec19
     958:	0000d77d 	.word	0x0000d77d
     95c:	0000eafd 	.word	0x0000eafd
     960:	20001dc8 	.word	0x20001dc8
     964:	84e72a00 	.word	0x84e72a00

00000968 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     968:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     96a:	4c19      	ldr	r4, [pc, #100]	; (9d0 <ll_scan_params_set+0x68>)
{
     96c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
     970:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
     974:	f01c 0501 	ands.w	r5, ip, #1
     978:	d122      	bne.n	9c0 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
     97a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
     97e:	0140      	lsls	r0, r0, #5
     980:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
     984:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
     986:	ea4f 0ece 	mov.w	lr, lr, lsl #3
     98a:	f00e 0e18 	and.w	lr, lr, #24
     98e:	f000 0020 	and.w	r0, r0, #32
     992:	ea40 000e 	orr.w	r0, r0, lr
     996:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     99a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     99c:	480d      	ldr	r0, [pc, #52]	; (9d4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
     99e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     9a2:	fba2 0100 	umull	r0, r1, r2, r0
     9a6:	2391      	movs	r3, #145	; 0x91
     9a8:	fb03 1102 	mla	r1, r3, r2, r1
     9ac:	a306      	add	r3, pc, #24	; (adr r3, 9c8 <ll_scan_params_set+0x60>)
     9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
     9b2:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     9b6:	f7ff fba3 	bl	100 <__aeabi_uldivmod>
     9ba:	6420      	str	r0, [r4, #64]	; 0x40
}
     9bc:	4628      	mov	r0, r5
     9be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     9c0:	250c      	movs	r5, #12
}
     9c2:	4628      	mov	r0, r5
     9c4:	bd38      	pop	{r3, r4, r5, pc}
     9c6:	bf00      	nop
     9c8:	1afd498d 	.word	0x1afd498d
     9cc:	00000007 	.word	0x00000007
     9d0:	20001dec 	.word	0x20001dec
     9d4:	84e72a00 	.word	0x84e72a00

000009d8 <ull_scan_params_set>:
{
     9d8:	b510      	push	{r4, lr}
     9da:	f89d c008 	ldrb.w	ip, [sp, #8]
     9de:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
     9e0:	0149      	lsls	r1, r1, #5
     9e2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
     9e6:	f000 0018 	and.w	r0, r0, #24
     9ea:	f001 0c20 	and.w	ip, r1, #32
     9ee:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
     9f0:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
     9f2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     9f6:	480c      	ldr	r0, [pc, #48]	; (a28 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
     9f8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
     9fc:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     a00:	2291      	movs	r2, #145	; 0x91
     a02:	fba3 0100 	umull	r0, r1, r3, r0
     a06:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
     a0a:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     a0e:	a304      	add	r3, pc, #16	; (adr r3, a20 <ull_scan_params_set+0x48>)
     a10:	e9d3 2300 	ldrd	r2, r3, [r3]
     a14:	f7ff fb74 	bl	100 <__aeabi_uldivmod>
     a18:	6260      	str	r0, [r4, #36]	; 0x24
}
     a1a:	bd10      	pop	{r4, pc}
     a1c:	f3af 8000 	nop.w
     a20:	1afd498d 	.word	0x1afd498d
     a24:	00000007 	.word	0x00000007
     a28:	84e72a00 	.word	0x84e72a00
     a2c:	00000000 	.word	0x00000000

00000a30 <ull_scan_enable>:
{
     a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a34:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     a36:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
     a3a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
     a3e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
     a42:	f3c0 0040 	ubfx	r0, r0, #1, #1
     a46:	f360 1386 	bfi	r3, r0, #6, #1
{
     a4a:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
     a4c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     a50:	f00b f82c 	bl	baac <ll_addr_get>
	lll->chan = 0U;
     a54:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     a58:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
     a5a:	484d      	ldr	r0, [pc, #308]	; (b90 <ull_scan_enable+0x160>)
     a5c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
     a5e:	f002 0279 	and.w	r2, r2, #121	; 0x79
     a62:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     a64:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
     a68:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     a6c:	2291      	movs	r2, #145	; 0x91
     a6e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
     a72:	e9c4 5505 	strd	r5, r5, [r4, #20]
     a76:	a344      	add	r3, pc, #272	; (adr r3, b88 <ull_scan_enable+0x158>)
     a78:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     a7c:	7025      	strb	r5, [r4, #0]
     a7e:	f7ff fb3f 	bl	100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
     a82:	2331      	movs	r3, #49	; 0x31
     a84:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
     a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
     a8a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
     a8c:	3309      	adds	r3, #9
	    (ticks_interval -
     a8e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     a92:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
     a94:	bf32      	itee	cc
     a96:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
     a98:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
     a9a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     a9c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     a9e:	f00a ffff 	bl	baa0 <ticker_ticks_now_get>
	if (!lll->conn) {
     aa2:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
     aa4:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     aa6:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
     aaa:	2b00      	cmp	r3, #0
     aac:	d04c      	beq.n	b48 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     aae:	4d39      	ldr	r5, [pc, #228]	; (b94 <ull_scan_enable+0x164>)
     ab0:	4b39      	ldr	r3, [pc, #228]	; (b98 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ab2:	f8cd 8020 	str.w	r8, [sp, #32]
     ab6:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     ab8:	1b65      	subs	r5, r4, r5
     aba:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     abe:	4834      	ldr	r0, [pc, #208]	; (b90 <ull_scan_enable+0x160>)
     ac0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ac2:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     ac6:	fba3 0100 	umull	r0, r1, r3, r0
     aca:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     acc:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     ad0:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ad4:	6923      	ldr	r3, [r4, #16]
     ad6:	9304      	str	r3, [sp, #16]
     ad8:	4b30      	ldr	r3, [pc, #192]	; (b9c <ull_scan_enable+0x16c>)
     ada:	9307      	str	r3, [sp, #28]
     adc:	4b30      	ldr	r3, [pc, #192]	; (ba0 <ull_scan_enable+0x170>)
     ade:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
     ae0:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     ae4:	a328      	add	r3, pc, #160	; (adr r3, b88 <ull_scan_enable+0x158>)
     ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
     aea:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     aee:	f7ff fb07 	bl	100 <__aeabi_uldivmod>
     af2:	4610      	mov	r0, r2
     af4:	4619      	mov	r1, r3
     af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     afa:	2300      	movs	r3, #0
     afc:	f7ff fb00 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     b00:	092d      	lsrs	r5, r5, #4
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     b02:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b04:	b2ed      	uxtb	r5, r5
     b06:	462a      	mov	r2, r5
     b08:	e9cd 6001 	strd	r6, r0, [sp, #4]
     b0c:	463b      	mov	r3, r7
     b0e:	2103      	movs	r1, #3
     b10:	f8cd a000 	str.w	sl, [sp]
     b14:	4650      	mov	r0, sl
     b16:	f00a fe99 	bl	b84c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     b1a:	4641      	mov	r1, r8
     b1c:	f00d fd98 	bl	e650 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     b20:	4605      	mov	r5, r0
     b22:	b968      	cbnz	r0, b40 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
     b24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     b28:	f043 0301 	orr.w	r3, r3, #1
     b2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
     b30:	f00e fbe4 	bl	f2fc <ull_adv_is_enabled_get>
     b34:	4604      	mov	r4, r0
     b36:	b1f8      	cbz	r0, b78 <ull_scan_enable+0x148>
	return 0;
     b38:	4628      	mov	r0, r5
}
     b3a:	b00c      	add	sp, #48	; 0x30
     b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     b40:	200c      	movs	r0, #12
}
     b42:	b00c      	add	sp, #48	; 0x30
     b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
     b48:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     b4c:	6921      	ldr	r1, [r4, #16]
     b4e:	4643      	mov	r3, r8
     b50:	aa0a      	add	r2, sp, #40	; 0x28
     b52:	2003      	movs	r0, #3
     b54:	f001 f950 	bl	1df8 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
     b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
     b5a:	2900      	cmp	r1, #0
     b5c:	d0a7      	beq.n	aae <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
     b5e:	4811      	ldr	r0, [pc, #68]	; (ba4 <ull_scan_enable+0x174>)
     b60:	a309      	add	r3, pc, #36	; (adr r3, b88 <ull_scan_enable+0x158>)
     b62:	e9d3 2300 	ldrd	r2, r3, [r3]
     b66:	fba1 0100 	umull	r0, r1, r1, r0
     b6a:	f7ff fac9 	bl	100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
     b6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
     b70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
     b74:	4407      	add	r7, r0
     b76:	e79a      	b.n	aae <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
     b78:	4648      	mov	r0, r9
     b7a:	f014 ff3f 	bl	159fc <ull_filter_adv_scan_state_cb>
	return 0;
     b7e:	4620      	mov	r0, r4
}
     b80:	b00c      	add	sp, #48	; 0x30
     b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b86:	bf00      	nop
     b88:	1afd498d 	.word	0x1afd498d
     b8c:	00000007 	.word	0x00000007
     b90:	84e72a00 	.word	0x84e72a00
     b94:	20001dec 	.word	0x20001dec
     b98:	38e38e39 	.word	0x38e38e39
     b9c:	0000d77d 	.word	0x0000d77d
     ba0:	0000f419 	.word	0x0000f419
     ba4:	3b9aca00 	.word	0x3b9aca00

00000ba8 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
     bac:	f8df c2e0 	ldr.w	ip, [pc, #736]	; e90 <event_conn_upd_prep+0x2e8>

	/* set mutex */
	if (!conn_upd) {
     bb0:	f8dc 3000 	ldr.w	r3, [ip]
{
     bb4:	b08b      	sub	sp, #44	; 0x2c
     bb6:	4604      	mov	r4, r0
     bb8:	460e      	mov	r6, r1
     bba:	4617      	mov	r7, r2
	if (!conn_upd) {
     bbc:	2b00      	cmp	r3, #0
     bbe:	f000 81b1 	beq.w	f24 <event_conn_upd_prep+0x37c>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     bc2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     bc4:	8e65      	ldrh	r5, [r4, #50]	; 0x32
     bc6:	441d      	add	r5, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     bc8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     bcc:	4435      	add	r5, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     bce:	f013 0207 	ands.w	r2, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     bd2:	b2ad      	uxth	r5, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     bd4:	d00a      	beq.n	bec <event_conn_upd_prep+0x44>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
     bd6:	1e53      	subs	r3, r2, #1
     bd8:	2b04      	cmp	r3, #4
     bda:	f200 8375 	bhi.w	12c8 <event_conn_upd_prep+0x720>
     bde:	e8df f013 	tbh	[pc, r3, lsl #1]
     be2:	01ca      	.short	0x01ca
     be4:	01c50236 	.word	0x01c50236
     be8:	02390171 	.word	0x02390171
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     bec:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
     bf0:	eba5 0308 	sub.w	r3, r5, r8
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     bf4:	0419      	lsls	r1, r3, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     bf6:	fa1f fb83 	uxth.w	fp, r3
	} else if (instant_latency <= 0x7FFF) {
     bfa:	f100 818e 	bmi.w	f1a <event_conn_upd_prep+0x372>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     bfe:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     c02:	2b00      	cmp	r3, #0
     c04:	f2c0 826a 	blt.w	10dc <event_conn_upd_prep+0x534>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     c08:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
     c0c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c10:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
     c14:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
     c18:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
     c1c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c20:	4293      	cmp	r3, r2
     c22:	d00a      	beq.n	c3a <event_conn_upd_prep+0x92>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     c24:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c28:	f003 0307 	and.w	r3, r3, #7
     c2c:	2b05      	cmp	r3, #5
     c2e:	d104      	bne.n	c3a <event_conn_upd_prep+0x92>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
     c30:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     c32:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
     c36:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     c3a:	f8dc 3000 	ldr.w	r3, [ip]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     c3e:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
		if (conn_upd_curr == conn) {
     c42:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
     c44:	bf04      	itt	eq
     c46:	2300      	moveq	r3, #0
     c48:	f8cc 3000 	streq.w	r3, [ip]
		LL_ASSERT(rx && rx->hdr.link);
     c4c:	f1b9 0f00 	cmp.w	r9, #0
     c50:	f000 817c 	beq.w	f4c <event_conn_upd_prep+0x3a4>
     c54:	f8d9 0000 	ldr.w	r0, [r9]
     c58:	2800      	cmp	r0, #0
     c5a:	f000 8177 	beq.w	f4c <event_conn_upd_prep+0x3a4>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     c5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
     c60:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		conn->llcp_rx = rx->hdr.link->mem;
     c64:	6841      	ldr	r1, [r0, #4]
     c66:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
     c6a:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
     c6c:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		if ((conn->llcp_cu.interval != lll->interval) ||
     c70:	f000 823c 	beq.w	10ec <event_conn_upd_prep+0x544>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     c74:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     c78:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
     c7c:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     c80:	2316      	movs	r3, #22
     c82:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
     c86:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
     c88:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
     c8c:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
     c90:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
     c94:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     c98:	4649      	mov	r1, r9
     c9a:	f00d fc61 	bl	e560 <ll_rx_put>
		ll_rx_sched();
     c9e:	f00d fc69 	bl	e574 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     ca2:	68a3      	ldr	r3, [r4, #8]
     ca4:	2b00      	cmp	r3, #0
     ca6:	da09      	bge.n	cbc <event_conn_upd_prep+0x114>
			uint32_t ticks_prepare_to_start =
     ca8:	68e1      	ldr	r1, [r4, #12]
     caa:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     cb0:	4291      	cmp	r1, r2
     cb2:	bf2c      	ite	cs
     cb4:	187f      	addcs	r7, r7, r1
     cb6:	18bf      	addcc	r7, r7, r2
     cb8:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     cba:	1aff      	subs	r7, r7, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     cbc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     cbe:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
     cc2:	fb10 f00b 	smulbb	r0, r0, fp
     cc6:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     cc8:	fbb0 f1f9 	udiv	r1, r0, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
     ccc:	fb19 f301 	smulbb	r3, r9, r1
     cd0:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
     cd2:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     cd4:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
     cd8:	f080 8127 	bcs.w	f2a <event_conn_upd_prep+0x382>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     cdc:	1a1b      	subs	r3, r3, r0
     cde:	f240 41e2 	movw	r1, #1250	; 0x4e2
     ce2:	486c      	ldr	r0, [pc, #432]	; (e94 <event_conn_upd_prep+0x2ec>)
     ce4:	fb03 f101 	mul.w	r1, r3, r1
     ce8:	fba1 0100 	umull	r0, r1, r1, r0
     cec:	a366      	add	r3, pc, #408	; (adr r3, e88 <event_conn_upd_prep+0x2e0>)
     cee:	e9d3 2300 	ldrd	r2, r3, [r3]
     cf2:	f7ff fa05 	bl	100 <__aeabi_uldivmod>
     cf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cfa:	4407      	add	r7, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
     cfc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     cfe:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
     d02:	eba8 0805 	sub.w	r8, r8, r5
     d06:	44d0      	add	r8, sl
		lll->latency_prepare += lazy;
     d08:	440e      	add	r6, r1
		lll->latency_prepare -= (instant_latency - latency);
     d0a:	4446      	add	r6, r8
		} else if (lll->role) {
     d0c:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
     d0e:	f240 48e2 	movw	r8, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
     d12:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
     d14:	fb08 f609 	mul.w	r6, r8, r9
		} else if (lll->role) {
     d18:	f2c0 820b 	blt.w	1132 <event_conn_upd_prep+0x58a>
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     d1c:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
     d20:	485c      	ldr	r0, [pc, #368]	; (e94 <event_conn_upd_prep+0x2ec>)
     d22:	a359      	add	r3, pc, #356	; (adr r3, e88 <event_conn_upd_prep+0x2e0>)
     d24:	e9d3 2300 	ldrd	r2, r3, [r3]
     d28:	fba1 0100 	umull	r0, r1, r1, r0
     d2c:	f7ff f9e8 	bl	100 <__aeabi_uldivmod>
     d30:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
     d34:	46b3      	mov	fp, r6

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
     d36:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     d3a:	4a57      	ldr	r2, [pc, #348]	; (e98 <event_conn_upd_prep+0x2f0>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     d3c:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
     d40:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     d44:	4855      	ldr	r0, [pc, #340]	; (e9c <event_conn_upd_prep+0x2f4>)
		lll->interval = conn->llcp_cu.interval;
     d46:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     d4a:	4432      	add	r2, r6
     d4c:	fbb2 f2f6 	udiv	r2, r2, r6
     d50:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     d54:	f242 7210 	movw	r2, #10000	; 0x2710
     d58:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     d5c:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     d5e:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     d60:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     d64:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     d68:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     d6a:	1d88      	adds	r0, r1, #6
     d6c:	4283      	cmp	r3, r0
		lll->latency = conn->llcp_cu.latency;
     d6e:	85a1      	strh	r1, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     d70:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     d74:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     d78:	dd02      	ble.n	d80 <event_conn_upd_prep+0x1d8>
				     (conn->apto_reload - (lll->latency + 6)) :
     d7a:	1a5b      	subs	r3, r3, r1
     d7c:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     d7e:	b29b      	uxth	r3, r3
     d80:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     d84:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
     d88:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
     d8a:	bf44      	itt	mi
     d8c:	2300      	movmi	r3, #0
     d8e:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     d92:	2102      	movs	r1, #2
     d94:	2001      	movs	r0, #1
     d96:	f018 fc77 	bl	19688 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     d9a:	2200      	movs	r2, #0
     d9c:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     d9e:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     da0:	2001      	movs	r0, #1
     da2:	f009 fb43 	bl	a42c <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     da6:	493e      	ldr	r1, [pc, #248]	; (ea0 <event_conn_upd_prep+0x2f8>)
     da8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
     dac:	4620      	mov	r0, r4
     dae:	f009 facd 	bl	a34c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     db2:	f100 0a05 	add.w	sl, r0, #5
     db6:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     dba:	4b3a      	ldr	r3, [pc, #232]	; (ea4 <event_conn_upd_prep+0x2fc>)
     dbc:	9400      	str	r4, [sp, #0]
     dbe:	4652      	mov	r2, sl
     dc0:	2101      	movs	r1, #1
     dc2:	2000      	movs	r0, #0
     dc4:	f00a fdcc 	bl	b960 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     dc8:	f030 0302 	bics.w	r3, r0, #2
     dcc:	d00c      	beq.n	de8 <event_conn_upd_prep+0x240>
     dce:	4a36      	ldr	r2, [pc, #216]	; (ea8 <event_conn_upd_prep+0x300>)
     dd0:	4936      	ldr	r1, [pc, #216]	; (eac <event_conn_upd_prep+0x304>)
     dd2:	4837      	ldr	r0, [pc, #220]	; (eb0 <event_conn_upd_prep+0x308>)
     dd4:	f640 3304 	movw	r3, #2820	; 0xb04
     dd8:	f01b fa60 	bl	1c29c <printk>
     ddc:	4040      	eors	r0, r0
     dde:	f380 8811 	msr	BASEPRI, r0
     de2:	f04f 0003 	mov.w	r0, #3
     de6:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     de8:	4e2a      	ldr	r6, [pc, #168]	; (e94 <event_conn_upd_prep+0x2ec>)
     dea:	fbab 6b06 	umull	r6, fp, fp, r6
     dee:	a326      	add	r3, pc, #152	; (adr r3, e88 <event_conn_upd_prep+0x2e0>)
     df0:	e9d3 2300 	ldrd	r2, r3, [r3]
     df4:	4630      	mov	r0, r6
     df6:	4659      	mov	r1, fp
     df8:	f7ff f982 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     dfc:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
     e00:	482c      	ldr	r0, [pc, #176]	; (eb4 <event_conn_upd_prep+0x30c>)
     e02:	2307      	movs	r3, #7
     e04:	fba5 0100 	umull	r0, r1, r5, r0
     e08:	1a30      	subs	r0, r6, r0
     e0a:	fb03 1105 	mla	r1, r3, r5, r1
     e0e:	eb6b 0101 	sbc.w	r1, fp, r1
     e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e16:	2300      	movs	r3, #0
     e18:	f7ff f972 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e1c:	e9cd 5001 	strd	r5, r0, [sp, #4]
     e20:	9408      	str	r4, [sp, #32]
     e22:	9406      	str	r4, [sp, #24]
     e24:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
     e28:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e2a:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
     e2e:	4822      	ldr	r0, [pc, #136]	; (eb8 <event_conn_upd_prep+0x310>)
     e30:	9104      	str	r1, [sp, #16]
     e32:	4922      	ldr	r1, [pc, #136]	; (ebc <event_conn_upd_prep+0x314>)
     e34:	4c22      	ldr	r4, [pc, #136]	; (ec0 <event_conn_upd_prep+0x318>)
     e36:	9407      	str	r4, [sp, #28]
     e38:	ea11 0125 	ands.w	r1, r1, r5, asr #32
     e3c:	bf38      	it	cc
     e3e:	4601      	movcc	r1, r0
     e40:	9105      	str	r1, [sp, #20]
     e42:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     e46:	463b      	mov	r3, r7
     e48:	9103      	str	r1, [sp, #12]
     e4a:	4652      	mov	r2, sl
     e4c:	2101      	movs	r1, #1
     e4e:	2000      	movs	r0, #0
     e50:	f00a fcfc 	bl	b84c <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     e54:	f030 0302 	bics.w	r3, r0, #2
     e58:	d00c      	beq.n	e74 <event_conn_upd_prep+0x2cc>
     e5a:	4a13      	ldr	r2, [pc, #76]	; (ea8 <event_conn_upd_prep+0x300>)
     e5c:	4913      	ldr	r1, [pc, #76]	; (eac <event_conn_upd_prep+0x304>)
     e5e:	4814      	ldr	r0, [pc, #80]	; (eb0 <event_conn_upd_prep+0x308>)
     e60:	f640 331e 	movw	r3, #2846	; 0xb1e
     e64:	f01b fa1a 	bl	1c29c <printk>
     e68:	4040      	eors	r0, r0
     e6a:	f380 8811 	msr	BASEPRI, r0
     e6e:	f04f 0003 	mov.w	r0, #3
     e72:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     e74:	f1b9 0f00 	cmp.w	r9, #0
     e78:	f040 8155 	bne.w	1126 <event_conn_upd_prep+0x57e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
     e7c:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
     e7e:	b00b      	add	sp, #44	; 0x2c
     e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e84:	f3af 8000 	nop.w
     e88:	1afd498d 	.word	0x1afd498d
     e8c:	00000007 	.word	0x00000007
     e90:	20001e48 	.word	0x20001e48
     e94:	3b9aca00 	.word	0x3b9aca00
     e98:	026259ff 	.word	0x026259ff
     e9c:	01c9c37f 	.word	0x01c9c37f
     ea0:	20000de0 	.word	0x20000de0
     ea4:	0000fb11 	.word	0x0000fb11
     ea8:	00020c10 	.word	0x00020c10
     eac:	00020cf0 	.word	0x00020cf0
     eb0:	0002060c 	.word	0x0002060c
     eb4:	1afd498d 	.word	0x1afd498d
     eb8:	000149e5 	.word	0x000149e5
     ebc:	000147f9 	.word	0x000147f9
     ec0:	0000fab9 	.word	0x0000fab9
			conn->llcp.conn_upd.instant = event_counter +
     ec4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ec6:	f894 010e 	ldrb.w	r0, [r4, #270]	; 0x10e
	    conn->tx_head &&
     eca:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
			conn->llcp.conn_upd.instant = event_counter +
     ece:	441d      	add	r5, r3
						      conn->lll.latency + 6;
     ed0:	3506      	adds	r5, #6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
     ed2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
						      conn->lll.latency + 6;
     ed6:	b2ad      	uxth	r5, r5
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ed8:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
     edc:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
     ee0:	f1a3 0109 	sub.w	r1, r3, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     ee4:	811d      	strh	r5, [r3, #8]
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ee6:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
	if (
     eea:	b122      	cbz	r2, ef6 <event_conn_upd_prep+0x34e>
	    !conn->llcp_enc.pause_tx &&
     eec:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
     ef0:	0785      	lsls	r5, r0, #30
     ef2:	f140 816d 	bpl.w	11d0 <event_conn_upd_prep+0x628>
		if (!conn->tx_ctrl) {
     ef6:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
     efa:	2800      	cmp	r0, #0
     efc:	f000 8181 	beq.w	1202 <event_conn_upd_prep+0x65a>
	tx->next = conn->tx_ctrl_last->next;
     f00:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
     f04:	6810      	ldr	r0, [r2, #0]
     f06:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
     f0a:	6011      	str	r1, [r2, #0]
	if (!tx->next) {
     f0c:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
     f10:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
     f14:	2a00      	cmp	r2, #0
     f16:	f000 8171 	beq.w	11fc <event_conn_upd_prep+0x654>
			return -EINPROGRESS;
     f1a:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
     f1e:	b00b      	add	sp, #44	; 0x2c
     f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn_upd_curr = conn;
     f24:	f8cc 0000 	str.w	r0, [ip]
     f28:	e64b      	b.n	bc2 <event_conn_upd_prep+0x1a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f2a:	fb09 0111 	mls	r1, r9, r1, r0
     f2e:	f240 43e2 	movw	r3, #1250	; 0x4e2
     f32:	48cb      	ldr	r0, [pc, #812]	; (1260 <event_conn_upd_prep+0x6b8>)
     f34:	b289      	uxth	r1, r1
     f36:	fb03 f101 	mul.w	r1, r3, r1
     f3a:	fba1 0100 	umull	r0, r1, r1, r0
     f3e:	a3c6      	add	r3, pc, #792	; (adr r3, 1258 <event_conn_upd_prep+0x6b0>)
     f40:	e9d3 2300 	ldrd	r2, r3, [r3]
     f44:	f7ff f8dc 	bl	100 <__aeabi_uldivmod>
     f48:	1a3f      	subs	r7, r7, r0
     f4a:	e6d7      	b.n	cfc <event_conn_upd_prep+0x154>
		LL_ASSERT(rx && rx->hdr.link);
     f4c:	4ac5      	ldr	r2, [pc, #788]	; (1264 <event_conn_upd_prep+0x6bc>)
     f4e:	49c6      	ldr	r1, [pc, #792]	; (1268 <event_conn_upd_prep+0x6c0>)
     f50:	48c6      	ldr	r0, [pc, #792]	; (126c <event_conn_upd_prep+0x6c4>)
     f52:	f640 2359 	movw	r3, #2649	; 0xa59
     f56:	f01b f9a1 	bl	1c29c <printk>
     f5a:	4040      	eors	r0, r0
     f5c:	f380 8811 	msr	BASEPRI, r0
     f60:	f04f 0003 	mov.w	r0, #3
     f64:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     f66:	f8d9 0000 	ldr.w	r0, [r9]
     f6a:	e678      	b.n	c5e <event_conn_upd_prep+0xb6>
		switch (conn->llcp_cu.state) {
     f6c:	f06f 000f 	mvn.w	r0, #15
}
     f70:	b00b      	add	sp, #44	; 0x2c
     f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
     f76:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 1270 <event_conn_upd_prep+0x6c8>
		rx = ll_pdu_rx_alloc_peek(1);
     f7a:	2001      	movs	r0, #1
     f7c:	f00d fb00 	bl	e580 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f80:	4606      	mov	r6, r0
     f82:	2800      	cmp	r0, #0
     f84:	f000 8121 	beq.w	11ca <event_conn_upd_prep+0x622>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f88:	48ba      	ldr	r0, [pc, #744]	; (1274 <event_conn_upd_prep+0x6cc>)
     f8a:	f009 f9a9 	bl	a2e0 <mem_acquire>
		if (!tx) {
     f8e:	4605      	mov	r5, r0
     f90:	2800      	cmp	r0, #0
     f92:	f000 811a 	beq.w	11ca <event_conn_upd_prep+0x622>
		(void)ll_pdu_rx_alloc();
     f96:	f00d fb11 	bl	e5bc <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     f9a:	6833      	ldr	r3, [r6, #0]
     f9c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
     fa0:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     fa2:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
     fa4:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     fa8:	f043 0303 	orr.w	r3, r3, #3
     fac:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     fae:	230c      	movs	r3, #12
     fb0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     fb2:	2300      	movs	r3, #0
     fb4:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     fb6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
     fba:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     fbc:	4aae      	ldr	r2, [pc, #696]	; (1278 <event_conn_upd_prep+0x6d0>)
     fbe:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
     fc2:	fba2 2303 	umull	r2, r3, r2, r3
     fc6:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     fc8:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     fcc:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     fd0:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     fd4:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
     fd8:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     fdc:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
     fe0:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
     fe4:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
     fe8:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
     fec:	2203      	movs	r2, #3
     fee:	f362 0302 	bfi	r3, r2, #0, #3
     ff2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     ff6:	68a3      	ldr	r3, [r4, #8]
     ff8:	2b00      	cmp	r3, #0
     ffa:	da0a      	bge.n	1012 <event_conn_upd_prep+0x46a>
			uint32_t ticks_prepare_to_start =
     ffc:	68e1      	ldr	r1, [r4, #12]
     ffe:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    1000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1004:	4291      	cmp	r1, r2
    1006:	bf2c      	ite	cs
    1008:	187f      	addcs	r7, r7, r1
    100a:	18bf      	addcc	r7, r7, r2
    100c:	1afb      	subs	r3, r7, r3
    100e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1012:	4b9a      	ldr	r3, [pc, #616]	; (127c <event_conn_upd_prep+0x6d4>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1014:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1016:	3509      	adds	r5, #9
    1018:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    101c:	2102      	movs	r1, #2
    101e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    1020:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1024:	f009 fa34 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1028:	2800      	cmp	r0, #0
    102a:	f43f af76 	beq.w	f1a <event_conn_upd_prep+0x372>
    102e:	4a8d      	ldr	r2, [pc, #564]	; (1264 <event_conn_upd_prep+0x6bc>)
    1030:	4993      	ldr	r1, [pc, #588]	; (1280 <event_conn_upd_prep+0x6d8>)
    1032:	488e      	ldr	r0, [pc, #568]	; (126c <event_conn_upd_prep+0x6c4>)
    1034:	f640 13a9 	movw	r3, #2473	; 0x9a9
    1038:	f01b f930 	bl	1c29c <printk>
    103c:	4040      	eors	r0, r0
    103e:	f380 8811 	msr	BASEPRI, r0
    1042:	f04f 0003 	mov.w	r0, #3
    1046:	df02      	svc	2
	return -EINPROGRESS;
    1048:	f06f 0076 	mvn.w	r0, #118	; 0x76
    104c:	e717      	b.n	e7e <event_conn_upd_prep+0x2d6>
		switch (conn->llcp_cu.state) {
    104e:	f8df 8234 	ldr.w	r8, [pc, #564]	; 1284 <event_conn_upd_prep+0x6dc>
    1052:	e792      	b.n	f7a <event_conn_upd_prep+0x3d2>
			conn->llcp_ack = conn->llcp_req;
    1054:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    1058:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
			conn->llcp_cu.ack = conn->llcp_cu.req;
    105c:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1060:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1064:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
	    conn->tx_head &&
    1068:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    106c:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    1070:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    1074:	2100      	movs	r1, #0
    1076:	f8cc 1000 	str.w	r1, [ip]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    107a:	f1a2 0109 	sub.w	r1, r2, #9
	if (
    107e:	b1c3      	cbz	r3, 10b2 <event_conn_upd_prep+0x50a>
	    !conn->llcp_enc.pause_tx &&
    1080:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
    1084:	0787      	lsls	r7, r0, #30
    1086:	d414      	bmi.n	10b2 <event_conn_upd_prep+0x50a>
	    !conn->llcp_phy.pause_tx &&
    1088:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    108c:	07c6      	lsls	r6, r0, #31
    108e:	d410      	bmi.n	10b2 <event_conn_upd_prep+0x50a>
		if (conn->tx_head == conn->tx_data) {
    1090:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    1094:	4283      	cmp	r3, r0
    1096:	f000 80f9 	beq.w	128c <event_conn_upd_prep+0x6e4>
		} else if (!conn->tx_ctrl) {
    109a:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    109e:	b968      	cbnz	r0, 10bc <event_conn_upd_prep+0x514>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    10a0:	7918      	ldrb	r0, [r3, #4]
    10a2:	f000 0003 	and.w	r0, r0, #3
    10a6:	2803      	cmp	r0, #3
    10a8:	f000 8101 	beq.w	12ae <event_conn_upd_prep+0x706>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    10ac:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    10b0:	e006      	b.n	10c0 <event_conn_upd_prep+0x518>
		if (!conn->tx_ctrl) {
    10b2:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    10b6:	2800      	cmp	r0, #0
    10b8:	f000 80ad 	beq.w	1216 <event_conn_upd_prep+0x66e>
	tx->next = conn->tx_ctrl_last->next;
    10bc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    10c0:	6818      	ldr	r0, [r3, #0]
    10c2:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
    10c6:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    10c8:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
    10cc:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
    10d0:	2b00      	cmp	r3, #0
    10d2:	f000 80a7 	beq.w	1224 <event_conn_upd_prep+0x67c>
			return -ECANCELED;
    10d6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    10da:	e6d0      	b.n	e7e <event_conn_upd_prep+0x2d6>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    10dc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
    10e0:	2b00      	cmp	r3, #0
    10e2:	f43f ad91 	beq.w	c08 <event_conn_upd_prep+0x60>
			conn->slave.llcp_type = LLCP_NONE;
    10e6:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
    10ea:	e591      	b.n	c10 <event_conn_upd_prep+0x68>
		if ((conn->llcp_cu.interval != lll->interval) ||
    10ec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    10ee:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    10f0:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    10f4:	f47f adc0 	bne.w	c78 <event_conn_upd_prep+0xd0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    10f8:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    10fc:	fb0c fe03 	mul.w	lr, ip, r3
    1100:	f242 7c10 	movw	ip, #10000	; 0x2710
    1104:	fb0c ec01 	mla	ip, ip, r1, lr
    1108:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    110c:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    1110:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    1114:	fa1f fc8c 	uxth.w	ip, ip
    1118:	45e6      	cmp	lr, ip
    111a:	f47f adad 	bne.w	c78 <event_conn_upd_prep+0xd0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    111e:	2301      	movs	r3, #1
    1120:	f889 3004 	strb.w	r3, [r9, #4]
    1124:	e5b8      	b.n	c98 <event_conn_upd_prep+0xf0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1126:	2201      	movs	r2, #1
    1128:	2102      	movs	r1, #2
    112a:	4610      	mov	r0, r2
    112c:	f009 f97e 	bl	a42c <mayfly_enable>
    1130:	e6a4      	b.n	e7c <event_conn_upd_prep+0x2d4>
				lll->slave.window_widening_periodic_us *
    1132:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->slave.window_widening_prepare_us -=
    1134:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1136:	fb02 331b 	mls	r3, r2, fp, r3
    113a:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    113c:	f015 fe20 	bl	16d80 <lll_clock_ppm_local_get>
    1140:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1142:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    1146:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    114a:	f015 fe1b 	bl	16d84 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    114e:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1150:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1154:	4b4c      	ldr	r3, [pc, #304]	; (1288 <event_conn_upd_prep+0x6e0>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1156:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    115a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    115e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    1162:	fba3 3505 	umull	r3, r5, r3, r5
    1166:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1168:	fb08 f202 	mul.w	r2, r8, r2
			lll->slave.window_widening_prepare_us +=
    116c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
    116e:	6522      	str	r2, [r4, #80]	; 0x50
				lll->slave.window_widening_periodic_us *
    1170:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1174:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    1176:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1178:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    117a:	4293      	cmp	r3, r2
    117c:	bf28      	it	cs
    117e:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    1180:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->slave.window_widening_periodic_us;
    1182:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1186:	4d36      	ldr	r5, [pc, #216]	; (1260 <event_conn_upd_prep+0x6b8>)
			lll->slave.window_widening_prepare_us +=
    1188:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->slave.ticks_to_offset = 0U;
    118c:	2300      	movs	r3, #0
    118e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1192:	fba0 0105 	umull	r0, r1, r0, r5
    1196:	a330      	add	r3, pc, #192	; (adr r3, 1258 <event_conn_upd_prep+0x6b0>)
    1198:	e9d3 2300 	ldrd	r2, r3, [r3]
    119c:	f7fe ffb0 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    11a0:	4b35      	ldr	r3, [pc, #212]	; (1278 <event_conn_upd_prep+0x6d0>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    11a2:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    11a4:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    11a8:	fba3 3000 	umull	r3, r0, r3, r0
    11ac:	0a80      	lsrs	r0, r0, #10
    11ae:	fb08 f000 	mul.w	r0, r8, r0
    11b2:	a329      	add	r3, pc, #164	; (adr r3, 1258 <event_conn_upd_prep+0x6b0>)
    11b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b8:	fba0 0105 	umull	r0, r1, r0, r5
    11bc:	f7fe ffa0 	bl	100 <__aeabi_uldivmod>
		lll->interval = conn->llcp_cu.interval;
    11c0:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    11c4:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    11c8:	e5b7      	b.n	d3a <event_conn_upd_prep+0x192>
			return -ENOBUFS;
    11ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
    11ce:	e656      	b.n	e7e <event_conn_upd_prep+0x2d6>
	    !conn->llcp_phy.pause_tx &&
    11d0:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    11d4:	07c0      	lsls	r0, r0, #31
    11d6:	f53f ae8e 	bmi.w	ef6 <event_conn_upd_prep+0x34e>
		if (conn->tx_head == conn->tx_data) {
    11da:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    11de:	4282      	cmp	r2, r0
    11e0:	d025      	beq.n	122e <event_conn_upd_prep+0x686>
		} else if (!conn->tx_ctrl) {
    11e2:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    11e6:	2800      	cmp	r0, #0
    11e8:	f47f ae8a 	bne.w	f00 <event_conn_upd_prep+0x358>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    11ec:	7910      	ldrb	r0, [r2, #4]
    11ee:	f000 0003 	and.w	r0, r0, #3
    11f2:	2803      	cmp	r0, #3
    11f4:	d062      	beq.n	12bc <event_conn_upd_prep+0x714>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    11f6:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    11fa:	e683      	b.n	f04 <event_conn_upd_prep+0x35c>
		conn->tx_data_last = tx;
    11fc:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
    1200:	e68b      	b.n	f1a <event_conn_upd_prep+0x372>
			tx->next = conn->tx_head;
    1202:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
    1206:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    120a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
    120e:	2a00      	cmp	r2, #0
    1210:	f47f ae83 	bne.w	f1a <event_conn_upd_prep+0x372>
    1214:	e7f2      	b.n	11fc <event_conn_upd_prep+0x654>
			tx->next = conn->tx_head;
    1216:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
    121a:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    121e:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
    1222:	e755      	b.n	10d0 <event_conn_upd_prep+0x528>
		conn->tx_data_last = tx;
    1224:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			return -ECANCELED;
    1228:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    122c:	e627      	b.n	e7e <event_conn_upd_prep+0x2d6>
			conn->tx_data = conn->tx_data->next;
    122e:	6810      	ldr	r0, [r2, #0]
    1230:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1234:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    1238:	2800      	cmp	r0, #0
    123a:	f47f ae61 	bne.w	f00 <event_conn_upd_prep+0x358>
			tx->next = conn->tx_head->next;
    123e:	6810      	ldr	r0, [r2, #0]
    1240:	f843 0c09 	str.w	r0, [r3, #-9]
			conn->tx_head->next = tx;
    1244:	6011      	str	r1, [r2, #0]
	if (!tx->next) {
    1246:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
    124a:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
	if (!tx->next) {
    124e:	2a00      	cmp	r2, #0
    1250:	f47f ae63 	bne.w	f1a <event_conn_upd_prep+0x372>
    1254:	e7d2      	b.n	11fc <event_conn_upd_prep+0x654>
    1256:	bf00      	nop
    1258:	1afd498d 	.word	0x1afd498d
    125c:	00000007 	.word	0x00000007
    1260:	3b9aca00 	.word	0x3b9aca00
    1264:	00020c10 	.word	0x00020c10
    1268:	00020cdc 	.word	0x00020cdc
    126c:	0002060c 	.word	0x0002060c
    1270:	00014fd9 	.word	0x00014fd9
    1274:	20001edc 	.word	0x20001edc
    1278:	d1b71759 	.word	0xd1b71759
    127c:	200004b0 	.word	0x200004b0
    1280:	0002092c 	.word	0x0002092c
    1284:	00001fc1 	.word	0x00001fc1
    1288:	431bde83 	.word	0x431bde83
			conn->tx_data = conn->tx_data->next;
    128c:	6818      	ldr	r0, [r3, #0]
    128e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1292:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    1296:	2800      	cmp	r0, #0
    1298:	f47f af10 	bne.w	10bc <event_conn_upd_prep+0x514>
			tx->next = conn->tx_head->next;
    129c:	6818      	ldr	r0, [r3, #0]
    129e:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
    12a2:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    12a4:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
    12a8:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
    12ac:	e710      	b.n	10d0 <event_conn_upd_prep+0x528>
	    ((pdu_data_tx->llctrl.opcode !=
    12ae:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    12b0:	2803      	cmp	r0, #3
    12b2:	d0f3      	beq.n	129c <event_conn_upd_prep+0x6f4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    12b4:	280a      	cmp	r0, #10
    12b6:	f47f aef9 	bne.w	10ac <event_conn_upd_prep+0x504>
    12ba:	e7ef      	b.n	129c <event_conn_upd_prep+0x6f4>
	    ((pdu_data_tx->llctrl.opcode !=
    12bc:	79d0      	ldrb	r0, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    12be:	2803      	cmp	r0, #3
    12c0:	d0bd      	beq.n	123e <event_conn_upd_prep+0x696>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    12c2:	280a      	cmp	r0, #10
    12c4:	d197      	bne.n	11f6 <event_conn_upd_prep+0x64e>
    12c6:	e7ba      	b.n	123e <event_conn_upd_prep+0x696>
			LL_ASSERT(0);
    12c8:	4a07      	ldr	r2, [pc, #28]	; (12e8 <event_conn_upd_prep+0x740>)
    12ca:	4908      	ldr	r1, [pc, #32]	; (12ec <event_conn_upd_prep+0x744>)
    12cc:	4808      	ldr	r0, [pc, #32]	; (12f0 <event_conn_upd_prep+0x748>)
    12ce:	f640 2305 	movw	r3, #2565	; 0xa05
    12d2:	f01a ffe3 	bl	1c29c <printk>
    12d6:	4040      	eors	r0, r0
    12d8:	f380 8811 	msr	BASEPRI, r0
    12dc:	f04f 0003 	mov.w	r0, #3
    12e0:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    12e2:	f04f 0800 	mov.w	r8, #0
			break;
    12e6:	e648      	b.n	f7a <event_conn_upd_prep+0x3d2>
    12e8:	00020c10 	.word	0x00020c10
    12ec:	000206a4 	.word	0x000206a4
    12f0:	0002060c 	.word	0x0002060c
    12f4:	00000000 	.word	0x00000000

000012f8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_slave_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    12f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    12fc:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    12fe:	f8d2 a000 	ldr.w	sl, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1302:	681b      	ldr	r3, [r3, #0]
{
    1304:	b097      	sub	sp, #92	; 0x5c
    1306:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1308:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    130a:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    130c:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    1310:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    1314:	4605      	mov	r5, r0
    1316:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1318:	a814      	add	r0, sp, #80	; 0x50
    131a:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    131c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1320:	f01c fa72 	bl	1d808 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1324:	f894 9012 	ldrb.w	r9, [r4, #18]

	if (rl_idx != FILTER_IDX_NONE) {
    1328:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    132c:	ae12      	add	r6, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    132e:	d059      	beq.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1330:	4632      	mov	r2, r6
    1332:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    1336:	4648      	mov	r0, r9
    1338:	f014 f904 	bl	15544 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    133c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    1340:	3302      	adds	r3, #2
    1342:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    1346:	4629      	mov	r1, r5
	memcpy(conn->peer_addr, peer_id_addr, sizeof(conn->peer_addr));
	conn->own_addr_type = own_addr_type;
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1348:	2203      	movs	r2, #3
	link = rx->link;
    134a:	f851 3b2e 	ldr.w	r3, [r1], #46
    134e:	930a      	str	r3, [sp, #40]	; 0x28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1350:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1354:	f107 0b04 	add.w	fp, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1358:	f01c fa56 	bl	1d808 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    135c:	f107 0818 	add.w	r8, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1360:	2204      	movs	r2, #4
    1362:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    1366:	4658      	mov	r0, fp
    1368:	f01c fa4e 	bl	1d808 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    136c:	2205      	movs	r2, #5
    136e:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    1372:	4640      	mov	r0, r8
    1374:	f01c fa48 	bl	1d808 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1378:	4640      	mov	r0, r8
    137a:	2105      	movs	r1, #5
    137c:	f009 f980 	bl	a680 <util_ones_count_get>
    1380:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1382:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1386:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    138a:	f360 0305 	bfi	r3, r0, #0, #6
    138e:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1390:	f3c1 0304 	ubfx	r3, r1, #0, #5
    1394:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1396:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
    139a:	f8a7 800e 	strh.w	r8, [r7, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    139e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    13a0:	fa1f f288 	uxth.w	r2, r8
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    13a4:	f001 031f 	and.w	r3, r1, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    13a8:	d905      	bls.n	13b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e>
    13aa:	331b      	adds	r3, #27
    13ac:	f003 031f 	and.w	r3, r3, #31
    13b0:	2b0b      	cmp	r3, #11
    13b2:	d800      	bhi.n	13b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    13b4:	b9e2      	cbnz	r2, 13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
		lll->slave.initiated = 0U;
    13b6:	f897 3020 	ldrb.w	r3, [r7, #32]
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    13ba:	980a      	ldr	r0, [sp, #40]	; 0x28
		lll->slave.initiated = 0U;
    13bc:	f36f 0300 	bfc	r3, #0, #1
		rx->type = NODE_RX_TYPE_RELEASE;
    13c0:	2601      	movs	r6, #1
		lll->slave.initiated = 0U;
    13c2:	f887 3020 	strb.w	r3, [r7, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    13c6:	712e      	strb	r6, [r5, #4]
			rx_csa = (void *)ftr->extra;
    13c8:	6864      	ldr	r4, [r4, #4]
			ll_rx_put(link, rx);
    13ca:	4629      	mov	r1, r5
    13cc:	f00d f8c8 	bl	e560 <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    13d0:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    13d2:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
    13d4:	4621      	mov	r1, r4
    13d6:	f00d f8c3 	bl	e560 <ll_rx_put>
		ll_rx_sched();
    13da:	f00d f8cb 	bl	e574 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    13de:	b017      	add	sp, #92	; 0x5c
    13e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    13e4:	2206      	movs	r2, #6
    13e6:	a914      	add	r1, sp, #80	; 0x50
    13e8:	4630      	mov	r0, r6
    13ea:	f01c fa0d 	bl	1d808 <memcpy>
    13ee:	e7aa      	b.n	1346 <ull_slave_setup+0x4e>
	((struct lll_adv *)ftr->param)->conn = NULL;
    13f0:	6823      	ldr	r3, [r4, #0]
    13f2:	2000      	movs	r0, #0
    13f4:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    13f6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    13fa:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    13fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1402:	823b      	strh	r3, [r7, #16]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1404:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    1408:	0949      	lsrs	r1, r1, #5
    140a:	f361 03c5 	bfi	r3, r1, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    140e:	8e69      	ldrh	r1, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1410:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1414:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1418:	fb03 f802 	mul.w	r8, r3, r2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    141c:	910d      	str	r1, [sp, #52]	; 0x34
		(((lll_clock_ppm_local_get() +
    141e:	f015 fcaf 	bl	16d80 <lll_clock_ppm_local_get>
    1422:	900c      	str	r0, [sp, #48]	; 0x30
		   lll_clock_ppm_get(conn->slave.sca)) *
    1424:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
    1428:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    142c:	f015 fcaa 	bl	16d84 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1432:	49b7      	ldr	r1, [pc, #732]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
		(((lll_clock_ppm_local_get() +
    1434:	4402      	add	r2, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    1436:	fb08 f202 	mul.w	r2, r8, r2
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    143a:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
    143e:	f202 223f 	addw	r2, r2, #575	; 0x23f
    1442:	fba1 3202 	umull	r3, r2, r1, r2
    1446:	0c92      	lsrs	r2, r2, #18
	lll->slave.window_widening_periodic_us =
    1448:	627a      	str	r2, [r7, #36]	; 0x24
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    144a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    144e:	8a39      	ldrh	r1, [r7, #16]
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1450:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1454:	fb02 f303 	mul.w	r3, r2, r3
    1458:	63bb      	str	r3, [r7, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    145a:	ea4f 0358 	mov.w	r3, r8, lsr #1
    145e:	3b96      	subs	r3, #150	; 0x96
    1460:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1462:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1464:	4aab      	ldr	r2, [pc, #684]	; (1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1466:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    146a:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    146c:	4442      	add	r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    146e:	4baa      	ldr	r3, [pc, #680]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1470:	fbb2 f2f8 	udiv	r2, r2, r8
    1474:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1478:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    147a:	f242 7010 	movw	r0, #10000	; 0x2710
    147e:	fb00 8202 	mla	r2, r0, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1482:	4443      	add	r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1484:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1486:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1488:	fbb2 f2f8 	udiv	r2, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    148c:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1490:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1494:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1496:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1498:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    149c:	dd02      	ble.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
			     (conn->apto_reload - (lll->latency + 6)) :
    149e:	1a52      	subs	r2, r2, r1
    14a0:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    14a2:	b292      	uxth	r2, r2
    14a4:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    14a8:	4659      	mov	r1, fp
    14aa:	2204      	movs	r2, #4
    14ac:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
    14b0:	f01c f9aa 	bl	1d808 <memcpy>
	cc->status = 0U;
    14b4:	f44f 7280 	mov.w	r2, #256	; 0x100
		chan_sel = pdu_adv->chan_sel;
    14b8:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
    14ba:	83aa      	strh	r2, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    14bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    14be:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    14c2:	f3c3 1240 	ubfx	r2, r3, #5, #1
    14c6:	920f      	str	r2, [sp, #60]	; 0x3c
    14c8:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    14ca:	f014 fde1 	bl	16090 <ull_filter_lll_lrpa_used>
    14ce:	2800      	cmp	r0, #0
    14d0:	f000 80e5 	beq.w	169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    14d4:	2206      	movs	r2, #6
    14d6:	f105 0124 	add.w	r1, r5, #36	; 0x24
    14da:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    14de:	f01c f993 	bl	1d808 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    14e2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    14e6:	f000 80e1 	beq.w	16ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x324>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    14ea:	a914      	add	r1, sp, #80	; 0x50
    14ec:	2206      	movs	r2, #6
    14ee:	f105 0025 	add.w	r0, r5, #37	; 0x25
    14f2:	f01c f989 	bl	1d808 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    14f6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    14fa:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    14fc:	4631      	mov	r1, r6
    14fe:	2206      	movs	r2, #6
    1500:	f105 001f 	add.w	r0, r5, #31
    1504:	f01c f980 	bl	1d808 <memcpy>
	cc->sca = conn->slave.sca;
    1508:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
    150c:	89fa      	ldrh	r2, [r7, #14]
    150e:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    1510:	8a3a      	ldrh	r2, [r7, #16]
    1512:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    1514:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    1518:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    151c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    1520:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    1522:	4650      	mov	r0, sl
    1524:	f00e ff28 	bl	10378 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    1528:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    152a:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    152c:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    152e:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    1530:	980a      	ldr	r0, [sp, #40]	; 0x28
    1532:	f00d f815 	bl	e560 <ll_rx_put>
		rx->handle = lll->handle;
    1536:	89bb      	ldrh	r3, [r7, #12]
    1538:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    153a:	2319      	movs	r3, #25
    153c:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    153e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    1540:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    1542:	2b00      	cmp	r3, #0
    1544:	f040 80c1 	bne.w	16ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x342>
			cs->csa = 0x00;
    1548:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    154c:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    154e:	4629      	mov	r1, r5
    1550:	4630      	mov	r0, r6
    1552:	f00d f805 	bl	e560 <ll_rx_put>
	ll_rx_sched();
    1556:	f00d f80d 	bl	e574 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    155a:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    155e:	2101      	movs	r1, #1
    1560:	f000 0007 	and.w	r0, r0, #7
    1564:	f015 fa1c 	bl	169a0 <lll_radio_rx_ready_delay_get>
    1568:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    156a:	486c      	ldr	r0, [pc, #432]	; (171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>)
	conn->ull.ticks_active_to_start = 0U;
    156c:	2600      	movs	r6, #0
	conn->ull.ticks_prepare_to_start =
    156e:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1570:	f209 4152 	addw	r1, r9, #1106	; 0x452
	conn->ull.ticks_prepare_to_start =
    1574:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1578:	fba1 0100 	umull	r0, r1, r1, r0
    157c:	a362      	add	r3, pc, #392	; (adr r3, 1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    157e:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    1582:	f8ca 6004 	str.w	r6, [sl, #4]
	conn->ull.ticks_preempt_to_start =
    1586:	f8ca 600c 	str.w	r6, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    158a:	f7fe fdb9 	bl	100 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    1592:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1594:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1598:	eba8 0803 	sub.w	r8, r8, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    159c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    15a0:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    15a4:	2102      	movs	r1, #2
    15a6:	4632      	mov	r2, r6
	conn->ull.ticks_slot =
    15a8:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    15ac:	2001      	movs	r0, #1
    15ae:	f008 ff3d 	bl	a42c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    15b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    15b4:	4638      	mov	r0, r7
    15b6:	f00d fe85 	bl	f2c4 <ull_adv_handle_get>
    15ba:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    15bc:	4b58      	ldr	r3, [pc, #352]	; (1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>)
    15be:	9700      	str	r7, [sp, #0]
    15c0:	b2d2      	uxtb	r2, r2
    15c2:	4630      	mov	r0, r6
    15c4:	2101      	movs	r1, #1
    15c6:	f00a f9cb 	bl	b960 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    15ca:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    15ce:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    15d0:	eba5 0509 	sub.w	r5, r5, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    15d4:	f000 8084 	beq.w	16e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x358>
	if (adv->lll.is_hdcd) {
    15d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    15de:	07db      	lsls	r3, r3, #31
    15e0:	d46b      	bmi.n	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    15e2:	4650      	mov	r0, sl
    15e4:	f00e fec8 	bl	10378 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    15e8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    15ec:	fba8 8609 	umull	r8, r6, r8, r9
    15f0:	a345      	add	r3, pc, #276	; (adr r3, 1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    15f2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    15f6:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    15f8:	4631      	mov	r1, r6
    15fa:	4640      	mov	r0, r8
    15fc:	f7fe fd80 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1600:	68a3      	ldr	r3, [r4, #8]
    1602:	f8cd a018 	str.w	sl, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1606:	f10b 0405 	add.w	r4, fp, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    160a:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    160e:	4b45      	ldr	r3, [pc, #276]	; (1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>)
    1610:	9307      	str	r3, [sp, #28]
    1612:	4b45      	ldr	r3, [pc, #276]	; (1728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a0>)
    1614:	9305      	str	r3, [sp, #20]
    1616:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    161a:	9308      	str	r3, [sp, #32]
    161c:	f8da 3010 	ldr.w	r3, [sl, #16]
    1620:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1622:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    1626:	4841      	ldr	r0, [pc, #260]	; (172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1628:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    162a:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    162e:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1630:	2307      	movs	r3, #7
    1632:	ebb8 0000 	subs.w	r0, r8, r0
    1636:	fb03 1107 	mla	r1, r3, r7, r1
    163a:	eb66 0101 	sbc.w	r1, r6, r1
    163e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1642:	2300      	movs	r3, #0
    1644:	f7fe fd5c 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1648:	a32f      	add	r3, pc, #188	; (adr r3, 1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    164a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    164e:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1652:	fba5 0109 	umull	r0, r1, r5, r9
    1656:	f7fe fd53 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    165a:	b2e4      	uxtb	r4, r4
    165c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1660:	9000      	str	r0, [sp, #0]
    1662:	465b      	mov	r3, fp
    1664:	4622      	mov	r2, r4
    1666:	2101      	movs	r1, #1
    1668:	2000      	movs	r0, #0
    166a:	f00a f8ef 	bl	b84c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    166e:	f030 0302 	bics.w	r3, r0, #2
    1672:	d00c      	beq.n	168e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x306>
    1674:	4a2e      	ldr	r2, [pc, #184]	; (1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>)
    1676:	492f      	ldr	r1, [pc, #188]	; (1734 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ac>)
    1678:	482f      	ldr	r0, [pc, #188]	; (1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>)
    167a:	f240 13ab 	movw	r3, #427	; 0x1ab
    167e:	f01a fe0d 	bl	1c29c <printk>
    1682:	4040      	eors	r0, r0
    1684:	f380 8811 	msr	BASEPRI, r0
    1688:	f04f 0003 	mov.w	r0, #3
    168c:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    168e:	2201      	movs	r2, #1
    1690:	2102      	movs	r1, #2
    1692:	4610      	mov	r0, r2
    1694:	f008 feca 	bl	a42c <mayfly_enable>
}
    1698:	b017      	add	sp, #92	; 0x5c
    169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    169e:	4601      	mov	r1, r0
    16a0:	2206      	movs	r2, #6
    16a2:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    16a6:	f01c f8da 	bl	1d85e <memset>
    16aa:	e71a      	b.n	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    16ac:	2206      	movs	r2, #6
    16ae:	2100      	movs	r1, #0
    16b0:	f105 0025 	add.w	r0, r5, #37	; 0x25
    16b4:	f01c f8d3 	bl	1d85e <memset>
    16b8:	e71d      	b.n	14f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    16ba:	2300      	movs	r3, #0
    16bc:	2201      	movs	r2, #1
    16be:	9300      	str	r3, [sp, #0]
    16c0:	4618      	mov	r0, r3
    16c2:	4611      	mov	r1, r2
    16c4:	f00a f94c 	bl	b960 <ticker_stop>
    16c8:	e78b      	b.n	15e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25a>
			lll->data_chan_sel = 1;
    16ca:	7f7b      	ldrb	r3, [r7, #29]
    16cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16d0:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    16d2:	4658      	mov	r0, fp
    16d4:	f013 fd28 	bl	15128 <lll_chan_id>
			cs->csa = 0x01;
    16d8:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    16da:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    16dc:	772b      	strb	r3, [r5, #28]
    16de:	e736      	b.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    16e0:	f00c fff4 	bl	e6cc <ull_disable_mark_get>
    16e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    16e6:	4283      	cmp	r3, r0
    16e8:	f43f af76 	beq.w	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    16ec:	4a10      	ldr	r2, [pc, #64]	; (1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>)
    16ee:	4913      	ldr	r1, [pc, #76]	; (173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>)
    16f0:	4811      	ldr	r0, [pc, #68]	; (1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>)
    16f2:	f240 2347 	movw	r3, #583	; 0x247
    16f6:	f01a fdd1 	bl	1c29c <printk>
    16fa:	4040      	eors	r0, r0
    16fc:	f380 8811 	msr	BASEPRI, r0
    1700:	f04f 0003 	mov.w	r0, #3
    1704:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    1706:	e767      	b.n	15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
    1708:	1afd498d 	.word	0x1afd498d
    170c:	00000007 	.word	0x00000007
    1710:	431bde83 	.word	0x431bde83
    1714:	026259ff 	.word	0x026259ff
    1718:	01c9c37f 	.word	0x01c9c37f
    171c:	3b9aca00 	.word	0x3b9aca00
    1720:	000147bd 	.word	0x000147bd
    1724:	0001478d 	.word	0x0001478d
    1728:	000147f9 	.word	0x000147f9
    172c:	1afd498d 	.word	0x1afd498d
    1730:	00020e2c 	.word	0x00020e2c
    1734:	00020cf0 	.word	0x00020cf0
    1738:	0002060c 	.word	0x0002060c
    173c:	00020e84 	.word	0x00020e84

00001740 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    1740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1744:	b08b      	sub	sp, #44	; 0x2c
    1746:	4607      	mov	r7, r0
    1748:	9304      	str	r3, [sp, #16]
    174a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    174e:	9305      	str	r3, [sp, #20]
	struct ll_conn *conn;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    1750:	2000      	movs	r0, #0
{
    1752:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    1756:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    175a:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    175e:	9303      	str	r3, [sp, #12]
    1760:	4688      	mov	r8, r1
    1762:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    1764:	f00d ff6c 	bl	f640 <ull_scan_is_disabled_get>
	if (!scan) {
    1768:	2800      	cmp	r0, #0
    176a:	f000 81ba 	beq.w	1ae2 <ll_create_connection+0x3a2>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    176e:	6a03      	ldr	r3, [r0, #32]
    1770:	4605      	mov	r5, r0
	lll = &scan->lll;
    1772:	f100 0a1c 	add.w	sl, r0, #28
	if (lll->conn) {
    1776:	2b00      	cmp	r3, #0
    1778:	d044      	beq.n	1804 <ll_create_connection+0xc4>
	ull_hdr_init(&conn->ull);
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    177a:	4630      	mov	r0, r6
    177c:	f014 f97e 	bl	15a7c <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    1780:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1784:	f36f 0341 	bfc	r3, #1, #1
    1788:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    178c:	23ff      	movs	r3, #255	; 0xff
    178e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    1792:	b35e      	cbz	r6, 17ec <ll_create_connection+0xac>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1794:	f1a9 0302 	sub.w	r3, r9, #2
    1798:	2b01      	cmp	r3, #1
    179a:	f240 816c 	bls.w	1a76 <ll_create_connection+0x336>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    179e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    17a2:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    17a4:	f369 0342 	bfi	r3, r9, #1, #2
    17a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    17ac:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    17b0:	f362 0300 	bfi	r3, r2, #0, #1
    17b4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    17b8:	9914      	ldr	r1, [sp, #80]	; 0x50
    17ba:	2206      	movs	r2, #6
    17bc:	f105 0024 	add.w	r0, r5, #36	; 0x24
    17c0:	f01c f822 	bl	1d808 <memcpy>
	lll->conn_timeout = timeout;
    17c4:	9b03      	ldr	r3, [sp, #12]
    17c6:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    17c8:	463a      	mov	r2, r7
    17ca:	4643      	mov	r3, r8
    17cc:	4650      	mov	r0, sl
    17ce:	2100      	movs	r1, #0
    17d0:	9600      	str	r6, [sp, #0]
    17d2:	f7ff f901 	bl	9d8 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    17d6:	f015 fa7f 	bl	16cd8 <lll_clock_wait>
	if (err) {
    17da:	2800      	cmp	r0, #0
    17dc:	f040 8157 	bne.w	1a8e <ll_create_connection+0x34e>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff f925 	bl	a30 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    17e6:	b00b      	add	sp, #44	; 0x2c
    17e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    17ec:	f014 fe0a 	bl	16404 <ull_filter_lll_rl_enabled>
    17f0:	2800      	cmp	r0, #0
    17f2:	d0cf      	beq.n	1794 <ll_create_connection+0x54>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    17f4:	9914      	ldr	r1, [sp, #80]	; 0x50
    17f6:	9804      	ldr	r0, [sp, #16]
    17f8:	4632      	mov	r2, r6
    17fa:	f014 fab3 	bl	15d64 <ull_filter_rl_find>
    17fe:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    1802:	e7c7      	b.n	1794 <ll_create_connection+0x54>
	link = ll_rx_link_alloc();
    1804:	f00c fe94 	bl	e530 <ll_rx_link_alloc>
	if (!link) {
    1808:	9006      	str	r0, [sp, #24]
    180a:	2800      	cmp	r0, #0
    180c:	f000 817e 	beq.w	1b0c <ll_create_connection+0x3cc>
	conn = ll_conn_acquire();
    1810:	f00e fda6 	bl	10360 <ll_conn_acquire>
	if (!conn) {
    1814:	4604      	mov	r4, r0
    1816:	2800      	cmp	r0, #0
    1818:	f000 817a 	beq.w	1b10 <ll_create_connection+0x3d0>
	err = util_aa_le32(conn_lll->access_addr);
    181c:	3020      	adds	r0, #32
    181e:	f008 ff47 	bl	a6b0 <util_aa_le32>
	conn_lll = &conn->lll;
    1822:	f104 031c 	add.w	r3, r4, #28
    1826:	9307      	str	r3, [sp, #28]
	LL_ASSERT(!err);
    1828:	2800      	cmp	r0, #0
    182a:	f040 815e 	bne.w	1aea <ll_create_connection+0x3aa>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    182e:	2103      	movs	r1, #3
    1830:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1834:	f014 ff66 	bl	16704 <lll_csrand_get>
	conn_lll->interval = interval;
    1838:	9b05      	ldr	r3, [sp, #20]
	if (!conn_lll->link_tx_free) {
    183a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
    183c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    183e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    1842:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    1846:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    1848:	2800      	cmp	r0, #0
    184a:	f000 815b 	beq.w	1b04 <ll_create_connection+0x3c4>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    184e:	f104 0164 	add.w	r1, r4, #100	; 0x64
    1852:	f104 0268 	add.w	r2, r4, #104	; 0x68
    1856:	f008 fd99 	bl	a38c <memq_init>
	conn_lll->phy_tx = PHY_1M;
    185a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    185e:	4ac0      	ldr	r2, [pc, #768]	; (1b60 <ll_create_connection+0x420>)
	conn_lll->phy_tx = PHY_1M;
    1860:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    1864:	f023 0307 	bic.w	r3, r3, #7
    1868:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    186c:	f043 0301 	orr.w	r3, r3, #1
    1870:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
    1874:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    1878:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
    187c:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
    1880:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1884:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
    1888:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
    188c:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
    1890:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
    1894:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    1898:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    189c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    18a0:	f013 fbe4 	bl	1506c <ull_chan_map_get>
    18a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    18a8:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    18ac:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    18ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    18b2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    18b6:	f014 ff25 	bl	16704 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    18ba:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    18be:	4ba9      	ldr	r3, [pc, #676]	; (1b64 <ll_create_connection+0x424>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    18c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    18c4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    18c6:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    18ca:	fba3 1302 	umull	r1, r3, r3, r2
    18ce:	08db      	lsrs	r3, r3, #3
    18d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18d4:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    18d8:	3305      	adds	r3, #5
    18da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    18de:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    18e2:	9905      	ldr	r1, [sp, #20]
	conn->supervision_expire = 0U;
    18e4:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
    18e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    18ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->master.initiated = 0;
    18f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    18f4:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->master.initiated = 0;
    18f8:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    18fc:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->master.initiated = 0;
    1900:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    1904:	4b98      	ldr	r3, [pc, #608]	; (1b68 <ll_create_connection+0x428>)
	conn->apto_expire = 0U;
    1906:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    190a:	fb02 f101 	mul.w	r1, r2, r1
    190e:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    1910:	440b      	add	r3, r1
    1912:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    1916:	4995      	ldr	r1, [pc, #596]	; (1b6c <ll_create_connection+0x42c>)
	conn->appto_expire = 0U;
    1918:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    191c:	4411      	add	r1, r2
    191e:	fbb1 f1f2 	udiv	r1, r1, r2
    1922:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    1926:	f242 7110 	movw	r1, #10000	; 0x2710
    192a:	fb01 210c 	mla	r1, r1, ip, r2
    192e:	3901      	subs	r1, #1
    1930:	fbb1 f2f2 	udiv	r2, r1, r2
    1934:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = 6U;
    1938:	2206      	movs	r2, #6
    193a:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    193e:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    1940:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    1942:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    1944:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    1948:	dd02      	ble.n	1950 <ll_create_connection+0x210>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
    194a:	1a12      	subs	r2, r2, r0
    194c:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    194e:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    1950:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    1954:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    1958:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    195c:	f023 0307 	bic.w	r3, r3, #7
    1960:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    1964:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
    1968:	f884 b0e6 	strb.w	fp, [r4, #230]	; 0xe6
	conn->llcp_rx = NULL;
    196c:	f8c4 b108 	str.w	fp, [r4, #264]	; 0x108
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1970:	f8a4 b10c 	strh.w	fp, [r4, #268]	; 0x10c
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1974:	f8a4 b120 	strh.w	fp, [r4, #288]	; 0x120
	conn->llcp_feature.features_conn = ll_feat_get();
    1978:	f00b fe9a 	bl	d6b0 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    197c:	9b06      	ldr	r3, [sp, #24]
    197e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    1982:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    1986:	f8a4 b138 	strh.w	fp, [r4, #312]	; 0x138
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    198a:	f023 0303 	bic.w	r3, r3, #3
    198e:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    1992:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    1996:	f8a4 b140 	strh.w	fp, [r4, #320]	; 0x140
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    199a:	f023 0318 	bic.w	r3, r3, #24
    199e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    19a2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_terminate.reason_final = 0U;
    19a6:	f884 b143 	strb.w	fp, [r4, #323]	; 0x143
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    19aa:	f023 0307 	bic.w	r3, r3, #7
    19ae:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->llcp_conn_param.disabled = 0U;
    19b2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    19b6:	f8a4 b164 	strh.w	fp, [r4, #356]	; 0x164
	conn->llcp_conn_param.disabled = 0U;
    19ba:	f36b 1304 	bfi	r3, fp, #4, #1
    19be:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_length.disabled = 0U;
    19c2:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_conn_param.req = 0U;
    19c6:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.disabled = 0U;
    19ca:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    19ce:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    19d0:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_feature.features_peer = 0;
    19d4:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    19d6:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
	conn->llcp_feature.features_peer = 0;
    19da:	e9c4 234c 	strd	r2, r3, [r4, #304]	; 0x130
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    19de:	f8a4 b1ac 	strh.w	fp, [r4, #428]	; 0x1ac
	conn->llcp_length.cache.tx_octets = 0U;
    19e2:	f8a4 b1b8 	strh.w	fp, [r4, #440]	; 0x1b8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    19e6:	f00e fffd 	bl	109e4 <ull_conn_default_tx_octets_get>
    19ea:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
    19ee:	f00e ffff 	bl	109f0 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    19f2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    19f6:	4b5e      	ldr	r3, [pc, #376]	; (1b70 <ll_create_connection+0x430>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    19f8:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    19fc:	4013      	ands	r3, r2
    19fe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1a02:	f00e fffb 	bl	109fc <ull_conn_default_phy_tx_get>
    1a06:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    1a0a:	f360 0302 	bfi	r3, r0, #0, #3
    1a0e:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a12:	f00e fff9 	bl	10a08 <ull_conn_default_phy_rx_get>
    1a16:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1a1a:	f8c4 b1c4 	str.w	fp, [r4, #452]	; 0x1c4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a1e:	f360 03c5 	bfi	r3, r0, #3, #3
						      conn_lll->phy_flags);
    1a22:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a26:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    1a2a:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn->tx_data = conn->tx_data_last = 0;
    1a2e:	e9c4 bb74 	strd	fp, fp, [r4, #464]	; 0x1d0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1a32:	e9c4 bb72 	strd	fp, fp, [r4, #456]	; 0x1c8
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    1a36:	f000 0007 	and.w	r0, r0, #7
    1a3a:	f014 ffaf 	bl	1699c <lll_radio_tx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1a3e:	494d      	ldr	r1, [pc, #308]	; (1b74 <ll_create_connection+0x434>)
	conn->ull.ticks_active_to_start = 0U;
    1a40:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_prepare_to_start =
    1a44:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1a46:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_prepare_to_start =
    1a4a:	60a3      	str	r3, [r4, #8]
	conn->ull.ticks_preempt_to_start =
    1a4c:	f8c4 b00c 	str.w	fp, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1a50:	a341      	add	r3, pc, #260	; (adr r3, 1b58 <ll_create_connection+0x418>)
    1a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a56:	fba0 0101 	umull	r0, r1, r0, r1
    1a5a:	f7fe fb51 	bl	100 <__aeabi_uldivmod>
	lll->conn = conn_lll;
    1a5e:	f104 031c 	add.w	r3, r4, #28
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    1a66:	6120      	str	r0, [r4, #16]
	lll->conn = conn_lll;
    1a68:	622b      	str	r3, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1a6a:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    1a6e:	f884 b000 	strb.w	fp, [r4]
    1a72:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    1a74:	e681      	b.n	177a <ll_create_connection+0x3a>
		ull_filter_rpa_update(false);
    1a76:	2000      	movs	r0, #0
    1a78:	f014 f824 	bl	15ac4 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    1a7c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1a80:	f043 0302 	orr.w	r3, r3, #2
		own_addr_type &= 0x1;
    1a84:	f009 0901 	and.w	r9, r9, #1
		lll->rpa_gen = 1;
    1a88:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    1a8c:	e687      	b.n	179e <ll_create_connection+0x5e>
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    1a8e:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    1a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1a92:	b163      	cbz	r3, 1aae <ll_create_connection+0x36e>
    1a94:	4a38      	ldr	r2, [pc, #224]	; (1b78 <ll_create_connection+0x438>)
    1a96:	4939      	ldr	r1, [pc, #228]	; (1b7c <ll_create_connection+0x43c>)
    1a98:	4839      	ldr	r0, [pc, #228]	; (1b80 <ll_create_connection+0x440>)
    1a9a:	f240 33f9 	movw	r3, #1017	; 0x3f9
    1a9e:	f01a fbfd 	bl	1c29c <printk>
    1aa2:	4040      	eors	r0, r0
    1aa4:	f380 8811 	msr	BASEPRI, r0
    1aa8:	f04f 0003 	mov.w	r0, #3
    1aac:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    1aae:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    1ab2:	f104 0048 	add.w	r0, r4, #72	; 0x48
    1ab6:	f008 fc6d 	bl	a394 <memq_deinit>
	LL_ASSERT(link);
    1aba:	4606      	mov	r6, r0
    1abc:	2800      	cmp	r0, #0
    1abe:	d03a      	beq.n	1b36 <ll_create_connection+0x3f6>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    1ac0:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    1ac2:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    1ac4:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
	LL_ASSERT(link);
    1ac8:	b33c      	cbz	r4, 1b1a <ll_create_connection+0x3da>

	ll_rx_link_release(link);
    1aca:	4620      	mov	r0, r4
    1acc:	f00c fd36 	bl	e53c <ll_rx_link_release>

	ll_conn_release(conn);
    1ad0:	4638      	mov	r0, r7
    1ad2:	f00e fc4b 	bl	1036c <ll_conn_release>
	scan->lll.conn = NULL;
    1ad6:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    1ad8:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    1ada:	622b      	str	r3, [r5, #32]
}
    1adc:	b00b      	add	sp, #44	; 0x2c
    1ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1ae2:	200c      	movs	r0, #12
}
    1ae4:	b00b      	add	sp, #44	; 0x2c
    1ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    1aea:	4a23      	ldr	r2, [pc, #140]	; (1b78 <ll_create_connection+0x438>)
    1aec:	4925      	ldr	r1, [pc, #148]	; (1b84 <ll_create_connection+0x444>)
    1aee:	4824      	ldr	r0, [pc, #144]	; (1b80 <ll_create_connection+0x440>)
    1af0:	239e      	movs	r3, #158	; 0x9e
    1af2:	f01a fbd3 	bl	1c29c <printk>
    1af6:	4040      	eors	r0, r0
    1af8:	f380 8811 	msr	BASEPRI, r0
    1afc:	f04f 0003 	mov.w	r0, #3
    1b00:	df02      	svc	2
    1b02:	e694      	b.n	182e <ll_create_connection+0xee>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    1b04:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    1b08:	6760      	str	r0, [r4, #116]	; 0x74
    1b0a:	e6a0      	b.n	184e <ll_create_connection+0x10e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1b0c:	2007      	movs	r0, #7
    1b0e:	e66a      	b.n	17e6 <ll_create_connection+0xa6>
		ll_rx_link_release(link);
    1b10:	9806      	ldr	r0, [sp, #24]
    1b12:	f00c fd13 	bl	e53c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1b16:	2007      	movs	r0, #7
    1b18:	e665      	b.n	17e6 <ll_create_connection+0xa6>
	LL_ASSERT(link);
    1b1a:	4a17      	ldr	r2, [pc, #92]	; (1b78 <ll_create_connection+0x438>)
    1b1c:	491a      	ldr	r1, [pc, #104]	; (1b88 <ll_create_connection+0x448>)
    1b1e:	4818      	ldr	r0, [pc, #96]	; (1b80 <ll_create_connection+0x440>)
    1b20:	f240 4302 	movw	r3, #1026	; 0x402
    1b24:	f01a fbba 	bl	1c29c <printk>
    1b28:	4040      	eors	r0, r0
    1b2a:	f380 8811 	msr	BASEPRI, r0
    1b2e:	f04f 0003 	mov.w	r0, #3
    1b32:	df02      	svc	2
    1b34:	e7c9      	b.n	1aca <ll_create_connection+0x38a>
	LL_ASSERT(link);
    1b36:	4a10      	ldr	r2, [pc, #64]	; (1b78 <ll_create_connection+0x438>)
    1b38:	4913      	ldr	r1, [pc, #76]	; (1b88 <ll_create_connection+0x448>)
    1b3a:	4811      	ldr	r0, [pc, #68]	; (1b80 <ll_create_connection+0x440>)
    1b3c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    1b40:	f01a fbac 	bl	1c29c <printk>
    1b44:	4040      	eors	r0, r0
    1b46:	f380 8811 	msr	BASEPRI, r0
    1b4a:	f04f 0003 	mov.w	r0, #3
    1b4e:	df02      	svc	2
    1b50:	e7b6      	b.n	1ac0 <ll_create_connection+0x380>
    1b52:	bf00      	nop
    1b54:	f3af 8000 	nop.w
    1b58:	1afd498d 	.word	0x1afd498d
    1b5c:	00000007 	.word	0x00000007
    1b60:	01480148 	.word	0x01480148
    1b64:	aaaaaaab 	.word	0xaaaaaaab
    1b68:	01c9c37f 	.word	0x01c9c37f
    1b6c:	026259ff 	.word	0x026259ff
    1b70:	f6ff0000 	.word	0xf6ff0000
    1b74:	3b9aca00 	.word	0x3b9aca00
    1b78:	00020ec8 	.word	0x00020ec8
    1b7c:	00020b74 	.word	0x00020b74
    1b80:	0002060c 	.word	0x0002060c
    1b84:	000208f8 	.word	0x000208f8
    1b88:	00020c74 	.word	0x00020c74
    1b8c:	00000000 	.word	0x00000000

00001b90 <ull_master_setup>:
{
    1b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b94:	b08d      	sub	sp, #52	; 0x34
	peer_addr_type = pdu_tx->rx_addr;
    1b96:	7f06      	ldrb	r6, [r0, #28]
{
    1b98:	4604      	mov	r4, r0
    1b9a:	460f      	mov	r7, r1
    1b9c:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    1b9e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    1ba2:	2206      	movs	r2, #6
    1ba4:	a80a      	add	r0, sp, #40	; 0x28
    1ba6:	f01b fe2f 	bl	1d808 <memcpy>
	cc->status = 0U;
    1baa:	2300      	movs	r3, #0
	chan_sel = pdu_tx->chan_sel;
    1bac:	f894 901c 	ldrb.w	r9, [r4, #28]
	cc->status = 0U;
    1bb0:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    1bb2:	7c79      	ldrb	r1, [r7, #17]
	uint8_t rl_idx = ftr->rl_idx;
    1bb4:	f897 8012 	ldrb.w	r8, [r7, #18]
	chan_sel = pdu_tx->chan_sel;
    1bb8:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	if (ftr->lrpa_used) {
    1bbc:	f011 0101 	ands.w	r1, r1, #1
	peer_addr_type = pdu_tx->rx_addr;
    1bc0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    1bc4:	46d9      	mov	r9, fp
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    1bc6:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    1bca:	f000 80df 	beq.w	1d8c <ull_master_setup+0x1fc>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    1bce:	f104 011e 	add.w	r1, r4, #30
    1bd2:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    1bd6:	f01b fe17 	bl	1d808 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    1bda:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    1bde:	f000 80dd 	beq.w	1d9c <ull_master_setup+0x20c>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    1be2:	4640      	mov	r0, r8
    1be4:	f104 021f 	add.w	r2, r4, #31
    1be8:	f104 011e 	add.w	r1, r4, #30
    1bec:	f013 fcaa 	bl	15544 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    1bf0:	7fa3      	ldrb	r3, [r4, #30]
    1bf2:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    1bf4:	a90a      	add	r1, sp, #40	; 0x28
		cc->peer_addr_type += 2;
    1bf6:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    1bf8:	2206      	movs	r2, #6
    1bfa:	f104 0025 	add.w	r0, r4, #37	; 0x25
    1bfe:	f01b fe03 	bl	1d808 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    1c08:	89eb      	ldrh	r3, [r5, #14]
    1c0a:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    1c0c:	8a2b      	ldrh	r3, [r5, #16]
    1c0e:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    1c10:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    1c14:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    1c16:	f015 f8b1 	bl	16d7c <lll_clock_sca_local_get>
    1c1a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    1c1e:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    1c22:	4640      	mov	r0, r8
    1c24:	f00e fba8 	bl	10378 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    1c28:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    1c2a:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    1c2c:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    1c2e:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    1c30:	6820      	ldr	r0, [r4, #0]
    1c32:	f00c fc95 	bl	e560 <ll_rx_put>
		rx->handle = lll->handle;
    1c36:	89ab      	ldrh	r3, [r5, #12]
    1c38:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1c3a:	2319      	movs	r3, #25
		link = rx->link;
    1c3c:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1c3e:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    1c40:	f1b9 0f00 	cmp.w	r9, #0
    1c44:	f040 80b8 	bne.w	1db8 <ull_master_setup+0x228>
			cs->csa = 0x00;
    1c48:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    1c4c:	4631      	mov	r1, r6
    1c4e:	4620      	mov	r0, r4
    1c50:	f00c fc86 	bl	e560 <ll_rx_put>
	ll_rx_sched();
    1c54:	f00c fc8e 	bl	e574 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    1c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1c5c:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    1c60:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1c64:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    1c68:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    1c6a:	429e      	cmp	r6, r3
    1c6c:	bf38      	it	cc
    1c6e:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    1c70:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1c74:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    1c78:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1c7c:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    1c80:	f014 fe8c 	bl	1699c <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    1c84:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1c86:	2200      	movs	r2, #0
    1c88:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    1c8a:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1c8c:	2001      	movs	r0, #1
    1c8e:	f008 fbcd 	bl	a42c <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    1c92:	4650      	mov	r0, sl
    1c94:	f00d fcac 	bl	f5f0 <ull_scan_handle_get>
    1c98:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1c9a:	4b4f      	ldr	r3, [pc, #316]	; (1dd8 <ull_master_setup+0x248>)
    1c9c:	f8cd a000 	str.w	sl, [sp]
    1ca0:	b2d2      	uxtb	r2, r2
    1ca2:	2101      	movs	r1, #1
    1ca4:	2000      	movs	r0, #0
    1ca6:	f009 fe5b 	bl	b960 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1caa:	f030 0302 	bics.w	r3, r0, #2
    1cae:	d00c      	beq.n	1cca <ull_master_setup+0x13a>
    1cb0:	4a4a      	ldr	r2, [pc, #296]	; (1ddc <ull_master_setup+0x24c>)
    1cb2:	494b      	ldr	r1, [pc, #300]	; (1de0 <ull_master_setup+0x250>)
    1cb4:	484b      	ldr	r0, [pc, #300]	; (1de4 <ull_master_setup+0x254>)
    1cb6:	f240 3333 	movw	r3, #819	; 0x333
    1cba:	f01a faef 	bl	1c29c <printk>
    1cbe:	4040      	eors	r0, r0
    1cc0:	f380 8811 	msr	BASEPRI, r0
    1cc4:	f04f 0003 	mov.w	r0, #3
    1cc8:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1cca:	f04f 0a00 	mov.w	sl, #0
    1cce:	4653      	mov	r3, sl
    1cd0:	2203      	movs	r2, #3
    1cd2:	2101      	movs	r1, #1
    1cd4:	f8cd a000 	str.w	sl, [sp]
    1cd8:	4650      	mov	r0, sl
    1cda:	f009 fe41 	bl	b960 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1cde:	4640      	mov	r0, r8
    1ce0:	f00e fb4a 	bl	10378 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ce4:	68bb      	ldr	r3, [r7, #8]
    1ce6:	f8cd 8018 	str.w	r8, [sp, #24]
    1cea:	3b09      	subs	r3, #9
    1cec:	1b9e      	subs	r6, r3, r6
    1cee:	4b3e      	ldr	r3, [pc, #248]	; (1de8 <ull_master_setup+0x258>)
    1cf0:	9307      	str	r3, [sp, #28]
    1cf2:	4b3e      	ldr	r3, [pc, #248]	; (1dec <ull_master_setup+0x25c>)
    1cf4:	9305      	str	r3, [sp, #20]
    1cf6:	f240 3363 	movw	r3, #867	; 0x363
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1cfa:	4f3d      	ldr	r7, [pc, #244]	; (1df0 <ull_master_setup+0x260>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1cfc:	9308      	str	r3, [sp, #32]
    1cfe:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d02:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d06:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1d0a:	1d45      	adds	r5, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d0c:	a330      	add	r3, pc, #192	; (adr r3, 1dd0 <ull_master_setup+0x240>)
    1d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d12:	4648      	mov	r0, r9
    1d14:	4641      	mov	r1, r8
    1d16:	f7fe f9f3 	bl	100 <__aeabi_uldivmod>
    1d1a:	4610      	mov	r0, r2
    1d1c:	4619      	mov	r1, r3
    1d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1d22:	2300      	movs	r3, #0
    1d24:	f7fe f9ec 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d28:	a329      	add	r3, pc, #164	; (adr r3, 1dd0 <ull_master_setup+0x240>)
    1d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d2e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d30:	4641      	mov	r1, r8
    1d32:	4648      	mov	r0, r9
    1d34:	f7fe f9e4 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d38:	a325      	add	r3, pc, #148	; (adr r3, 1dd0 <ull_master_setup+0x240>)
    1d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d3e:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d40:	fba4 0107 	umull	r0, r1, r4, r7
    1d44:	f7fe f9dc 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d48:	b2ed      	uxtb	r5, r5
    1d4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d4e:	9000      	str	r0, [sp, #0]
    1d50:	4633      	mov	r3, r6
    1d52:	462a      	mov	r2, r5
    1d54:	2101      	movs	r1, #1
    1d56:	4650      	mov	r0, sl
    1d58:	f009 fd78 	bl	b84c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1d5c:	f030 0302 	bics.w	r3, r0, #2
    1d60:	d00c      	beq.n	1d7c <ull_master_setup+0x1ec>
    1d62:	4a1e      	ldr	r2, [pc, #120]	; (1ddc <ull_master_setup+0x24c>)
    1d64:	491e      	ldr	r1, [pc, #120]	; (1de0 <ull_master_setup+0x250>)
    1d66:	481f      	ldr	r0, [pc, #124]	; (1de4 <ull_master_setup+0x254>)
    1d68:	f44f 7359 	mov.w	r3, #868	; 0x364
    1d6c:	f01a fa96 	bl	1c29c <printk>
    1d70:	4040      	eors	r0, r0
    1d72:	f380 8811 	msr	BASEPRI, r0
    1d76:	f04f 0003 	mov.w	r0, #3
    1d7a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1d7c:	2201      	movs	r2, #1
    1d7e:	2102      	movs	r1, #2
    1d80:	4610      	mov	r0, r2
    1d82:	f008 fb53 	bl	a42c <mayfly_enable>
}
    1d86:	b00d      	add	sp, #52	; 0x34
    1d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    1d8c:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    1d90:	f01b fd65 	bl	1d85e <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    1d94:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    1d98:	f47f af23 	bne.w	1be2 <ull_master_setup+0x52>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    1d9c:	2206      	movs	r2, #6
    1d9e:	2100      	movs	r1, #0
    1da0:	f104 0025 	add.w	r0, r4, #37	; 0x25
    1da4:	f01b fd5b 	bl	1d85e <memset>
		cc->peer_addr_type = peer_addr_type;
    1da8:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    1daa:	a90a      	add	r1, sp, #40	; 0x28
    1dac:	2206      	movs	r2, #6
    1dae:	f104 001f 	add.w	r0, r4, #31
    1db2:	f01b fd29 	bl	1d808 <memcpy>
    1db6:	e724      	b.n	1c02 <ull_master_setup+0x72>
			lll->data_chan_sel = 1;
    1db8:	7f6b      	ldrb	r3, [r5, #29]
    1dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1dbe:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1dc0:	1d28      	adds	r0, r5, #4
    1dc2:	f013 f9b1 	bl	15128 <lll_chan_id>
			cs->csa = 0x01;
    1dc6:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1dc8:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    1dca:	7733      	strb	r3, [r6, #28]
    1dcc:	e73e      	b.n	1c4c <ull_master_setup+0xbc>
    1dce:	bf00      	nop
    1dd0:	1afd498d 	.word	0x1afd498d
    1dd4:	00000007 	.word	0x00000007
    1dd8:	000149b1 	.word	0x000149b1
    1ddc:	00020ec8 	.word	0x00020ec8
    1de0:	00020cf0 	.word	0x00020cf0
    1de4:	0002060c 	.word	0x0002060c
    1de8:	000149b5 	.word	0x000149b5
    1dec:	000149e5 	.word	0x000149e5
    1df0:	3b9aca00 	.word	0x3b9aca00
    1df4:	00000000 	.word	0x00000000

00001df8 <ull_sched_after_mstr_slot_get>:
				  uint32_t *win_offset_us);
static void ticker_op_cb(uint32_t status, void *param);

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    1df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dfc:	b08f      	sub	sp, #60	; 0x3c
    1dfe:	461e      	mov	r6, r3
    1e00:	9309      	str	r3, [sp, #36]	; 0x24
    1e02:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    1e04:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    1e06:	1d0a      	adds	r2, r1, #4
    1e08:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1f10 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    1e0c:	f8df b104 	ldr.w	fp, [pc, #260]	; 1f14 <ull_sched_after_mstr_slot_get+0x11c>
    1e10:	f8df a104 	ldr.w	sl, [pc, #260]	; 1f18 <ull_sched_after_mstr_slot_get+0x120>
    1e14:	f8df 9104 	ldr.w	r9, [pc, #260]	; 1f1c <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    1e18:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    1e1a:	2100      	movs	r1, #0
    1e1c:	6031      	str	r1, [r6, #0]
{
    1e1e:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    1e20:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    1e24:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    1e26:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    1e28:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    1e2a:	9106      	str	r1, [sp, #24]
    1e2c:	af0d      	add	r7, sp, #52	; 0x34
    1e2e:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    1e30:	2302      	movs	r3, #2
    1e32:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    1e34:	e9cd 8701 	strd	r8, r7, [sp, #4]
    1e38:	9600      	str	r6, [sp, #0]
    1e3a:	462b      	mov	r3, r5
    1e3c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    1e40:	4621      	mov	r1, r4
    1e42:	2000      	movs	r0, #0
    1e44:	f009 fdce 	bl	b9e4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    1e48:	2802      	cmp	r0, #2
    1e4a:	d02d      	beq.n	1ea8 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    1e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d130      	bne.n	1eb4 <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    1e52:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    1e56:	2bff      	cmp	r3, #255	; 0xff
    1e58:	d03c      	beq.n	1ed4 <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    1e5a:	2b05      	cmp	r3, #5
    1e5c:	d1e8      	bne.n	1e30 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    1e5e:	2000      	movs	r0, #0
    1e60:	f00e fa92 	bl	10388 <ll_conn_get>
		if (conn && !conn->lll.role) {
    1e64:	2800      	cmp	r0, #0
    1e66:	d0e3      	beq.n	1e30 <ull_sched_after_mstr_slot_get+0x38>
    1e68:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	dbdf      	blt.n	1e30 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    1e70:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    1e72:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    1e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    1e76:	29ff      	cmp	r1, #255	; 0xff
    1e78:	d00c      	beq.n	1e94 <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    1e7a:	9906      	ldr	r1, [sp, #24]
    1e7c:	9207      	str	r2, [sp, #28]
    1e7e:	4618      	mov	r0, r3
    1e80:	9304      	str	r3, [sp, #16]
    1e82:	f009 fe0f 	bl	baa4 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    1e86:	9b05      	ldr	r3, [sp, #20]
    1e88:	9a08      	ldr	r2, [sp, #32]
    1e8a:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    1e8c:	4288      	cmp	r0, r1
    1e8e:	9b04      	ldr	r3, [sp, #16]
    1e90:	9a07      	ldr	r2, [sp, #28]
    1e92:	d822      	bhi.n	1eda <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    1e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    1e98:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    1e9c:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    1e9e:	e7c7      	b.n	1e30 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    1ea0:	4621      	mov	r1, r4
    1ea2:	2000      	movs	r0, #0
    1ea4:	f009 fde4 	bl	ba70 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    1ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1eaa:	2b02      	cmp	r3, #2
    1eac:	d0f8      	beq.n	1ea0 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    1eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d0ce      	beq.n	1e52 <ull_sched_after_mstr_slot_get+0x5a>
    1eb4:	2352      	movs	r3, #82	; 0x52
    1eb6:	465a      	mov	r2, fp
    1eb8:	4651      	mov	r1, sl
    1eba:	4648      	mov	r0, r9
    1ebc:	f01a f9ee 	bl	1c29c <printk>
    1ec0:	4040      	eors	r0, r0
    1ec2:	f380 8811 	msr	BASEPRI, r0
    1ec6:	f04f 0003 	mov.w	r0, #3
    1eca:	df02      	svc	2
		if (ticker_id == 0xff) {
    1ecc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    1ed0:	2bff      	cmp	r3, #255	; 0xff
    1ed2:	d1c2      	bne.n	1e5a <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    1ed4:	9b04      	ldr	r3, [sp, #16]
    1ed6:	2bff      	cmp	r3, #255	; 0xff
    1ed8:	d010      	beq.n	1efc <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    1eda:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    1ede:	4810      	ldr	r0, [pc, #64]	; (1f20 <ull_sched_after_mstr_slot_get+0x128>)
    1ee0:	4413      	add	r3, r2
    1ee2:	fba3 0100 	umull	r0, r1, r3, r0
    1ee6:	2207      	movs	r2, #7
    1ee8:	fb02 1103 	mla	r1, r2, r3, r1
    1eec:	a306      	add	r3, pc, #24	; (adr r3, 1f08 <ull_sched_after_mstr_slot_get+0x110>)
    1eee:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ef2:	f7fe f905 	bl	100 <__aeabi_uldivmod>
    1ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    1ef8:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    1efa:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    1efc:	b00f      	add	sp, #60	; 0x3c
    1efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f02:	bf00      	nop
    1f04:	f3af 8000 	nop.w
    1f08:	3b9aca00 	.word	0x3b9aca00
    1f0c:	00000000 	.word	0x00000000
    1f10:	00014d21 	.word	0x00014d21
    1f14:	00020f20 	.word	0x00020f20
    1f18:	00020f64 	.word	0x00020f64
    1f1c:	0002060c 	.word	0x0002060c
    1f20:	1afd498d 	.word	0x1afd498d
    1f24:	00000000 	.word	0x00000000

00001f28 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    1f28:	b570      	push	{r4, r5, r6, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    1f2e:	9201      	str	r2, [sp, #4]
{
    1f30:	4615      	mov	r5, r2
    1f32:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    1f34:	aa01      	add	r2, sp, #4
    1f36:	2002      	movs	r0, #2
    1f38:	f7ff ff5e 	bl	1df8 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    1f3c:	6823      	ldr	r3, [r4, #0]
    1f3e:	b30b      	cbz	r3, 1f84 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    1f40:	9801      	ldr	r0, [sp, #4]
    1f42:	1b43      	subs	r3, r0, r5
    1f44:	021b      	lsls	r3, r3, #8
    1f46:	d41f      	bmi.n	1f88 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    1f48:	4629      	mov	r1, r5
    1f4a:	f009 fdab 	bl	baa4 <ticker_ticks_diff_get>
    1f4e:	4a1a      	ldr	r2, [pc, #104]	; (1fb8 <after_mstr_offset_get+0x90>)
    1f50:	4603      	mov	r3, r0
    1f52:	2107      	movs	r1, #7
    1f54:	fba0 0202 	umull	r0, r2, r0, r2
    1f58:	fb01 2103 	mla	r1, r1, r3, r2
    1f5c:	a314      	add	r3, pc, #80	; (adr r3, 1fb0 <after_mstr_offset_get+0x88>)
    1f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f62:	f7fe f8cd 	bl	100 <__aeabi_uldivmod>
    1f66:	6822      	ldr	r2, [r4, #0]
    1f68:	4402      	add	r2, r0
    1f6a:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    1f6c:	2a00      	cmp	r2, #0
    1f6e:	db09      	blt.n	1f84 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    1f70:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1f74:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    1f78:	4290      	cmp	r0, r2
    1f7a:	d203      	bcs.n	1f84 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    1f7c:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    1f7e:	4282      	cmp	r2, r0
    1f80:	d8fc      	bhi.n	1f7c <after_mstr_offset_get+0x54>
    1f82:	6022      	str	r2, [r4, #0]
		}
	}
}
    1f84:	b002      	add	sp, #8
    1f86:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    1f88:	4601      	mov	r1, r0
    1f8a:	4628      	mov	r0, r5
    1f8c:	f009 fd8a 	bl	baa4 <ticker_ticks_diff_get>
    1f90:	4a09      	ldr	r2, [pc, #36]	; (1fb8 <after_mstr_offset_get+0x90>)
    1f92:	4603      	mov	r3, r0
    1f94:	2107      	movs	r1, #7
    1f96:	fba0 0202 	umull	r0, r2, r0, r2
    1f9a:	fb01 2103 	mla	r1, r1, r3, r2
    1f9e:	a304      	add	r3, pc, #16	; (adr r3, 1fb0 <after_mstr_offset_get+0x88>)
    1fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1fa4:	f7fe f8ac 	bl	100 <__aeabi_uldivmod>
    1fa8:	6822      	ldr	r2, [r4, #0]
    1faa:	1a12      	subs	r2, r2, r0
    1fac:	6022      	str	r2, [r4, #0]
    1fae:	e7dd      	b.n	1f6c <after_mstr_offset_get+0x44>
    1fb0:	3b9aca00 	.word	0x3b9aca00
    1fb4:	00000000 	.word	0x00000000
    1fb8:	1afd498d 	.word	0x1afd498d
    1fbc:	00000000 	.word	0x00000000

00001fc0 <ull_sched_mfy_win_offset_select>:
{
    1fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    1fc4:	f8b0 1194 	ldrh.w	r1, [r0, #404]	; 0x194
{
    1fc8:	b088      	sub	sp, #32
    1fca:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    1fcc:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1fd0:	4843      	ldr	r0, [pc, #268]	; (20e0 <ull_sched_mfy_win_offset_select+0x120>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    1fd2:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    1fd4:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    1fd8:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    1fda:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    1fdc:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    1fe0:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    1fe4:	fba1 0100 	umull	r0, r1, r1, r0
    1fe8:	a33b      	add	r3, pc, #236	; (adr r3, 20d8 <ull_sched_mfy_win_offset_select+0x118>)
    1fea:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    1fee:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    1ff0:	f7fe f886 	bl	100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    1ff4:	f10d 030f 	add.w	r3, sp, #15
    1ff8:	9501      	str	r5, [sp, #4]
    1ffa:	9300      	str	r3, [sp, #0]
    1ffc:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2000:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    2002:	aa04      	add	r2, sp, #16
    2004:	4620      	mov	r0, r4
    2006:	2101      	movs	r1, #1
    2008:	f012 fe8c 	bl	14d24 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    200c:	f89d 800f 	ldrb.w	r8, [sp, #15]
    2010:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    2014:	fa5f fc8c 	uxtb.w	ip, ip
    2018:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    201c:	4630      	mov	r0, r6
    201e:	f504 77ca 	add.w	r7, r4, #404	; 0x194
    2022:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    2026:	f504 76d0 	add.w	r6, r4, #416	; 0x1a0
			if (win_offset_s != 0xffff) {
    202a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    202e:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    2030:	f1b8 0f00 	cmp.w	r8, #0
    2034:	d00a      	beq.n	204c <ull_sched_mfy_win_offset_select+0x8c>
    2036:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    2038:	4572      	cmp	r2, lr
    203a:	d004      	beq.n	2046 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    203c:	8819      	ldrh	r1, [r3, #0]
    203e:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    2040:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    2044:	d013      	beq.n	206e <ull_sched_mfy_win_offset_select+0xae>
		while (offset_index_m < offset_m_max) {
    2046:	3302      	adds	r3, #2
    2048:	459c      	cmp	ip, r3
    204a:	d1f5      	bne.n	2038 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    204c:	3702      	adds	r7, #2
    204e:	42be      	cmp	r6, r7
    2050:	d1ed      	bne.n	202e <ull_sched_mfy_win_offset_select+0x6e>
	} else if (!has_offset_s) {
    2052:	bb08      	cbnz	r0, 2098 <ull_sched_mfy_win_offset_select+0xd8>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    2054:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2058:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    205c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2060:	fb03 f202 	mul.w	r2, r3, r2
    2064:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
	dst[1] = val >> 8;
    2068:	0a18      	lsrs	r0, r3, #8
	dst[0] = val;
    206a:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    206c:	e009      	b.n	2082 <ull_sched_mfy_win_offset_select+0xc2>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    206e:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    2072:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2076:	fb02 f303 	mul.w	r3, r2, r3
    207a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    207e:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
    2080:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    2082:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2084:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    2088:	2204      	movs	r2, #4
    208a:	f362 0302 	bfi	r3, r2, #0, #3
    208e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    2092:	b008      	add	sp, #32
    2094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx = CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2098:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		pdu_ctrl_tx->len =
    209c:	2203      	movs	r2, #3
    209e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20a2:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    20a6:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
    20aa:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20ac:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    20b0:	2011      	movs	r0, #17
    20b2:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20b6:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    20ba:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    20be:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    20c0:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    20c2:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    20c6:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    20c8:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
}
    20cc:	b008      	add	sp, #32
    20ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20d2:	bf00      	nop
    20d4:	f3af 8000 	nop.w
    20d8:	1afd498d 	.word	0x1afd498d
    20dc:	00000007 	.word	0x00000007
    20e0:	3b9aca00 	.word	0x3b9aca00
    20e4:	00000000 	.word	0x00000000

000020e8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    20e8:	b538      	push	{r3, r4, r5, lr}
    20ea:	4604      	mov	r4, r0
	uint32_t ticks_at_start;
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    20ec:	f015 fcba 	bl	17a64 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == 3U) {
    20f0:	7da2      	ldrb	r2, [r4, #22]
    20f2:	f3c2 0341 	ubfx	r3, r2, #1, #2
    20f6:	3301      	adds	r3, #1
    20f8:	f003 0303 	and.w	r3, r3, #3
    20fc:	2b03      	cmp	r3, #3
    20fe:	d034      	beq.n	216a <isr_window+0x82>
    2100:	f363 0242 	bfi	r2, r3, #1, #2
    2104:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    2106:	f103 0025 	add.w	r0, r3, #37	; 0x25
    210a:	f014 fc05 	bl	16918 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    210e:	6863      	ldr	r3, [r4, #4]
    2110:	b30b      	cbz	r3, 2156 <isr_window+0x6e>
    2112:	6923      	ldr	r3, [r4, #16]
    2114:	b1fb      	cbz	r3, 2156 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    2116:	f017 f941 	bl	1939c <radio_tmr_start_get>
    211a:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}
#endif /* CONFIG_BT_CENTRAL */

	ticks_at_start = ticker_ticks_now_get() +
    211c:	f009 fcc0 	bl	baa0 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    2120:	1cc1      	adds	r1, r0, #3
    2122:	2000      	movs	r0, #0
    2124:	f017 f908 	bl	19338 <radio_tmr_start_tick>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * master event.
	 */
	radio_tmr_end_capture();
    2128:	f017 f984 	bl	19434 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    212c:	f017 f936 	bl	1939c <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2130:	4629      	mov	r1, r5
    2132:	f009 fcb7 	bl	baa4 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    2136:	4912      	ldr	r1, [pc, #72]	; (2180 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2138:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    213a:	2207      	movs	r2, #7
    213c:	fba0 0101 	umull	r0, r1, r0, r1
    2140:	fb02 1103 	mla	r1, r2, r3, r1
    2144:	a30c      	add	r3, pc, #48	; (adr r3, 2178 <isr_window+0x90>)
    2146:	e9d3 2300 	ldrd	r2, r3, [r3]
    214a:	f7fd ffd9 	bl	100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    214e:	6923      	ldr	r3, [r4, #16]
    2150:	1a1b      	subs	r3, r3, r0
    2152:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    2154:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    2156:	f009 fca3 	bl	baa0 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    215a:	1cc1      	adds	r1, r0, #3
    215c:	2000      	movs	r0, #0
    215e:	f017 f8eb 	bl	19338 <radio_tmr_start_tick>
}
    2162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    2166:	f017 b965 	b.w	19434 <radio_tmr_end_capture>
		lll->chan = 0U;
    216a:	f36f 0242 	bfc	r2, #1, #2
    216e:	75a2      	strb	r2, [r4, #22]
    2170:	2025      	movs	r0, #37	; 0x25
    2172:	e7ca      	b.n	210a <isr_window+0x22>
    2174:	f3af 8000 	nop.w
    2178:	3b9aca00 	.word	0x3b9aca00
    217c:	00000000 	.word	0x00000000
    2180:	1afd498d 	.word	0x1afd498d
    2184:	00000000 	.word	0x00000000

00002188 <isr_rx>:
{
    2188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    218c:	b087      	sub	sp, #28
    218e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    2190:	f016 fee8 	bl	18f64 <radio_is_done>
	if (trx_done) {
    2194:	b2c0      	uxtb	r0, r0
    2196:	b950      	cbnz	r0, 21ae <isr_rx+0x26>
	lll_isr_status_reset();
    2198:	f014 fc16 	bl	169c8 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    219c:	4896      	ldr	r0, [pc, #600]	; (23f8 <isr_rx+0x270>)
    219e:	4621      	mov	r1, r4
    21a0:	f016 fdb4 	bl	18d0c <radio_isr_set>
}
    21a4:	b007      	add	sp, #28
    21a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    21aa:	f016 beb1 	b.w	18f10 <radio_disable>
		crc_ok = radio_crc_is_valid();
    21ae:	f016 fef9 	bl	18fa4 <radio_crc_is_valid>
    21b2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    21b4:	f017 f812 	bl	191dc <radio_filter_has_match>
    21b8:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    21ba:	f017 f819 	bl	191f0 <radio_filter_match_get>
    21be:	4682      	mov	sl, r0
		irkmatch_ok = radio_ar_has_match();
    21c0:	f017 fa2e 	bl	19620 <radio_ar_has_match>
    21c4:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_id = radio_ar_match_get();
    21c8:	f017 fa0e 	bl	195e8 <radio_ar_match_get>
    21cc:	4683      	mov	fp, r0
		rssi_ready = radio_rssi_is_ready();
    21ce:	f016 ffc9 	bl	19164 <radio_rssi_is_ready>
    21d2:	4681      	mov	r9, r0
	lll_isr_status_reset();
    21d4:	f014 fbf8 	bl	169c8 <lll_isr_status_reset>
	node_rx = ull_pdu_rx_alloc_peek(1);
    21d8:	2001      	movs	r0, #1
    21da:	f00c fb19 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    21de:	4605      	mov	r5, r0
    21e0:	2800      	cmp	r0, #0
    21e2:	f000 80ce 	beq.w	2382 <isr_rx+0x1fa>
	rl_idx = devmatch_ok ?
    21e6:	2e00      	cmp	r6, #0
    21e8:	f040 80db 	bne.w	23a2 <isr_rx+0x21a>
    21ec:	f1b8 0f00 	cmp.w	r8, #0
    21f0:	f040 80e3 	bne.w	23ba <isr_rx+0x232>
    21f4:	f04f 0aff 	mov.w	sl, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    21f8:	2f00      	cmp	r7, #0
    21fa:	d0cf      	beq.n	219c <isr_rx+0x14>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    21fc:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    21fe:	0718      	lsls	r0, r3, #28
    2200:	f140 80e4 	bpl.w	23cc <isr_rx+0x244>
		(((lll->filter_policy & 0x01) != 0) &&
    2204:	2e00      	cmp	r6, #0
    2206:	f000 8166 	beq.w	24d6 <isr_rx+0x34e>
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->master.cancelled &&
    220a:	6863      	ldr	r3, [r4, #4]
	bool dir_report = false;
    220c:	2200      	movs	r2, #0
		rssi_ready = radio_rssi_is_ready();
    220e:	fa5f f689 	uxtb.w	r6, r9
	bool dir_report = false;
    2212:	f88d 2013 	strb.w	r2, [sp, #19]
	} else if (lll->conn && !lll->conn->master.cancelled &&
    2216:	2b00      	cmp	r3, #0
    2218:	f000 810e 	beq.w	2438 <isr_rx+0x2b0>
    221c:	6863      	ldr	r3, [r4, #4]
    221e:	f893 3020 	ldrb.w	r3, [r3, #32]
    2222:	0799      	lsls	r1, r3, #30
    2224:	f100 8108 	bmi.w	2438 <isr_rx+0x2b0>
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    2228:	7f2b      	ldrb	r3, [r5, #28]
    222a:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->master.cancelled &&
    222e:	2907      	cmp	r1, #7
    2230:	d0b4      	beq.n	219c <isr_rx+0x14>

#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    2232:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    2234:	f3c2 09c0 	ubfx	r9, r2, #3, #1
    2238:	0712      	lsls	r2, r2, #28
    223a:	f140 8153 	bpl.w	24e4 <isr_rx+0x35c>
    223e:	2900      	cmp	r1, #0
    2240:	f040 80e6 	bne.w	2410 <isr_rx+0x288>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2244:	7f6b      	ldrb	r3, [r5, #29]
    2246:	2b25      	cmp	r3, #37	; 0x25
    2248:	f200 8168 	bhi.w	251c <isr_rx+0x394>
			rx = ull_pdu_rx_alloc_peek(4);
    224c:	2004      	movs	r0, #4
    224e:	f00c fadf 	bl	e810 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    2252:	2800      	cmp	r0, #0
    2254:	d0a2      	beq.n	219c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    2256:	f017 f8f5 	bl	19444 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    225a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    225c:	4606      	mov	r6, r0
		if (!lll->ticks_window) {
    225e:	b943      	cbnz	r3, 2272 <isr_rx+0xea>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    2260:	8c23      	ldrh	r3, [r4, #32]
    2262:	f240 2271 	movw	r2, #625	; 0x271
    2266:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    226a:	fbb0 f2f3 	udiv	r2, r0, r3
    226e:	fb03 0612 	mls	r6, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2272:	6823      	ldr	r3, [r4, #0]
    2274:	691a      	ldr	r2, [r3, #16]
    2276:	4b61      	ldr	r3, [pc, #388]	; (23fc <isr_rx+0x274>)
    2278:	2107      	movs	r1, #7
    227a:	fba2 0303 	umull	r0, r3, r2, r3
    227e:	fb01 3102 	mla	r1, r1, r2, r3
    2282:	a35b      	add	r3, pc, #364	; (adr r3, 23f0 <isr_rx+0x268>)
    2284:	e9d3 2300 	ldrd	r2, r3, [r3]
    2288:	f7fd ff3a 	bl	100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    228c:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2290:	42b3      	cmp	r3, r6
    2292:	d383      	bcc.n	219c <isr_rx+0x14>
		radio_switch_complete_and_disable();
    2294:	f016 ff40 	bl	19118 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2298:	4650      	mov	r0, sl
		lll_conn = lll->conn;
    229a:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    229c:	f013 ff06 	bl	160ac <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    22a0:	7de3      	ldrb	r3, [r4, #23]
    22a2:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    22a4:	4607      	mov	r7, r0
		if (lll->rpa_gen && lrpa) {
    22a6:	f140 81e0 	bpl.w	266a <isr_rx+0x4e2>
    22aa:	2800      	cmp	r0, #0
    22ac:	f000 81dd 	beq.w	266a <isr_rx+0x4e2>
			init_addr = lrpa->val;
    22b0:	4683      	mov	fp, r0
			init_tx_addr = 1;
    22b2:	2601      	movs	r6, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    22b4:	f016 fe84 	bl	18fc0 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    22b8:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    22ba:	aa05      	add	r2, sp, #20
    22bc:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    22be:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    22c2:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    22c4:	4681      	mov	r9, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    22c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    22ca:	9200      	str	r2, [sp, #0]
    22cc:	4620      	mov	r0, r4
    22ce:	2200      	movs	r2, #0
    22d0:	e9cd 6b01 	strd	r6, fp, [sp, #4]
    22d4:	f015 fd70 	bl	17db8 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    22d8:	4648      	mov	r0, r9
    22da:	f016 fdf7 	bl	18ecc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    22de:	f016 fe37 	bl	18f50 <radio_is_ready>
    22e2:	2800      	cmp	r0, #0
    22e4:	f040 81e4 	bne.w	26b0 <isr_rx+0x528>
		radio_isr_set(isr_done_cleanup, lll);
    22e8:	4845      	ldr	r0, [pc, #276]	; (2400 <isr_rx+0x278>)
    22ea:	4621      	mov	r1, r4
    22ec:	f016 fd0e 	bl	18d0c <radio_isr_set>
		lll->conn->master.initiated = 1U;
    22f0:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    22f2:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->master.initiated = 1U;
    22f4:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    22f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->master.initiated = 1U;
    22fc:	f042 0201 	orr.w	r2, r2, #1
    2300:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    2304:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    2306:	f00c faa1 	bl	e84c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    230a:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
    230c:	4606      	mov	r6, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    230e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    2310:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2314:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    2316:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    2318:	4649      	mov	r1, r9
    231a:	2224      	movs	r2, #36	; 0x24
    231c:	301c      	adds	r0, #28
    231e:	f01b fa73 	bl	1d808 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    2322:	7f33      	ldrb	r3, [r6, #28]
		ftr->param = lll;
    2324:	60b4      	str	r4, [r6, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2326:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    232a:	f365 1345 	bfi	r3, r5, #5, #1
    232e:	7733      	strb	r3, [r6, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    2330:	f017 f834 	bl	1939c <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2334:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    2336:	6130      	str	r0, [r6, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2338:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    233a:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    233c:	f016 fdd6 	bl	18eec <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    2340:	f1b8 0f00 	cmp.w	r8, #0
    2344:	bf08      	it	eq
    2346:	f04f 0aff 	moveq.w	sl, #255	; 0xff
    234a:	f886 a01a 	strb.w	sl, [r6, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    234e:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    2350:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    2352:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    2356:	6175      	str	r5, [r6, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    2358:	d002      	beq.n	2360 <isr_rx+0x1d8>
    235a:	1e3b      	subs	r3, r7, #0
    235c:	bf18      	it	ne
    235e:	2301      	movne	r3, #1
    2360:	7e72      	ldrb	r2, [r6, #25]
    2362:	f363 0200 	bfi	r2, r3, #0, #1
    2366:	7672      	strb	r2, [r6, #25]
			ftr->extra = ull_pdu_rx_alloc();
    2368:	f00c fa70 	bl	e84c <ull_pdu_rx_alloc>
    236c:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    236e:	4631      	mov	r1, r6
    2370:	6830      	ldr	r0, [r6, #0]
			ftr->extra = ull_pdu_rx_alloc();
    2372:	60f3      	str	r3, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
    2374:	f00c fa80 	bl	e878 <ull_rx_put>
		ull_rx_sched();
    2378:	f00c fa8e 	bl	e898 <ull_rx_sched>
}
    237c:	b007      	add	sp, #28
    237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(node_rx);
    2382:	4a20      	ldr	r2, [pc, #128]	; (2404 <isr_rx+0x27c>)
    2384:	4920      	ldr	r1, [pc, #128]	; (2408 <isr_rx+0x280>)
    2386:	4821      	ldr	r0, [pc, #132]	; (240c <isr_rx+0x284>)
    2388:	f240 230f 	movw	r3, #527	; 0x20f
    238c:	f019 ff86 	bl	1c29c <printk>
    2390:	4040      	eors	r0, r0
    2392:	f380 8811 	msr	BASEPRI, r0
    2396:	f04f 0003 	mov.w	r0, #3
    239a:	df02      	svc	2
	rl_idx = devmatch_ok ?
    239c:	2e00      	cmp	r6, #0
    239e:	f43f af25 	beq.w	21ec <isr_rx+0x64>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    23a2:	7da0      	ldrb	r0, [r4, #22]
    23a4:	fa5f f18a 	uxtb.w	r1, sl
    23a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    23ac:	f013 fea2 	bl	160f4 <ull_filter_lll_rl_idx>
    23b0:	4682      	mov	sl, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    23b2:	2f00      	cmp	r7, #0
    23b4:	f43f aef2 	beq.w	219c <isr_rx+0x14>
    23b8:	e720      	b.n	21fc <isr_rx+0x74>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    23ba:	fa5f f08b 	uxtb.w	r0, fp
    23be:	f013 ff03 	bl	161c8 <ull_filter_lll_rl_irk_idx>
    23c2:	4682      	mov	sl, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    23c4:	2f00      	cmp	r7, #0
    23c6:	f43f aee9 	beq.w	219c <isr_rx+0x14>
    23ca:	e717      	b.n	21fc <isr_rx+0x74>
	return (((lll->filter_policy & 0x01) == 0) &&
    23cc:	2e00      	cmp	r6, #0
    23ce:	f43f af1c 	beq.w	220a <isr_rx+0x82>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    23d2:	4651      	mov	r1, sl
    23d4:	4640      	mov	r0, r8
    23d6:	f013 ff85 	bl	162e4 <ull_filter_lll_rl_idx_allowed>
    23da:	2800      	cmp	r0, #0
    23dc:	f47f af15 	bne.w	220a <isr_rx+0x82>
		(((lll->filter_policy & 0x01) != 0) &&
    23e0:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    23e2:	0719      	lsls	r1, r3, #28
    23e4:	f57f aeda 	bpl.w	219c <isr_rx+0x14>
    23e8:	e70f      	b.n	220a <isr_rx+0x82>
    23ea:	bf00      	nop
    23ec:	f3af 8000 	nop.w
    23f0:	3b9aca00 	.word	0x3b9aca00
    23f4:	00000000 	.word	0x00000000
    23f8:	00017af5 	.word	0x00017af5
    23fc:	1afd498d 	.word	0x1afd498d
    2400:	00017a2d 	.word	0x00017a2d
    2404:	00021398 	.word	0x00021398
    2408:	000213e4 	.word	0x000213e4
    240c:	0002060c 	.word	0x0002060c
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2410:	2901      	cmp	r1, #1
    2412:	d116      	bne.n	2442 <isr_rx+0x2ba>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2414:	7f6b      	ldrb	r3, [r5, #29]
    2416:	2b0c      	cmp	r3, #12
    2418:	f47f aec0 	bne.w	219c <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  lll_scan_tgta_check(lll, true, pdu->rx_addr,
    241c:	7f2a      	ldrb	r2, [r5, #28]
    241e:	f8cd a000 	str.w	sl, [sp]
    2422:	2300      	movs	r3, #0
    2424:	9301      	str	r3, [sp, #4]
    2426:	09d2      	lsrs	r2, r2, #7
    2428:	f105 0324 	add.w	r3, r5, #36	; 0x24
    242c:	4620      	mov	r0, r4
    242e:	f015 fd43 	bl	17eb8 <lll_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    2432:	2800      	cmp	r0, #0
    2434:	f47f af0a 	bne.w	224c <isr_rx+0xc4>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2438:	7f29      	ldrb	r1, [r5, #28]
    243a:	f001 010f 	and.w	r1, r1, #15
    243e:	2900      	cmp	r1, #0
    2440:	d062      	beq.n	2508 <isr_rx+0x380>
    2442:	2906      	cmp	r1, #6
    2444:	d060      	beq.n	2508 <isr_rx+0x380>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2446:	2902      	cmp	r1, #2
    2448:	f000 808e 	beq.w	2568 <isr_rx+0x3e0>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    244c:	2901      	cmp	r1, #1
    244e:	d165      	bne.n	251c <isr_rx+0x394>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2450:	7f6b      	ldrb	r3, [r5, #29]
    2452:	2b0c      	cmp	r3, #12
    2454:	f47f aea2 	bne.w	219c <isr_rx+0x14>
		    lll_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    2458:	7f2a      	ldrb	r2, [r5, #28]
    245a:	f8cd a000 	str.w	sl, [sp]
    245e:	f10d 0313 	add.w	r3, sp, #19
    2462:	9301      	str	r3, [sp, #4]
    2464:	09d2      	lsrs	r2, r2, #7
    2466:	f105 0324 	add.w	r3, r5, #36	; 0x24
    246a:	2100      	movs	r1, #0
    246c:	4620      	mov	r0, r4
    246e:	f015 fd23 	bl	17eb8 <lll_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    2472:	2800      	cmp	r0, #0
    2474:	d052      	beq.n	251c <isr_rx+0x394>
		 (pdu_adv_rx->len != 0) &&
    2476:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    2478:	2b00      	cmp	r3, #0
    247a:	f43f ae8f 	beq.w	219c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    247e:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    2480:	b12b      	cbz	r3, 248e <isr_rx+0x306>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    2482:	7f2b      	ldrb	r3, [r5, #28]
    2484:	f003 030f 	and.w	r3, r3, #15
    2488:	2b07      	cmp	r3, #7
    248a:	f47f ae87 	bne.w	219c <isr_rx+0x14>
		err = isr_rx_scan_report(lll, rssi_ready,
    248e:	f1b8 0f00 	cmp.w	r8, #0
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
    2492:	f04f 0003 	mov.w	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready,
    2496:	f89d 7013 	ldrb.w	r7, [sp, #19]
    249a:	bf08      	it	eq
    249c:	f04f 0aff 	moveq.w	sl, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(3);
    24a0:	f00c f9b6 	bl	e810 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    24a4:	4605      	mov	r5, r0
    24a6:	2800      	cmp	r0, #0
    24a8:	f43f ae78 	beq.w	219c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    24ac:	f00c f9ce 	bl	e84c <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    24b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    24b4:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    24b6:	2305      	movs	r3, #5
    24b8:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    24ba:	2e00      	cmp	r6, #0
    24bc:	d150      	bne.n	2560 <isr_rx+0x3d8>
    24be:	237f      	movs	r3, #127	; 0x7f
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    24c0:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    24c2:	762b      	strb	r3, [r5, #24]
	ull_rx_put(node_rx->hdr.link, node_rx);
    24c4:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
    24c6:	f885 a01a 	strb.w	sl, [r5, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
    24ca:	76ef      	strb	r7, [r5, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
    24cc:	f00c f9d4 	bl	e878 <ull_rx_put>
	ull_rx_sched();
    24d0:	f00c f9e2 	bl	e898 <ull_rx_sched>
		if (!err) {
    24d4:	e662      	b.n	219c <isr_rx+0x14>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    24d6:	4650      	mov	r0, sl
    24d8:	f013 fec8 	bl	1626c <ull_filter_lll_irk_whitelisted>
    24dc:	2800      	cmp	r0, #0
    24de:	f47f ae94 	bne.w	220a <isr_rx+0x82>
    24e2:	e65b      	b.n	219c <isr_rx+0x14>
	if (rl_idx != FILTER_IDX_NONE) {
    24e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    24e8:	f88d a014 	strb.w	sl, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    24ec:	f3c3 1780 	ubfx	r7, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    24f0:	f000 80a0 	beq.w	2634 <isr_rx+0x4ac>
		return (rl_idx == lll->rl_idx);
    24f4:	7e23      	ldrb	r3, [r4, #24]
    24f6:	eba3 030a 	sub.w	r3, r3, sl
    24fa:	fab3 f383 	clz	r3, r3
    24fe:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    2500:	2b00      	cmp	r3, #0
    2502:	f47f ae9c 	bne.w	223e <isr_rx+0xb6>
    2506:	e79a      	b.n	243e <isr_rx+0x2b6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2508:	7f6b      	ldrb	r3, [r5, #29]
    250a:	2b25      	cmp	r3, #37	; 0x25
    250c:	d806      	bhi.n	251c <isr_rx+0x394>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    250e:	7da2      	ldrb	r2, [r4, #22]
    2510:	0692      	lsls	r2, r2, #26
    2512:	d501      	bpl.n	2518 <isr_rx+0x390>
		   !lll->conn) {
    2514:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    2516:	b34a      	cbz	r2, 256c <isr_rx+0x3e4>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2518:	2b25      	cmp	r3, #37	; 0x25
    251a:	d9ad      	bls.n	2478 <isr_rx+0x2f0>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    251c:	7f2b      	ldrb	r3, [r5, #28]
    251e:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    2522:	2b04      	cmp	r3, #4
    2524:	f47f ae3a 	bne.w	219c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    2528:	7f6b      	ldrb	r3, [r5, #29]
    252a:	2b25      	cmp	r3, #37	; 0x25
    252c:	f63f ae36 	bhi.w	219c <isr_rx+0x14>
		   (lll->state != 0U) &&
    2530:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    2532:	07d8      	lsls	r0, r3, #31
    2534:	f57f ae32 	bpl.w	219c <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    2538:	f016 fd42 	bl	18fc0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    253c:	7f2b      	ldrb	r3, [r5, #28]
    253e:	7802      	ldrb	r2, [r0, #0]
    2540:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2544:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    2548:	f47f ae28 	bne.w	219c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    254c:	3008      	adds	r0, #8
    254e:	2206      	movs	r2, #6
    2550:	f105 011e 	add.w	r1, r5, #30
    2554:	f01b f947 	bl	1d7e6 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    2558:	2800      	cmp	r0, #0
    255a:	f47f ae1f 	bne.w	219c <isr_rx+0x14>
    255e:	e78a      	b.n	2476 <isr_rx+0x2ee>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2560:	f016 fdf2 	bl	19148 <radio_rssi_get>
    2564:	b2c3      	uxtb	r3, r0
    2566:	e7ab      	b.n	24c0 <isr_rx+0x338>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2568:	7f6b      	ldrb	r3, [r5, #29]
    256a:	e7d5      	b.n	2518 <isr_rx+0x390>
		radio_tmr_tifs_set(EVENT_IFS_US);
    256c:	2096      	movs	r0, #150	; 0x96
    256e:	f016 fe55 	bl	1921c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2572:	2000      	movs	r0, #0
    2574:	f016 fd28 	bl	18fc8 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    2578:	f1b8 0f00 	cmp.w	r8, #0
	node_rx = ull_pdu_rx_alloc_peek(3);
    257c:	f04f 0003 	mov.w	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready,
    2580:	bf14      	ite	ne
    2582:	46d0      	movne	r8, sl
    2584:	f04f 08ff 	moveq.w	r8, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(3);
    2588:	f00c f942 	bl	e810 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    258c:	4607      	mov	r7, r0
    258e:	2800      	cmp	r0, #0
    2590:	f43f ae04 	beq.w	219c <isr_rx+0x14>
	ull_pdu_rx_alloc();
    2594:	f00c f95a 	bl	e84c <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    2598:	f64f 73ff 	movw	r3, #65535	; 0xffff
    259c:	80fb      	strh	r3, [r7, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    259e:	2305      	movs	r3, #5
    25a0:	713b      	strb	r3, [r7, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    25a2:	2e00      	cmp	r6, #0
    25a4:	d15d      	bne.n	2662 <isr_rx+0x4da>
    25a6:	237f      	movs	r3, #127	; 0x7f
    25a8:	763b      	strb	r3, [r7, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
    25aa:	2300      	movs	r3, #0
	ull_rx_put(node_rx->hdr.link, node_rx);
    25ac:	4639      	mov	r1, r7
	node_rx->hdr.rx_ftr.direct = dir_report;
    25ae:	76fb      	strb	r3, [r7, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
    25b0:	6838      	ldr	r0, [r7, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
    25b2:	f887 801a 	strb.w	r8, [r7, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    25b6:	f00c f95f 	bl	e878 <ull_rx_put>
	ull_rx_sched();
    25ba:	f00c f96d 	bl	e898 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    25be:	f016 fcff 	bl	18fc0 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    25c2:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    25c4:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    25c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    25ca:	7832      	ldrb	r2, [r6, #0]
    25cc:	01db      	lsls	r3, r3, #7
    25ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
    25d2:	f043 0303 	orr.w	r3, r3, #3
    25d6:	4313      	orrs	r3, r2
    25d8:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    25da:	230c      	movs	r3, #12
    25dc:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    25de:	4650      	mov	r0, sl
    25e0:	f013 fd64 	bl	160ac <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    25e4:	7de3      	ldrb	r3, [r4, #23]
    25e6:	079f      	lsls	r7, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    25e8:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    25ea:	d544      	bpl.n	2676 <isr_rx+0x4ee>
    25ec:	2800      	cmp	r0, #0
    25ee:	d042      	beq.n	2676 <isr_rx+0x4ee>
			pdu_tx->tx_addr = 1;
    25f0:	7833      	ldrb	r3, [r6, #0]
    25f2:	4630      	mov	r0, r6
    25f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    25f8:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    25fc:	2206      	movs	r2, #6
    25fe:	f01b f903 	bl	1d808 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    2602:	2206      	movs	r2, #6
    2604:	f105 011e 	add.w	r1, r5, #30
    2608:	f106 0008 	add.w	r0, r6, #8
    260c:	f01b f8fc 	bl	1d808 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    2610:	4630      	mov	r0, r6
    2612:	f016 fc5b 	bl	18ecc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    2616:	f016 fc9b 	bl	18f50 <radio_is_ready>
    261a:	2800      	cmp	r0, #0
    261c:	d13a      	bne.n	2694 <isr_rx+0x50c>
		radio_tmr_end_capture();
    261e:	f016 ff09 	bl	19434 <radio_tmr_end_capture>
		lll->state = 1U;
    2622:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    2624:	482e      	ldr	r0, [pc, #184]	; (26e0 <isr_rx+0x558>)
		lll->state = 1U;
    2626:	f043 0301 	orr.w	r3, r3, #1
    262a:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    262c:	4621      	mov	r1, r4
    262e:	f016 fb6d 	bl	18d0c <radio_isr_set>
		if (!err) {
    2632:	e6a3      	b.n	237c <isr_rx+0x1f4>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    2634:	f105 0b1e 	add.w	fp, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    2638:	aa05      	add	r2, sp, #20
    263a:	4659      	mov	r1, fp
    263c:	4638      	mov	r0, r7
    263e:	f013 fe85 	bl	1634c <ull_filter_lll_rl_addr_allowed>
    2642:	2800      	cmp	r0, #0
    2644:	f43f aef8 	beq.w	2438 <isr_rx+0x2b0>
	return ((lll->adv_addr_type == addr_type) &&
    2648:	7de3      	ldrb	r3, [r4, #23]
    264a:	f003 0301 	and.w	r3, r3, #1
    264e:	42bb      	cmp	r3, r7
    2650:	d03c      	beq.n	26cc <isr_rx+0x544>
    2652:	464b      	mov	r3, r9
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2654:	7f29      	ldrb	r1, [r5, #28]
    2656:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & 0x01) != 0U) ||
    265a:	2b00      	cmp	r3, #0
    265c:	f47f adef 	bne.w	223e <isr_rx+0xb6>
    2660:	e6ed      	b.n	243e <isr_rx+0x2b6>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2662:	f016 fd71 	bl	19148 <radio_rssi_get>
    2666:	b2c3      	uxtb	r3, r0
    2668:	e79e      	b.n	25a8 <isr_rx+0x420>
			init_tx_addr = lll->init_addr_type;
    266a:	7da6      	ldrb	r6, [r4, #22]
			init_addr = lll->init_addr;
    266c:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    2670:	f3c6 1680 	ubfx	r6, r6, #6, #1
			init_addr = lll->init_addr;
    2674:	e61e      	b.n	22b4 <isr_rx+0x12c>
			pdu_tx->tx_addr = lll->init_addr_type;
    2676:	7da3      	ldrb	r3, [r4, #22]
    2678:	7832      	ldrb	r2, [r6, #0]
    267a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    267e:	4630      	mov	r0, r6
    2680:	f363 1286 	bfi	r2, r3, #6, #1
    2684:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    2688:	f104 0119 	add.w	r1, r4, #25
    268c:	2206      	movs	r2, #6
    268e:	f01b f8bb 	bl	1d808 <memcpy>
    2692:	e7b6      	b.n	2602 <isr_rx+0x47a>
		LL_ASSERT(!radio_is_ready());
    2694:	4a13      	ldr	r2, [pc, #76]	; (26e4 <isr_rx+0x55c>)
    2696:	4914      	ldr	r1, [pc, #80]	; (26e8 <isr_rx+0x560>)
    2698:	4814      	ldr	r0, [pc, #80]	; (26ec <isr_rx+0x564>)
    269a:	f240 4326 	movw	r3, #1062	; 0x426
    269e:	f019 fdfd 	bl	1c29c <printk>
    26a2:	4040      	eors	r0, r0
    26a4:	f380 8811 	msr	BASEPRI, r0
    26a8:	f04f 0003 	mov.w	r0, #3
    26ac:	df02      	svc	2
    26ae:	e7b6      	b.n	261e <isr_rx+0x496>
		LL_ASSERT(!radio_is_ready());
    26b0:	4a0c      	ldr	r2, [pc, #48]	; (26e4 <isr_rx+0x55c>)
    26b2:	490d      	ldr	r1, [pc, #52]	; (26e8 <isr_rx+0x560>)
    26b4:	480d      	ldr	r0, [pc, #52]	; (26ec <isr_rx+0x564>)
    26b6:	f44f 7368 	mov.w	r3, #928	; 0x3a0
    26ba:	f019 fdef 	bl	1c29c <printk>
    26be:	4040      	eors	r0, r0
    26c0:	f380 8811 	msr	BASEPRI, r0
    26c4:	f04f 0003 	mov.w	r0, #3
    26c8:	df02      	svc	2
    26ca:	e60d      	b.n	22e8 <isr_rx+0x160>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    26cc:	4659      	mov	r1, fp
    26ce:	2206      	movs	r2, #6
    26d0:	f104 0008 	add.w	r0, r4, #8
    26d4:	f01b f887 	bl	1d7e6 <memcmp>
	return ((lll->adv_addr_type == addr_type) &&
    26d8:	fab0 f380 	clz	r3, r0
    26dc:	095b      	lsrs	r3, r3, #5
    26de:	e7b9      	b.n	2654 <isr_rx+0x4cc>
    26e0:	00017b09 	.word	0x00017b09
    26e4:	00021398 	.word	0x00021398
    26e8:	0002134c 	.word	0x0002134c
    26ec:	0002060c 	.word	0x0002060c

000026f0 <buttonA_pressed>:
	gpio_pin_set(dev, PIN, (int)led_is_on);
}

static void buttonA_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	button_is_pressed = true;
    26f0:	4b01      	ldr	r3, [pc, #4]	; (26f8 <buttonA_pressed+0x8>)
    26f2:	2201      	movs	r2, #1
    26f4:	701a      	strb	r2, [r3, #0]
}
    26f6:	4770      	bx	lr
    26f8:	2000282c 	.word	0x2000282c

000026fc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    26fc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    26fe:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2700:	b08a      	sub	sp, #40	; 0x28
    2702:	4604      	mov	r4, r0
    2704:	460e      	mov	r6, r1
    2706:	ad07      	add	r5, sp, #28
    2708:	2b03      	cmp	r3, #3
    270a:	d820      	bhi.n	274e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    270c:	e8df f003 	tbb	[pc, r3]
    2710:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2714:	4911      	ldr	r1, [pc, #68]	; (275c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2716:	4628      	mov	r0, r5
    2718:	f01b f82d 	bl	1d776 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    271c:	7863      	ldrb	r3, [r4, #1]
    271e:	9304      	str	r3, [sp, #16]
    2720:	78a3      	ldrb	r3, [r4, #2]
    2722:	9303      	str	r3, [sp, #12]
    2724:	78e3      	ldrb	r3, [r4, #3]
    2726:	9302      	str	r3, [sp, #8]
    2728:	7923      	ldrb	r3, [r4, #4]
    272a:	9301      	str	r3, [sp, #4]
    272c:	7963      	ldrb	r3, [r4, #5]
    272e:	9300      	str	r3, [sp, #0]
    2730:	4a0b      	ldr	r2, [pc, #44]	; (2760 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    2732:	79a3      	ldrb	r3, [r4, #6]
    2734:	9505      	str	r5, [sp, #20]
    2736:	211e      	movs	r1, #30
    2738:	4630      	mov	r0, r6
    273a:	f019 fdbc 	bl	1c2b6 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    273e:	b00a      	add	sp, #40	; 0x28
    2740:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2742:	4908      	ldr	r1, [pc, #32]	; (2764 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    2744:	e7e7      	b.n	2716 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    2746:	4908      	ldr	r1, [pc, #32]	; (2768 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    2748:	e7e5      	b.n	2716 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    274a:	4908      	ldr	r1, [pc, #32]	; (276c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    274c:	e7e3      	b.n	2716 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    274e:	4a08      	ldr	r2, [pc, #32]	; (2770 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    2750:	210a      	movs	r1, #10
    2752:	4628      	mov	r0, r5
    2754:	f019 fdaf 	bl	1c2b6 <snprintk>
		break;
    2758:	e7e0      	b.n	271c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    275a:	bf00      	nop
    275c:	0002175c 	.word	0x0002175c
    2760:	0002177e 	.word	0x0002177e
    2764:	00021763 	.word	0x00021763
    2768:	0002176a 	.word	0x0002176a
    276c:	00021774 	.word	0x00021774
    2770:	00022cfa 	.word	0x00022cfa

00002774 <connected>:
		times = TIMES_TILL_OFF;
	}
}

static void connected(struct bt_conn *conn, uint8_t err)
{
    2774:	b530      	push	{r4, r5, lr}
    2776:	4605      	mov	r5, r0
    2778:	b089      	sub	sp, #36	; 0x24
	if (err) {
    277a:	460c      	mov	r4, r1
    277c:	b129      	cbz	r1, 278a <connected+0x16>
		printk("Connection failed (err 0x%02x)\n", err);
    277e:	4812      	ldr	r0, [pc, #72]	; (27c8 <connected+0x54>)
	strcpy(connected_to, result);

	printk("connected to %s\n", result);
	//bt_le_scan_stop();
	//bt_le_set_auto_conn(bt_conn_get_dst(conn), NULL);
}
    2780:	b009      	add	sp, #36	; 0x24
    2782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Connection failed (err 0x%02x)\n", err);
    2786:	f019 bd89 	b.w	1c29c <printk>
	printk("Connected\n");
    278a:	4810      	ldr	r0, [pc, #64]	; (27cc <connected+0x58>)
    278c:	f019 fd86 	bl	1c29c <printk>
	int er = bt_le_adv_stop();
    2790:	f004 fdee 	bl	7370 <bt_le_adv_stop>
	if (er) {
    2794:	b198      	cbz	r0, 27be <connected+0x4a>
		printk("Advertising failed to stop (err %d)\n", err);
    2796:	480e      	ldr	r0, [pc, #56]	; (27d0 <connected+0x5c>)
    2798:	4621      	mov	r1, r4
    279a:	f019 fd7f 	bl	1c29c <printk>
	bt_addr_le_to_str(bt_conn_get_dst(conn), result, BT_ADDR_LE_STR_LEN);
    279e:	4628      	mov	r0, r5
    27a0:	f01b fc6e 	bl	1e080 <bt_conn_get_dst>
    27a4:	4669      	mov	r1, sp
    27a6:	f7ff ffa9 	bl	26fc <bt_addr_le_to_str.constprop.0.isra.0>
	strcpy(connected_to, result);
    27aa:	4669      	mov	r1, sp
    27ac:	4809      	ldr	r0, [pc, #36]	; (27d4 <connected+0x60>)
    27ae:	f01a ffe2 	bl	1d776 <strcpy>
	printk("connected to %s\n", result);
    27b2:	4809      	ldr	r0, [pc, #36]	; (27d8 <connected+0x64>)
    27b4:	4669      	mov	r1, sp
    27b6:	f019 fd71 	bl	1c29c <printk>
}
    27ba:	b009      	add	sp, #36	; 0x24
    27bc:	bd30      	pop	{r4, r5, pc}
		printk("advertising stopped ... \n");
    27be:	4807      	ldr	r0, [pc, #28]	; (27dc <connected+0x68>)
    27c0:	f019 fd6c 	bl	1c29c <printk>
    27c4:	e7eb      	b.n	279e <connected+0x2a>
    27c6:	bf00      	nop
    27c8:	000217a1 	.word	0x000217a1
    27cc:	000217c1 	.word	0x000217c1
    27d0:	000217cc 	.word	0x000217cc
    27d4:	2000282d 	.word	0x2000282d
    27d8:	0002180b 	.word	0x0002180b
    27dc:	000217f1 	.word	0x000217f1

000027e0 <scan_cb>:
{
    27e0:	b500      	push	{lr}
    27e2:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(addr, result, BT_ADDR_LE_STR_LEN);
    27e4:	4669      	mov	r1, sp
    27e6:	f7ff ff89 	bl	26fc <bt_addr_le_to_str.constprop.0.isra.0>
	if (!strcmp(result, connected_to)) {
    27ea:	4905      	ldr	r1, [pc, #20]	; (2800 <scan_cb+0x20>)
    27ec:	4668      	mov	r0, sp
    27ee:	f01a ffee 	bl	1d7ce <strcmp>
    27f2:	b910      	cbnz	r0, 27fa <scan_cb+0x1a>
		times = TIMES_TILL_OFF;
    27f4:	4b03      	ldr	r3, [pc, #12]	; (2804 <scan_cb+0x24>)
    27f6:	2264      	movs	r2, #100	; 0x64
    27f8:	601a      	str	r2, [r3, #0]
}
    27fa:	b009      	add	sp, #36	; 0x24
    27fc:	f85d fb04 	ldr.w	pc, [sp], #4
    2800:	2000282d 	.word	0x2000282d
    2804:	20000158 	.word	0x20000158

00002808 <initLED>:
{
    2808:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    280a:	4808      	ldr	r0, [pc, #32]	; (282c <initLED+0x24>)
	dev = device_get_binding(LED0);
    280c:	4c08      	ldr	r4, [pc, #32]	; (2830 <initLED+0x28>)
    280e:	f018 f977 	bl	1ab00 <z_impl_device_get_binding>
    2812:	6020      	str	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    2814:	210f      	movs	r1, #15
    2816:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
    281a:	f019 fce3 	bl	1c1e4 <z_impl_gpio_pin_configure.isra.0>
	gpio_pin_set(dev, PIN, (int)led_is_on);
    281e:	4b05      	ldr	r3, [pc, #20]	; (2834 <initLED+0x2c>)
    2820:	6820      	ldr	r0, [r4, #0]
    2822:	7819      	ldrb	r1, [r3, #0]
}
    2824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_pin_set(dev, PIN, (int)led_is_on);
    2828:	f019 bccd 	b.w	1c1c6 <gpio_pin_set.constprop.0.isra.0>
    282c:	0002181c 	.word	0x0002181c
    2830:	200011ac 	.word	0x200011ac
    2834:	2000284b 	.word	0x2000284b

00002838 <ledon>:
	led_is_on = true;
    2838:	4b03      	ldr	r3, [pc, #12]	; (2848 <ledon+0x10>)
    283a:	2101      	movs	r1, #1
    283c:	7019      	strb	r1, [r3, #0]
	gpio_pin_set(dev, PIN, (int)led_is_on);
    283e:	4b03      	ldr	r3, [pc, #12]	; (284c <ledon+0x14>)
    2840:	6818      	ldr	r0, [r3, #0]
    2842:	f019 bcc0 	b.w	1c1c6 <gpio_pin_set.constprop.0.isra.0>
    2846:	bf00      	nop
    2848:	2000284b 	.word	0x2000284b
    284c:	200011ac 	.word	0x200011ac

00002850 <ledoff>:
	led_is_on = false;
    2850:	4b03      	ldr	r3, [pc, #12]	; (2860 <ledoff+0x10>)
    2852:	2100      	movs	r1, #0
    2854:	7019      	strb	r1, [r3, #0]
	gpio_pin_set(dev, PIN, (int)led_is_on);
    2856:	4b03      	ldr	r3, [pc, #12]	; (2864 <ledoff+0x14>)
    2858:	6818      	ldr	r0, [r3, #0]
    285a:	f019 bcb4 	b.w	1c1c6 <gpio_pin_set.constprop.0.isra.0>
    285e:	bf00      	nop
    2860:	2000284b 	.word	0x2000284b
    2864:	200011ac 	.word	0x200011ac

00002868 <initButton>:
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	4c12      	ldr	r4, [pc, #72]	; (28b4 <initButton+0x4c>)
    286c:	f240 1211 	movw	r2, #273	; 0x111
    2870:	2102      	movs	r1, #2
    2872:	4620      	mov	r0, r4
    2874:	f019 fcb6 	bl	1c1e4 <z_impl_gpio_pin_configure.isra.0>
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    2878:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
    287a:	68a5      	ldr	r5, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    287c:	681b      	ldr	r3, [r3, #0]
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    287e:	69ae      	ldr	r6, [r5, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    2880:	f013 0f04 	tst.w	r3, #4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    2884:	bf0c      	ite	eq
    2886:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    288a:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    288e:	2102      	movs	r1, #2
    2890:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    2894:	4620      	mov	r0, r4
    2896:	47b0      	blx	r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2898:	4907      	ldr	r1, [pc, #28]	; (28b8 <initButton+0x50>)
    289a:	4b08      	ldr	r3, [pc, #32]	; (28bc <initButton+0x54>)
    289c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    289e:	2304      	movs	r3, #4
    28a0:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    28a2:	69eb      	ldr	r3, [r5, #28]
    28a4:	b123      	cbz	r3, 28b0 <initButton+0x48>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    28a6:	4620      	mov	r0, r4
    28a8:	2201      	movs	r2, #1
}
    28aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    28ae:	4718      	bx	r3
    28b0:	bd70      	pop	{r4, r5, r6, pc}
    28b2:	bf00      	nop
    28b4:	20000680 	.word	0x20000680
    28b8:	200011a0 	.word	0x200011a0
    28bc:	000026f1 	.word	0x000026f1

000028c0 <main>:
	.connected = connected,
	.disconnected = disconnected,
};

void main(void)
{
    28c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	printk("Starting Scanner/Advertiser Demo\n");
    28c2:	482e      	ldr	r0, [pc, #184]	; (297c <main+0xbc>)
{
    28c4:	b089      	sub	sp, #36	; 0x24
	printk("Starting Scanner/Advertiser Demo\n");
    28c6:	f019 fce9 	bl	1c29c <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    28ca:	2000      	movs	r0, #0
    28cc:	f004 f808 	bl	68e0 <bt_enable>
	if (err) {
    28d0:	4601      	mov	r1, r0
    28d2:	b128      	cbz	r0, 28e0 <main+0x20>
		printk("Bluetooth init failed (err %d)\n", err);
    28d4:	482a      	ldr	r0, [pc, #168]	; (2980 <main+0xc0>)
			}
		}

		times--;
	}
}
    28d6:	b009      	add	sp, #36	; 0x24
    28d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    28dc:	f019 bcde 	b.w	1c29c <printk>
	initLED();
    28e0:	f7ff ff92 	bl	2808 <initLED>
	initButton();
    28e4:	f7ff ffc0 	bl	2868 <initButton>
	printk("Bluetooth initialized\n");
    28e8:	4826      	ldr	r0, [pc, #152]	; (2984 <main+0xc4>)
		if (times <= 0) {
    28ea:	4e27      	ldr	r6, [pc, #156]	; (2988 <main+0xc8>)
		if (button_is_pressed) {
    28ec:	4f27      	ldr	r7, [pc, #156]	; (298c <main+0xcc>)
	printk("Bluetooth initialized\n");
    28ee:	f019 fcd5 	bl	1c29c <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
    28f2:	4927      	ldr	r1, [pc, #156]	; (2990 <main+0xd0>)
    28f4:	4827      	ldr	r0, [pc, #156]	; (2994 <main+0xd4>)
    28f6:	f004 ffaf 	bl	7858 <bt_le_scan_start>
	bt_conn_cb_register(&conn_callbacks);
    28fa:	4827      	ldr	r0, [pc, #156]	; (2998 <main+0xd8>)
    28fc:	f005 f972 	bl	7be4 <bt_conn_cb_register>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    2900:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2904:	2100      	movs	r1, #0
    2906:	f019 f94b 	bl	1bba0 <z_impl_k_sleep>
		if (times <= 0) {
    290a:	6833      	ldr	r3, [r6, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	dc2a      	bgt.n	2966 <main+0xa6>
			ledoff();
    2910:	f7ff ff9e 	bl	2850 <ledoff>
		if (button_is_pressed) {
    2914:	783b      	ldrb	r3, [r7, #0]
    2916:	b313      	cbz	r3, 295e <main+0x9e>
			err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2918:	4d20      	ldr	r5, [pc, #128]	; (299c <main+0xdc>)
    291a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    291c:	ac03      	add	r4, sp, #12
    291e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			button_is_pressed = false;
    2920:	f04f 0c00 	mov.w	ip, #0
			err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2924:	682b      	ldr	r3, [r5, #0]
    2926:	6023      	str	r3, [r4, #0]
    2928:	491d      	ldr	r1, [pc, #116]	; (29a0 <main+0xe0>)
    292a:	f8cd c000 	str.w	ip, [sp]
    292e:	4663      	mov	r3, ip
    2930:	2201      	movs	r2, #1
    2932:	a803      	add	r0, sp, #12
			button_is_pressed = false;
    2934:	f887 c000 	strb.w	ip, [r7]
			err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2938:	f004 fd0c 	bl	7354 <bt_le_adv_start>
			if (err) {
    293c:	4601      	mov	r1, r0
    293e:	b1a8      	cbz	r0, 296c <main+0xac>
				printk("Advertising failed to start (err %d)\n", err);
    2940:	4818      	ldr	r0, [pc, #96]	; (29a4 <main+0xe4>)
    2942:	f019 fcab 	bl	1c29c <printk>
    2946:	2100      	movs	r1, #0
    2948:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
    294c:	f019 f928 	bl	1bba0 <z_impl_k_sleep>
			err = bt_le_adv_stop();
    2950:	f004 fd0e 	bl	7370 <bt_le_adv_stop>
			if (err) {
    2954:	4601      	mov	r1, r0
    2956:	b168      	cbz	r0, 2974 <main+0xb4>
				printk("Advertising failed to stop (err %d)\n", err);
    2958:	4813      	ldr	r0, [pc, #76]	; (29a8 <main+0xe8>)
    295a:	f019 fc9f 	bl	1c29c <printk>
		times--;
    295e:	6833      	ldr	r3, [r6, #0]
    2960:	3b01      	subs	r3, #1
    2962:	6033      	str	r3, [r6, #0]
		k_msleep(10);
    2964:	e7cc      	b.n	2900 <main+0x40>
			ledon();
    2966:	f7ff ff67 	bl	2838 <ledon>
    296a:	e7d3      	b.n	2914 <main+0x54>
				printk("advertising started ... \n");
    296c:	480f      	ldr	r0, [pc, #60]	; (29ac <main+0xec>)
    296e:	f019 fc95 	bl	1c29c <printk>
    2972:	e7e8      	b.n	2946 <main+0x86>
				printk("advertising stopped ... \n");
    2974:	480e      	ldr	r0, [pc, #56]	; (29b0 <main+0xf0>)
    2976:	f019 fc91 	bl	1c29c <printk>
    297a:	e7f0      	b.n	295e <main+0x9e>
    297c:	00021823 	.word	0x00021823
    2980:	00021845 	.word	0x00021845
    2984:	00021865 	.word	0x00021865
    2988:	20000158 	.word	0x20000158
    298c:	2000282c 	.word	0x2000282c
    2990:	000027e1 	.word	0x000027e1
    2994:	20000144 	.word	0x20000144
    2998:	20000130 	.word	0x20000130
    299c:	00020140 	.word	0x00020140
    29a0:	000201e8 	.word	0x000201e8
    29a4:	0002187c 	.word	0x0002187c
    29a8:	000217cc 	.word	0x000217cc
    29ac:	000218a2 	.word	0x000218a2
    29b0:	000217f1 	.word	0x000217f1

000029b4 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    29b4:	4b01      	ldr	r3, [pc, #4]	; (29bc <__printk_hook_install+0x8>)
    29b6:	6018      	str	r0, [r3, #0]
}
    29b8:	4770      	bx	lr
    29ba:	bf00      	nop
    29bc:	2000015c 	.word	0x2000015c

000029c0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    29c0:	b530      	push	{r4, r5, lr}
    29c2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    29c4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    29c8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    29ca:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    29cc:	a901      	add	r1, sp, #4
    29ce:	4805      	ldr	r0, [pc, #20]	; (29e4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    29d0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    29d2:	f000 f8e9 	bl	2ba8 <cbvprintf>

	if (ctx.count < ctx.max) {
    29d6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    29da:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    29dc:	bfb8      	it	lt
    29de:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    29e0:	b005      	add	sp, #20
    29e2:	bd30      	pop	{r4, r5, pc}
    29e4:	0001c277 	.word	0x0001c277

000029e8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    29e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    29ec:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    29f0:	f019 0808 	ands.w	r8, r9, #8
{
    29f4:	4604      	mov	r4, r0
    29f6:	4693      	mov	fp, r2
	if (processing) {
    29f8:	d00d      	beq.n	2a16 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    29fa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    29fc:	bf0c      	ite	eq
    29fe:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2a02:	f049 0920 	orrne.w	r9, r9, #32
    2a06:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2a0a:	f38b 8811 	msr	BASEPRI, fp
    2a0e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a16:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    2a1a:	2902      	cmp	r1, #2
    2a1c:	d107      	bne.n	2a2e <process_event+0x46>
			evt = process_recheck(mgr);
    2a1e:	4620      	mov	r0, r4
    2a20:	f019 fc56 	bl	1c2d0 <process_recheck>
		if (evt == EVT_NOP) {
    2a24:	2800      	cmp	r0, #0
    2a26:	d0f0      	beq.n	2a0a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2a28:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a2a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    2a2c:	d14e      	bne.n	2acc <process_event+0xe4>
			res = mgr->last_res;
    2a2e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a30:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2a32:	2f00      	cmp	r7, #0
    2a34:	da15      	bge.n	2a62 <process_event+0x7a>
		*clients = mgr->clients;
    2a36:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a38:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    2a3c:	e9c4 8800 	strd	r8, r8, [r4]
    2a40:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2a44:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    2a46:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2a48:	8b21      	ldrh	r1, [r4, #24]
    2a4a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2a4e:	45ca      	cmp	sl, r9
    2a50:	d002      	beq.n	2a58 <process_event+0x70>
		if (do_monitors
    2a52:	68a3      	ldr	r3, [r4, #8]
    2a54:	2b00      	cmp	r3, #0
    2a56:	d15a      	bne.n	2b0e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    2a58:	b90d      	cbnz	r5, 2a5e <process_event+0x76>
		    || (transit != NULL)) {
    2a5a:	2e00      	cmp	r6, #0
    2a5c:	d071      	beq.n	2b42 <process_event+0x15a>
    2a5e:	2300      	movs	r3, #0
    2a60:	e056      	b.n	2b10 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a62:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2a66:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2a68:	2a01      	cmp	r2, #1
    2a6a:	d81e      	bhi.n	2aaa <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a6c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2a70:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2a72:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a74:	b289      	uxth	r1, r1
    2a76:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2a7a:	d10a      	bne.n	2a92 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a7c:	b13d      	cbz	r5, 2a8e <process_event+0xa6>
    2a7e:	8b63      	ldrh	r3, [r4, #26]
    2a80:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    2a82:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    2a84:	3301      	adds	r3, #1
    2a86:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a88:	2a00      	cmp	r2, #0
    2a8a:	d1fa      	bne.n	2a82 <process_event+0x9a>
    2a8c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2a8e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2a92:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2a94:	4620      	mov	r0, r4
    2a96:	f019 fc1b 	bl	1c2d0 <process_recheck>
    2a9a:	4606      	mov	r6, r0
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d0d3      	beq.n	2a48 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2aa0:	8b23      	ldrh	r3, [r4, #24]
    2aa2:	f043 0320 	orr.w	r3, r3, #32
    2aa6:	8323      	strh	r3, [r4, #24]
    2aa8:	e7cd      	b.n	2a46 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2aaa:	2b04      	cmp	r3, #4
    2aac:	d10c      	bne.n	2ac8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2aae:	f021 0107 	bic.w	r1, r1, #7
    2ab2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2ab4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2ab6:	4620      	mov	r0, r4
    2ab8:	f019 fc0a 	bl	1c2d0 <process_recheck>
    2abc:	4605      	mov	r5, r0
    2abe:	2800      	cmp	r0, #0
    2ac0:	d0c1      	beq.n	2a46 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2ac2:	f041 0120 	orr.w	r1, r1, #32
    2ac6:	8321      	strh	r1, [r4, #24]
    2ac8:	2500      	movs	r5, #0
    2aca:	e7bc      	b.n	2a46 <process_event+0x5e>
		} else if (evt == EVT_START) {
    2acc:	2803      	cmp	r0, #3
    2ace:	d109      	bne.n	2ae4 <process_event+0xfc>
			transit = mgr->transitions->start;
    2ad0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ad2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    2ad6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2ad8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2adc:	8323      	strh	r3, [r4, #24]
}
    2ade:	2500      	movs	r5, #0
		res = 0;
    2ae0:	462f      	mov	r7, r5
    2ae2:	e7b1      	b.n	2a48 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    2ae4:	2804      	cmp	r0, #4
    2ae6:	d106      	bne.n	2af6 <process_event+0x10e>
			transit = mgr->transitions->stop;
    2ae8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2aea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    2aee:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2af0:	f043 0304 	orr.w	r3, r3, #4
    2af4:	e7f2      	b.n	2adc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    2af6:	2805      	cmp	r0, #5
    2af8:	d106      	bne.n	2b08 <process_event+0x120>
			transit = mgr->transitions->reset;
    2afa:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2afc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    2b00:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2b02:	f043 0305 	orr.w	r3, r3, #5
    2b06:	e7e9      	b.n	2adc <process_event+0xf4>
    2b08:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2b0a:	462e      	mov	r6, r5
    2b0c:	e7e8      	b.n	2ae0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    2b0e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2b10:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2b14:	8321      	strh	r1, [r4, #24]
    2b16:	f38b 8811 	msr	BASEPRI, fp
    2b1a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2b1e:	b9fb      	cbnz	r3, 2b60 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    2b20:	bb85      	cbnz	r5, 2b84 <process_event+0x19c>
			if (transit != NULL) {
    2b22:	b116      	cbz	r6, 2b2a <process_event+0x142>
				transit(mgr, transition_complete);
    2b24:	491f      	ldr	r1, [pc, #124]	; (2ba4 <process_event+0x1bc>)
    2b26:	4620      	mov	r0, r4
    2b28:	47b0      	blx	r6
	__asm__ volatile(
    2b2a:	f04f 0320 	mov.w	r3, #32
    2b2e:	f3ef 8b11 	mrs	fp, BASEPRI
    2b32:	f383 8811 	msr	BASEPRI, r3
    2b36:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2b3a:	8b23      	ldrh	r3, [r4, #24]
    2b3c:	f023 0308 	bic.w	r3, r3, #8
    2b40:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2b42:	8b23      	ldrh	r3, [r4, #24]
    2b44:	06da      	lsls	r2, r3, #27
    2b46:	d525      	bpl.n	2b94 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2b48:	f023 0310 	bic.w	r3, r3, #16
    2b4c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2b4e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2b50:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    2b54:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    2b58:	2900      	cmp	r1, #0
    2b5a:	f47f af5e 	bne.w	2a1a <process_event+0x32>
out:
    2b5e:	e754      	b.n	2a0a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2b60:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b62:	2900      	cmp	r1, #0
    2b64:	d0dc      	beq.n	2b20 <process_event+0x138>
	return node->next;
    2b66:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    2b6a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    2b6e:	463b      	mov	r3, r7
    2b70:	4652      	mov	r2, sl
    2b72:	4620      	mov	r0, r4
    2b74:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b76:	f1b9 0f00 	cmp.w	r9, #0
    2b7a:	d0d1      	beq.n	2b20 <process_event+0x138>
    2b7c:	4649      	mov	r1, r9
    2b7e:	f8d9 9000 	ldr.w	r9, [r9]
    2b82:	e7f2      	b.n	2b6a <process_event+0x182>
    2b84:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2b86:	463b      	mov	r3, r7
    2b88:	4652      	mov	r2, sl
    2b8a:	4620      	mov	r0, r4
    2b8c:	682d      	ldr	r5, [r5, #0]
    2b8e:	f019 fbbb 	bl	1c308 <notify_one>
    2b92:	e7c5      	b.n	2b20 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2b94:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2b98:	bf1e      	ittt	ne
    2b9a:	f023 0320 	bicne.w	r3, r3, #32
    2b9e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    2ba0:	2102      	movne	r1, #2
    2ba2:	e7d5      	b.n	2b50 <process_event+0x168>
    2ba4:	0001c335 	.word	0x0001c335

00002ba8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bac:	b091      	sub	sp, #68	; 0x44
    2bae:	468b      	mov	fp, r1
    2bb0:	9002      	str	r0, [sp, #8]
    2bb2:	4692      	mov	sl, r2
    2bb4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2bb6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2bb8:	f89a 0000 	ldrb.w	r0, [sl]
    2bbc:	b908      	cbnz	r0, 2bc2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2bbe:	4628      	mov	r0, r5
    2bc0:	e35f      	b.n	3282 <cbvprintf+0x6da>
		if (*fp != '%') {
    2bc2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2bc4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    2bc8:	d007      	beq.n	2bda <cbvprintf+0x32>
			OUTC('%');
    2bca:	9b02      	ldr	r3, [sp, #8]
    2bcc:	4659      	mov	r1, fp
    2bce:	4798      	blx	r3
    2bd0:	2800      	cmp	r0, #0
    2bd2:	f2c0 8356 	blt.w	3282 <cbvprintf+0x6da>
    2bd6:	3501      	adds	r5, #1
			break;
    2bd8:	e212      	b.n	3000 <cbvprintf+0x458>
		} state = {
    2bda:	2218      	movs	r2, #24
    2bdc:	2100      	movs	r1, #0
    2bde:	a80a      	add	r0, sp, #40	; 0x28
    2be0:	f01a fe3d 	bl	1d85e <memset>
	if (*sp == '%') {
    2be4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2be8:	2b25      	cmp	r3, #37	; 0x25
    2bea:	d078      	beq.n	2cde <cbvprintf+0x136>
    2bec:	2200      	movs	r2, #0
    2bee:	4610      	mov	r0, r2
    2bf0:	4696      	mov	lr, r2
    2bf2:	4694      	mov	ip, r2
    2bf4:	4616      	mov	r6, r2
    2bf6:	4639      	mov	r1, r7
		switch (*sp) {
    2bf8:	f817 3b01 	ldrb.w	r3, [r7], #1
    2bfc:	2b2b      	cmp	r3, #43	; 0x2b
    2bfe:	f000 809d 	beq.w	2d3c <cbvprintf+0x194>
    2c02:	f200 8094 	bhi.w	2d2e <cbvprintf+0x186>
    2c06:	2b20      	cmp	r3, #32
    2c08:	f000 809b 	beq.w	2d42 <cbvprintf+0x19a>
    2c0c:	2b23      	cmp	r3, #35	; 0x23
    2c0e:	f000 809b 	beq.w	2d48 <cbvprintf+0x1a0>
    2c12:	b12e      	cbz	r6, 2c20 <cbvprintf+0x78>
    2c14:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    2c18:	f046 0604 	orr.w	r6, r6, #4
    2c1c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2c20:	f1bc 0f00 	cmp.w	ip, #0
    2c24:	d005      	beq.n	2c32 <cbvprintf+0x8a>
    2c26:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    2c2a:	f046 0608 	orr.w	r6, r6, #8
    2c2e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2c32:	f1be 0f00 	cmp.w	lr, #0
    2c36:	d005      	beq.n	2c44 <cbvprintf+0x9c>
    2c38:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    2c3c:	f046 0610 	orr.w	r6, r6, #16
    2c40:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2c44:	b128      	cbz	r0, 2c52 <cbvprintf+0xaa>
    2c46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    2c4a:	f040 0020 	orr.w	r0, r0, #32
    2c4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    2c52:	b12a      	cbz	r2, 2c60 <cbvprintf+0xb8>
    2c54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2c5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    2c60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2c64:	f002 0044 	and.w	r0, r2, #68	; 0x44
    2c68:	2844      	cmp	r0, #68	; 0x44
    2c6a:	d103      	bne.n	2c74 <cbvprintf+0xcc>
		conv->flag_zero = false;
    2c6c:	f36f 1286 	bfc	r2, #6, #1
    2c70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    2c74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    2c78:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    2c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2c7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    2c82:	d17b      	bne.n	2d7c <cbvprintf+0x1d4>
		conv->width_star = true;
    2c84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2c88:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    2c8c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2c8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    2c92:	781a      	ldrb	r2, [r3, #0]
    2c94:	2a2e      	cmp	r2, #46	; 0x2e
    2c96:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2c9a:	bf0c      	ite	eq
    2c9c:	2101      	moveq	r1, #1
    2c9e:	2100      	movne	r1, #0
    2ca0:	f361 0241 	bfi	r2, r1, #1, #1
    2ca4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    2ca8:	d174      	bne.n	2d94 <cbvprintf+0x1ec>
	if (*sp == '*') {
    2caa:	785a      	ldrb	r2, [r3, #1]
    2cac:	2a2a      	cmp	r2, #42	; 0x2a
    2cae:	d06a      	beq.n	2d86 <cbvprintf+0x1de>
	++sp;
    2cb0:	3301      	adds	r3, #1
	size_t val = 0;
    2cb2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    2cb4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2cb6:	4618      	mov	r0, r3
    2cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    2cbc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2cc0:	2f09      	cmp	r7, #9
    2cc2:	f240 808e 	bls.w	2de2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    2cc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    2cca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    2ccc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    2cd0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    2cd4:	f361 0241 	bfi	r2, r1, #1, #1
    2cd8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    2cdc:	e05a      	b.n	2d94 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    2cde:	f10a 0702 	add.w	r7, sl, #2
    2ce2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    2ce6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2cea:	07d9      	lsls	r1, r3, #31
    2cec:	f140 8149 	bpl.w	2f82 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    2cf0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    2cf4:	f1b9 0f00 	cmp.w	r9, #0
    2cf8:	da07      	bge.n	2d0a <cbvprintf+0x162>
				conv->flag_dash = true;
    2cfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2cfe:	f042 0204 	orr.w	r2, r2, #4
    2d02:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    2d06:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    2d0a:	075a      	lsls	r2, r3, #29
    2d0c:	f140 8142 	bpl.w	2f94 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    2d10:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    2d14:	f1b8 0f00 	cmp.w	r8, #0
    2d18:	f280 8141 	bge.w	2f9e <cbvprintf+0x3f6>
				conv->prec_present = false;
    2d1c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2d20:	f36f 0341 	bfc	r3, #1, #1
    2d24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    2d28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2d2c:	e137      	b.n	2f9e <cbvprintf+0x3f6>
		switch (*sp) {
    2d2e:	2b2d      	cmp	r3, #45	; 0x2d
    2d30:	d00c      	beq.n	2d4c <cbvprintf+0x1a4>
    2d32:	2b30      	cmp	r3, #48	; 0x30
    2d34:	f47f af6d 	bne.w	2c12 <cbvprintf+0x6a>
			conv->flag_zero = true;
    2d38:	2201      	movs	r2, #1
	} while (loop);
    2d3a:	e75c      	b.n	2bf6 <cbvprintf+0x4e>
			conv->flag_plus = true;
    2d3c:	f04f 0c01 	mov.w	ip, #1
    2d40:	e759      	b.n	2bf6 <cbvprintf+0x4e>
			conv->flag_space = true;
    2d42:	f04f 0e01 	mov.w	lr, #1
    2d46:	e756      	b.n	2bf6 <cbvprintf+0x4e>
			conv->flag_hash = true;
    2d48:	2001      	movs	r0, #1
    2d4a:	e754      	b.n	2bf6 <cbvprintf+0x4e>
		switch (*sp) {
    2d4c:	2601      	movs	r6, #1
    2d4e:	e752      	b.n	2bf6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    2d50:	fb0c 0202 	mla	r2, ip, r2, r0
    2d54:	3a30      	subs	r2, #48	; 0x30
    2d56:	4633      	mov	r3, r6
    2d58:	461e      	mov	r6, r3
    2d5a:	f816 0b01 	ldrb.w	r0, [r6], #1
    2d5e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2d62:	2f09      	cmp	r7, #9
    2d64:	d9f4      	bls.n	2d50 <cbvprintf+0x1a8>
	if (sp != wp) {
    2d66:	4299      	cmp	r1, r3
    2d68:	d093      	beq.n	2c92 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    2d6a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    2d6e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    2d70:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2d72:	f362 0141 	bfi	r1, r2, #1, #1
    2d76:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    2d7a:	e78a      	b.n	2c92 <cbvprintf+0xea>
    2d7c:	460b      	mov	r3, r1
	size_t val = 0;
    2d7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2d80:	f04f 0c0a 	mov.w	ip, #10
    2d84:	e7e8      	b.n	2d58 <cbvprintf+0x1b0>
		conv->prec_star = true;
    2d86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2d8a:	f042 0204 	orr.w	r2, r2, #4
    2d8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    2d92:	3302      	adds	r3, #2
	switch (*sp) {
    2d94:	461f      	mov	r7, r3
    2d96:	f817 2b01 	ldrb.w	r2, [r7], #1
    2d9a:	2a6c      	cmp	r2, #108	; 0x6c
    2d9c:	d041      	beq.n	2e22 <cbvprintf+0x27a>
    2d9e:	d825      	bhi.n	2dec <cbvprintf+0x244>
    2da0:	2a68      	cmp	r2, #104	; 0x68
    2da2:	d02b      	beq.n	2dfc <cbvprintf+0x254>
    2da4:	2a6a      	cmp	r2, #106	; 0x6a
    2da6:	d046      	beq.n	2e36 <cbvprintf+0x28e>
    2da8:	2a4c      	cmp	r2, #76	; 0x4c
    2daa:	d04c      	beq.n	2e46 <cbvprintf+0x29e>
    2dac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    2dae:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    2db2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    2db6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    2dba:	2a78      	cmp	r2, #120	; 0x78
    2dbc:	f200 80d9 	bhi.w	2f72 <cbvprintf+0x3ca>
    2dc0:	2a57      	cmp	r2, #87	; 0x57
    2dc2:	d84d      	bhi.n	2e60 <cbvprintf+0x2b8>
    2dc4:	2a41      	cmp	r2, #65	; 0x41
    2dc6:	d003      	beq.n	2dd0 <cbvprintf+0x228>
    2dc8:	3a45      	subs	r2, #69	; 0x45
    2dca:	2a02      	cmp	r2, #2
    2dcc:	f200 80d1 	bhi.w	2f72 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    2dd0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2dd4:	2204      	movs	r2, #4
    2dd6:	f362 0302 	bfi	r3, r2, #0, #3
    2dda:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    2dde:	2301      	movs	r3, #1
			break;
    2de0:	e09e      	b.n	2f20 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    2de2:	fb06 2101 	mla	r1, r6, r1, r2
    2de6:	3930      	subs	r1, #48	; 0x30
    2de8:	4603      	mov	r3, r0
    2dea:	e764      	b.n	2cb6 <cbvprintf+0x10e>
	switch (*sp) {
    2dec:	2a74      	cmp	r2, #116	; 0x74
    2dee:	d026      	beq.n	2e3e <cbvprintf+0x296>
    2df0:	2a7a      	cmp	r2, #122	; 0x7a
    2df2:	d1db      	bne.n	2dac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    2df4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2df8:	2206      	movs	r2, #6
    2dfa:	e00d      	b.n	2e18 <cbvprintf+0x270>
		if (*++sp == 'h') {
    2dfc:	785a      	ldrb	r2, [r3, #1]
    2dfe:	2a68      	cmp	r2, #104	; 0x68
    2e00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2e04:	d106      	bne.n	2e14 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    2e06:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2e08:	f361 02c6 	bfi	r2, r1, #3, #4
    2e0c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    2e10:	1c9f      	adds	r7, r3, #2
    2e12:	e7cc      	b.n	2dae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    2e14:	4613      	mov	r3, r2
    2e16:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    2e18:	f362 03c6 	bfi	r3, r2, #3, #4
    2e1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    2e20:	e7c5      	b.n	2dae <cbvprintf+0x206>
		if (*++sp == 'l') {
    2e22:	785a      	ldrb	r2, [r3, #1]
    2e24:	2a6c      	cmp	r2, #108	; 0x6c
    2e26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2e2a:	d101      	bne.n	2e30 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    2e2c:	2104      	movs	r1, #4
    2e2e:	e7eb      	b.n	2e08 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    2e30:	4613      	mov	r3, r2
    2e32:	2203      	movs	r2, #3
    2e34:	e7f0      	b.n	2e18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    2e36:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2e3a:	2205      	movs	r2, #5
    2e3c:	e7ec      	b.n	2e18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    2e3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2e42:	2207      	movs	r2, #7
    2e44:	e7e8      	b.n	2e18 <cbvprintf+0x270>
		conv->unsupported = true;
    2e46:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2e4a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2e4e:	f023 0302 	bic.w	r3, r3, #2
    2e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2e56:	f043 0302 	orr.w	r3, r3, #2
    2e5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    2e5e:	e7a6      	b.n	2dae <cbvprintf+0x206>
    2e60:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2e64:	2920      	cmp	r1, #32
    2e66:	f200 8084 	bhi.w	2f72 <cbvprintf+0x3ca>
    2e6a:	a001      	add	r0, pc, #4	; (adr r0, 2e70 <cbvprintf+0x2c8>)
    2e6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2e70:	00002f35 	.word	0x00002f35
    2e74:	00002f73 	.word	0x00002f73
    2e78:	00002f73 	.word	0x00002f73
    2e7c:	00002f73 	.word	0x00002f73
    2e80:	00002f73 	.word	0x00002f73
    2e84:	00002f73 	.word	0x00002f73
    2e88:	00002f73 	.word	0x00002f73
    2e8c:	00002f73 	.word	0x00002f73
    2e90:	00002f73 	.word	0x00002f73
    2e94:	00002dd1 	.word	0x00002dd1
    2e98:	00002f73 	.word	0x00002f73
    2e9c:	00002f35 	.word	0x00002f35
    2ea0:	00002ef5 	.word	0x00002ef5
    2ea4:	00002dd1 	.word	0x00002dd1
    2ea8:	00002dd1 	.word	0x00002dd1
    2eac:	00002dd1 	.word	0x00002dd1
    2eb0:	00002f73 	.word	0x00002f73
    2eb4:	00002ef5 	.word	0x00002ef5
    2eb8:	00002f73 	.word	0x00002f73
    2ebc:	00002f73 	.word	0x00002f73
    2ec0:	00002f73 	.word	0x00002f73
    2ec4:	00002f73 	.word	0x00002f73
    2ec8:	00002f3d 	.word	0x00002f3d
    2ecc:	00002f35 	.word	0x00002f35
    2ed0:	00002f59 	.word	0x00002f59
    2ed4:	00002f73 	.word	0x00002f73
    2ed8:	00002f73 	.word	0x00002f73
    2edc:	00002f59 	.word	0x00002f59
    2ee0:	00002f73 	.word	0x00002f73
    2ee4:	00002f35 	.word	0x00002f35
    2ee8:	00002f73 	.word	0x00002f73
    2eec:	00002f73 	.word	0x00002f73
    2ef0:	00002f35 	.word	0x00002f35
		conv->specifier_cat = SPECIFIER_SINT;
    2ef4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2ef8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    2efa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2efe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f02:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2f04:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    2f08:	bf02      	ittt	eq
    2f0a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    2f0e:	f041 0101 	orreq.w	r1, r1, #1
    2f12:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    2f16:	2a63      	cmp	r2, #99	; 0x63
    2f18:	d131      	bne.n	2f7e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2f1a:	3b00      	subs	r3, #0
    2f1c:	bf18      	it	ne
    2f1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2f20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2f24:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2f28:	430b      	orrs	r3, r1
    2f2a:	f363 0241 	bfi	r2, r3, #1, #1
    2f2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    2f32:	e6d8      	b.n	2ce6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    2f34:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2f38:	2002      	movs	r0, #2
    2f3a:	e7de      	b.n	2efa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    2f3c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f40:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2f44:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2f48:	2103      	movs	r1, #3
    2f4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f4e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    2f50:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f54:	4143      	adcs	r3, r0
    2f56:	e7e3      	b.n	2f20 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    2f58:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2f5c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2f5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2f62:	f361 0202 	bfi	r2, r1, #0, #3
    2f66:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    2f6a:	bf14      	ite	ne
    2f6c:	2301      	movne	r3, #1
    2f6e:	2300      	moveq	r3, #0
    2f70:	e7d6      	b.n	2f20 <cbvprintf+0x378>
		conv->invalid = true;
    2f72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2f76:	f043 0301 	orr.w	r3, r3, #1
    2f7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    2f7e:	2300      	movs	r3, #0
    2f80:	e7ce      	b.n	2f20 <cbvprintf+0x378>
		} else if (conv->width_present) {
    2f82:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    2f86:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2f88:	bfb4      	ite	lt
    2f8a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    2f8e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    2f92:	e6ba      	b.n	2d0a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    2f94:	079b      	lsls	r3, r3, #30
    2f96:	f57f aec7 	bpl.w	2d28 <cbvprintf+0x180>
			precision = conv->prec_value;
    2f9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    2f9e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    2fa2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2fa4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    2fa8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    2fac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2fb0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2fb2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2fb6:	d138      	bne.n	302a <cbvprintf+0x482>
			switch (length_mod) {
    2fb8:	1ecb      	subs	r3, r1, #3
    2fba:	2b04      	cmp	r3, #4
    2fbc:	d822      	bhi.n	3004 <cbvprintf+0x45c>
    2fbe:	e8df f003 	tbb	[pc, r3]
    2fc2:	0903      	.short	0x0903
    2fc4:	2109      	.short	0x2109
    2fc6:	21          	.byte	0x21
    2fc7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    2fc8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    2fcc:	17da      	asrs	r2, r3, #31
    2fce:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    2fd2:	e006      	b.n	2fe2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    2fd4:	3407      	adds	r4, #7
    2fd6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    2fda:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    2fe2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2fe6:	f013 0603 	ands.w	r6, r3, #3
    2fea:	d056      	beq.n	309a <cbvprintf+0x4f2>
			OUTS(sp, fp);
    2fec:	9802      	ldr	r0, [sp, #8]
    2fee:	463b      	mov	r3, r7
    2ff0:	4652      	mov	r2, sl
    2ff2:	4659      	mov	r1, fp
    2ff4:	f019 fd37 	bl	1ca66 <outs>
    2ff8:	2800      	cmp	r0, #0
    2ffa:	f2c0 8142 	blt.w	3282 <cbvprintf+0x6da>
    2ffe:	4405      	add	r5, r0
			continue;
    3000:	46ba      	mov	sl, r7
    3002:	e5d9      	b.n	2bb8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3004:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3008:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    300a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    300e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3012:	d105      	bne.n	3020 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    3014:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    3018:	930a      	str	r3, [sp, #40]	; 0x28
    301a:	2300      	movs	r3, #0
    301c:	930b      	str	r3, [sp, #44]	; 0x2c
    301e:	e7e0      	b.n	2fe2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    3020:	2902      	cmp	r1, #2
    3022:	d1de      	bne.n	2fe2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    3024:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    3028:	e7d0      	b.n	2fcc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    302a:	2b02      	cmp	r3, #2
    302c:	d123      	bne.n	3076 <cbvprintf+0x4ce>
			switch (length_mod) {
    302e:	1ecb      	subs	r3, r1, #3
    3030:	2b04      	cmp	r3, #4
    3032:	d813      	bhi.n	305c <cbvprintf+0x4b4>
    3034:	e8df f003 	tbb	[pc, r3]
    3038:	120a0a03 	.word	0x120a0a03
    303c:	12          	.byte	0x12
    303d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    303e:	6822      	ldr	r2, [r4, #0]
    3040:	920a      	str	r2, [sp, #40]	; 0x28
    3042:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    3044:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    3046:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    3048:	4604      	mov	r4, r0
    304a:	e7ca      	b.n	2fe2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    304c:	1de0      	adds	r0, r4, #7
    304e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    3052:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3056:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    305a:	e7f5      	b.n	3048 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    305c:	f854 3b04 	ldr.w	r3, [r4], #4
    3060:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3062:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3064:	f04f 0300 	mov.w	r3, #0
    3068:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    306a:	d0d3      	beq.n	3014 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    306c:	2902      	cmp	r1, #2
    306e:	d1b8      	bne.n	2fe2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    3070:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3074:	e7d0      	b.n	3018 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    3076:	2b04      	cmp	r3, #4
    3078:	d109      	bne.n	308e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    307a:	1de3      	adds	r3, r4, #7
    307c:	f023 0307 	bic.w	r3, r3, #7
    3080:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    3084:	e9d3 2300 	ldrd	r2, r3, [r3]
    3088:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    308c:	e7a9      	b.n	2fe2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    308e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3090:	bf04      	itt	eq
    3092:	f854 3b04 	ldreq.w	r3, [r4], #4
    3096:	930a      	streq	r3, [sp, #40]	; 0x28
    3098:	e7a3      	b.n	2fe2 <cbvprintf+0x43a>
		switch (conv->specifier) {
    309a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    309e:	2878      	cmp	r0, #120	; 0x78
    30a0:	d8ae      	bhi.n	3000 <cbvprintf+0x458>
    30a2:	2862      	cmp	r0, #98	; 0x62
    30a4:	d822      	bhi.n	30ec <cbvprintf+0x544>
    30a6:	2825      	cmp	r0, #37	; 0x25
    30a8:	f43f ad8f 	beq.w	2bca <cbvprintf+0x22>
    30ac:	2858      	cmp	r0, #88	; 0x58
    30ae:	d1a7      	bne.n	3000 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    30b0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    30b4:	9300      	str	r3, [sp, #0]
    30b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    30ba:	ab04      	add	r3, sp, #16
    30bc:	aa0c      	add	r2, sp, #48	; 0x30
    30be:	f019 fc8c 	bl	1c9da <encode_uint>
    30c2:	4682      	mov	sl, r0
			if (precision >= 0) {
    30c4:	f1b8 0f00 	cmp.w	r8, #0
    30c8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    30cc:	db0c      	blt.n	30e8 <cbvprintf+0x540>
				conv->flag_zero = false;
    30ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    30d2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    30d6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    30da:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    30dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    30e0:	d902      	bls.n	30e8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    30e2:	eba8 0303 	sub.w	r3, r8, r3
    30e6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    30e8:	4680      	mov	r8, r0
    30ea:	e03d      	b.n	3168 <cbvprintf+0x5c0>
    30ec:	3863      	subs	r0, #99	; 0x63
    30ee:	2815      	cmp	r0, #21
    30f0:	d886      	bhi.n	3000 <cbvprintf+0x458>
    30f2:	a201      	add	r2, pc, #4	; (adr r2, 30f8 <cbvprintf+0x550>)
    30f4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    30f8:	00003179 	.word	0x00003179
    30fc:	000031dd 	.word	0x000031dd
    3100:	00003001 	.word	0x00003001
    3104:	00003001 	.word	0x00003001
    3108:	00003001 	.word	0x00003001
    310c:	00003001 	.word	0x00003001
    3110:	000031dd 	.word	0x000031dd
    3114:	00003001 	.word	0x00003001
    3118:	00003001 	.word	0x00003001
    311c:	00003001 	.word	0x00003001
    3120:	00003001 	.word	0x00003001
    3124:	00003237 	.word	0x00003237
    3128:	00003205 	.word	0x00003205
    312c:	00003209 	.word	0x00003209
    3130:	00003001 	.word	0x00003001
    3134:	00003001 	.word	0x00003001
    3138:	00003151 	.word	0x00003151
    313c:	00003001 	.word	0x00003001
    3140:	00003205 	.word	0x00003205
    3144:	00003001 	.word	0x00003001
    3148:	00003001 	.word	0x00003001
    314c:	00003205 	.word	0x00003205
			if (precision >= 0) {
    3150:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    3154:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    3158:	db0a      	blt.n	3170 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    315a:	4641      	mov	r1, r8
    315c:	4650      	mov	r0, sl
    315e:	f01a fb2d 	bl	1d7bc <strnlen>
			bpe = bps + len;
    3162:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    3166:	2600      	movs	r6, #0
		if (bps == NULL) {
    3168:	f1ba 0f00 	cmp.w	sl, #0
    316c:	d10c      	bne.n	3188 <cbvprintf+0x5e0>
    316e:	e747      	b.n	3000 <cbvprintf+0x458>
				len = strlen(bps);
    3170:	4650      	mov	r0, sl
    3172:	f01a fb1c 	bl	1d7ae <strlen>
    3176:	e7f4      	b.n	3162 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    317a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    317e:	2600      	movs	r6, #0
			bps = buf;
    3180:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    3184:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    3188:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    318c:	b106      	cbz	r6, 3190 <cbvprintf+0x5e8>
			nj_len += 1U;
    318e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3190:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    3194:	06d0      	lsls	r0, r2, #27
    3196:	d568      	bpl.n	326a <cbvprintf+0x6c2>
			nj_len += 2U;
    3198:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    319a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    319c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    319e:	bf48      	it	mi
    31a0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    31a2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    31a4:	bf48      	it	mi
    31a6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    31a8:	f1b9 0f00 	cmp.w	r9, #0
    31ac:	dd76      	ble.n	329c <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    31ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    31b2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    31b6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    31ba:	9303      	str	r3, [sp, #12]
    31bc:	0753      	lsls	r3, r2, #29
    31be:	d46d      	bmi.n	329c <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    31c0:	0650      	lsls	r0, r2, #25
    31c2:	d561      	bpl.n	3288 <cbvprintf+0x6e0>
					if (sign != 0) {
    31c4:	b146      	cbz	r6, 31d8 <cbvprintf+0x630>
						OUTC(sign);
    31c6:	9b02      	ldr	r3, [sp, #8]
    31c8:	4659      	mov	r1, fp
    31ca:	4630      	mov	r0, r6
    31cc:	4798      	blx	r3
    31ce:	2800      	cmp	r0, #0
    31d0:	db57      	blt.n	3282 <cbvprintf+0x6da>
						sign = 0;
    31d2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    31d4:	3501      	adds	r5, #1
						sign = 0;
    31d6:	461e      	mov	r6, r3
					pad = '0';
    31d8:	2330      	movs	r3, #48	; 0x30
    31da:	e056      	b.n	328a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    31dc:	071e      	lsls	r6, r3, #28
    31de:	d40f      	bmi.n	3200 <cbvprintf+0x658>
				sign = ' ';
    31e0:	f013 0610 	ands.w	r6, r3, #16
    31e4:	bf18      	it	ne
    31e6:	2620      	movne	r6, #32
			sint = value->sint;
    31e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    31ec:	2b00      	cmp	r3, #0
    31ee:	f6bf af5f 	bge.w	30b0 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    31f2:	4252      	negs	r2, r2
    31f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    31f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    31fc:	262d      	movs	r6, #45	; 0x2d
    31fe:	e757      	b.n	30b0 <cbvprintf+0x508>
				sign = '+';
    3200:	262b      	movs	r6, #43	; 0x2b
    3202:	e7f1      	b.n	31e8 <cbvprintf+0x640>
		switch (conv->specifier) {
    3204:	2600      	movs	r6, #0
    3206:	e753      	b.n	30b0 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    3208:	980a      	ldr	r0, [sp, #40]	; 0x28
    320a:	b340      	cbz	r0, 325e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    320c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3210:	9300      	str	r3, [sp, #0]
    3212:	aa0c      	add	r2, sp, #48	; 0x30
    3214:	ab04      	add	r3, sp, #16
    3216:	2100      	movs	r1, #0
    3218:	f019 fbdf 	bl	1c9da <encode_uint>
				conv->altform_0c = true;
    321c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    3220:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3224:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3228:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    322c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    322e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    3232:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3234:	e746      	b.n	30c4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    3236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    3238:	2907      	cmp	r1, #7
    323a:	f63f aee1 	bhi.w	3000 <cbvprintf+0x458>
    323e:	e8df f001 	tbb	[pc, r1]
    3242:	040c      	.short	0x040c
    3244:	08080c06 	.word	0x08080c06
    3248:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    324a:	701d      	strb	r5, [r3, #0]
		break;
    324c:	e6d8      	b.n	3000 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    324e:	801d      	strh	r5, [r3, #0]
		break;
    3250:	e6d6      	b.n	3000 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    3252:	17ea      	asrs	r2, r5, #31
    3254:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    3258:	e6d2      	b.n	3000 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    325a:	601d      	str	r5, [r3, #0]
		break;
    325c:	e6d0      	b.n	3000 <cbvprintf+0x458>
			bps = "(nil)";
    325e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3328 <cbvprintf+0x780>
    3262:	4606      	mov	r6, r0
			bpe = bps + 5;
    3264:	f10a 0805 	add.w	r8, sl, #5
    3268:	e78e      	b.n	3188 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    326a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    326c:	bf48      	it	mi
    326e:	3301      	addmi	r3, #1
    3270:	e793      	b.n	319a <cbvprintf+0x5f2>
					OUTC(pad);
    3272:	4618      	mov	r0, r3
    3274:	9303      	str	r3, [sp, #12]
    3276:	4659      	mov	r1, fp
    3278:	9b02      	ldr	r3, [sp, #8]
    327a:	4798      	blx	r3
    327c:	2800      	cmp	r0, #0
    327e:	9b03      	ldr	r3, [sp, #12]
    3280:	da04      	bge.n	328c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    3282:	b011      	add	sp, #68	; 0x44
    3284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3288:	2320      	movs	r3, #32
    328a:	444d      	add	r5, r9
    328c:	464a      	mov	r2, r9
				while (width-- > 0) {
    328e:	2a00      	cmp	r2, #0
    3290:	eba5 0109 	sub.w	r1, r5, r9
    3294:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3298:	dceb      	bgt.n	3272 <cbvprintf+0x6ca>
    329a:	460d      	mov	r5, r1
		if (sign != 0) {
    329c:	b136      	cbz	r6, 32ac <cbvprintf+0x704>
			OUTC(sign);
    329e:	9b02      	ldr	r3, [sp, #8]
    32a0:	4659      	mov	r1, fp
    32a2:	4630      	mov	r0, r6
    32a4:	4798      	blx	r3
    32a6:	2800      	cmp	r0, #0
    32a8:	dbeb      	blt.n	3282 <cbvprintf+0x6da>
    32aa:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    32ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    32b0:	06d9      	lsls	r1, r3, #27
    32b2:	d401      	bmi.n	32b8 <cbvprintf+0x710>
    32b4:	071a      	lsls	r2, r3, #28
    32b6:	d506      	bpl.n	32c6 <cbvprintf+0x71e>
				OUTC('0');
    32b8:	9b02      	ldr	r3, [sp, #8]
    32ba:	4659      	mov	r1, fp
    32bc:	2030      	movs	r0, #48	; 0x30
    32be:	4798      	blx	r3
    32c0:	2800      	cmp	r0, #0
    32c2:	dbde      	blt.n	3282 <cbvprintf+0x6da>
    32c4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    32c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    32ca:	06db      	lsls	r3, r3, #27
    32cc:	d507      	bpl.n	32de <cbvprintf+0x736>
				OUTC(conv->specifier);
    32ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    32d2:	9b02      	ldr	r3, [sp, #8]
    32d4:	4659      	mov	r1, fp
    32d6:	4798      	blx	r3
    32d8:	2800      	cmp	r0, #0
    32da:	dbd2      	blt.n	3282 <cbvprintf+0x6da>
    32dc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    32de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    32e0:	442e      	add	r6, r5
    32e2:	1b73      	subs	r3, r6, r5
    32e4:	2b00      	cmp	r3, #0
    32e6:	dc16      	bgt.n	3316 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    32e8:	9802      	ldr	r0, [sp, #8]
    32ea:	4643      	mov	r3, r8
    32ec:	4652      	mov	r2, sl
    32ee:	4659      	mov	r1, fp
    32f0:	f019 fbb9 	bl	1ca66 <outs>
    32f4:	2800      	cmp	r0, #0
    32f6:	dbc4      	blt.n	3282 <cbvprintf+0x6da>
    32f8:	4405      	add	r5, r0
		while (width > 0) {
    32fa:	44a9      	add	r9, r5
    32fc:	eba9 0305 	sub.w	r3, r9, r5
    3300:	2b00      	cmp	r3, #0
    3302:	f77f ae7d 	ble.w	3000 <cbvprintf+0x458>
			OUTC(' ');
    3306:	9b02      	ldr	r3, [sp, #8]
    3308:	4659      	mov	r1, fp
    330a:	2020      	movs	r0, #32
    330c:	4798      	blx	r3
    330e:	2800      	cmp	r0, #0
    3310:	dbb7      	blt.n	3282 <cbvprintf+0x6da>
    3312:	3501      	adds	r5, #1
			--width;
    3314:	e7f2      	b.n	32fc <cbvprintf+0x754>
				OUTC('0');
    3316:	9b02      	ldr	r3, [sp, #8]
    3318:	4659      	mov	r1, fp
    331a:	2030      	movs	r0, #48	; 0x30
    331c:	4798      	blx	r3
    331e:	2800      	cmp	r0, #0
    3320:	dbaf      	blt.n	3282 <cbvprintf+0x6da>
    3322:	3501      	adds	r5, #1
    3324:	e7dd      	b.n	32e2 <cbvprintf+0x73a>
    3326:	bf00      	nop
    3328:	000218bc 	.word	0x000218bc

0000332c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    332c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    332e:	4910      	ldr	r1, [pc, #64]	; (3370 <enable_logger+0x44>)
    3330:	4810      	ldr	r0, [pc, #64]	; (3374 <enable_logger+0x48>)
{
    3332:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3334:	2200      	movs	r2, #0
    3336:	f01c fb97 	bl	1fa68 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    333a:	4d0f      	ldr	r5, [pc, #60]	; (3378 <enable_logger+0x4c>)
    333c:	490f      	ldr	r1, [pc, #60]	; (337c <enable_logger+0x50>)
    333e:	2200      	movs	r2, #0
    3340:	2300      	movs	r3, #0
    3342:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3346:	2400      	movs	r4, #0
    3348:	230e      	movs	r3, #14
    334a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    334e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <enable_logger+0x54>)
    3354:	9400      	str	r4, [sp, #0]
    3356:	f44f 7240 	mov.w	r2, #768	; 0x300
    335a:	4628      	mov	r0, r5
    335c:	f017 fdb0 	bl	1aec0 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    3360:	4908      	ldr	r1, [pc, #32]	; (3384 <enable_logger+0x58>)
    3362:	4628      	mov	r0, r5
    3364:	f01c f821 	bl	1f3aa <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3368:	4620      	mov	r0, r4
    336a:	b009      	add	sp, #36	; 0x24
    336c:	bd30      	pop	{r4, r5, pc}
    336e:	bf00      	nop
    3370:	00003389 	.word	0x00003389
    3374:	20000850 	.word	0x20000850
    3378:	20000888 	.word	0x20000888
    337c:	20002d20 	.word	0x20002d20
    3380:	0000370d 	.word	0x0000370d
    3384:	000218c2 	.word	0x000218c2

00003388 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3388:	4801      	ldr	r0, [pc, #4]	; (3390 <log_process_thread_timer_expiry_fn+0x8>)
    338a:	f017 bf25 	b.w	1b1d8 <z_impl_k_sem_give>
    338e:	bf00      	nop
    3390:	20000700 	.word	0x20000700

00003394 <log_core_init>:
{
    3394:	b510      	push	{r4, lr}
	panic_mode = false;
    3396:	4b0b      	ldr	r3, [pc, #44]	; (33c4 <log_core_init+0x30>)
    3398:	2200      	movs	r2, #0
    339a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    339c:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <log_core_init+0x34>)
    339e:	4a0b      	ldr	r2, [pc, #44]	; (33cc <log_core_init+0x38>)
    33a0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    33a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    33a6:	f000 fcc1 	bl	3d2c <log_output_timestamp_freq_set>
		log_msg_pool_init();
    33aa:	f000 fa73 	bl	3894 <log_msg_pool_init>
		log_list_init(&list);
    33ae:	4808      	ldr	r0, [pc, #32]	; (33d0 <log_core_init+0x3c>)
    33b0:	f019 fb70 	bl	1ca94 <log_list_init>
}
    33b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    33b8:	4906      	ldr	r1, [pc, #24]	; (33d4 <log_core_init+0x40>)
    33ba:	4807      	ldr	r0, [pc, #28]	; (33d8 <log_core_init+0x44>)
    33bc:	2308      	movs	r3, #8
    33be:	2248      	movs	r2, #72	; 0x48
    33c0:	f01b bfa9 	b.w	1f316 <k_mem_slab_init>
    33c4:	2000284d 	.word	0x2000284d
    33c8:	20000160 	.word	0x20000160
    33cc:	0001cad3 	.word	0x0001cad3
    33d0:	200011bc 	.word	0x200011bc
    33d4:	20004c68 	.word	0x20004c68
    33d8:	200011c4 	.word	0x200011c4

000033dc <get_msg>:
{
    33dc:	b510      	push	{r4, lr}
    33de:	f04f 0320 	mov.w	r3, #32
    33e2:	f3ef 8411 	mrs	r4, BASEPRI
    33e6:	f383 8811 	msr	BASEPRI, r3
    33ea:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    33ee:	4804      	ldr	r0, [pc, #16]	; (3400 <get_msg+0x24>)
    33f0:	f019 fb60 	bl	1cab4 <log_list_head_get>
	__asm__ volatile(
    33f4:	f384 8811 	msr	BASEPRI, r4
    33f8:	f3bf 8f6f 	isb	sy
}
    33fc:	bd10      	pop	{r4, pc}
    33fe:	bf00      	nop
    3400:	200011bc 	.word	0x200011bc

00003404 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3404:	4b06      	ldr	r3, [pc, #24]	; (3420 <z_log_dropped+0x1c>)
    3406:	f3bf 8f5b 	dmb	ish
    340a:	e853 2f00 	ldrex	r2, [r3]
    340e:	3201      	adds	r2, #1
    3410:	e843 2100 	strex	r1, r2, [r3]
    3414:	2900      	cmp	r1, #0
    3416:	d1f8      	bne.n	340a <z_log_dropped+0x6>
    3418:	f3bf 8f5b 	dmb	ish
}
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	200011b4 	.word	0x200011b4

00003424 <z_log_dropped_read_and_clear>:
}
    3424:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3426:	4b06      	ldr	r3, [pc, #24]	; (3440 <z_log_dropped_read_and_clear+0x1c>)
    3428:	f3bf 8f5b 	dmb	ish
    342c:	4602      	mov	r2, r0
    342e:	e853 0f00 	ldrex	r0, [r3]
    3432:	e843 2100 	strex	r1, r2, [r3]
    3436:	2900      	cmp	r1, #0
    3438:	d1f9      	bne.n	342e <z_log_dropped_read_and_clear+0xa>
    343a:	f3bf 8f5b 	dmb	ish
    343e:	4770      	bx	lr
    3440:	200011b4 	.word	0x200011b4

00003444 <dropped_notify>:
{
    3444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    3446:	f7ff ffed 	bl	3424 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    344a:	4c0a      	ldr	r4, [pc, #40]	; (3474 <dropped_notify+0x30>)
    344c:	4d0a      	ldr	r5, [pc, #40]	; (3478 <dropped_notify+0x34>)
    344e:	1b2d      	subs	r5, r5, r4
    3450:	4607      	mov	r7, r0
    3452:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3454:	2600      	movs	r6, #0
    3456:	42ae      	cmp	r6, r5
    3458:	db00      	blt.n	345c <dropped_notify+0x18>
}
    345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    345c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    345e:	795b      	ldrb	r3, [r3, #5]
    3460:	b12b      	cbz	r3, 346e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    3462:	6823      	ldr	r3, [r4, #0]
    3464:	691b      	ldr	r3, [r3, #16]
    3466:	b113      	cbz	r3, 346e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    3468:	4639      	mov	r1, r7
    346a:	4620      	mov	r0, r4
    346c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    346e:	3601      	adds	r6, #1
    3470:	3410      	adds	r4, #16
    3472:	e7f0      	b.n	3456 <dropped_notify+0x12>
    3474:	000200f4 	.word	0x000200f4
    3478:	00020104 	.word	0x00020104

0000347c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    347c:	4a04      	ldr	r2, [pc, #16]	; (3490 <log_source_name_get+0x14>)
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <log_source_name_get+0x18>)
    3480:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3482:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3486:	bf34      	ite	cc
    3488:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    348c:	2000      	movcs	r0, #0
}
    348e:	4770      	bx	lr
    3490:	0001ff94 	.word	0x0001ff94
    3494:	000200f4 	.word	0x000200f4

00003498 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3498:	4a09      	ldr	r2, [pc, #36]	; (34c0 <log_backend_enable+0x28>)
	backend->cb->id = id;
    349a:	6843      	ldr	r3, [r0, #4]
    349c:	1a80      	subs	r0, r0, r2
{
    349e:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    34a0:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    34a2:	4c08      	ldr	r4, [pc, #32]	; (34c4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    34a4:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    34a6:	3001      	adds	r0, #1
	backend->cb->active = true;
    34a8:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    34aa:	7118      	strb	r0, [r3, #4]
    34ac:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    34ae:	7823      	ldrb	r3, [r4, #0]
    34b0:	b913      	cbnz	r3, 34b8 <log_backend_enable+0x20>
    34b2:	4805      	ldr	r0, [pc, #20]	; (34c8 <log_backend_enable+0x30>)
    34b4:	f017 fe90 	bl	1b1d8 <z_impl_k_sem_give>
	backend_attached = true;
    34b8:	2301      	movs	r3, #1
    34ba:	7023      	strb	r3, [r4, #0]
}
    34bc:	bd10      	pop	{r4, pc}
    34be:	bf00      	nop
    34c0:	000200f4 	.word	0x000200f4
    34c4:	2000284c 	.word	0x2000284c
    34c8:	20000700 	.word	0x20000700

000034cc <log_init>:
{
    34cc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    34ce:	4b12      	ldr	r3, [pc, #72]	; (3518 <log_init+0x4c>)
    34d0:	f3bf 8f5b 	dmb	ish
    34d4:	e853 5f00 	ldrex	r5, [r3]
    34d8:	1c6a      	adds	r2, r5, #1
    34da:	e843 2100 	strex	r1, r2, [r3]
    34de:	2900      	cmp	r1, #0
    34e0:	d1f8      	bne.n	34d4 <log_init+0x8>
    34e2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    34e6:	b92d      	cbnz	r5, 34f4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    34e8:	4c0c      	ldr	r4, [pc, #48]	; (351c <log_init+0x50>)
    34ea:	4e0d      	ldr	r6, [pc, #52]	; (3520 <log_init+0x54>)
    34ec:	1b36      	subs	r6, r6, r4
    34ee:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    34f0:	42b5      	cmp	r5, r6
    34f2:	db00      	blt.n	34f6 <log_init+0x2a>
}
    34f4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    34f6:	7b23      	ldrb	r3, [r4, #12]
    34f8:	b153      	cbz	r3, 3510 <log_init+0x44>
			if (backend->api->init != NULL) {
    34fa:	6823      	ldr	r3, [r4, #0]
    34fc:	699b      	ldr	r3, [r3, #24]
    34fe:	b10b      	cbz	r3, 3504 <log_init+0x38>
				backend->api->init(backend);
    3500:	4620      	mov	r0, r4
    3502:	4798      	blx	r3
			log_backend_enable(backend,
    3504:	6863      	ldr	r3, [r4, #4]
    3506:	2204      	movs	r2, #4
    3508:	6819      	ldr	r1, [r3, #0]
    350a:	4620      	mov	r0, r4
    350c:	f7ff ffc4 	bl	3498 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3510:	3501      	adds	r5, #1
    3512:	3410      	adds	r4, #16
    3514:	e7ec      	b.n	34f0 <log_init+0x24>
    3516:	bf00      	nop
    3518:	200011b8 	.word	0x200011b8
    351c:	000200f4 	.word	0x000200f4
    3520:	00020104 	.word	0x00020104

00003524 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3524:	4b16      	ldr	r3, [pc, #88]	; (3580 <z_log_strdup+0x5c>)
    3526:	4298      	cmp	r0, r3
{
    3528:	b537      	push	{r0, r1, r2, r4, r5, lr}
    352a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    352c:	d302      	bcc.n	3534 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    352e:	4b15      	ldr	r3, [pc, #84]	; (3584 <z_log_strdup+0x60>)
    3530:	4298      	cmp	r0, r3
    3532:	d320      	bcc.n	3576 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3534:	4814      	ldr	r0, [pc, #80]	; (3588 <z_log_strdup+0x64>)
    3536:	2200      	movs	r2, #0
    3538:	2300      	movs	r3, #0
    353a:	a901      	add	r1, sp, #4
    353c:	f017 fc62 	bl	1ae04 <k_mem_slab_alloc>
	if (err != 0) {
    3540:	4605      	mov	r5, r0
    3542:	b9d8      	cbnz	r0, 357c <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3544:	2201      	movs	r2, #1
    3546:	9b01      	ldr	r3, [sp, #4]
    3548:	f3bf 8f5b 	dmb	ish
    354c:	e853 1f00 	ldrex	r1, [r3]
    3550:	e843 2000 	strex	r0, r2, [r3]
    3554:	2800      	cmp	r0, #0
    3556:	d1f9      	bne.n	354c <z_log_strdup+0x28>
    3558:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    355c:	9801      	ldr	r0, [sp, #4]
    355e:	4621      	mov	r1, r4
    3560:	2241      	movs	r2, #65	; 0x41
    3562:	3004      	adds	r0, #4
    3564:	f01a f911 	bl	1d78a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3568:	9c01      	ldr	r4, [sp, #4]
    356a:	237e      	movs	r3, #126	; 0x7e
    356c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3570:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    3574:	3404      	adds	r4, #4
}
    3576:	4620      	mov	r0, r4
    3578:	b003      	add	sp, #12
    357a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    357c:	4c03      	ldr	r4, [pc, #12]	; (358c <z_log_strdup+0x68>)
    357e:	e7fa      	b.n	3576 <z_log_strdup+0x52>
    3580:	0001fd70 	.word	0x0001fd70
    3584:	00023008 	.word	0x00023008
    3588:	200011c4 	.word	0x200011c4
    358c:	000218ca 	.word	0x000218ca

00003590 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    3590:	b150      	cbz	r0, 35a8 <log_is_strdup+0x18>
    3592:	4b06      	ldr	r3, [pc, #24]	; (35ac <log_is_strdup+0x1c>)
    3594:	4298      	cmp	r0, r3
    3596:	d306      	bcc.n	35a6 <log_is_strdup+0x16>
    3598:	f503 7310 	add.w	r3, r3, #576	; 0x240
    359c:	4298      	cmp	r0, r3
    359e:	bf2c      	ite	cs
    35a0:	2000      	movcs	r0, #0
    35a2:	2001      	movcc	r0, #1
    35a4:	4770      	bx	lr
    35a6:	2000      	movs	r0, #0
}
    35a8:	4770      	bx	lr
    35aa:	bf00      	nop
    35ac:	20004c68 	.word	0x20004c68

000035b0 <z_impl_log_process>:
{
    35b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    35b4:	4b47      	ldr	r3, [pc, #284]	; (36d4 <z_impl_log_process+0x124>)
    35b6:	781b      	ldrb	r3, [r3, #0]
{
    35b8:	b085      	sub	sp, #20
    35ba:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    35bc:	b903      	cbnz	r3, 35c0 <z_impl_log_process+0x10>
    35be:	b300      	cbz	r0, 3602 <z_impl_log_process+0x52>
	msg = get_msg();
    35c0:	f7ff ff0c 	bl	33dc <get_msg>
	if (msg.msg) {
    35c4:	4605      	mov	r5, r0
    35c6:	b178      	cbz	r0, 35e8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    35c8:	f3bf 8f5b 	dmb	ish
    35cc:	4b42      	ldr	r3, [pc, #264]	; (36d8 <z_impl_log_process+0x128>)
    35ce:	e853 2f00 	ldrex	r2, [r3]
    35d2:	3a01      	subs	r2, #1
    35d4:	e843 2100 	strex	r1, r2, [r3]
    35d8:	2900      	cmp	r1, #0
    35da:	d1f8      	bne.n	35ce <z_impl_log_process+0x1e>
    35dc:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    35e0:	b19c      	cbz	r4, 360a <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    35e2:	4628      	mov	r0, r5
    35e4:	f019 fb97 	bl	1cd16 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    35e8:	b92c      	cbnz	r4, 35f6 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    35ea:	4b3c      	ldr	r3, [pc, #240]	; (36dc <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
    35ec:	681b      	ldr	r3, [r3, #0]
    35ee:	2b00      	cmp	r3, #0
    35f0:	dd01      	ble.n	35f6 <z_impl_log_process+0x46>
		dropped_notify();
    35f2:	f7ff ff27 	bl	3444 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    35f6:	483a      	ldr	r0, [pc, #232]	; (36e0 <z_impl_log_process+0x130>)
    35f8:	f019 fa5a 	bl	1cab0 <log_list_head_peek>
    35fc:	1e04      	subs	r4, r0, #0
    35fe:	bf18      	it	ne
    3600:	2401      	movne	r4, #1
}
    3602:	4620      	mov	r0, r4
    3604:	b005      	add	sp, #20
    3606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    360a:	4b36      	ldr	r3, [pc, #216]	; (36e4 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    360c:	781b      	ldrb	r3, [r3, #0]
    360e:	b9e3      	cbnz	r3, 364a <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3610:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    3612:	07db      	lsls	r3, r3, #31
    3614:	d419      	bmi.n	364a <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
    3616:	f019 fb91 	bl	1cd3c <log_msg_str_get>
    361a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    361c:	4628      	mov	r0, r5
    361e:	f019 fb58 	bl	1ccd2 <log_msg_nargs_get>
    3622:	4601      	mov	r1, r0
    3624:	4638      	mov	r0, r7
    3626:	f019 fa58 	bl	1cada <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    362a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 36e8 <z_impl_log_process+0x138>
    362e:	4b2f      	ldr	r3, [pc, #188]	; (36ec <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3630:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 36f0 <z_impl_log_process+0x140>
    3634:	eba3 0308 	sub.w	r3, r3, r8
    3638:	08db      	lsrs	r3, r3, #3
    363a:	9303      	str	r3, [sp, #12]
    363c:	4b2d      	ldr	r3, [pc, #180]	; (36f4 <z_impl_log_process+0x144>)
    363e:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3642:	4606      	mov	r6, r0
    3644:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    3648:	b936      	cbnz	r6, 3658 <z_impl_log_process+0xa8>
    364a:	4e2b      	ldr	r6, [pc, #172]	; (36f8 <z_impl_log_process+0x148>)
    364c:	4f2b      	ldr	r7, [pc, #172]	; (36fc <z_impl_log_process+0x14c>)
    364e:	1bbf      	subs	r7, r7, r6
    3650:	113f      	asrs	r7, r7, #4
    3652:	f04f 0800 	mov.w	r8, #0
    3656:	e03a      	b.n	36ce <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
    3658:	fab6 f186 	clz	r1, r6
    365c:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3660:	4649      	mov	r1, r9
    3662:	4628      	mov	r0, r5
    3664:	f019 fb38 	bl	1ccd8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    3668:	4b25      	ldr	r3, [pc, #148]	; (3700 <z_impl_log_process+0x150>)
    366a:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    366c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    366e:	d302      	bcc.n	3676 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3670:	4a24      	ldr	r2, [pc, #144]	; (3704 <z_impl_log_process+0x154>)
    3672:	4290      	cmp	r0, r2
    3674:	d31a      	bcc.n	36ac <z_impl_log_process+0xfc>
    3676:	4608      	mov	r0, r1
    3678:	f7ff ff8a 	bl	3590 <log_is_strdup>
    367c:	4602      	mov	r2, r0
    367e:	b9a8      	cbnz	r0, 36ac <z_impl_log_process+0xfc>
    3680:	4b21      	ldr	r3, [pc, #132]	; (3708 <z_impl_log_process+0x158>)
    3682:	4299      	cmp	r1, r3
    3684:	d012      	beq.n	36ac <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
    3686:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3688:	9903      	ldr	r1, [sp, #12]
    368a:	f3c3 1389 	ubfx	r3, r3, #6, #10
    368e:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    3690:	bf38      	it	cc
    3692:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3696:	ea4f 138a 	mov.w	r3, sl, lsl #6
    369a:	f043 0301 	orr.w	r3, r3, #1
    369e:	f8ad 3000 	strh.w	r3, [sp]
    36a2:	4649      	mov	r1, r9
    36a4:	463b      	mov	r3, r7
    36a6:	4658      	mov	r0, fp
    36a8:	f019 fa71 	bl	1cb8e <log_3>
		mask &= ~BIT(idx);
    36ac:	2301      	movs	r3, #1
    36ae:	fa03 f109 	lsl.w	r1, r3, r9
    36b2:	ea26 0601 	bic.w	r6, r6, r1
    36b6:	e7c7      	b.n	3648 <z_impl_log_process+0x98>
	return backend->cb->active;
    36b8:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    36ba:	795b      	ldrb	r3, [r3, #5]
    36bc:	b123      	cbz	r3, 36c8 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
    36be:	6833      	ldr	r3, [r6, #0]
    36c0:	4629      	mov	r1, r5
    36c2:	685b      	ldr	r3, [r3, #4]
    36c4:	4630      	mov	r0, r6
    36c6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    36c8:	f108 0801 	add.w	r8, r8, #1
    36cc:	3610      	adds	r6, #16
    36ce:	45b8      	cmp	r8, r7
    36d0:	dbf2      	blt.n	36b8 <z_impl_log_process+0x108>
    36d2:	e786      	b.n	35e2 <z_impl_log_process+0x32>
    36d4:	2000284c 	.word	0x2000284c
    36d8:	200011b0 	.word	0x200011b0
    36dc:	200011b4 	.word	0x200011b4
    36e0:	200011bc 	.word	0x200011bc
    36e4:	2000284d 	.word	0x2000284d
    36e8:	0001ff94 	.word	0x0001ff94
    36ec:	000200f4 	.word	0x000200f4
    36f0:	000218e4 	.word	0x000218e4
    36f4:	000200c4 	.word	0x000200c4
    36f8:	000200f4 	.word	0x000200f4
    36fc:	00020104 	.word	0x00020104
    3700:	0001fd70 	.word	0x0001fd70
    3704:	00023008 	.word	0x00023008
    3708:	000218ca 	.word	0x000218ca

0000370c <log_process_thread_func>:
{
    370c:	b510      	push	{r4, lr}
	log_init();
    370e:	f7ff fedd 	bl	34cc <log_init>
	return z_impl_k_current_get();
    3712:	f018 fa5f 	bl	1bbd4 <z_impl_k_current_get>
	proc_tid = process_tid;
    3716:	4b0c      	ldr	r3, [pc, #48]	; (3748 <log_process_thread_func+0x3c>)
    3718:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    371a:	b130      	cbz	r0, 372a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    371c:	4b0b      	ldr	r3, [pc, #44]	; (374c <log_process_thread_func+0x40>)
	    process_tid &&
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	2b09      	cmp	r3, #9
    3722:	dd02      	ble.n	372a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    3724:	480a      	ldr	r0, [pc, #40]	; (3750 <log_process_thread_func+0x44>)
    3726:	f017 fd57 	bl	1b1d8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    372a:	4c09      	ldr	r4, [pc, #36]	; (3750 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    372c:	2000      	movs	r0, #0
    372e:	f7ff ff3f 	bl	35b0 <z_impl_log_process>
		if (log_process(false) == false) {
    3732:	2800      	cmp	r0, #0
    3734:	d1fa      	bne.n	372c <log_process_thread_func+0x20>
    3736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    373a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    373e:	4620      	mov	r0, r4
    3740:	f017 fd70 	bl	1b224 <z_impl_k_sem_take>
    3744:	e7f2      	b.n	372c <log_process_thread_func+0x20>
    3746:	bf00      	nop
    3748:	200011e0 	.word	0x200011e0
    374c:	200011b0 	.word	0x200011b0
    3750:	20000700 	.word	0x20000700

00003754 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3754:	4b29      	ldr	r3, [pc, #164]	; (37fc <msg_finalize+0xa8>)
{
    3756:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    3758:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    375a:	8141      	strh	r1, [r0, #10]
{
    375c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    375e:	4798      	blx	r3
    3760:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3762:	f04f 0320 	mov.w	r3, #32
    3766:	f3ef 8511 	mrs	r5, BASEPRI
    376a:	f383 8811 	msr	BASEPRI, r3
    376e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3772:	4823      	ldr	r0, [pc, #140]	; (3800 <msg_finalize+0xac>)
    3774:	4621      	mov	r1, r4
    3776:	f019 f991 	bl	1ca9c <log_list_add_tail>
	__asm__ volatile(
    377a:	f385 8811 	msr	BASEPRI, r5
    377e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3782:	f3bf 8f5b 	dmb	ish
    3786:	4b1f      	ldr	r3, [pc, #124]	; (3804 <msg_finalize+0xb0>)
    3788:	e853 2f00 	ldrex	r2, [r3]
    378c:	3201      	adds	r2, #1
    378e:	e843 2100 	strex	r1, r2, [r3]
    3792:	2900      	cmp	r1, #0
    3794:	d1f8      	bne.n	3788 <msg_finalize+0x34>
    3796:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    379a:	4a1b      	ldr	r2, [pc, #108]	; (3808 <msg_finalize+0xb4>)
    379c:	7812      	ldrb	r2, [r2, #0]
    379e:	b182      	cbz	r2, 37c2 <msg_finalize+0x6e>
	__asm__ volatile(
    37a0:	f04f 0320 	mov.w	r3, #32
    37a4:	f3ef 8411 	mrs	r4, BASEPRI
    37a8:	f383 8811 	msr	BASEPRI, r3
    37ac:	f3bf 8f6f 	isb	sy
    37b0:	2000      	movs	r0, #0
    37b2:	f7ff fefd 	bl	35b0 <z_impl_log_process>
	__asm__ volatile(
    37b6:	f384 8811 	msr	BASEPRI, r4
    37ba:	f3bf 8f6f 	isb	sy
}
    37be:	b003      	add	sp, #12
    37c0:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    37c2:	4a12      	ldr	r2, [pc, #72]	; (380c <msg_finalize+0xb8>)
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	6812      	ldr	r2, [r2, #0]
    37c8:	2a00      	cmp	r2, #0
    37ca:	d0f8      	beq.n	37be <msg_finalize+0x6a>
    37cc:	2b01      	cmp	r3, #1
    37ce:	d10a      	bne.n	37e6 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    37d0:	2200      	movs	r2, #0
    37d2:	2300      	movs	r3, #0
    37d4:	e9cd 2300 	strd	r2, r3, [sp]
    37d8:	480d      	ldr	r0, [pc, #52]	; (3810 <msg_finalize+0xbc>)
    37da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    37de:	2300      	movs	r3, #0
    37e0:	f018 fbf0 	bl	1bfc4 <z_impl_k_timer_start>
    37e4:	e7eb      	b.n	37be <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    37e6:	2b0a      	cmp	r3, #10
    37e8:	d1e9      	bne.n	37be <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    37ea:	4809      	ldr	r0, [pc, #36]	; (3810 <msg_finalize+0xbc>)
    37ec:	f01c f948 	bl	1fa80 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    37f0:	4808      	ldr	r0, [pc, #32]	; (3814 <msg_finalize+0xc0>)
}
    37f2:	b003      	add	sp, #12
    37f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    37f8:	f017 bcee 	b.w	1b1d8 <z_impl_k_sem_give>
    37fc:	20000160 	.word	0x20000160
    3800:	200011bc 	.word	0x200011bc
    3804:	200011b0 	.word	0x200011b0
    3808:	2000284d 	.word	0x2000284d
    380c:	200011e0 	.word	0x200011e0
    3810:	20000850 	.word	0x20000850
    3814:	20000700 	.word	0x20000700

00003818 <z_impl_log_panic>:
{
    3818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    381a:	4f0e      	ldr	r7, [pc, #56]	; (3854 <z_impl_log_panic+0x3c>)
    381c:	783d      	ldrb	r5, [r7, #0]
    381e:	b975      	cbnz	r5, 383e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    3820:	4c0d      	ldr	r4, [pc, #52]	; (3858 <z_impl_log_panic+0x40>)
    3822:	4e0e      	ldr	r6, [pc, #56]	; (385c <z_impl_log_panic+0x44>)
	log_init();
    3824:	f7ff fe52 	bl	34cc <log_init>
    3828:	1b36      	subs	r6, r6, r4
    382a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    382c:	42b5      	cmp	r5, r6
    382e:	db07      	blt.n	3840 <z_impl_log_panic+0x28>
    3830:	2000      	movs	r0, #0
    3832:	f7ff febd 	bl	35b0 <z_impl_log_process>
		while (log_process(false) == true) {
    3836:	2800      	cmp	r0, #0
    3838:	d1fa      	bne.n	3830 <z_impl_log_panic+0x18>
	panic_mode = true;
    383a:	2301      	movs	r3, #1
    383c:	703b      	strb	r3, [r7, #0]
}
    383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3840:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3842:	795b      	ldrb	r3, [r3, #5]
    3844:	b11b      	cbz	r3, 384e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    3846:	6823      	ldr	r3, [r4, #0]
    3848:	4620      	mov	r0, r4
    384a:	695b      	ldr	r3, [r3, #20]
    384c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    384e:	3501      	adds	r5, #1
    3850:	3410      	adds	r4, #16
    3852:	e7eb      	b.n	382c <z_impl_log_panic+0x14>
    3854:	2000284d 	.word	0x2000284d
    3858:	000200f4 	.word	0x000200f4
    385c:	00020104 	.word	0x00020104

00003860 <log_free>:
{
    3860:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3862:	3804      	subs	r0, #4
    3864:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3866:	f3bf 8f5b 	dmb	ish
    386a:	e850 3f00 	ldrex	r3, [r0]
    386e:	1e5a      	subs	r2, r3, #1
    3870:	e840 2100 	strex	r1, r2, [r0]
    3874:	2900      	cmp	r1, #0
    3876:	d1f8      	bne.n	386a <log_free+0xa>
    3878:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    387c:	2b01      	cmp	r3, #1
    387e:	d103      	bne.n	3888 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3880:	4803      	ldr	r0, [pc, #12]	; (3890 <log_free+0x30>)
    3882:	a901      	add	r1, sp, #4
    3884:	f01b fd62 	bl	1f34c <k_mem_slab_free>
}
    3888:	b003      	add	sp, #12
    388a:	f85d fb04 	ldr.w	pc, [sp], #4
    388e:	bf00      	nop
    3890:	200011c4 	.word	0x200011c4

00003894 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3894:	2320      	movs	r3, #32
    3896:	4902      	ldr	r1, [pc, #8]	; (38a0 <log_msg_pool_init+0xc>)
    3898:	4802      	ldr	r0, [pc, #8]	; (38a4 <log_msg_pool_init+0x10>)
    389a:	461a      	mov	r2, r3
    389c:	f01b bd3b 	b.w	1f316 <k_mem_slab_init>
    38a0:	20004ea8 	.word	0x20004ea8
    38a4:	200011e4 	.word	0x200011e4

000038a8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    38a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    38aa:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    38ac:	4d09      	ldr	r5, [pc, #36]	; (38d4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    38ae:	9301      	str	r3, [sp, #4]
    38b0:	2001      	movs	r0, #1
    38b2:	f7ff fe7d 	bl	35b0 <z_impl_log_process>
    38b6:	4604      	mov	r4, r0
			z_log_dropped();
    38b8:	f7ff fda4 	bl	3404 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    38bc:	2200      	movs	r2, #0
    38be:	2300      	movs	r3, #0
    38c0:	a901      	add	r1, sp, #4
    38c2:	4628      	mov	r0, r5
    38c4:	f017 fa9e 	bl	1ae04 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    38c8:	b108      	cbz	r0, 38ce <log_msg_no_space_handle+0x26>
    38ca:	2c00      	cmp	r4, #0
    38cc:	d1f0      	bne.n	38b0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    38ce:	9801      	ldr	r0, [sp, #4]
    38d0:	b003      	add	sp, #12
    38d2:	bd30      	pop	{r4, r5, pc}
    38d4:	200011e4 	.word	0x200011e4

000038d8 <log_msg_chunk_alloc>:
{
    38d8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    38da:	2300      	movs	r3, #0
    38dc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    38de:	4807      	ldr	r0, [pc, #28]	; (38fc <log_msg_chunk_alloc+0x24>)
    38e0:	2200      	movs	r2, #0
    38e2:	2300      	movs	r3, #0
    38e4:	a901      	add	r1, sp, #4
    38e6:	f017 fa8d 	bl	1ae04 <k_mem_slab_alloc>
	if (err != 0) {
    38ea:	b110      	cbz	r0, 38f2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    38ec:	f7ff ffdc 	bl	38a8 <log_msg_no_space_handle>
    38f0:	9001      	str	r0, [sp, #4]
}
    38f2:	9801      	ldr	r0, [sp, #4]
    38f4:	b003      	add	sp, #12
    38f6:	f85d fb04 	ldr.w	pc, [sp], #4
    38fa:	bf00      	nop
    38fc:	200011e4 	.word	0x200011e4

00003900 <msg_free>:
{
    3900:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3902:	7a03      	ldrb	r3, [r0, #8]
    3904:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    3906:	07dc      	lsls	r4, r3, #31
{
    3908:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    390a:	d41e      	bmi.n	394a <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    390c:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    390e:	092d      	lsrs	r5, r5, #4
    3910:	d01b      	beq.n	394a <msg_free+0x4a>
		uint32_t smask = 0U;
    3912:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    3914:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    3916:	9801      	ldr	r0, [sp, #4]
    3918:	4631      	mov	r1, r6
    391a:	f019 f9dd 	bl	1ccd8 <log_msg_arg_get>
    391e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    3920:	f7ff fe36 	bl	3590 <log_is_strdup>
    3924:	b170      	cbz	r0, 3944 <msg_free+0x44>
				if (smask == 0U) {
    3926:	b934      	cbnz	r4, 3936 <msg_free+0x36>
					smask = z_log_get_s_mask(
    3928:	9b01      	ldr	r3, [sp, #4]
    392a:	4629      	mov	r1, r5
    392c:	6918      	ldr	r0, [r3, #16]
    392e:	f019 f8d4 	bl	1cada <z_log_get_s_mask>
					if (smask == 0U) {
    3932:	4604      	mov	r4, r0
    3934:	b148      	cbz	r0, 394a <msg_free+0x4a>
				if (smask & BIT(i)) {
    3936:	fa24 f306 	lsr.w	r3, r4, r6
    393a:	07d9      	lsls	r1, r3, #31
    393c:	d502      	bpl.n	3944 <msg_free+0x44>
					log_free(buf);
    393e:	4638      	mov	r0, r7
    3940:	f7ff ff8e 	bl	3860 <log_free>
		for (i = 0U; i < nargs; i++) {
    3944:	3601      	adds	r6, #1
    3946:	42ae      	cmp	r6, r5
    3948:	d3e5      	bcc.n	3916 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    394a:	9b01      	ldr	r3, [sp, #4]
    394c:	7a1a      	ldrb	r2, [r3, #8]
    394e:	0792      	lsls	r2, r2, #30
    3950:	d504      	bpl.n	395c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    3952:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3954:	4c08      	ldr	r4, [pc, #32]	; (3978 <msg_free+0x78>)
    3956:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3958:	9b03      	ldr	r3, [sp, #12]
    395a:	b92b      	cbnz	r3, 3968 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    395c:	4806      	ldr	r0, [pc, #24]	; (3978 <msg_free+0x78>)
    395e:	a901      	add	r1, sp, #4
    3960:	f01b fcf4 	bl	1f34c <k_mem_slab_free>
}
    3964:	b005      	add	sp, #20
    3966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    3968:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    396a:	a903      	add	r1, sp, #12
    396c:	4620      	mov	r0, r4
    396e:	f01b fced 	bl	1f34c <k_mem_slab_free>
		cont = next;
    3972:	9503      	str	r5, [sp, #12]
    3974:	e7f0      	b.n	3958 <msg_free+0x58>
    3976:	bf00      	nop
    3978:	200011e4 	.word	0x200011e4

0000397c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    397c:	b40e      	push	{r1, r2, r3}
    397e:	b503      	push	{r0, r1, lr}
    3980:	ab03      	add	r3, sp, #12
    3982:	4601      	mov	r1, r0
    3984:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3988:	4804      	ldr	r0, [pc, #16]	; (399c <print_formatted+0x20>)
	va_start(args, fmt);
    398a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    398c:	f7ff f90c 	bl	2ba8 <cbvprintf>
	va_end(args);

	return length;
}
    3990:	b002      	add	sp, #8
    3992:	f85d eb04 	ldr.w	lr, [sp], #4
    3996:	b003      	add	sp, #12
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	0001d19d 	.word	0x0001d19d

000039a0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    39a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39a4:	461d      	mov	r5, r3
    39a6:	9b08      	ldr	r3, [sp, #32]
    39a8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    39aa:	06da      	lsls	r2, r3, #27
{
    39ac:	4604      	mov	r4, r0
    39ae:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    39b0:	d405      	bmi.n	39be <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    39b2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    39b4:	bf4c      	ite	mi
    39b6:	492a      	ldrmi	r1, [pc, #168]	; (3a60 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    39b8:	492a      	ldrpl	r1, [pc, #168]	; (3a64 <hexdump_line_print+0xc4>)
    39ba:	f7ff ffdf 	bl	397c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    39be:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3a68 <hexdump_line_print+0xc8>
{
    39c2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    39c6:	45a8      	cmp	r8, r5
    39c8:	db2a      	blt.n	3a20 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    39ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3a6c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    39ce:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3a70 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    39d2:	f8df a094 	ldr.w	sl, [pc, #148]	; 3a68 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39d6:	2500      	movs	r5, #0
		if (i < length) {
    39d8:	42bd      	cmp	r5, r7
    39da:	d22f      	bcs.n	3a3c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    39dc:	5d72      	ldrb	r2, [r6, r5]
    39de:	4649      	mov	r1, r9
    39e0:	4620      	mov	r0, r4
    39e2:	f7ff ffcb 	bl	397c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39e6:	3501      	adds	r5, #1
    39e8:	2d10      	cmp	r5, #16
    39ea:	d120      	bne.n	3a2e <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    39ec:	4921      	ldr	r1, [pc, #132]	; (3a74 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    39ee:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3a68 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    39f2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3a78 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    39f6:	4620      	mov	r0, r4
    39f8:	f7ff ffc0 	bl	397c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39fc:	2500      	movs	r5, #0
		if (i < length) {
    39fe:	42af      	cmp	r7, r5
    3a00:	d928      	bls.n	3a54 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    3a02:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    3a04:	f1a2 0320 	sub.w	r3, r2, #32
    3a08:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    3a0a:	bf28      	it	cs
    3a0c:	222e      	movcs	r2, #46	; 0x2e
    3a0e:	4649      	mov	r1, r9
    3a10:	4620      	mov	r0, r4
    3a12:	f7ff ffb3 	bl	397c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a16:	3501      	adds	r5, #1
    3a18:	2d10      	cmp	r5, #16
    3a1a:	d114      	bne.n	3a46 <hexdump_line_print+0xa6>
		}
	}
}
    3a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    3a20:	4649      	mov	r1, r9
    3a22:	4620      	mov	r0, r4
    3a24:	f7ff ffaa 	bl	397c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3a28:	f108 0801 	add.w	r8, r8, #1
    3a2c:	e7cb      	b.n	39c6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    3a2e:	076a      	lsls	r2, r5, #29
    3a30:	d1d2      	bne.n	39d8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    3a32:	4651      	mov	r1, sl
    3a34:	4620      	mov	r0, r4
    3a36:	f7ff ffa1 	bl	397c <print_formatted>
    3a3a:	e7cd      	b.n	39d8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    3a3c:	4641      	mov	r1, r8
    3a3e:	4620      	mov	r0, r4
    3a40:	f7ff ff9c 	bl	397c <print_formatted>
    3a44:	e7cf      	b.n	39e6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    3a46:	076b      	lsls	r3, r5, #29
    3a48:	d1d9      	bne.n	39fe <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    3a4a:	4641      	mov	r1, r8
    3a4c:	4620      	mov	r0, r4
    3a4e:	f7ff ff95 	bl	397c <print_formatted>
    3a52:	e7d4      	b.n	39fe <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    3a54:	4641      	mov	r1, r8
    3a56:	4620      	mov	r0, r4
    3a58:	f7ff ff90 	bl	397c <print_formatted>
    3a5c:	e7db      	b.n	3a16 <hexdump_line_print+0x76>
    3a5e:	bf00      	nop
    3a60:	00021928 	.word	0x00021928
    3a64:	00021927 	.word	0x00021927
    3a68:	00021932 	.word	0x00021932
    3a6c:	00021930 	.word	0x00021930
    3a70:	0002192a 	.word	0x0002192a
    3a74:	00021934 	.word	0x00021934
    3a78:	00021936 	.word	0x00021936

00003a7c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a80:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3a82:	f011 0602 	ands.w	r6, r1, #2
{
    3a86:	9205      	str	r2, [sp, #20]
    3a88:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    3a8c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    3a90:	4607      	mov	r7, r0
    3a92:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3a94:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3a98:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3a9c:	d006      	beq.n	3aac <prefix_print+0x30>
	if (!format) {
    3a9e:	f011 0f44 	tst.w	r1, #68	; 0x44
    3aa2:	d138      	bne.n	3b16 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    3aa4:	4933      	ldr	r1, [pc, #204]	; (3b74 <prefix_print+0xf8>)
    3aa6:	f7ff ff69 	bl	397c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    3aaa:	4606      	mov	r6, r0
	if (color) {
    3aac:	f1ba 0f00 	cmp.w	sl, #0
    3ab0:	d00a      	beq.n	3ac8 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    3ab2:	4b31      	ldr	r3, [pc, #196]	; (3b78 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    3ab4:	4931      	ldr	r1, [pc, #196]	; (3b7c <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    3ab6:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    3aba:	4b31      	ldr	r3, [pc, #196]	; (3b80 <prefix_print+0x104>)
    3abc:	4638      	mov	r0, r7
    3abe:	2a00      	cmp	r2, #0
    3ac0:	bf08      	it	eq
    3ac2:	461a      	moveq	r2, r3
    3ac4:	f7ff ff5a 	bl	397c <print_formatted>
	if (level_on) {
    3ac8:	b13d      	cbz	r5, 3ada <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    3aca:	4b2e      	ldr	r3, [pc, #184]	; (3b84 <prefix_print+0x108>)
    3acc:	492e      	ldr	r1, [pc, #184]	; (3b88 <prefix_print+0x10c>)
    3ace:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    3ad2:	4638      	mov	r0, r7
    3ad4:	f7ff ff52 	bl	397c <print_formatted>
    3ad8:	4605      	mov	r5, r0
	if (source_id >= 0) {
    3ada:	f1b9 0f00 	cmp.w	r9, #0
    3ade:	db16      	blt.n	3b0e <prefix_print+0x92>
		total += print_formatted(output,
    3ae0:	9b05      	ldr	r3, [sp, #20]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d043      	beq.n	3b6e <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3ae6:	2301      	movs	r3, #1
    3ae8:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    3aec:	4b27      	ldr	r3, [pc, #156]	; (3b8c <prefix_print+0x110>)
    3aee:	4c28      	ldr	r4, [pc, #160]	; (3b90 <prefix_print+0x114>)
    3af0:	f018 0f10 	tst.w	r8, #16
    3af4:	bf18      	it	ne
    3af6:	461c      	movne	r4, r3
    3af8:	4649      	mov	r1, r9
    3afa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    3afe:	f7ff fcbd 	bl	347c <log_source_name_get>
    3b02:	4621      	mov	r1, r4
    3b04:	4602      	mov	r2, r0
    3b06:	4638      	mov	r0, r7
    3b08:	f7ff ff38 	bl	397c <print_formatted>
    3b0c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    3b0e:	19a8      	adds	r0, r5, r6
    3b10:	b007      	add	sp, #28
    3b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    3b16:	4b1f      	ldr	r3, [pc, #124]	; (3b94 <prefix_print+0x118>)
    3b18:	6819      	ldr	r1, [r3, #0]
    3b1a:	b331      	cbz	r1, 3b6a <prefix_print+0xee>
		timestamp /= timestamp_div;
    3b1c:	4b1e      	ldr	r3, [pc, #120]	; (3b98 <prefix_print+0x11c>)
    3b1e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    3b28:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    3b2c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    3b30:	fbb4 f2f6 	udiv	r2, r4, r6
    3b34:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    3b38:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    3b3c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    3b40:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3b44:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    3b48:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3b4c:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    3b50:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3b54:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    3b58:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3b5a:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    3b5e:	e9cd e101 	strd	lr, r1, [sp, #4]
    3b62:	490e      	ldr	r1, [pc, #56]	; (3b9c <prefix_print+0x120>)
    3b64:	f7ff ff0a 	bl	397c <print_formatted>
    3b68:	e79f      	b.n	3aaa <prefix_print+0x2e>
		length = 0;
    3b6a:	4608      	mov	r0, r1
    3b6c:	e79d      	b.n	3aaa <prefix_print+0x2e>
		total += print_formatted(output,
    3b6e:	4c08      	ldr	r4, [pc, #32]	; (3b90 <prefix_print+0x114>)
    3b70:	e7c2      	b.n	3af8 <prefix_print+0x7c>
    3b72:	bf00      	nop
    3b74:	00021947 	.word	0x00021947
    3b78:	000201f0 	.word	0x000201f0
    3b7c:	00022495 	.word	0x00022495
    3b80:	00021939 	.word	0x00021939
    3b84:	00020204 	.word	0x00020204
    3b88:	0002196c 	.word	0x0002196c
    3b8c:	00021943 	.word	0x00021943
    3b90:	0002193e 	.word	0x0002193e
    3b94:	20001200 	.word	0x20001200
    3b98:	20001204 	.word	0x20001204
    3b9c:	00021950 	.word	0x00021950

00003ba0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    3ba0:	b538      	push	{r3, r4, r5, lr}
    3ba2:	460c      	mov	r4, r1
	if (color) {
    3ba4:	07e1      	lsls	r1, r4, #31
{
    3ba6:	4605      	mov	r5, r0
	if (color) {
    3ba8:	d503      	bpl.n	3bb2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    3baa:	4a08      	ldr	r2, [pc, #32]	; (3bcc <postfix_print+0x2c>)
    3bac:	4908      	ldr	r1, [pc, #32]	; (3bd0 <postfix_print+0x30>)
    3bae:	f7ff fee5 	bl	397c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3bb2:	06e2      	lsls	r2, r4, #27
    3bb4:	d408      	bmi.n	3bc8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3bb6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    3bb8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    3bba:	bf4c      	ite	mi
    3bbc:	4905      	ldrmi	r1, [pc, #20]	; (3bd4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    3bbe:	4906      	ldrpl	r1, [pc, #24]	; (3bd8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    3bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    3bc4:	f7ff beda 	b.w	397c <print_formatted>
}
    3bc8:	bd38      	pop	{r3, r4, r5, pc}
    3bca:	bf00      	nop
    3bcc:	00021939 	.word	0x00021939
    3bd0:	00022495 	.word	0x00022495
    3bd4:	00021928 	.word	0x00021928
    3bd8:	00021927 	.word	0x00021927

00003bdc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    3bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    3be0:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    3be2:	f013 0807 	ands.w	r8, r3, #7
{
    3be6:	b08a      	sub	sp, #40	; 0x28
    3be8:	4605      	mov	r5, r0
    3bea:	460e      	mov	r6, r1
    3bec:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    3bee:	d022      	beq.n	3c36 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3bf0:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    3bf2:	8949      	ldrh	r1, [r1, #10]
    3bf4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    3bf8:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3bfc:	43d2      	mvns	r2, r2
    3bfe:	e9cd 8300 	strd	r8, r3, [sp]
    3c02:	9102      	str	r1, [sp, #8]
    3c04:	68f3      	ldr	r3, [r6, #12]
    3c06:	f002 0201 	and.w	r2, r2, #1
    3c0a:	4639      	mov	r1, r7
    3c0c:	f7ff ff36 	bl	3a7c <prefix_print>
    3c10:	4681      	mov	r9, r0
    3c12:	7a34      	ldrb	r4, [r6, #8]
    3c14:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    3c16:	f014 0401 	ands.w	r4, r4, #1
    3c1a:	d00e      	beq.n	3c3a <log_output_msg_process+0x5e>
		std_print(msg, output);
    3c1c:	4629      	mov	r1, r5
    3c1e:	4630      	mov	r0, r6
    3c20:	f019 f952 	bl	1cec8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    3c24:	f1b8 0f00 	cmp.w	r8, #0
    3c28:	d02b      	beq.n	3c82 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    3c2a:	4642      	mov	r2, r8
    3c2c:	4639      	mov	r1, r7
    3c2e:	4628      	mov	r0, r5
    3c30:	f7ff ffb6 	bl	3ba0 <postfix_print>
    3c34:	e025      	b.n	3c82 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    3c36:	46c1      	mov	r9, r8
    3c38:	e7eb      	b.n	3c12 <log_output_msg_process+0x36>
	} else if (raw_string) {
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	d126      	bne.n	3c8e <log_output_msg_process+0xb2>
	size_t offset = 0;
    3c40:	4627      	mov	r7, r4
		length = output->size;
    3c42:	68eb      	ldr	r3, [r5, #12]
    3c44:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    3c46:	aa06      	add	r2, sp, #24
    3c48:	463b      	mov	r3, r7
    3c4a:	68a9      	ldr	r1, [r5, #8]
    3c4c:	4630      	mov	r0, r6
    3c4e:	f019 f927 	bl	1cea0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    3c52:	9a06      	ldr	r2, [sp, #24]
    3c54:	686b      	ldr	r3, [r5, #4]
    3c56:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3c58:	b13a      	cbz	r2, 3c6a <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    3c5a:	68ab      	ldr	r3, [r5, #8]
    3c5c:	4413      	add	r3, r2
    3c5e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    3c62:	f1a4 030a 	sub.w	r3, r4, #10
    3c66:	425c      	negs	r4, r3
    3c68:	415c      	adcs	r4, r3
		log_output_flush(output);
    3c6a:	4628      	mov	r0, r5
    3c6c:	f019 fa89 	bl	1d182 <log_output_flush>
		offset += length;
    3c70:	9b06      	ldr	r3, [sp, #24]
    3c72:	441f      	add	r7, r3
	} while (length > 0);
    3c74:	2b00      	cmp	r3, #0
    3c76:	d1e4      	bne.n	3c42 <log_output_msg_process+0x66>
	if (eol) {
    3c78:	b11c      	cbz	r4, 3c82 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    3c7a:	4914      	ldr	r1, [pc, #80]	; (3ccc <log_output_msg_process+0xf0>)
    3c7c:	4628      	mov	r0, r5
    3c7e:	f7ff fe7d 	bl	397c <print_formatted>
	}

	log_output_flush(output);
    3c82:	4628      	mov	r0, r5
}
    3c84:	b00a      	add	sp, #40	; 0x28
    3c86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    3c8a:	f019 ba7a 	b.w	1d182 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    3c8e:	4630      	mov	r0, r6
    3c90:	f019 f854 	bl	1cd3c <log_msg_str_get>
    3c94:	490e      	ldr	r1, [pc, #56]	; (3cd0 <log_output_msg_process+0xf4>)
    3c96:	4602      	mov	r2, r0
    3c98:	4628      	mov	r0, r5
    3c9a:	f7ff fe6f 	bl	397c <print_formatted>
		length = sizeof(buf);
    3c9e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3ca2:	aa05      	add	r2, sp, #20
    3ca4:	4623      	mov	r3, r4
    3ca6:	a906      	add	r1, sp, #24
    3ca8:	4630      	mov	r0, r6
		length = sizeof(buf);
    3caa:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3cae:	f019 f8f7 	bl	1cea0 <log_msg_hexdump_data_get>
		if (length) {
    3cb2:	9a05      	ldr	r2, [sp, #20]
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	d0b8      	beq.n	3c2a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    3cb8:	464b      	mov	r3, r9
    3cba:	9700      	str	r7, [sp, #0]
    3cbc:	a906      	add	r1, sp, #24
    3cbe:	4628      	mov	r0, r5
    3cc0:	f7ff fe6e 	bl	39a0 <hexdump_line_print>
			offset += length;
    3cc4:	9b05      	ldr	r3, [sp, #20]
    3cc6:	441c      	add	r4, r3
		length = sizeof(buf);
    3cc8:	e7eb      	b.n	3ca2 <log_output_msg_process+0xc6>
    3cca:	bf00      	nop
    3ccc:	00021972 	.word	0x00021972
    3cd0:	00022495 	.word	0x00022495

00003cd4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3cd6:	f242 730f 	movw	r3, #9999	; 0x270f
    3cda:	428b      	cmp	r3, r1
    3cdc:	bf28      	it	cs
    3cde:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    3ce0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3ce2:	4a0f      	ldr	r2, [pc, #60]	; (3d20 <log_output_dropped_process+0x4c>)
{
    3ce4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3ce6:	2105      	movs	r1, #5
    3ce8:	4668      	mov	r0, sp
    3cea:	f018 fae4 	bl	1c2b6 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3cee:	6863      	ldr	r3, [r4, #4]
    3cf0:	490c      	ldr	r1, [pc, #48]	; (3d24 <log_output_dropped_process+0x50>)
    3cf2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3cf4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3cf6:	220b      	movs	r2, #11
    3cf8:	4628      	mov	r0, r5
    3cfa:	f019 f8d8 	bl	1ceae <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    3cfe:	6863      	ldr	r3, [r4, #4]
    3d00:	4632      	mov	r2, r6
    3d02:	4669      	mov	r1, sp
    3d04:	4628      	mov	r0, r5
    3d06:	685b      	ldr	r3, [r3, #4]
    3d08:	f019 f8d1 	bl	1ceae <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3d0c:	6863      	ldr	r3, [r4, #4]
    3d0e:	4906      	ldr	r1, [pc, #24]	; (3d28 <log_output_dropped_process+0x54>)
    3d10:	685b      	ldr	r3, [r3, #4]
    3d12:	221b      	movs	r2, #27
    3d14:	4628      	mov	r0, r5
    3d16:	f019 f8ca 	bl	1ceae <buffer_write>
		     output->control_block->ctx);
}
    3d1a:	b002      	add	sp, #8
    3d1c:	bd70      	pop	{r4, r5, r6, pc}
    3d1e:	bf00      	nop
    3d20:	00022099 	.word	0x00022099
    3d24:	000219b0 	.word	0x000219b0
    3d28:	00021994 	.word	0x00021994

00003d2c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3d2c:	4a08      	ldr	r2, [pc, #32]	; (3d50 <log_output_timestamp_freq_set+0x24>)
{
    3d2e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    3d30:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3d32:	4c08      	ldr	r4, [pc, #32]	; (3d54 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    3d34:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3d36:	2100      	movs	r1, #0
    3d38:	42a0      	cmp	r0, r4
    3d3a:	d804      	bhi.n	3d46 <log_output_timestamp_freq_set+0x1a>
    3d3c:	b101      	cbz	r1, 3d40 <log_output_timestamp_freq_set+0x14>
    3d3e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3d40:	4b05      	ldr	r3, [pc, #20]	; (3d58 <log_output_timestamp_freq_set+0x2c>)
    3d42:	6018      	str	r0, [r3, #0]
}
    3d44:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    3d46:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3d48:	005b      	lsls	r3, r3, #1
    3d4a:	2101      	movs	r1, #1
    3d4c:	e7f4      	b.n	3d38 <log_output_timestamp_freq_set+0xc>
    3d4e:	bf00      	nop
    3d50:	20001204 	.word	0x20001204
    3d54:	000f4240 	.word	0x000f4240
    3d58:	20001200 	.word	0x20001200

00003d5c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3d5c:	4b01      	ldr	r3, [pc, #4]	; (3d64 <log_backend_rtt_init+0x8>)
    3d5e:	2201      	movs	r2, #1
    3d60:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3d62:	4770      	bx	lr
    3d64:	2000285e 	.word	0x2000285e

00003d68 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    3d68:	4b02      	ldr	r3, [pc, #8]	; (3d74 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3d6a:	4803      	ldr	r0, [pc, #12]	; (3d78 <panic+0x10>)
    3d6c:	2201      	movs	r2, #1
    3d6e:	701a      	strb	r2, [r3, #0]
    3d70:	f019 ba07 	b.w	1d182 <log_output_flush>
    3d74:	2000285f 	.word	0x2000285f
    3d78:	00020234 	.word	0x00020234

00003d7c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3d7c:	4801      	ldr	r0, [pc, #4]	; (3d84 <dropped+0x8>)
    3d7e:	f7ff bfa9 	b.w	3cd4 <log_output_dropped_process>
    3d82:	bf00      	nop
    3d84:	00020234 	.word	0x00020234

00003d88 <put>:
{
    3d88:	b510      	push	{r4, lr}
	log_msg_get(msg);
    3d8a:	4608      	mov	r0, r1
    3d8c:	460c      	mov	r4, r1
    3d8e:	f018 ff93 	bl	1ccb8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3d92:	4805      	ldr	r0, [pc, #20]	; (3da8 <put+0x20>)
    3d94:	4621      	mov	r1, r4
    3d96:	220f      	movs	r2, #15
    3d98:	f7ff ff20 	bl	3bdc <log_output_msg_process>
	log_msg_put(msg);
    3d9c:	4620      	mov	r0, r4
}
    3d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3da2:	f018 bfb8 	b.w	1cd16 <log_msg_put>
    3da6:	bf00      	nop
    3da8:	00020234 	.word	0x00020234

00003dac <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3dac:	4b05      	ldr	r3, [pc, #20]	; (3dc4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    3dae:	781b      	ldrb	r3, [r3, #0]
    3db0:	b11b      	cbz	r3, 3dba <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    3db2:	f241 3088 	movw	r0, #5000	; 0x1388
    3db6:	f01b be28 	b.w	1fa0a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    3dba:	20a4      	movs	r0, #164	; 0xa4
    3dbc:	2100      	movs	r1, #0
    3dbe:	f017 beef 	b.w	1bba0 <z_impl_k_sleep>
    3dc2:	bf00      	nop
    3dc4:	2000285f 	.word	0x2000285f

00003dc8 <data_out_block_mode>:
{
    3dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3dcc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3e5c <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    3dd0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3e60 <data_out_block_mode+0x98>
{
    3dd4:	4680      	mov	r8, r0
    3dd6:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3dd8:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    3dda:	f899 5000 	ldrb.w	r5, [r9]
    3dde:	b9cd      	cbnz	r5, 3e14 <data_out_block_mode+0x4c>
    3de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3de8:	4650      	mov	r0, sl
    3dea:	f017 f907 	bl	1affc <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3dee:	463a      	mov	r2, r7
    3df0:	4641      	mov	r1, r8
    3df2:	4628      	mov	r0, r5
    3df4:	f016 fdde 	bl	1a9b4 <SEGGER_RTT_WriteSkipNoLock>
    3df8:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    3dfa:	4650      	mov	r0, sl
    3dfc:	f017 f976 	bl	1b0ec <z_impl_k_mutex_unlock>
		if (ret) {
    3e00:	4d18      	ldr	r5, [pc, #96]	; (3e64 <data_out_block_mode+0x9c>)
    3e02:	b1fe      	cbz	r6, 3e44 <data_out_block_mode+0x7c>
	host_present = true;
    3e04:	2301      	movs	r3, #1
    3e06:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    3e08:	f899 3000 	ldrb.w	r3, [r9]
    3e0c:	b96b      	cbnz	r3, 3e2a <data_out_block_mode+0x62>
}
    3e0e:	4638      	mov	r0, r7
    3e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3e14:	463a      	mov	r2, r7
    3e16:	4641      	mov	r1, r8
    3e18:	2000      	movs	r0, #0
    3e1a:	f016 fdcb 	bl	1a9b4 <SEGGER_RTT_WriteSkipNoLock>
    3e1e:	4606      	mov	r6, r0
    3e20:	e7ee      	b.n	3e00 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    3e22:	b95c      	cbnz	r4, 3e3c <data_out_block_mode+0x74>
		host_present = false;
    3e24:	702c      	strb	r4, [r5, #0]
    3e26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3e2a:	2000      	movs	r0, #0
    3e2c:	f016 fe3e 	bl	1aaac <SEGGER_RTT_HasDataUp>
    3e30:	2800      	cmp	r0, #0
    3e32:	d0ec      	beq.n	3e0e <data_out_block_mode+0x46>
    3e34:	782b      	ldrb	r3, [r5, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d1f3      	bne.n	3e22 <data_out_block_mode+0x5a>
    3e3a:	e7e8      	b.n	3e0e <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    3e3c:	3c01      	subs	r4, #1
    3e3e:	f7ff ffb5 	bl	3dac <on_failed_write.part.0>
    3e42:	e7f2      	b.n	3e2a <data_out_block_mode+0x62>
		} else if (host_present) {
    3e44:	782b      	ldrb	r3, [r5, #0]
    3e46:	b113      	cbz	r3, 3e4e <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    3e48:	3c01      	subs	r4, #1
    3e4a:	d104      	bne.n	3e56 <data_out_block_mode+0x8e>
		host_present = false;
    3e4c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    3e4e:	782b      	ldrb	r3, [r5, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d1c2      	bne.n	3dda <data_out_block_mode+0x12>
    3e54:	e7db      	b.n	3e0e <data_out_block_mode+0x46>
    3e56:	f7ff ffa9 	bl	3dac <on_failed_write.part.0>
    3e5a:	e7f8      	b.n	3e4e <data_out_block_mode+0x86>
    3e5c:	2000285f 	.word	0x2000285f
    3e60:	200006ec 	.word	0x200006ec
    3e64:	2000285e 	.word	0x2000285e

00003e68 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e6a:	4605      	mov	r5, r0
	__asm__ volatile(
    3e6c:	f04f 0320 	mov.w	r3, #32
    3e70:	f3ef 8611 	mrs	r6, BASEPRI
    3e74:	f383 8811 	msr	BASEPRI, r3
    3e78:	f3bf 8f6f 	isb	sy
	return list->head;
    3e7c:	4b09      	ldr	r3, [pc, #36]	; (3ea4 <pm_state_notify+0x3c>)
    3e7e:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e80:	b15c      	cbz	r4, 3e9a <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3e82:	4f09      	ldr	r7, [pc, #36]	; (3ea8 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    3e84:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3e88:	2d00      	cmp	r5, #0
    3e8a:	bf08      	it	eq
    3e8c:	4613      	moveq	r3, r2
		if (callback) {
    3e8e:	b10b      	cbz	r3, 3e94 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    3e90:	7838      	ldrb	r0, [r7, #0]
    3e92:	4798      	blx	r3
	return node->next;
    3e94:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e96:	2c00      	cmp	r4, #0
    3e98:	d1f4      	bne.n	3e84 <pm_state_notify+0x1c>
	__asm__ volatile(
    3e9a:	f386 8811 	msr	BASEPRI, r6
    3e9e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ea4:	2000121c 	.word	0x2000121c
    3ea8:	20001224 	.word	0x20001224

00003eac <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3eac:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <pm_system_resume+0x24>)
{
    3eae:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    3eb0:	681c      	ldr	r4, [r3, #0]
    3eb2:	b95c      	cbnz	r4, 3ecc <pm_system_resume+0x20>
		post_ops_done = 1;
    3eb4:	2201      	movs	r2, #1
    3eb6:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    3eb8:	4b06      	ldr	r3, [pc, #24]	; (3ed4 <pm_system_resume+0x28>)
    3eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ebe:	f019 fd09 	bl	1d8d4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    3ec2:	4620      	mov	r0, r4
	}
}
    3ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    3ec8:	f7ff bfce 	b.w	3e68 <pm_state_notify>
}
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	bf00      	nop
    3ed0:	20000164 	.word	0x20000164
    3ed4:	20001224 	.word	0x20001224

00003ed8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eda:	b085      	sub	sp, #20
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3edc:	466e      	mov	r6, sp
    3ede:	4601      	mov	r1, r0
{
    3ee0:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    3ee2:	4630      	mov	r0, r6
    3ee4:	f019 f975 	bl	1d1d2 <pm_policy_next_state>
    3ee8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3eec:	4c14      	ldr	r4, [pc, #80]	; (3f40 <pm_system_suspend+0x68>)
    3eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3ef2:	7820      	ldrb	r0, [r4, #0]
    3ef4:	4627      	mov	r7, r4
    3ef6:	b300      	cbz	r0, 3f3a <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3ef8:	4b12      	ldr	r3, [pc, #72]	; (3f44 <pm_system_suspend+0x6c>)
    3efa:	2100      	movs	r1, #0
    3efc:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3efe:	1c6b      	adds	r3, r5, #1
    3f00:	d00d      	beq.n	3f1e <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3f02:	4811      	ldr	r0, [pc, #68]	; (3f48 <pm_system_suspend+0x70>)
    3f04:	4616      	mov	r6, r2
    3f06:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3f0a:	4a10      	ldr	r2, [pc, #64]	; (3f4c <pm_system_suspend+0x74>)
    3f0c:	2300      	movs	r3, #0
    3f0e:	fbe6 010c 	umlal	r0, r1, r6, ip
    3f12:	f7fc f8f5 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    3f16:	2101      	movs	r1, #1
    3f18:	1a28      	subs	r0, r5, r0
    3f1a:	f01b fd56 	bl	1f9ca <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3f1e:	f017 fbc1 	bl	1b6a4 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    3f22:	2001      	movs	r0, #1
    3f24:	f7ff ffa0 	bl	3e68 <pm_state_notify>
	pm_power_state_set(z_power_state);
    3f28:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    3f2c:	f019 fcbf 	bl	1d8ae <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3f30:	f7ff ffbc 	bl	3eac <pm_system_resume>
	k_sched_unlock();
    3f34:	f017 fc6e 	bl	1b814 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3f38:	7820      	ldrb	r0, [r4, #0]
}
    3f3a:	b005      	add	sp, #20
    3f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f3e:	bf00      	nop
    3f40:	20001224 	.word	0x20001224
    3f44:	20000164 	.word	0x20000164
    3f48:	000f423f 	.word	0x000f423f
    3f4c:	000f4240 	.word	0x000f4240

00003f50 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    3f50:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    3f52:	4c04      	ldr	r4, [pc, #16]	; (3f64 <rtt_console_init+0x14>)
    3f54:	4620      	mov	r0, r4
    3f56:	f7fe fd2d 	bl	29b4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    3f5a:	4620      	mov	r0, r4
    3f5c:	f000 ffc0 	bl	4ee0 <__stdout_hook_install>

	return 0;
}
    3f60:	2000      	movs	r0, #0
    3f62:	bd10      	pop	{r4, pc}
    3f64:	00003f69 	.word	0x00003f69

00003f68 <rtt_console_out>:
{
    3f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    3f6c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3fcc <rtt_console_out+0x64>
    3f70:	4e17      	ldr	r6, [pc, #92]	; (3fd0 <rtt_console_out+0x68>)
	char c = (char)character;
    3f72:	f88d 0007 	strb.w	r0, [sp, #7]
{
    3f76:	4604      	mov	r4, r0
	char c = (char)character;
    3f78:	2503      	movs	r5, #3
    3f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f82:	4640      	mov	r0, r8
    3f84:	f017 f83a 	bl	1affc <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3f88:	2201      	movs	r2, #1
    3f8a:	f10d 0107 	add.w	r1, sp, #7
    3f8e:	2000      	movs	r0, #0
    3f90:	f016 fd5c 	bl	1aa4c <SEGGER_RTT_WriteNoLock>
    3f94:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    3f96:	4640      	mov	r0, r8
    3f98:	f017 f8a8 	bl	1b0ec <z_impl_k_mutex_unlock>
		if (cnt) {
    3f9c:	b12f      	cbz	r7, 3faa <rtt_console_out+0x42>
			host_present = true;
    3f9e:	2301      	movs	r3, #1
    3fa0:	7033      	strb	r3, [r6, #0]
}
    3fa2:	4620      	mov	r0, r4
    3fa4:	b002      	add	sp, #8
    3fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    3faa:	7833      	ldrb	r3, [r6, #0]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d0f8      	beq.n	3fa2 <rtt_console_out+0x3a>
			if (max_cnt) {
    3fb0:	3d01      	subs	r5, #1
    3fb2:	d008      	beq.n	3fc6 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    3fb4:	f01b f9f3 	bl	1f39e <k_is_in_isr>
    3fb8:	2800      	cmp	r0, #0
    3fba:	d1de      	bne.n	3f7a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    3fbc:	2100      	movs	r1, #0
    3fbe:	2042      	movs	r0, #66	; 0x42
    3fc0:	f017 fdee 	bl	1bba0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    3fc4:	e7d9      	b.n	3f7a <rtt_console_out+0x12>
				host_present = false;
    3fc6:	7035      	strb	r5, [r6, #0]
    3fc8:	e7eb      	b.n	3fa2 <rtt_console_out+0x3a>
    3fca:	bf00      	nop
    3fcc:	200006ec 	.word	0x200006ec
    3fd0:	20002860 	.word	0x20002860

00003fd4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3fd6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3fd8:	1ac3      	subs	r3, r0, r3
{
    3fda:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3fdc:	4907      	ldr	r1, [pc, #28]	; (3ffc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    3fde:	109b      	asrs	r3, r3, #2
{
    3fe0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3fe2:	4359      	muls	r1, r3
    3fe4:	4806      	ldr	r0, [pc, #24]	; (4000 <onoff_stop+0x2c>)
    3fe6:	2240      	movs	r2, #64	; 0x40
    3fe8:	f019 f914 	bl	1d214 <stop>
	notify(mgr, res);
    3fec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3fee:	4601      	mov	r1, r0
	notify(mgr, res);
    3ff0:	4620      	mov	r0, r4
}
    3ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3ff6:	4718      	bx	r3
    3ff8:	20001244 	.word	0x20001244
    3ffc:	b6db6db7 	.word	0xb6db6db7
    4000:	20000608 	.word	0x20000608

00004004 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4004:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4006:	4c0c      	ldr	r4, [pc, #48]	; (4038 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4008:	4a0c      	ldr	r2, [pc, #48]	; (403c <onoff_start+0x38>)
    400a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    400c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    400e:	9300      	str	r3, [sp, #0]
{
    4010:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4012:	460b      	mov	r3, r1
    4014:	490a      	ldr	r1, [pc, #40]	; (4040 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4016:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4018:	4361      	muls	r1, r4
{
    401a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    401c:	4809      	ldr	r0, [pc, #36]	; (4044 <onoff_start+0x40>)
    401e:	f019 f926 	bl	1d26e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4022:	1e01      	subs	r1, r0, #0
    4024:	da05      	bge.n	4032 <onoff_start+0x2e>
		notify(mgr, err);
    4026:	4630      	mov	r0, r6
    4028:	462b      	mov	r3, r5
	}
}
    402a:	b002      	add	sp, #8
    402c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4030:	4718      	bx	r3
}
    4032:	b002      	add	sp, #8
    4034:	bd70      	pop	{r4, r5, r6, pc}
    4036:	bf00      	nop
    4038:	20001244 	.word	0x20001244
    403c:	0001d2dd 	.word	0x0001d2dd
    4040:	b6db6db7 	.word	0xb6db6db7
    4044:	20000608 	.word	0x20000608

00004048 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4048:	2200      	movs	r2, #0
{
    404a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    404c:	2101      	movs	r1, #1
{
    404e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4050:	4610      	mov	r0, r2
    4052:	f000 fb47 	bl	46e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4056:	2000      	movs	r0, #0
    4058:	f000 fb12 	bl	4680 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    405c:	480f      	ldr	r0, [pc, #60]	; (409c <clk_init+0x54>)
    405e:	f016 fba1 	bl	1a7a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4062:	4b0f      	ldr	r3, [pc, #60]	; (40a0 <clk_init+0x58>)
    4064:	4298      	cmp	r0, r3
    4066:	d115      	bne.n	4094 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4068:	f01b f850 	bl	1f10c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    406c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    406e:	490d      	ldr	r1, [pc, #52]	; (40a4 <clk_init+0x5c>)
    4070:	4630      	mov	r0, r6
    4072:	f018 f97c 	bl	1c36e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4076:	2800      	cmp	r0, #0
    4078:	db0b      	blt.n	4092 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    407a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    407c:	4909      	ldr	r1, [pc, #36]	; (40a4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    407e:	2501      	movs	r5, #1
    4080:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4082:	f104 001c 	add.w	r0, r4, #28
    4086:	f018 f972 	bl	1c36e <onoff_manager_init>
		if (err < 0) {
    408a:	2800      	cmp	r0, #0
    408c:	db01      	blt.n	4092 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    408e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4090:	2000      	movs	r0, #0
}
    4092:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4094:	f06f 0004 	mvn.w	r0, #4
    4098:	e7fb      	b.n	4092 <clk_init+0x4a>
    409a:	bf00      	nop
    409c:	000040dd 	.word	0x000040dd
    40a0:	0bad0000 	.word	0x0bad0000
    40a4:	00020270 	.word	0x00020270

000040a8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    40a8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    40aa:	230c      	movs	r3, #12
    40ac:	4809      	ldr	r0, [pc, #36]	; (40d4 <clkstarted_handle.constprop.0+0x2c>)
    40ae:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    40b0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    40b2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    40b4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    40b8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    40ba:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    40bc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    40be:	4418      	add	r0, r3
    40c0:	f019 f895 	bl	1d1ee <set_on_state>
	if (callback) {
    40c4:	b12d      	cbz	r5, 40d2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    40c6:	4632      	mov	r2, r6
    40c8:	462b      	mov	r3, r5
    40ca:	4803      	ldr	r0, [pc, #12]	; (40d8 <clkstarted_handle.constprop.0+0x30>)
}
    40cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    40d0:	4718      	bx	r3
}
    40d2:	bd70      	pop	{r4, r5, r6, pc}
    40d4:	20001244 	.word	0x20001244
    40d8:	20000608 	.word	0x20000608

000040dc <clock_event_handler>:
	switch (event) {
    40dc:	b110      	cbz	r0, 40e4 <clock_event_handler+0x8>
    40de:	2801      	cmp	r0, #1
    40e0:	d004      	beq.n	40ec <clock_event_handler+0x10>
    40e2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    40e4:	4b03      	ldr	r3, [pc, #12]	; (40f4 <clock_event_handler+0x18>)
    40e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40e8:	075b      	lsls	r3, r3, #29
    40ea:	d101      	bne.n	40f0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    40ec:	f7ff bfdc 	b.w	40a8 <clkstarted_handle.constprop.0>
}
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop
    40f4:	20001244 	.word	0x20001244

000040f8 <generic_hfclk_start>:
{
    40f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    40fa:	f04f 0320 	mov.w	r3, #32
    40fe:	f3ef 8111 	mrs	r1, BASEPRI
    4102:	f383 8811 	msr	BASEPRI, r3
    4106:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    410a:	4a12      	ldr	r2, [pc, #72]	; (4154 <generic_hfclk_start+0x5c>)
    410c:	6813      	ldr	r3, [r2, #0]
    410e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4112:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4116:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4118:	d00c      	beq.n	4134 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    411a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    411e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4122:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4126:	f013 0301 	ands.w	r3, r3, #1
    412a:	d003      	beq.n	4134 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    412c:	480a      	ldr	r0, [pc, #40]	; (4158 <generic_hfclk_start+0x60>)
    412e:	f019 f85e 	bl	1d1ee <set_on_state>
			already_started = true;
    4132:	2301      	movs	r3, #1
	__asm__ volatile(
    4134:	f381 8811 	msr	BASEPRI, r1
    4138:	f3bf 8f6f 	isb	sy
	if (already_started) {
    413c:	b123      	cbz	r3, 4148 <generic_hfclk_start+0x50>
}
    413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4142:	2000      	movs	r0, #0
    4144:	f7ff bfb0 	b.w	40a8 <clkstarted_handle.constprop.0>
}
    4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    414c:	2001      	movs	r0, #1
    414e:	f01a bfe7 	b.w	1f120 <nrfx_clock_start>
    4152:	bf00      	nop
    4154:	20001294 	.word	0x20001294
    4158:	20001284 	.word	0x20001284

0000415c <api_blocking_start>:
{
    415c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    415e:	2200      	movs	r2, #0
    4160:	2301      	movs	r3, #1
    4162:	e9cd 2302 	strd	r2, r3, [sp, #8]
    4166:	ab04      	add	r3, sp, #16
    4168:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    416c:	4a09      	ldr	r2, [pc, #36]	; (4194 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    416e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4172:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4174:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4178:	f019 f8a9 	bl	1d2ce <api_start>
	if (err < 0) {
    417c:	2800      	cmp	r0, #0
    417e:	db05      	blt.n	418c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    4180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4184:	2300      	movs	r3, #0
    4186:	4668      	mov	r0, sp
    4188:	f017 f84c 	bl	1b224 <z_impl_k_sem_take>
}
    418c:	b007      	add	sp, #28
    418e:	f85d fb04 	ldr.w	pc, [sp], #4
    4192:	bf00      	nop
    4194:	0001d2fb 	.word	0x0001d2fb

00004198 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4198:	4b09      	ldr	r3, [pc, #36]	; (41c0 <generic_hfclk_stop+0x28>)
    419a:	f3bf 8f5b 	dmb	ish
    419e:	e853 2f00 	ldrex	r2, [r3]
    41a2:	f022 0102 	bic.w	r1, r2, #2
    41a6:	e843 1000 	strex	r0, r1, [r3]
    41aa:	2800      	cmp	r0, #0
    41ac:	d1f7      	bne.n	419e <generic_hfclk_stop+0x6>
    41ae:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    41b2:	07d3      	lsls	r3, r2, #31
    41b4:	d402      	bmi.n	41bc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    41b6:	2001      	movs	r0, #1
    41b8:	f016 bb04 	b.w	1a7c4 <nrfx_clock_stop>
}
    41bc:	4770      	bx	lr
    41be:	bf00      	nop
    41c0:	20001294 	.word	0x20001294

000041c4 <z_nrf_clock_control_get_onoff>:
}
    41c4:	4a02      	ldr	r2, [pc, #8]	; (41d0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    41c6:	b2c3      	uxtb	r3, r0
}
    41c8:	201c      	movs	r0, #28
    41ca:	fb03 2000 	mla	r0, r3, r0, r2
    41ce:	4770      	bx	lr
    41d0:	20001244 	.word	0x20001244

000041d4 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    41d6:	f3bf 8f5b 	dmb	ish
    41da:	e853 2f00 	ldrex	r2, [r3]
    41de:	f042 0101 	orr.w	r1, r2, #1
    41e2:	e843 1000 	strex	r0, r1, [r3]
    41e6:	2800      	cmp	r0, #0
    41e8:	d1f7      	bne.n	41da <z_nrf_clock_bt_ctlr_hf_request+0x6>
    41ea:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    41ee:	0793      	lsls	r3, r2, #30
    41f0:	d402      	bmi.n	41f8 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    41f2:	2001      	movs	r0, #1
    41f4:	f01a bf94 	b.w	1f120 <nrfx_clock_start>
}
    41f8:	4770      	bx	lr
    41fa:	bf00      	nop
    41fc:	20001294 	.word	0x20001294

00004200 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4200:	4b09      	ldr	r3, [pc, #36]	; (4228 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    4202:	f3bf 8f5b 	dmb	ish
    4206:	e853 2f00 	ldrex	r2, [r3]
    420a:	f022 0101 	bic.w	r1, r2, #1
    420e:	e843 1000 	strex	r0, r1, [r3]
    4212:	2800      	cmp	r0, #0
    4214:	d1f7      	bne.n	4206 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    4216:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    421a:	0793      	lsls	r3, r2, #30
    421c:	d402      	bmi.n	4224 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    421e:	2001      	movs	r0, #1
    4220:	f016 bad0 	b.w	1a7c4 <nrfx_clock_stop>
}
    4224:	4770      	bx	lr
    4226:	bf00      	nop
    4228:	20001294 	.word	0x20001294

0000422c <z_nrf_clock_control_lf_on>:
{
    422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4230:	4939      	ldr	r1, [pc, #228]	; (4318 <z_nrf_clock_control_lf_on+0xec>)
    4232:	f3bf 8f5b 	dmb	ish
    4236:	4607      	mov	r7, r0
    4238:	2201      	movs	r2, #1
    423a:	e851 3f00 	ldrex	r3, [r1]
    423e:	e841 2000 	strex	r0, r2, [r1]
    4242:	2800      	cmp	r0, #0
    4244:	d1f9      	bne.n	423a <z_nrf_clock_control_lf_on+0xe>
    4246:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    424a:	b933      	cbnz	r3, 425a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    424c:	4933      	ldr	r1, [pc, #204]	; (431c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    424e:	4834      	ldr	r0, [pc, #208]	; (4320 <z_nrf_clock_control_lf_on+0xf4>)
    4250:	604b      	str	r3, [r1, #4]
    4252:	60cb      	str	r3, [r1, #12]
    4254:	608a      	str	r2, [r1, #8]
    4256:	f018 f89d 	bl	1c394 <onoff_request>
	switch (start_mode) {
    425a:	1e7b      	subs	r3, r7, #1
    425c:	2b01      	cmp	r3, #1
    425e:	d82f      	bhi.n	42c0 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4260:	2f01      	cmp	r7, #1
    4262:	d107      	bne.n	4274 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4268:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    426c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4270:	2b01      	cmp	r3, #1
    4272:	d025      	beq.n	42c0 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4274:	f01b f893 	bl	1f39e <k_is_in_isr>
    4278:	4604      	mov	r4, r0
    427a:	b918      	cbnz	r0, 4284 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    427c:	4b29      	ldr	r3, [pc, #164]	; (4324 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    427e:	781b      	ldrb	r3, [r3, #0]
    4280:	2b00      	cmp	r3, #0
    4282:	d141      	bne.n	4308 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    4284:	f04f 0320 	mov.w	r3, #32
    4288:	f3ef 8611 	mrs	r6, BASEPRI
    428c:	f383 8811 	msr	BASEPRI, r3
    4290:	f3bf 8f6f 	isb	sy
    4294:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4296:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4328 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    429a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    429e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    42a2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    42a6:	03d2      	lsls	r2, r2, #15
    42a8:	d50c      	bpl.n	42c4 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    42aa:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    42ae:	2b01      	cmp	r3, #1
    42b0:	d001      	beq.n	42b6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    42b2:	2f01      	cmp	r7, #1
    42b4:	d106      	bne.n	42c4 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    42b6:	b30c      	cbz	r4, 42fc <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    42b8:	f386 8811 	msr	BASEPRI, r6
    42bc:	f3bf 8f6f 	isb	sy
}
    42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    42c4:	b1ac      	cbz	r4, 42f2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    42c6:	4630      	mov	r0, r6
    42c8:	f000 fa74 	bl	47b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    42cc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    42d0:	2b00      	cmp	r3, #0
    42d2:	d1e4      	bne.n	429e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    42d4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    42d8:	2a00      	cmp	r2, #0
    42da:	d0e0      	beq.n	429e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42dc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    42e0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    42e4:	2301      	movs	r3, #1
    42e6:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    42ea:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42ee:	60ab      	str	r3, [r5, #8]
}
    42f0:	e7d5      	b.n	429e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    42f2:	2100      	movs	r1, #0
    42f4:	2021      	movs	r0, #33	; 0x21
    42f6:	f017 fc53 	bl	1bba0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    42fa:	e7e7      	b.n	42cc <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    42fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4300:	2202      	movs	r2, #2
    4302:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4306:	e7db      	b.n	42c0 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    4308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    430c:	2202      	movs	r2, #2
    430e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4312:	4606      	mov	r6, r0
}
    4314:	e7bf      	b.n	4296 <z_nrf_clock_control_lf_on+0x6a>
    4316:	bf00      	nop
    4318:	20001298 	.word	0x20001298
    431c:	20001234 	.word	0x20001234
    4320:	20001260 	.word	0x20001260
    4324:	20002d1e 	.word	0x20002d1e
    4328:	e000e100 	.word	0xe000e100

0000432c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    432c:	4a04      	ldr	r2, [pc, #16]	; (4340 <sys_clock_timeout_handler+0x14>)
    432e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4330:	1ac8      	subs	r0, r1, r3
    4332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    4336:	4403      	add	r3, r0
    4338:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    433a:	f017 bda5 	b.w	1be88 <sys_clock_announce>
    433e:	bf00      	nop
    4340:	200012ac 	.word	0x200012ac

00004344 <set_absolute_alarm>:
{
    4344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4348:	0086      	lsls	r6, r0, #2
    434a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    434e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    4352:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    4356:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4358:	b2a4      	uxth	r4, r4
    435a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    435e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    4362:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4366:	f8df 806c 	ldr.w	r8, [pc, #108]	; 43d4 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    436a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    436e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4372:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    4374:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4378:	eba3 0309 	sub.w	r3, r3, r9
    437c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4380:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4384:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    4386:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    438a:	d102      	bne.n	4392 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    438c:	2013      	movs	r0, #19
    438e:	f01b fb3c 	bl	1fa0a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4392:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    4396:	1aab      	subs	r3, r5, r2
    4398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    439c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    43a0:	bf88      	it	hi
    43a2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43a4:	2300      	movs	r3, #0
    43a6:	6023      	str	r3, [r4, #0]
    43a8:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    43aa:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    43ae:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    43b2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    43b6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    43ba:	4599      	cmp	r9, r3
    43bc:	d006      	beq.n	43cc <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    43be:	1aeb      	subs	r3, r5, r3
    43c0:	3b02      	subs	r3, #2
    43c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    43c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    43ca:	d801      	bhi.n	43d0 <set_absolute_alarm+0x8c>
}
    43cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    43d0:	462b      	mov	r3, r5
    43d2:	e7cf      	b.n	4374 <set_absolute_alarm+0x30>
    43d4:	40011000 	.word	0x40011000

000043d8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    43d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    43da:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    43dc:	4c10      	ldr	r4, [pc, #64]	; (4420 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43de:	462f      	mov	r7, r5
    43e0:	4b10      	ldr	r3, [pc, #64]	; (4424 <rtc_nrf_isr+0x4c>)
    43e2:	681e      	ldr	r6, [r3, #0]
    43e4:	b105      	cbz	r5, 43e8 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    43e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    43e8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    43ec:	03d2      	lsls	r2, r2, #15
    43ee:	d5fa      	bpl.n	43e6 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43f0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    43f4:	2a00      	cmp	r2, #0
    43f6:	d0f6      	beq.n	43e6 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43f8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    43fc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4400:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4404:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    4408:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    440c:	2501      	movs	r5, #1
			if (handler) {
    440e:	b126      	cbz	r6, 441a <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    4410:	685a      	ldr	r2, [r3, #4]
    4412:	601f      	str	r7, [r3, #0]
    4414:	2000      	movs	r0, #0
    4416:	47b0      	blx	r6
    4418:	e7e2      	b.n	43e0 <rtc_nrf_isr+0x8>
    441a:	601e      	str	r6, [r3, #0]
}
    441c:	e7e3      	b.n	43e6 <rtc_nrf_isr+0xe>
    441e:	bf00      	nop
    4420:	40011000 	.word	0x40011000
    4424:	200012a0 	.word	0x200012a0

00004428 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    4428:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    442a:	4c0f      	ldr	r4, [pc, #60]	; (4468 <sys_clock_driver_init+0x40>)
    442c:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    442e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4432:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    4436:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    443a:	4b0c      	ldr	r3, [pc, #48]	; (446c <sys_clock_driver_init+0x44>)
    443c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4440:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4444:	2101      	movs	r1, #1
    4446:	462a      	mov	r2, r5
    4448:	2011      	movs	r0, #17
    444a:	f000 f94b 	bl	46e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    444e:	2011      	movs	r0, #17
    4450:	f000 f916 	bl	4680 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4454:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4456:	4a06      	ldr	r2, [pc, #24]	; (4470 <sys_clock_driver_init+0x48>)
    4458:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    445a:	2002      	movs	r0, #2
    445c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    445e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    4460:	f7ff fee4 	bl	422c <z_nrf_clock_control_lf_on>

	return 0;
}
    4464:	4628      	mov	r0, r5
    4466:	bd38      	pop	{r3, r4, r5, pc}
    4468:	40011000 	.word	0x40011000
    446c:	e000e100 	.word	0xe000e100
    4470:	200012a8 	.word	0x200012a8

00004474 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4474:	4a13      	ldr	r2, [pc, #76]	; (44c4 <sys_clock_set_timeout+0x50>)
    4476:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    447a:	bf14      	ite	ne
    447c:	4603      	movne	r3, r0
    447e:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4480:	3b01      	subs	r3, #1
    4482:	2b00      	cmp	r3, #0
    4484:	dd1c      	ble.n	44c0 <sys_clock_set_timeout+0x4c>
    4486:	4293      	cmp	r3, r2
    4488:	bfa8      	it	ge
    448a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    448c:	4a0e      	ldr	r2, [pc, #56]	; (44c8 <sys_clock_set_timeout+0x54>)
    448e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    4492:	4a0e      	ldr	r2, [pc, #56]	; (44cc <sys_clock_set_timeout+0x58>)
    4494:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4496:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    4498:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    449c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    44a0:	bf18      	it	ne
    44a2:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    44a4:	3201      	adds	r2, #1
    44a6:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    44a8:	4a09      	ldr	r2, [pc, #36]	; (44d0 <sys_clock_set_timeout+0x5c>)
    44aa:	480a      	ldr	r0, [pc, #40]	; (44d4 <sys_clock_set_timeout+0x60>)
    44ac:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    44ae:	2000      	movs	r0, #0
    44b0:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    44b2:	4a04      	ldr	r2, [pc, #16]	; (44c4 <sys_clock_set_timeout+0x50>)
    44b4:	4293      	cmp	r3, r2
    44b6:	bf94      	ite	ls
    44b8:	18c9      	addls	r1, r1, r3
    44ba:	1889      	addhi	r1, r1, r2
    44bc:	f7ff bf42 	b.w	4344 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    44c0:	2300      	movs	r3, #0
    44c2:	e7e3      	b.n	448c <sys_clock_set_timeout+0x18>
    44c4:	007fffff 	.word	0x007fffff
    44c8:	40011000 	.word	0x40011000
    44cc:	200012ac 	.word	0x200012ac
    44d0:	200012a0 	.word	0x200012a0
    44d4:	0000432d 	.word	0x0000432d

000044d8 <sys_clock_elapsed>:
    44d8:	4b04      	ldr	r3, [pc, #16]	; (44ec <sys_clock_elapsed+0x14>)
    44da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    44de:	4b04      	ldr	r3, [pc, #16]	; (44f0 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	1ac0      	subs	r0, r0, r3
}
    44e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    44e8:	4770      	bx	lr
    44ea:	bf00      	nop
    44ec:	40011000 	.word	0x40011000
    44f0:	200012ac 	.word	0x200012ac

000044f4 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    44f4:	f04f 0320 	mov.w	r3, #32
    44f8:	f3ef 8211 	mrs	r2, BASEPRI
    44fc:	f383 8811 	msr	BASEPRI, r3
    4500:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    4504:	4906      	ldr	r1, [pc, #24]	; (4520 <sys_clock_cycle_get_32+0x2c>)
    4506:	4b07      	ldr	r3, [pc, #28]	; (4524 <sys_clock_cycle_get_32+0x30>)
    4508:	6808      	ldr	r0, [r1, #0]
    450a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    450e:	f382 8811 	msr	BASEPRI, r2
    4512:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    4516:	1a1b      	subs	r3, r3, r0
    4518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    451c:	4418      	add	r0, r3
    451e:	4770      	bx	lr
    4520:	200012ac 	.word	0x200012ac
    4524:	40011000 	.word	0x40011000

00004528 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    4528:	4904      	ldr	r1, [pc, #16]	; (453c <sub_bytes+0x14>)
    452a:	1e43      	subs	r3, r0, #1
    452c:	300f      	adds	r0, #15
    452e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4532:	5c8a      	ldrb	r2, [r1, r2]
    4534:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    4536:	4283      	cmp	r3, r0
    4538:	d1f9      	bne.n	452e <sub_bytes+0x6>
	}
}
    453a:	4770      	bx	lr
    453c:	000219fc 	.word	0x000219fc

00004540 <tc_aes128_set_encrypt_key>:
{
    4540:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    4542:	4e26      	ldr	r6, [pc, #152]	; (45dc <tc_aes128_set_encrypt_key+0x9c>)
{
    4544:	4607      	mov	r7, r0
    4546:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    4548:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    454a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    454c:	ad01      	add	r5, sp, #4
    454e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4550:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4554:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    4558:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    455c:	4638      	mov	r0, r7
    455e:	2f00      	cmp	r7, #0
    4560:	d038      	beq.n	45d4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    4562:	2c00      	cmp	r4, #0
    4564:	d038      	beq.n	45d8 <tc_aes128_set_encrypt_key+0x98>
    4566:	1f38      	subs	r0, r7, #4
    4568:	4621      	mov	r1, r4
    456a:	4602      	mov	r2, r0
    456c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    456e:	784b      	ldrb	r3, [r1, #1]
    4570:	780d      	ldrb	r5, [r1, #0]
    4572:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4574:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    4578:	78cd      	ldrb	r5, [r1, #3]
    457a:	432b      	orrs	r3, r5
    457c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    457e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4580:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    4584:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4586:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    458a:	d1f0      	bne.n	456e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    458c:	4c14      	ldr	r4, [pc, #80]	; (45e0 <tc_aes128_set_encrypt_key+0xa0>)
    458e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    4590:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    4592:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    4594:	d116      	bne.n	45c4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4596:	f3c3 4207 	ubfx	r2, r3, #16, #8
    459a:	5ca5      	ldrb	r5, [r4, r2]
    459c:	0e1a      	lsrs	r2, r3, #24
    459e:	5ca2      	ldrb	r2, [r4, r2]
    45a0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    45a4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    45a8:	b2db      	uxtb	r3, r3
    45aa:	5d65      	ldrb	r5, [r4, r5]
    45ac:	5ce3      	ldrb	r3, [r4, r3]
    45ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    45b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    45b6:	ad0c      	add	r5, sp, #48	; 0x30
    45b8:	f021 0303 	bic.w	r3, r1, #3
    45bc:	442b      	add	r3, r5
    45be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    45c2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    45c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    45c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    45ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    45cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    45ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    45d0:	d1de      	bne.n	4590 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    45d2:	2001      	movs	r0, #1
}
    45d4:	b00d      	add	sp, #52	; 0x34
    45d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    45d8:	4620      	mov	r0, r4
    45da:	e7fb      	b.n	45d4 <tc_aes128_set_encrypt_key+0x94>
    45dc:	00020154 	.word	0x00020154
    45e0:	000219fc 	.word	0x000219fc

000045e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    45e4:	4a09      	ldr	r2, [pc, #36]	; (460c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    45e6:	490a      	ldr	r1, [pc, #40]	; (4610 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    45e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    45ea:	6809      	ldr	r1, [r1, #0]
    45ec:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    45ee:	4909      	ldr	r1, [pc, #36]	; (4614 <arch_swap+0x30>)
	_current->arch.basepri = key;
    45f0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    45f2:	684b      	ldr	r3, [r1, #4]
    45f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    45f8:	604b      	str	r3, [r1, #4]
    45fa:	2300      	movs	r3, #0
    45fc:	f383 8811 	msr	BASEPRI, r3
    4600:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4604:	6893      	ldr	r3, [r2, #8]
}
    4606:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    4608:	4770      	bx	lr
    460a:	bf00      	nop
    460c:	200027cc 	.word	0x200027cc
    4610:	00021744 	.word	0x00021744
    4614:	e000ed00 	.word	0xe000ed00

00004618 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4618:	490f      	ldr	r1, [pc, #60]	; (4658 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    461a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    461c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4620:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4622:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4626:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    462a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    462c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4630:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4634:	4f09      	ldr	r7, [pc, #36]	; (465c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4636:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    463a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    463c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    463e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4640:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    4642:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4644:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4646:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    464a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    464e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4652:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4656:	4770      	bx	lr
    ldr r1, =_kernel
    4658:	200027cc 	.word	0x200027cc
    ldr v4, =_SCS_ICSR
    465c:	e000ed04 	.word	0xe000ed04

00004660 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4660:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4664:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4666:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    466a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    466e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4670:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4674:	2902      	cmp	r1, #2
    beq _oops
    4676:	d0ff      	beq.n	4678 <_oops>

00004678 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4678:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    467a:	f019 f871 	bl	1d760 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    467e:	bd01      	pop	{r0, pc}

00004680 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4680:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4682:	2b00      	cmp	r3, #0
    4684:	db08      	blt.n	4698 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4686:	2201      	movs	r2, #1
    4688:	f000 001f 	and.w	r0, r0, #31
    468c:	fa02 f000 	lsl.w	r0, r2, r0
    4690:	095b      	lsrs	r3, r3, #5
    4692:	4a02      	ldr	r2, [pc, #8]	; (469c <arch_irq_enable+0x1c>)
    4694:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4698:	4770      	bx	lr
    469a:	bf00      	nop
    469c:	e000e100 	.word	0xe000e100

000046a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    46a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    46a2:	2b00      	cmp	r3, #0
    46a4:	db0d      	blt.n	46c2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    46a6:	2201      	movs	r2, #1
    46a8:	095b      	lsrs	r3, r3, #5
    46aa:	f000 001f 	and.w	r0, r0, #31
    46ae:	fa02 f000 	lsl.w	r0, r2, r0
    46b2:	3320      	adds	r3, #32
    46b4:	4a03      	ldr	r2, [pc, #12]	; (46c4 <arch_irq_disable+0x24>)
    46b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    46ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    46be:	f3bf 8f6f 	isb	sy
}
    46c2:	4770      	bx	lr
    46c4:	e000e100 	.word	0xe000e100

000046c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    46c8:	4b05      	ldr	r3, [pc, #20]	; (46e0 <arch_irq_is_enabled+0x18>)
    46ca:	0942      	lsrs	r2, r0, #5
    46cc:	f000 001f 	and.w	r0, r0, #31
    46d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    46d4:	2301      	movs	r3, #1
    46d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    46da:	4010      	ands	r0, r2
    46dc:	4770      	bx	lr
    46de:	bf00      	nop
    46e0:	e000e100 	.word	0xe000e100

000046e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    46e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    46e6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46e8:	bfa8      	it	ge
    46ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    46ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46f2:	bfb8      	it	lt
    46f4:	4b06      	ldrlt	r3, [pc, #24]	; (4710 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    46fa:	bfac      	ite	ge
    46fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4700:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4704:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4706:	bfb4      	ite	lt
    4708:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    470a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    470e:	4770      	bx	lr
    4710:	e000ed14 	.word	0xe000ed14

00004714 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4714:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4716:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4718:	4b04      	ldr	r3, [pc, #16]	; (472c <_arch_isr_direct_pm+0x18>)
    471a:	6a18      	ldr	r0, [r3, #32]
    471c:	b118      	cbz	r0, 4726 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    471e:	2200      	movs	r2, #0
    4720:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    4722:	f01a fe49 	bl	1f3b8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    4726:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4728:	bd08      	pop	{r3, pc}
    472a:	bf00      	nop
    472c:	200027cc 	.word	0x200027cc

00004730 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4730:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4734:	9b00      	ldr	r3, [sp, #0]
    4736:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    473a:	490a      	ldr	r1, [pc, #40]	; (4764 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4742:	9b02      	ldr	r3, [sp, #8]
    4744:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4748:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    474c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4750:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4754:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4758:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    475a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    475c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    475e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4760:	4770      	bx	lr
    4762:	bf00      	nop
    4764:	0001c471 	.word	0x0001c471

00004768 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4768:	4b07      	ldr	r3, [pc, #28]	; (4788 <arch_switch_to_main_thread+0x20>)
    476a:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    476c:	4610      	mov	r0, r2
    476e:	f381 8809 	msr	PSP, r1
    4772:	2100      	movs	r1, #0
    4774:	b663      	cpsie	if
    4776:	f381 8811 	msr	BASEPRI, r1
    477a:	f3bf 8f6f 	isb	sy
    477e:	2200      	movs	r2, #0
    4780:	2300      	movs	r3, #0
    4782:	f017 fe75 	bl	1c470 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4786:	bf00      	nop
    4788:	200027cc 	.word	0x200027cc

0000478c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    478c:	4901      	ldr	r1, [pc, #4]	; (4794 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    478e:	2210      	movs	r2, #16
	str	r2, [r1]
    4790:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4792:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4794:	e000ed10 	.word	0xe000ed10

00004798 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4798:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    479a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    479c:	f380 8811 	msr	BASEPRI, r0
	isb
    47a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    47a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    47a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    47aa:	b662      	cpsie	i
	isb
    47ac:	f3bf 8f6f 	isb	sy

	bx	lr
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop

000047b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    47b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    47b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    47b8:	f381 8811 	msr	BASEPRI, r1

	wfe
    47bc:	bf20      	wfe

	msr	BASEPRI, r0
    47be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    47c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop

000047c8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    47c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    47ca:	4606      	mov	r6, r0

	if (esf != NULL) {
    47cc:	460c      	mov	r4, r1
    47ce:	b301      	cbz	r1, 4812 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    47d0:	4b13      	ldr	r3, [pc, #76]	; (4820 <z_arm_fatal_error+0x58>)
    47d2:	4d14      	ldr	r5, [pc, #80]	; (4824 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    47d4:	4814      	ldr	r0, [pc, #80]	; (4828 <z_arm_fatal_error+0x60>)
    47d6:	1aed      	subs	r5, r5, r3
    47d8:	08ed      	lsrs	r5, r5, #3
    47da:	01ad      	lsls	r5, r5, #6
    47dc:	f045 0501 	orr.w	r5, r5, #1
    47e0:	f8ad 5000 	strh.w	r5, [sp]
    47e4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    47e8:	6809      	ldr	r1, [r1, #0]
    47ea:	f018 f9d0 	bl	1cb8e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    47ee:	f8ad 5000 	strh.w	r5, [sp]
    47f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    47f6:	68e1      	ldr	r1, [r4, #12]
    47f8:	480c      	ldr	r0, [pc, #48]	; (482c <z_arm_fatal_error+0x64>)
    47fa:	f018 f9c8 	bl	1cb8e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    47fe:	69e1      	ldr	r1, [r4, #28]
    4800:	480b      	ldr	r0, [pc, #44]	; (4830 <z_arm_fatal_error+0x68>)
    4802:	462a      	mov	r2, r5
    4804:	f018 f996 	bl	1cb34 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4808:	69a1      	ldr	r1, [r4, #24]
    480a:	480a      	ldr	r0, [pc, #40]	; (4834 <z_arm_fatal_error+0x6c>)
    480c:	462a      	mov	r2, r5
    480e:	f018 f991 	bl	1cb34 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4812:	4621      	mov	r1, r4
    4814:	4630      	mov	r0, r6
}
    4816:	b002      	add	sp, #8
    4818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    481c:	f016 b9b2 	b.w	1ab84 <z_fatal_error>
    4820:	0001ff94 	.word	0x0001ff94
    4824:	000200dc 	.word	0x000200dc
    4828:	00021afc 	.word	0x00021afc
    482c:	00021b2b 	.word	0x00021b2b
    4830:	00021b5a 	.word	0x00021b5a
    4834:	00021b69 	.word	0x00021b69

00004838 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4838:	bf30      	wfi
    b z_SysNmiOnReset
    483a:	f7ff bffd 	b.w	4838 <z_SysNmiOnReset>
    483e:	bf00      	nop

00004840 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4840:	4a0e      	ldr	r2, [pc, #56]	; (487c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4842:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4844:	4b0e      	ldr	r3, [pc, #56]	; (4880 <z_arm_prep_c+0x40>)
    4846:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    484a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    484c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4850:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4854:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4858:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    485c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4860:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4864:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4868:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    486c:	f016 f9e8 	bl	1ac40 <z_bss_zero>
	z_data_copy();
    4870:	f017 fa2a 	bl	1bcc8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4874:	f000 fa5a 	bl	4d2c <z_arm_interrupt_init>
	z_cstart();
    4878:	f016 fa06 	bl	1ac88 <z_cstart>
    487c:	00000000 	.word	0x00000000
    4880:	e000ed00 	.word	0xe000ed00

00004884 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4884:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4886:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4888:	4a0b      	ldr	r2, [pc, #44]	; (48b8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    488a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    488c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    488e:	bf1e      	ittt	ne
	movne	r1, #0
    4890:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4892:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    4894:	f01a fd90 	blne	1f3b8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4898:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    489a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    489e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    48a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    48a6:	4905      	ldr	r1, [pc, #20]	; (48bc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    48a8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    48aa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    48ac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    48ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    48b2:	4903      	ldr	r1, [pc, #12]	; (48c0 <_isr_wrapper+0x3c>)
	bx r1
    48b4:	4708      	bx	r1
    48b6:	0000      	.short	0x0000
	ldr r2, =_kernel
    48b8:	200027cc 	.word	0x200027cc
	ldr r1, =_sw_isr_table
    48bc:	0001fde0 	.word	0x0001fde0
	ldr r1, =z_arm_int_exit
    48c0:	00004d11 	.word	0x00004d11

000048c4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    48c4:	f018 fff1 	bl	1d8aa <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    48c8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    48ca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    48ce:	4808      	ldr	r0, [pc, #32]	; (48f0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    48d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    48d4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    48d6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    48da:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    48de:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    48e0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    48e2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    48e6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    48ea:	f7ff ffa9 	bl	4840 <z_arm_prep_c>
    48ee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    48f0:	20004068 	.word	0x20004068

000048f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    48f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    48f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    48fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    48fe:	4672      	mov	r2, lr
	bl z_arm_fault
    4900:	f000 f934 	bl	4b6c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4904:	bd01      	pop	{r0, pc}
    4906:	bf00      	nop

00004908 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4908:	b570      	push	{r4, r5, r6, lr}
    490a:	4b23      	ldr	r3, [pc, #140]	; (4998 <usage_fault.constprop.0+0x90>)
    490c:	4c23      	ldr	r4, [pc, #140]	; (499c <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    490e:	4d24      	ldr	r5, [pc, #144]	; (49a0 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    4910:	4824      	ldr	r0, [pc, #144]	; (49a4 <usage_fault.constprop.0+0x9c>)
    4912:	1ae4      	subs	r4, r4, r3
    4914:	08e4      	lsrs	r4, r4, #3
    4916:	01a4      	lsls	r4, r4, #6
    4918:	f044 0601 	orr.w	r6, r4, #1
    491c:	4631      	mov	r1, r6
    491e:	f018 f8fc 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4922:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4924:	019b      	lsls	r3, r3, #6
    4926:	d503      	bpl.n	4930 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    4928:	481f      	ldr	r0, [pc, #124]	; (49a8 <usage_fault.constprop.0+0xa0>)
    492a:	4631      	mov	r1, r6
    492c:	f018 f8f5 	bl	1cb1a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4930:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4932:	01dd      	lsls	r5, r3, #7
    4934:	d504      	bpl.n	4940 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    4936:	481d      	ldr	r0, [pc, #116]	; (49ac <usage_fault.constprop.0+0xa4>)
    4938:	f044 0101 	orr.w	r1, r4, #1
    493c:	f018 f8ed 	bl	1cb1a <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4940:	4d17      	ldr	r5, [pc, #92]	; (49a0 <usage_fault.constprop.0+0x98>)
    4942:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4944:	0318      	lsls	r0, r3, #12
    4946:	d504      	bpl.n	4952 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    4948:	4819      	ldr	r0, [pc, #100]	; (49b0 <usage_fault.constprop.0+0xa8>)
    494a:	f044 0101 	orr.w	r1, r4, #1
    494e:	f018 f8e4 	bl	1cb1a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4952:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4954:	0359      	lsls	r1, r3, #13
    4956:	d504      	bpl.n	4962 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4958:	4816      	ldr	r0, [pc, #88]	; (49b4 <usage_fault.constprop.0+0xac>)
    495a:	f044 0101 	orr.w	r1, r4, #1
    495e:	f018 f8dc 	bl	1cb1a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4962:	4d0f      	ldr	r5, [pc, #60]	; (49a0 <usage_fault.constprop.0+0x98>)
    4964:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4966:	039a      	lsls	r2, r3, #14
    4968:	d504      	bpl.n	4974 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    496a:	4813      	ldr	r0, [pc, #76]	; (49b8 <usage_fault.constprop.0+0xb0>)
    496c:	f044 0101 	orr.w	r1, r4, #1
    4970:	f018 f8d3 	bl	1cb1a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4974:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4976:	03db      	lsls	r3, r3, #15
    4978:	d504      	bpl.n	4984 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    497a:	4810      	ldr	r0, [pc, #64]	; (49bc <usage_fault.constprop.0+0xb4>)
    497c:	f044 0101 	orr.w	r1, r4, #1
    4980:	f018 f8cb 	bl	1cb1a <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4984:	4a06      	ldr	r2, [pc, #24]	; (49a0 <usage_fault.constprop.0+0x98>)
    4986:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4988:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    498c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4990:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4992:	2000      	movs	r0, #0
    4994:	bd70      	pop	{r4, r5, r6, pc}
    4996:	bf00      	nop
    4998:	0001ff94 	.word	0x0001ff94
    499c:	000200dc 	.word	0x000200dc
    49a0:	e000ed00 	.word	0xe000ed00
    49a4:	00021b97 	.word	0x00021b97
    49a8:	00021baf 	.word	0x00021baf
    49ac:	00021bc2 	.word	0x00021bc2
    49b0:	00021bdc 	.word	0x00021bdc
    49b4:	00021bfa 	.word	0x00021bfa
    49b8:	00021c1f 	.word	0x00021c1f
    49bc:	00021c39 	.word	0x00021c39

000049c0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    49c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49c4:	4b2a      	ldr	r3, [pc, #168]	; (4a70 <bus_fault.constprop.0+0xb0>)
    49c6:	4c2b      	ldr	r4, [pc, #172]	; (4a74 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    49c8:	4d2b      	ldr	r5, [pc, #172]	; (4a78 <bus_fault.constprop.0+0xb8>)
    49ca:	1ae4      	subs	r4, r4, r3
    49cc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    49ce:	01a4      	lsls	r4, r4, #6
    49d0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    49d4:	4607      	mov	r7, r0
    49d6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    49d8:	4828      	ldr	r0, [pc, #160]	; (4a7c <bus_fault.constprop.0+0xbc>)
    49da:	4641      	mov	r1, r8
    49dc:	f018 f89d 	bl	1cb1a <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    49e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    49e2:	04d9      	lsls	r1, r3, #19
    49e4:	d503      	bpl.n	49ee <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    49e6:	4826      	ldr	r0, [pc, #152]	; (4a80 <bus_fault.constprop.0+0xc0>)
    49e8:	4641      	mov	r1, r8
    49ea:	f018 f896 	bl	1cb1a <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    49ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    49f0:	051a      	lsls	r2, r3, #20
    49f2:	d504      	bpl.n	49fe <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    49f4:	4823      	ldr	r0, [pc, #140]	; (4a84 <bus_fault.constprop.0+0xc4>)
    49f6:	f044 0101 	orr.w	r1, r4, #1
    49fa:	f018 f88e 	bl	1cb1a <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    49fe:	4d1e      	ldr	r5, [pc, #120]	; (4a78 <bus_fault.constprop.0+0xb8>)
    4a00:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a02:	059b      	lsls	r3, r3, #22
    4a04:	d512      	bpl.n	4a2c <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    4a06:	f044 0801 	orr.w	r8, r4, #1
    4a0a:	481f      	ldr	r0, [pc, #124]	; (4a88 <bus_fault.constprop.0+0xc8>)
    4a0c:	4641      	mov	r1, r8
    4a0e:	f018 f884 	bl	1cb1a <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    4a12:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4a14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a16:	0418      	lsls	r0, r3, #16
    4a18:	d508      	bpl.n	4a2c <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4a1a:	481c      	ldr	r0, [pc, #112]	; (4a8c <bus_fault.constprop.0+0xcc>)
    4a1c:	4642      	mov	r2, r8
    4a1e:	f018 f889 	bl	1cb34 <log_1>
			if (from_hard_fault != 0) {
    4a22:	b11f      	cbz	r7, 4a2c <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4a24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4a2a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4a2c:	4d12      	ldr	r5, [pc, #72]	; (4a78 <bus_fault.constprop.0+0xb8>)
    4a2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a30:	0559      	lsls	r1, r3, #21
    4a32:	d504      	bpl.n	4a3e <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4a34:	4816      	ldr	r0, [pc, #88]	; (4a90 <bus_fault.constprop.0+0xd0>)
    4a36:	f044 0101 	orr.w	r1, r4, #1
    4a3a:	f018 f86e 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4a3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a40:	05da      	lsls	r2, r3, #23
    4a42:	d50d      	bpl.n	4a60 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    4a44:	4813      	ldr	r0, [pc, #76]	; (4a94 <bus_fault.constprop.0+0xd4>)
    4a46:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4a4a:	f018 f866 	bl	1cb1a <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4a4e:	4a0a      	ldr	r2, [pc, #40]	; (4a78 <bus_fault.constprop.0+0xb8>)
    4a50:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4a52:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4a54:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4a58:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4a5a:	7030      	strb	r0, [r6, #0]
}
    4a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4a60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a62:	049b      	lsls	r3, r3, #18
    4a64:	d5f3      	bpl.n	4a4e <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4a66:	480c      	ldr	r0, [pc, #48]	; (4a98 <bus_fault.constprop.0+0xd8>)
    4a68:	f044 0101 	orr.w	r1, r4, #1
    4a6c:	e7ed      	b.n	4a4a <bus_fault.constprop.0+0x8a>
    4a6e:	bf00      	nop
    4a70:	0001ff94 	.word	0x0001ff94
    4a74:	000200dc 	.word	0x000200dc
    4a78:	e000ed00 	.word	0xe000ed00
    4a7c:	00021c64 	.word	0x00021c64
    4a80:	00021c7a 	.word	0x00021c7a
    4a84:	00021c8b 	.word	0x00021c8b
    4a88:	00021c9e 	.word	0x00021c9e
    4a8c:	00021cb7 	.word	0x00021cb7
    4a90:	00021ccc 	.word	0x00021ccc
    4a94:	00021ce7 	.word	0x00021ce7
    4a98:	00021cff 	.word	0x00021cff

00004a9c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4aa0:	4b28      	ldr	r3, [pc, #160]	; (4b44 <mem_manage_fault.constprop.0+0xa8>)
    4aa2:	4c29      	ldr	r4, [pc, #164]	; (4b48 <mem_manage_fault.constprop.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4aa4:	4d29      	ldr	r5, [pc, #164]	; (4b4c <mem_manage_fault.constprop.0+0xb0>)
    4aa6:	1ae4      	subs	r4, r4, r3
    4aa8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4aaa:	01a4      	lsls	r4, r4, #6
    4aac:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4ab0:	4607      	mov	r7, r0
    4ab2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4ab4:	4826      	ldr	r0, [pc, #152]	; (4b50 <mem_manage_fault.constprop.0+0xb4>)
    4ab6:	4641      	mov	r1, r8
    4ab8:	f018 f82f 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4abc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4abe:	06d8      	lsls	r0, r3, #27
    4ac0:	d503      	bpl.n	4aca <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4ac2:	4824      	ldr	r0, [pc, #144]	; (4b54 <mem_manage_fault.constprop.0+0xb8>)
    4ac4:	4641      	mov	r1, r8
    4ac6:	f018 f828 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4aca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4acc:	0719      	lsls	r1, r3, #28
    4ace:	d504      	bpl.n	4ada <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    4ad0:	4821      	ldr	r0, [pc, #132]	; (4b58 <mem_manage_fault.constprop.0+0xbc>)
    4ad2:	f044 0101 	orr.w	r1, r4, #1
    4ad6:	f018 f820 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4ada:	4d1c      	ldr	r5, [pc, #112]	; (4b4c <mem_manage_fault.constprop.0+0xb0>)
    4adc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ade:	079a      	lsls	r2, r3, #30
    4ae0:	d512      	bpl.n	4b08 <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    4ae2:	f044 0801 	orr.w	r8, r4, #1
    4ae6:	4641      	mov	r1, r8
    4ae8:	481c      	ldr	r0, [pc, #112]	; (4b5c <mem_manage_fault.constprop.0+0xc0>)
    4aea:	f018 f816 	bl	1cb1a <log_0>
		uint32_t temp = SCB->MMFAR;
    4aee:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4af0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4af2:	061b      	lsls	r3, r3, #24
    4af4:	d508      	bpl.n	4b08 <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4af6:	481a      	ldr	r0, [pc, #104]	; (4b60 <mem_manage_fault.constprop.0+0xc4>)
    4af8:	4642      	mov	r2, r8
    4afa:	f018 f81b 	bl	1cb34 <log_1>
			if (from_hard_fault != 0) {
    4afe:	b11f      	cbz	r7, 4b08 <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4b00:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4b06:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4b08:	4d10      	ldr	r5, [pc, #64]	; (4b4c <mem_manage_fault.constprop.0+0xb0>)
    4b0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4b0c:	07d8      	lsls	r0, r3, #31
    4b0e:	d504      	bpl.n	4b1a <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    4b10:	4814      	ldr	r0, [pc, #80]	; (4b64 <mem_manage_fault.constprop.0+0xc8>)
    4b12:	f044 0101 	orr.w	r1, r4, #1
    4b16:	f018 f800 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4b1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4b1c:	0699      	lsls	r1, r3, #26
    4b1e:	d504      	bpl.n	4b2a <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
    4b20:	4811      	ldr	r0, [pc, #68]	; (4b68 <mem_manage_fault.constprop.0+0xcc>)
    4b22:	f044 0101 	orr.w	r1, r4, #1
    4b26:	f017 fff8 	bl	1cb1a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4b2a:	4b08      	ldr	r3, [pc, #32]	; (4b4c <mem_manage_fault.constprop.0+0xb0>)
    4b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b2e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4b30:	bf58      	it	pl
    4b32:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4b36:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4b38:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4b3c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4b3e:	7030      	strb	r0, [r6, #0]
}
    4b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b44:	0001ff94 	.word	0x0001ff94
    4b48:	000200dc 	.word	0x000200dc
    4b4c:	e000ed00 	.word	0xe000ed00
    4b50:	00021d2e 	.word	0x00021d2e
    4b54:	00021d44 	.word	0x00021d44
    4b58:	00021c8b 	.word	0x00021c8b
    4b5c:	00021d77 	.word	0x00021d77
    4b60:	00021d8f 	.word	0x00021d8f
    4b64:	00021da5 	.word	0x00021da5
    4b68:	00021cff 	.word	0x00021cff

00004b6c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4b70:	4b58      	ldr	r3, [pc, #352]	; (4cd4 <z_arm_fault+0x168>)
    4b72:	685e      	ldr	r6, [r3, #4]
{
    4b74:	b08b      	sub	sp, #44	; 0x2c
    4b76:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4b78:	f3c6 0408 	ubfx	r4, r6, #0, #9
    4b7c:	2500      	movs	r5, #0
    4b7e:	f385 8811 	msr	BASEPRI, r5
    4b82:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4b86:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4b8a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4b8e:	d10d      	bne.n	4bac <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4b90:	f002 030c 	and.w	r3, r2, #12
    4b94:	2b08      	cmp	r3, #8
    4b96:	d10b      	bne.n	4bb0 <z_arm_fault+0x44>
    4b98:	494f      	ldr	r1, [pc, #316]	; (4cd8 <z_arm_fault+0x16c>)
    4b9a:	4b50      	ldr	r3, [pc, #320]	; (4cdc <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4b9c:	4850      	ldr	r0, [pc, #320]	; (4ce0 <z_arm_fault+0x174>)
    4b9e:	1ac9      	subs	r1, r1, r3
    4ba0:	08c9      	lsrs	r1, r1, #3
    4ba2:	0189      	lsls	r1, r1, #6
    4ba4:	f041 0101 	orr.w	r1, r1, #1
    4ba8:	f017 ffb7 	bl	1cb1a <log_0>
		return NULL;
    4bac:	462f      	mov	r7, r5
    4bae:	e003      	b.n	4bb8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4bb0:	0712      	lsls	r2, r2, #28
    4bb2:	d401      	bmi.n	4bb8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    4bb4:	4607      	mov	r7, r0
			*nested_exc = true;
    4bb6:	2501      	movs	r5, #1
	*recoverable = false;
    4bb8:	2300      	movs	r3, #0
    4bba:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4bbe:	1ee3      	subs	r3, r4, #3
    4bc0:	2b09      	cmp	r3, #9
    4bc2:	d86d      	bhi.n	4ca0 <z_arm_fault+0x134>
    4bc4:	e8df f003 	tbb	[pc, r3]
    4bc8:	3f5f5b05 	.word	0x3f5f5b05
    4bcc:	6c6c6c6c 	.word	0x6c6c6c6c
    4bd0:	636c      	.short	0x636c
    4bd2:	4b42      	ldr	r3, [pc, #264]	; (4cdc <z_arm_fault+0x170>)
    4bd4:	4e40      	ldr	r6, [pc, #256]	; (4cd8 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4bd6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4cd4 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4bda:	4842      	ldr	r0, [pc, #264]	; (4ce4 <z_arm_fault+0x178>)
    4bdc:	1af6      	subs	r6, r6, r3
    4bde:	08f6      	lsrs	r6, r6, #3
    4be0:	01b6      	lsls	r6, r6, #6
    4be2:	f046 0601 	orr.w	r6, r6, #1
    4be6:	4631      	mov	r1, r6
    4be8:	f017 ff97 	bl	1cb1a <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4bec:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    4bf0:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4bf4:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4bf8:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4bfc:	d005      	beq.n	4c0a <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    4bfe:	483a      	ldr	r0, [pc, #232]	; (4ce8 <z_arm_fault+0x17c>)
    4c00:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    4c02:	f017 ff8a 	bl	1cb1a <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4c06:	2400      	movs	r4, #0
}
    4c08:	e020      	b.n	4c4c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4c0a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    4c0e:	005b      	lsls	r3, r3, #1
    4c10:	d51c      	bpl.n	4c4c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    4c12:	4836      	ldr	r0, [pc, #216]	; (4cec <z_arm_fault+0x180>)
    4c14:	4631      	mov	r1, r6
    4c16:	f017 ff80 	bl	1cb1a <log_0>
		if (SCB_MMFSR != 0) {
    4c1a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    4c1e:	b12b      	cbz	r3, 4c2c <z_arm_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    4c20:	f10d 0107 	add.w	r1, sp, #7
    4c24:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4c26:	f7ff ff39 	bl	4a9c <mem_manage_fault.constprop.0>
    4c2a:	e00e      	b.n	4c4a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    4c2c:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    4c30:	b12b      	cbz	r3, 4c3e <z_arm_fault+0xd2>
			reason = bus_fault(esf, 1, recoverable);
    4c32:	f10d 0107 	add.w	r1, sp, #7
    4c36:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4c38:	f7ff fec2 	bl	49c0 <bus_fault.constprop.0>
    4c3c:	e005      	b.n	4c4a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    4c3e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    4c42:	b29b      	uxth	r3, r3
    4c44:	b113      	cbz	r3, 4c4c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    4c46:	f7ff fe5f 	bl	4908 <usage_fault.constprop.0>
    4c4a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c50:	b993      	cbnz	r3, 4c78 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4c52:	2220      	movs	r2, #32
    4c54:	4639      	mov	r1, r7
    4c56:	a802      	add	r0, sp, #8
    4c58:	f018 fdd6 	bl	1d808 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c5e:	b39d      	cbz	r5, 4cc8 <z_arm_fault+0x15c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4c64:	b922      	cbnz	r2, 4c70 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4c66:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4c6a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4c6e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4c70:	a902      	add	r1, sp, #8
    4c72:	4620      	mov	r0, r4
    4c74:	f7ff fda8 	bl	47c8 <z_arm_fatal_error>
}
    4c78:	b00b      	add	sp, #44	; 0x2c
    4c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4c7e:	f10d 0107 	add.w	r1, sp, #7
    4c82:	2000      	movs	r0, #0
    4c84:	e7cf      	b.n	4c26 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    4c86:	f10d 0107 	add.w	r1, sp, #7
    4c8a:	2000      	movs	r0, #0
    4c8c:	e7d4      	b.n	4c38 <z_arm_fault+0xcc>
    4c8e:	4912      	ldr	r1, [pc, #72]	; (4cd8 <z_arm_fault+0x16c>)
    4c90:	4b12      	ldr	r3, [pc, #72]	; (4cdc <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    4c92:	4817      	ldr	r0, [pc, #92]	; (4cf0 <z_arm_fault+0x184>)
    4c94:	1ac9      	subs	r1, r1, r3
    4c96:	08c9      	lsrs	r1, r1, #3
    4c98:	0189      	lsls	r1, r1, #6
    4c9a:	f041 0101 	orr.w	r1, r1, #1
    4c9e:	e7b0      	b.n	4c02 <z_arm_fault+0x96>
    4ca0:	4a0e      	ldr	r2, [pc, #56]	; (4cdc <z_arm_fault+0x170>)
    4ca2:	4b0d      	ldr	r3, [pc, #52]	; (4cd8 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    4ca4:	4813      	ldr	r0, [pc, #76]	; (4cf4 <z_arm_fault+0x188>)
    4ca6:	4914      	ldr	r1, [pc, #80]	; (4cf8 <z_arm_fault+0x18c>)
    4ca8:	1a9b      	subs	r3, r3, r2
    4caa:	08db      	lsrs	r3, r3, #3
    4cac:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4cb0:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4cb4:	bf18      	it	ne
    4cb6:	4601      	movne	r1, r0
    4cb8:	f043 0301 	orr.w	r3, r3, #1
    4cbc:	480f      	ldr	r0, [pc, #60]	; (4cfc <z_arm_fault+0x190>)
    4cbe:	f1a4 0210 	sub.w	r2, r4, #16
    4cc2:	f017 ff4b 	bl	1cb5c <log_2>
    4cc6:	e79e      	b.n	4c06 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4cc8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4ccc:	f023 0301 	bic.w	r3, r3, #1
    4cd0:	e7cd      	b.n	4c6e <z_arm_fault+0x102>
    4cd2:	bf00      	nop
    4cd4:	e000ed00 	.word	0xe000ed00
    4cd8:	000200dc 	.word	0x000200dc
    4cdc:	0001ff94 	.word	0x0001ff94
    4ce0:	00021dc4 	.word	0x00021dc4
    4ce4:	00021def 	.word	0x00021def
    4ce8:	00021e06 	.word	0x00021e06
    4cec:	00021e27 	.word	0x00021e27
    4cf0:	00021e46 	.word	0x00021e46
    4cf4:	00021e7f 	.word	0x00021e7f
    4cf8:	00021e6a 	.word	0x00021e6a
    4cfc:	00021e98 	.word	0x00021e98

00004d00 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4d00:	4a02      	ldr	r2, [pc, #8]	; (4d0c <z_arm_fault_init+0xc>)
    4d02:	6953      	ldr	r3, [r2, #20]
    4d04:	f043 0310 	orr.w	r3, r3, #16
    4d08:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4d0a:	4770      	bx	lr
    4d0c:	e000ed00 	.word	0xe000ed00

00004d10 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4d10:	4b04      	ldr	r3, [pc, #16]	; (4d24 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4d12:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4d14:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    4d16:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4d18:	d003      	beq.n	4d22 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4d1a:	4903      	ldr	r1, [pc, #12]	; (4d28 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4d20:	600a      	str	r2, [r1, #0]

00004d22 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4d22:	4770      	bx	lr
	ldr r3, =_kernel
    4d24:	200027cc 	.word	0x200027cc
	ldr r1, =_SCS_ICSR
    4d28:	e000ed04 	.word	0xe000ed04

00004d2c <z_arm_interrupt_init>:
    4d2c:	4804      	ldr	r0, [pc, #16]	; (4d40 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4d2e:	2300      	movs	r3, #0
    4d30:	2120      	movs	r1, #32
    4d32:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4d34:	3301      	adds	r3, #1
    4d36:	2b30      	cmp	r3, #48	; 0x30
    4d38:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4d3c:	d1f9      	bne.n	4d32 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4d3e:	4770      	bx	lr
    4d40:	e000e100 	.word	0xe000e100

00004d44 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4d44:	4b06      	ldr	r3, [pc, #24]	; (4d60 <z_impl_k_thread_abort+0x1c>)
    4d46:	689b      	ldr	r3, [r3, #8]
    4d48:	4283      	cmp	r3, r0
    4d4a:	d107      	bne.n	4d5c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4d4c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4d50:	b123      	cbz	r3, 4d5c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4d52:	4a04      	ldr	r2, [pc, #16]	; (4d64 <z_impl_k_thread_abort+0x20>)
    4d54:	6853      	ldr	r3, [r2, #4]
    4d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4d5a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4d5c:	f016 bf50 	b.w	1bc00 <z_thread_abort>
    4d60:	200027cc 	.word	0x200027cc
    4d64:	e000ed00 	.word	0xe000ed00

00004d68 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4d68:	4b02      	ldr	r3, [pc, #8]	; (4d74 <z_arm_configure_static_mpu_regions+0xc>)
    4d6a:	4a03      	ldr	r2, [pc, #12]	; (4d78 <z_arm_configure_static_mpu_regions+0x10>)
    4d6c:	4803      	ldr	r0, [pc, #12]	; (4d7c <z_arm_configure_static_mpu_regions+0x14>)
    4d6e:	2101      	movs	r1, #1
    4d70:	f000 b87c 	b.w	4e6c <arm_core_mpu_configure_static_mpu_regions>
    4d74:	20040000 	.word	0x20040000
    4d78:	20000000 	.word	0x20000000
    4d7c:	0002027c 	.word	0x0002027c

00004d80 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4d82:	4f2a      	ldr	r7, [pc, #168]	; (4e2c <mpu_configure_regions+0xac>)
    4d84:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4d86:	2100      	movs	r1, #0
    4d88:	42b1      	cmp	r1, r6
    4d8a:	da14      	bge.n	4db6 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4d8c:	6844      	ldr	r4, [r0, #4]
    4d8e:	2c00      	cmp	r4, #0
    4d90:	d048      	beq.n	4e24 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4d92:	b1c3      	cbz	r3, 4dc6 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4d94:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4d98:	ea14 0f0c 	tst.w	r4, ip
    4d9c:	d00d      	beq.n	4dba <mpu_configure_regions+0x3a>
    4d9e:	4a24      	ldr	r2, [pc, #144]	; (4e30 <mpu_configure_regions+0xb0>)
    4da0:	4b24      	ldr	r3, [pc, #144]	; (4e34 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4da2:	4825      	ldr	r0, [pc, #148]	; (4e38 <mpu_configure_regions+0xb8>)
    4da4:	1ad2      	subs	r2, r2, r3
    4da6:	08d2      	lsrs	r2, r2, #3
    4da8:	0192      	lsls	r2, r2, #6
    4daa:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4dae:	f017 fec1 	bl	1cb34 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4db2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4db6:	4610      	mov	r0, r2
    4db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    4dba:	2c1f      	cmp	r4, #31
    4dbc:	d9ef      	bls.n	4d9e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4dbe:	6805      	ldr	r5, [r0, #0]
		&&
    4dc0:	ea1c 0f05 	tst.w	ip, r5
    4dc4:	d1eb      	bne.n	4d9e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4dc6:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4dc8:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4dca:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    4dce:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    4dd0:	d916      	bls.n	4e00 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    4dd2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4dd6:	d815      	bhi.n	4e04 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4dd8:	3c01      	subs	r4, #1
    4dda:	fab4 f484 	clz	r4, r4
    4dde:	f1c4 041f 	rsb	r4, r4, #31
    4de2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4de4:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4de6:	ea4c 0404 	orr.w	r4, ip, r4
    4dea:	d90d      	bls.n	4e08 <mpu_configure_regions+0x88>
    4dec:	4a10      	ldr	r2, [pc, #64]	; (4e30 <mpu_configure_regions+0xb0>)
    4dee:	4b11      	ldr	r3, [pc, #68]	; (4e34 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4df0:	4812      	ldr	r0, [pc, #72]	; (4e3c <mpu_configure_regions+0xbc>)
    4df2:	1ad2      	subs	r2, r2, r3
    4df4:	08d2      	lsrs	r2, r2, #3
    4df6:	0192      	lsls	r2, r2, #6
    4df8:	f042 0201 	orr.w	r2, r2, #1
    4dfc:	4629      	mov	r1, r5
    4dfe:	e7d6      	b.n	4dae <mpu_configure_regions+0x2e>
		return REGION_32B;
    4e00:	2408      	movs	r4, #8
    4e02:	e7ef      	b.n	4de4 <mpu_configure_regions+0x64>
		return REGION_4G;
    4e04:	243e      	movs	r4, #62	; 0x3e
    4e06:	e7ed      	b.n	4de4 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e08:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4e0c:	432a      	orrs	r2, r5
    4e0e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e12:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4e16:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e1a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e1e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    4e22:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4e24:	3101      	adds	r1, #1
    4e26:	300c      	adds	r0, #12
    4e28:	e7ae      	b.n	4d88 <mpu_configure_regions+0x8>
    4e2a:	bf00      	nop
    4e2c:	e000ed00 	.word	0xe000ed00
    4e30:	000200cc 	.word	0x000200cc
    4e34:	0001ff94 	.word	0x0001ff94
    4e38:	00021eaf 	.word	0x00021eaf
    4e3c:	00021ed2 	.word	0x00021ed2

00004e40 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4e40:	4b04      	ldr	r3, [pc, #16]	; (4e54 <arm_core_mpu_enable+0x14>)
    4e42:	2205      	movs	r2, #5
    4e44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e4c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4e50:	4770      	bx	lr
    4e52:	bf00      	nop
    4e54:	e000ed00 	.word	0xe000ed00

00004e58 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4e58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4e5c:	4b02      	ldr	r3, [pc, #8]	; (4e68 <arm_core_mpu_disable+0x10>)
    4e5e:	2200      	movs	r2, #0
    4e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4e64:	4770      	bx	lr
    4e66:	bf00      	nop
    4e68:	e000ed00 	.word	0xe000ed00

00004e6c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4e6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4e6e:	4c03      	ldr	r4, [pc, #12]	; (4e7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4e70:	2301      	movs	r3, #1
    4e72:	7822      	ldrb	r2, [r4, #0]
    4e74:	f7ff ff84 	bl	4d80 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4e78:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4e7a:	bd10      	pop	{r4, pc}
    4e7c:	20002861 	.word	0x20002861

00004e80 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4e80:	4914      	ldr	r1, [pc, #80]	; (4ed4 <z_arm_mpu_init+0x54>)
    4e82:	6808      	ldr	r0, [r1, #0]
    4e84:	2808      	cmp	r0, #8
{
    4e86:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4e88:	d821      	bhi.n	4ece <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4e8a:	f7ff ffe5 	bl	4e58 <arm_core_mpu_disable>
	MPU->RNR = index;
    4e8e:	4c12      	ldr	r4, [pc, #72]	; (4ed8 <z_arm_mpu_init+0x58>)
    4e90:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4e92:	2200      	movs	r2, #0
    4e94:	4290      	cmp	r0, r2
    4e96:	f101 010c 	add.w	r1, r1, #12
    4e9a:	d105      	bne.n	4ea8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4e9c:	4b0f      	ldr	r3, [pc, #60]	; (4edc <z_arm_mpu_init+0x5c>)
    4e9e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4ea0:	f7ff ffce 	bl	4e40 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4ea4:	2000      	movs	r0, #0
}
    4ea6:	bd10      	pop	{r4, pc}
    4ea8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4eac:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4eb0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4eb4:	4313      	orrs	r3, r2
    4eb6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4eba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4ec2:	f043 0301 	orr.w	r3, r3, #1
    4ec6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4eca:	3201      	adds	r2, #1
    4ecc:	e7e2      	b.n	4e94 <z_arm_mpu_init+0x14>
		return -1;
    4ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ed2:	e7e8      	b.n	4ea6 <z_arm_mpu_init+0x26>
    4ed4:	00020288 	.word	0x00020288
    4ed8:	e000ed00 	.word	0xe000ed00
    4edc:	20002861 	.word	0x20002861

00004ee0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4ee0:	4b01      	ldr	r3, [pc, #4]	; (4ee8 <__stdout_hook_install+0x8>)
    4ee2:	6018      	str	r0, [r3, #0]
}
    4ee4:	4770      	bx	lr
    4ee6:	bf00      	nop
    4ee8:	20000168 	.word	0x20000168

00004eec <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4eec:	f04f 0320 	mov.w	r3, #32
    4ef0:	f3ef 8211 	mrs	r2, BASEPRI
    4ef4:	f383 8811 	msr	BASEPRI, r3
    4ef8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4efc:	4906      	ldr	r1, [pc, #24]	; (4f18 <nordicsemi_nrf52_init+0x2c>)
    4efe:	2301      	movs	r3, #1
    4f00:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4f04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4f08:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4f0c:	f382 8811 	msr	BASEPRI, r2
    4f10:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4f14:	2000      	movs	r0, #0
    4f16:	4770      	bx	lr
    4f18:	4001e000 	.word	0x4001e000

00004f1c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4f1c:	b120      	cbz	r0, 4f28 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4f1e:	4b03      	ldr	r3, [pc, #12]	; (4f2c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4f20:	0180      	lsls	r0, r0, #6
    4f22:	f043 0301 	orr.w	r3, r3, #1
    4f26:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4f28:	4770      	bx	lr
    4f2a:	bf00      	nop
    4f2c:	000201e0 	.word	0x000201e0

00004f30 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4f30:	4b0e      	ldr	r3, [pc, #56]	; (4f6c <bt_hex_real+0x3c>)
    4f32:	2940      	cmp	r1, #64	; 0x40
{
    4f34:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4f36:	bf28      	it	cs
    4f38:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4f3a:	4c0d      	ldr	r4, [pc, #52]	; (4f70 <bt_hex_real+0x40>)
    4f3c:	1846      	adds	r6, r0, r1
    4f3e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4f40:	42b0      	cmp	r0, r6
    4f42:	f103 0302 	add.w	r3, r3, #2
    4f46:	d104      	bne.n	4f52 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4f48:	2300      	movs	r3, #0
    4f4a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4f4e:	4807      	ldr	r0, [pc, #28]	; (4f6c <bt_hex_real+0x3c>)
    4f50:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4f52:	7802      	ldrb	r2, [r0, #0]
    4f54:	0912      	lsrs	r2, r2, #4
    4f56:	5ca2      	ldrb	r2, [r4, r2]
    4f58:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
    4f60:	f002 020f 	and.w	r2, r2, #15
    4f64:	5ca2      	ldrb	r2, [r4, r2]
    4f66:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4f6a:	e7e9      	b.n	4f40 <bt_hex_real+0x10>
    4f6c:	20002880 	.word	0x20002880
    4f70:	00021f0b 	.word	0x00021f0b

00004f74 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4f74:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4f76:	7803      	ldrb	r3, [r0, #0]
    4f78:	b08b      	sub	sp, #44	; 0x2c
    4f7a:	4604      	mov	r4, r0
    4f7c:	ad07      	add	r5, sp, #28
    4f7e:	2b03      	cmp	r3, #3
    4f80:	d821      	bhi.n	4fc6 <bt_addr_le_str_real+0x52>
    4f82:	e8df f003 	tbb	[pc, r3]
    4f86:	1a02      	.short	0x1a02
    4f88:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4f8a:	4912      	ldr	r1, [pc, #72]	; (4fd4 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4f8c:	4628      	mov	r0, r5
    4f8e:	f018 fbf2 	bl	1d776 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4f92:	7863      	ldrb	r3, [r4, #1]
    4f94:	9304      	str	r3, [sp, #16]
    4f96:	78a3      	ldrb	r3, [r4, #2]
    4f98:	9303      	str	r3, [sp, #12]
    4f9a:	78e3      	ldrb	r3, [r4, #3]
    4f9c:	9302      	str	r3, [sp, #8]
    4f9e:	7923      	ldrb	r3, [r4, #4]
    4fa0:	9301      	str	r3, [sp, #4]
    4fa2:	7963      	ldrb	r3, [r4, #5]
    4fa4:	9300      	str	r3, [sp, #0]
    4fa6:	4a0c      	ldr	r2, [pc, #48]	; (4fd8 <bt_addr_le_str_real+0x64>)
    4fa8:	79a3      	ldrb	r3, [r4, #6]
    4faa:	9505      	str	r5, [sp, #20]
    4fac:	211e      	movs	r1, #30
    4fae:	480b      	ldr	r0, [pc, #44]	; (4fdc <bt_addr_le_str_real+0x68>)
    4fb0:	f017 f981 	bl	1c2b6 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4fb4:	4809      	ldr	r0, [pc, #36]	; (4fdc <bt_addr_le_str_real+0x68>)
    4fb6:	b00b      	add	sp, #44	; 0x2c
    4fb8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4fba:	4909      	ldr	r1, [pc, #36]	; (4fe0 <bt_addr_le_str_real+0x6c>)
    4fbc:	e7e6      	b.n	4f8c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    4fbe:	4909      	ldr	r1, [pc, #36]	; (4fe4 <bt_addr_le_str_real+0x70>)
    4fc0:	e7e4      	b.n	4f8c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4fc2:	4909      	ldr	r1, [pc, #36]	; (4fe8 <bt_addr_le_str_real+0x74>)
    4fc4:	e7e2      	b.n	4f8c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4fc6:	4a09      	ldr	r2, [pc, #36]	; (4fec <bt_addr_le_str_real+0x78>)
    4fc8:	210a      	movs	r1, #10
    4fca:	4628      	mov	r0, r5
    4fcc:	f017 f973 	bl	1c2b6 <snprintk>
		break;
    4fd0:	e7df      	b.n	4f92 <bt_addr_le_str_real+0x1e>
    4fd2:	bf00      	nop
    4fd4:	0002175c 	.word	0x0002175c
    4fd8:	0002177e 	.word	0x0002177e
    4fdc:	20002862 	.word	0x20002862
    4fe0:	00021763 	.word	0x00021763
    4fe4:	0002176a 	.word	0x0002176a
    4fe8:	00021774 	.word	0x00021774
    4fec:	00022cfa 	.word	0x00022cfa

00004ff0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4ff0:	b430      	push	{r4, r5}
    4ff2:	4603      	mov	r3, r0
    4ff4:	4608      	mov	r0, r1
	switch (src->type) {
    4ff6:	781a      	ldrb	r2, [r3, #0]
    4ff8:	2a01      	cmp	r2, #1
    4ffa:	d013      	beq.n	5024 <uuid_to_uuid128+0x34>
    4ffc:	2a02      	cmp	r2, #2
    4ffe:	d026      	beq.n	504e <uuid_to_uuid128+0x5e>
    5000:	b972      	cbnz	r2, 5020 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    5002:	4a15      	ldr	r2, [pc, #84]	; (5058 <uuid_to_uuid128+0x68>)
    5004:	f102 0410 	add.w	r4, r2, #16
    5008:	f852 5b04 	ldr.w	r5, [r2], #4
    500c:	f841 5b04 	str.w	r5, [r1], #4
    5010:	42a2      	cmp	r2, r4
    5012:	d1f9      	bne.n	5008 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    5014:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    5016:	7812      	ldrb	r2, [r2, #0]
    5018:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    501a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    501c:	0a1b      	lsrs	r3, r3, #8
    501e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5020:	bc30      	pop	{r4, r5}
    5022:	4770      	bx	lr
		*dst = uuid128_base;
    5024:	4a0c      	ldr	r2, [pc, #48]	; (5058 <uuid_to_uuid128+0x68>)
    5026:	f102 0410 	add.w	r4, r2, #16
    502a:	f852 5b04 	ldr.w	r5, [r2], #4
    502e:	f841 5b04 	str.w	r5, [r1], #4
    5032:	42a2      	cmp	r2, r4
    5034:	d1f9      	bne.n	502a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    5036:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    5038:	7812      	ldrb	r2, [r2, #0]
    503a:	700a      	strb	r2, [r1, #0]
    503c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    5040:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    5042:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    5044:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    5046:	0a1b      	lsrs	r3, r3, #8
    5048:	7382      	strb	r2, [r0, #14]
    504a:	7403      	strb	r3, [r0, #16]
}
    504c:	e7e8      	b.n	5020 <uuid_to_uuid128+0x30>
}
    504e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    5050:	2211      	movs	r2, #17
    5052:	4619      	mov	r1, r3
    5054:	f018 bbd8 	b.w	1d808 <memcpy>
    5058:	00021f23 	.word	0x00021f23

0000505c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    505c:	b538      	push	{r3, r4, r5, lr}
    505e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    5060:	4805      	ldr	r0, [pc, #20]	; (5078 <bt_buf_get_rx+0x1c>)
    5062:	f019 ff0a 	bl	1ee7a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    5066:	4604      	mov	r4, r0
    5068:	b120      	cbz	r0, 5074 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    506a:	2100      	movs	r1, #0
    506c:	3008      	adds	r0, #8
    506e:	f019 ff23 	bl	1eeb8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5072:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5074:	4620      	mov	r0, r4
    5076:	bd38      	pop	{r3, r4, r5, pc}
    5078:	20000800 	.word	0x20000800

0000507c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    507c:	b570      	push	{r4, r5, r6, lr}
    507e:	4602      	mov	r2, r0
    5080:	460b      	mov	r3, r1
	__asm__ volatile(
    5082:	f04f 0120 	mov.w	r1, #32
    5086:	f3ef 8511 	mrs	r5, BASEPRI
    508a:	f381 8811 	msr	BASEPRI, r1
    508e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5092:	480c      	ldr	r0, [pc, #48]	; (50c4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    5094:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    5096:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    509a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    509e:	f385 8811 	msr	BASEPRI, r5
    50a2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    50a6:	b924      	cbnz	r4, 50b2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    50a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    50ac:	2001      	movs	r0, #1
    50ae:	f7ff bfd5 	b.w	505c <bt_buf_get_rx>
    50b2:	2301      	movs	r3, #1
    50b4:	f104 0008 	add.w	r0, r4, #8
    50b8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    50ba:	81a1      	strh	r1, [r4, #12]
    50bc:	f019 fefc 	bl	1eeb8 <net_buf_simple_reserve>
}
    50c0:	4620      	mov	r0, r4
    50c2:	bd70      	pop	{r4, r5, r6, pc}
    50c4:	20000000 	.word	0x20000000

000050c8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    50c8:	b570      	push	{r4, r5, r6, lr}
    50ca:	4604      	mov	r4, r0
	switch (evt) {
    50cc:	2c0f      	cmp	r4, #15
{
    50ce:	460d      	mov	r5, r1
    50d0:	4610      	mov	r0, r2
    50d2:	4619      	mov	r1, r3
	switch (evt) {
    50d4:	d805      	bhi.n	50e2 <bt_buf_get_evt+0x1a>
    50d6:	2c0d      	cmp	r4, #13
    50d8:	d912      	bls.n	5100 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    50da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    50de:	f7ff bfcd 	b.w	507c <bt_buf_get_cmd_complete>
	switch (evt) {
    50e2:	2c13      	cmp	r4, #19
    50e4:	d10c      	bne.n	5100 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    50e6:	480b      	ldr	r0, [pc, #44]	; (5114 <bt_buf_get_evt+0x4c>)
    50e8:	f019 fec7 	bl	1ee7a <net_buf_alloc_fixed>
			if (buf) {
    50ec:	4604      	mov	r4, r0
    50ee:	b128      	cbz	r0, 50fc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    50f0:	2100      	movs	r1, #0
    50f2:	3008      	adds	r0, #8
    50f4:	f019 fee0 	bl	1eeb8 <net_buf_simple_reserve>
    50f8:	2301      	movs	r3, #1
    50fa:	7523      	strb	r3, [r4, #20]
}
    50fc:	4620      	mov	r0, r4
    50fe:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    5100:	4602      	mov	r2, r0
    5102:	460b      	mov	r3, r1
		if (discardable) {
    5104:	b10d      	cbz	r5, 510a <bt_buf_get_evt+0x42>
    5106:	4804      	ldr	r0, [pc, #16]	; (5118 <bt_buf_get_evt+0x50>)
    5108:	e7ee      	b.n	50e8 <bt_buf_get_evt+0x20>
}
    510a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    510e:	2001      	movs	r0, #1
    5110:	f7ff bfa4 	b.w	505c <bt_buf_get_rx>
    5114:	20000828 	.word	0x20000828
    5118:	20000788 	.word	0x20000788

0000511c <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    511c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    511e:	4d0b      	ldr	r5, [pc, #44]	; (514c <ver_str+0x30>)
{
    5120:	4606      	mov	r6, r0
	const char * const str[] = {
    5122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    5124:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    5126:	466c      	mov	r4, sp
    5128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    512a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    512c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    512e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
    5136:	2e0b      	cmp	r6, #11
		return str[ver];
    5138:	bf9b      	ittet	ls
    513a:	ab0c      	addls	r3, sp, #48	; 0x30
    513c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    5140:	4803      	ldrhi	r0, [pc, #12]	; (5150 <ver_str+0x34>)
		return str[ver];
    5142:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    5146:	b00c      	add	sp, #48	; 0x30
    5148:	bd70      	pop	{r4, r5, r6, pc}
    514a:	bf00      	nop
    514c:	00020180 	.word	0x00020180
    5150:	00022026 	.word	0x00022026

00005154 <hci_data_buf_overflow>:
    5154:	4905      	ldr	r1, [pc, #20]	; (516c <hci_data_buf_overflow+0x18>)
    5156:	4a06      	ldr	r2, [pc, #24]	; (5170 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    5158:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    515a:	4806      	ldr	r0, [pc, #24]	; (5174 <hci_data_buf_overflow+0x20>)
    515c:	1a52      	subs	r2, r2, r1
    515e:	08d2      	lsrs	r2, r2, #3
    5160:	0192      	lsls	r2, r2, #6
    5162:	7819      	ldrb	r1, [r3, #0]
    5164:	f042 0202 	orr.w	r2, r2, #2
    5168:	f017 bce4 	b.w	1cb34 <log_1>
    516c:	0001ff94 	.word	0x0001ff94
    5170:	0002008c 	.word	0x0002008c
    5174:	0002202e 	.word	0x0002202e

00005178 <hci_disconn_complete_prio>:
{
    5178:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    517a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    517c:	781a      	ldrb	r2, [r3, #0]
    517e:	b972      	cbnz	r2, 519e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5180:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5184:	4620      	mov	r0, r4
    5186:	f002 fe75 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    518a:	4605      	mov	r5, r0
    518c:	b940      	cbnz	r0, 51a0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    518e:	4b08      	ldr	r3, [pc, #32]	; (51b0 <hci_disconn_complete_prio+0x38>)
    5190:	881a      	ldrh	r2, [r3, #0]
    5192:	b922      	cbnz	r2, 519e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    5194:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    5198:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    519c:	8018      	strh	r0, [r3, #0]
}
    519e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    51a0:	2101      	movs	r1, #1
    51a2:	f002 fe6f 	bl	7e84 <bt_conn_set_state>
	bt_conn_unref(conn);
    51a6:	4628      	mov	r0, r5
}
    51a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    51ac:	f018 bf2d 	b.w	1e00a <bt_conn_unref>
    51b0:	20002814 	.word	0x20002814

000051b4 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    51b4:	6883      	ldr	r3, [r0, #8]
{
    51b6:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    51b8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    51ba:	4620      	mov	r0, r4
    51bc:	f002 fe5a 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    51c0:	b960      	cbnz	r0, 51dc <le_data_len_change+0x28>
    51c2:	4a08      	ldr	r2, [pc, #32]	; (51e4 <le_data_len_change+0x30>)
    51c4:	4b08      	ldr	r3, [pc, #32]	; (51e8 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    51c6:	4809      	ldr	r0, [pc, #36]	; (51ec <le_data_len_change+0x38>)
    51c8:	1ad2      	subs	r2, r2, r3
    51ca:	08d2      	lsrs	r2, r2, #3
    51cc:	0192      	lsls	r2, r2, #6
    51ce:	4621      	mov	r1, r4
    51d0:	f042 0201 	orr.w	r2, r2, #1
}
    51d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    51d8:	f017 bcac 	b.w	1cb34 <log_1>
}
    51dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    51e0:	f018 bf13 	b.w	1e00a <bt_conn_unref>
    51e4:	0002008c 	.word	0x0002008c
    51e8:	0001ff94 	.word	0x0001ff94
    51ec:	00022056 	.word	0x00022056

000051f0 <hci_hardware_error>:
{
    51f0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    51f2:	2101      	movs	r1, #1
    51f4:	3008      	adds	r0, #8
    51f6:	f019 fec9 	bl	1ef8c <net_buf_simple_pull_mem>
    51fa:	4b06      	ldr	r3, [pc, #24]	; (5214 <hci_hardware_error+0x24>)
    51fc:	4a06      	ldr	r2, [pc, #24]	; (5218 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    51fe:	7801      	ldrb	r1, [r0, #0]
    5200:	4806      	ldr	r0, [pc, #24]	; (521c <hci_hardware_error+0x2c>)
    5202:	1ad2      	subs	r2, r2, r3
    5204:	08d2      	lsrs	r2, r2, #3
    5206:	0192      	lsls	r2, r2, #6
}
    5208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    520c:	f042 0201 	orr.w	r2, r2, #1
    5210:	f017 bc90 	b.w	1cb34 <log_1>
    5214:	0001ff94 	.word	0x0001ff94
    5218:	0002008c 	.word	0x0002008c
    521c:	0002207a 	.word	0x0002207a

00005220 <hci_vendor_event>:
{
    5220:	b510      	push	{r4, lr}
    5222:	4a0a      	ldr	r2, [pc, #40]	; (524c <hci_vendor_event+0x2c>)
    5224:	4c0a      	ldr	r4, [pc, #40]	; (5250 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    5226:	8981      	ldrh	r1, [r0, #12]
    5228:	6880      	ldr	r0, [r0, #8]
    522a:	1aa4      	subs	r4, r4, r2
    522c:	f7ff fe80 	bl	4f30 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    5230:	f7fe f978 	bl	3524 <z_log_strdup>
    5234:	08e4      	lsrs	r4, r4, #3
    5236:	01a4      	lsls	r4, r4, #6
    5238:	f044 0402 	orr.w	r4, r4, #2
    523c:	4601      	mov	r1, r0
    523e:	4622      	mov	r2, r4
    5240:	4804      	ldr	r0, [pc, #16]	; (5254 <hci_vendor_event+0x34>)
}
    5242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    5246:	f017 bc75 	b.w	1cb34 <log_1>
    524a:	bf00      	nop
    524c:	0001ff94 	.word	0x0001ff94
    5250:	0002008c 	.word	0x0002008c
    5254:	0002209c 	.word	0x0002209c

00005258 <le_conn_update_complete>:
{
    5258:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    525a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    525c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5260:	4630      	mov	r0, r6
    5262:	f002 fe07 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    5266:	4604      	mov	r4, r0
    5268:	b968      	cbnz	r0, 5286 <le_conn_update_complete+0x2e>
    526a:	4b25      	ldr	r3, [pc, #148]	; (5300 <le_conn_update_complete+0xa8>)
    526c:	4a25      	ldr	r2, [pc, #148]	; (5304 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    526e:	4826      	ldr	r0, [pc, #152]	; (5308 <le_conn_update_complete+0xb0>)
    5270:	1ad2      	subs	r2, r2, r3
    5272:	08d2      	lsrs	r2, r2, #3
    5274:	0192      	lsls	r2, r2, #6
    5276:	f042 0201 	orr.w	r2, r2, #1
    527a:	4631      	mov	r1, r6
}
    527c:	b002      	add	sp, #8
    527e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5282:	f017 bc57 	b.w	1cb34 <log_1>
	if (!evt->status) {
    5286:	782b      	ldrb	r3, [r5, #0]
    5288:	b9cb      	cbnz	r3, 52be <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    528a:	792a      	ldrb	r2, [r5, #4]
    528c:	78eb      	ldrb	r3, [r5, #3]
    528e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5292:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    5296:	79aa      	ldrb	r2, [r5, #6]
    5298:	796b      	ldrb	r3, [r5, #5]
    529a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    529e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    52a2:	79eb      	ldrb	r3, [r5, #7]
    52a4:	7a2a      	ldrb	r2, [r5, #8]
    52a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    52aa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    52ae:	f002 fc11 	bl	7ad4 <notify_le_param_updated>
	bt_conn_unref(conn);
    52b2:	4620      	mov	r0, r4
}
    52b4:	b002      	add	sp, #8
    52b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    52ba:	f018 bea6 	b.w	1e00a <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    52be:	2b1a      	cmp	r3, #26
    52c0:	d1f7      	bne.n	52b2 <le_conn_update_complete+0x5a>
    52c2:	78c3      	ldrb	r3, [r0, #3]
    52c4:	2b01      	cmp	r3, #1
    52c6:	d1f4      	bne.n	52b2 <le_conn_update_complete+0x5a>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    52c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    52cc:	3004      	adds	r0, #4
    52ce:	f018 fbce 	bl	1da6e <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    52d2:	0543      	lsls	r3, r0, #21
    52d4:	d4ed      	bmi.n	52b2 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    52d6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    52da:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    52de:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    52e2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    52e6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    52ea:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    52ee:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    52f0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    52f4:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    52f8:	4620      	mov	r0, r4
    52fa:	f003 fa83 	bl	8804 <bt_l2cap_update_conn_param>
    52fe:	e7d8      	b.n	52b2 <le_conn_update_complete+0x5a>
    5300:	0001ff94 	.word	0x0001ff94
    5304:	0002008c 	.word	0x0002008c
    5308:	00022056 	.word	0x00022056

0000530c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    530c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    530e:	4c0d      	ldr	r4, [pc, #52]	; (5344 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    5310:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    5312:	2205      	movs	r2, #5
    5314:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5318:	f002 ff08 	bl	812c <bt_conn_lookup_state_le>
		if (!conn) {
    531c:	b978      	cbnz	r0, 533e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <find_pending_connect.part.0+0x3c>)
    5320:	6b18      	ldr	r0, [r3, #48]	; 0x30
    5322:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    5324:	9000      	str	r0, [sp, #0]
    5326:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    532a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    532e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    5332:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5336:	2204      	movs	r2, #4
    5338:	4669      	mov	r1, sp
    533a:	f002 fef7 	bl	812c <bt_conn_lookup_state_le>
}
    533e:	b002      	add	sp, #8
    5340:	bd10      	pop	{r4, pc}
    5342:	bf00      	nop
    5344:	20000000 	.word	0x20000000
    5348:	00020180 	.word	0x00020180

0000534c <handle_event>:
{
    534c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    534e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5352:	4605      	mov	r5, r0
    5354:	4608      	mov	r0, r1
		if (handler->event != event) {
    5356:	7811      	ldrb	r1, [r2, #0]
    5358:	42a9      	cmp	r1, r5
    535a:	d01a      	beq.n	5392 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    535c:	3208      	adds	r2, #8
    535e:	429a      	cmp	r2, r3
    5360:	d1f9      	bne.n	5356 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    5362:	8986      	ldrh	r6, [r0, #12]
    5364:	4b16      	ldr	r3, [pc, #88]	; (53c0 <handle_event+0x74>)
    5366:	4c17      	ldr	r4, [pc, #92]	; (53c4 <handle_event+0x78>)
    5368:	6880      	ldr	r0, [r0, #8]
    536a:	4631      	mov	r1, r6
    536c:	1ae4      	subs	r4, r4, r3
    536e:	f7ff fddf 	bl	4f30 <bt_hex_real>
    5372:	f7fe f8d7 	bl	3524 <z_log_strdup>
    5376:	08e4      	lsrs	r4, r4, #3
    5378:	01a4      	lsls	r4, r4, #6
    537a:	f044 0402 	orr.w	r4, r4, #2
    537e:	4603      	mov	r3, r0
    5380:	f8ad 4000 	strh.w	r4, [sp]
    5384:	4810      	ldr	r0, [pc, #64]	; (53c8 <handle_event+0x7c>)
    5386:	4632      	mov	r2, r6
    5388:	4629      	mov	r1, r5
    538a:	f017 fc00 	bl	1cb8e <log_3>
}
    538e:	b002      	add	sp, #8
    5390:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    5392:	8981      	ldrh	r1, [r0, #12]
    5394:	7853      	ldrb	r3, [r2, #1]
    5396:	428b      	cmp	r3, r1
    5398:	d90d      	bls.n	53b6 <handle_event+0x6a>
    539a:	4a09      	ldr	r2, [pc, #36]	; (53c0 <handle_event+0x74>)
    539c:	4b09      	ldr	r3, [pc, #36]	; (53c4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    539e:	480b      	ldr	r0, [pc, #44]	; (53cc <handle_event+0x80>)
    53a0:	1a9b      	subs	r3, r3, r2
    53a2:	08db      	lsrs	r3, r3, #3
    53a4:	019b      	lsls	r3, r3, #6
    53a6:	f043 0301 	orr.w	r3, r3, #1
    53aa:	462a      	mov	r2, r5
}
    53ac:	b002      	add	sp, #8
    53ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    53b2:	f017 bbd3 	b.w	1cb5c <log_2>
		handler->handler(buf);
    53b6:	6853      	ldr	r3, [r2, #4]
}
    53b8:	b002      	add	sp, #8
    53ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    53be:	4718      	bx	r3
    53c0:	0001ff94 	.word	0x0001ff94
    53c4:	0002008c 	.word	0x0002008c
    53c8:	000220e2 	.word	0x000220e2
    53cc:	000220c0 	.word	0x000220c0

000053d0 <hci_le_meta_event>:
{
    53d0:	b510      	push	{r4, lr}
    53d2:	2101      	movs	r1, #1
    53d4:	4604      	mov	r4, r0
    53d6:	3008      	adds	r0, #8
    53d8:	f019 fdd8 	bl	1ef8c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    53dc:	4621      	mov	r1, r4
    53de:	4a03      	ldr	r2, [pc, #12]	; (53ec <hci_le_meta_event+0x1c>)
    53e0:	7800      	ldrb	r0, [r0, #0]
}
    53e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    53e6:	2308      	movs	r3, #8
    53e8:	f7ff bfb0 	b.w	534c <handle_event>
    53ec:	000202d8 	.word	0x000202d8

000053f0 <hci_cmd_done>:
{
    53f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53f4:	4607      	mov	r7, r0
    53f6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    53f8:	7990      	ldrb	r0, [r2, #6]
    53fa:	4e3c      	ldr	r6, [pc, #240]	; (54ec <hci_cmd_done+0xfc>)
{
    53fc:	4688      	mov	r8, r1
    53fe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5400:	f014 fb3a 	bl	19a78 <net_buf_pool_get>
    5404:	4286      	cmp	r6, r0
    5406:	d016      	beq.n	5436 <hci_cmd_done+0x46>
    5408:	4b39      	ldr	r3, [pc, #228]	; (54f0 <hci_cmd_done+0x100>)
    540a:	4d3a      	ldr	r5, [pc, #232]	; (54f4 <hci_cmd_done+0x104>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    540c:	79a0      	ldrb	r0, [r4, #6]
    540e:	9700      	str	r7, [sp, #0]
    5410:	1aed      	subs	r5, r5, r3
    5412:	08ed      	lsrs	r5, r5, #3
    5414:	9001      	str	r0, [sp, #4]
    5416:	f014 fb2f 	bl	19a78 <net_buf_pool_get>
    541a:	01ad      	lsls	r5, r5, #6
    541c:	f045 0502 	orr.w	r5, r5, #2
    5420:	e9cd 0602 	strd	r0, r6, [sp, #8]
    5424:	462b      	mov	r3, r5
    5426:	4834      	ldr	r0, [pc, #208]	; (54f8 <hci_cmd_done+0x108>)
    5428:	2204      	movs	r2, #4
    542a:	4669      	mov	r1, sp
    542c:	f017 fbcb 	bl	1cbc6 <log_n>
}
    5430:	b005      	add	sp, #20
    5432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    5436:	4620      	mov	r0, r4
    5438:	f014 fb26 	bl	19a88 <net_buf_id>
    543c:	4d2f      	ldr	r5, [pc, #188]	; (54fc <hci_cmd_done+0x10c>)
    543e:	f04f 090c 	mov.w	r9, #12
    5442:	fb09 5000 	mla	r0, r9, r0, r5
    5446:	8843      	ldrh	r3, [r0, #2]
    5448:	42bb      	cmp	r3, r7
    544a:	d011      	beq.n	5470 <hci_cmd_done+0x80>
    544c:	4b28      	ldr	r3, [pc, #160]	; (54f0 <hci_cmd_done+0x100>)
    544e:	4e29      	ldr	r6, [pc, #164]	; (54f4 <hci_cmd_done+0x104>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5450:	4620      	mov	r0, r4
    5452:	1af6      	subs	r6, r6, r3
    5454:	f014 fb18 	bl	19a88 <net_buf_id>
    5458:	08f6      	lsrs	r6, r6, #3
    545a:	fb09 5000 	mla	r0, r9, r0, r5
    545e:	01b6      	lsls	r6, r6, #6
    5460:	f046 0602 	orr.w	r6, r6, #2
    5464:	8842      	ldrh	r2, [r0, #2]
    5466:	4826      	ldr	r0, [pc, #152]	; (5500 <hci_cmd_done+0x110>)
    5468:	4633      	mov	r3, r6
    546a:	4639      	mov	r1, r7
    546c:	f017 fb76 	bl	1cb5c <log_2>
	if (cmd(buf)->state && !status) {
    5470:	4620      	mov	r0, r4
    5472:	f014 fb09 	bl	19a88 <net_buf_id>
    5476:	260c      	movs	r6, #12
    5478:	fb06 5000 	mla	r0, r6, r0, r5
    547c:	6843      	ldr	r3, [r0, #4]
    547e:	b1ab      	cbz	r3, 54ac <hci_cmd_done+0xbc>
    5480:	f1b8 0f00 	cmp.w	r8, #0
    5484:	d112      	bne.n	54ac <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    5486:	4620      	mov	r0, r4
    5488:	f014 fafe 	bl	19a88 <net_buf_id>
    548c:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5490:	2101      	movs	r1, #1
    5492:	6842      	ldr	r2, [r0, #4]
    5494:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    5498:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    549a:	f003 061f 	and.w	r6, r3, #31
    549e:	40b1      	lsls	r1, r6
	if (val) {
    54a0:	095b      	lsrs	r3, r3, #5
    54a2:	b1ea      	cbz	r2, 54e0 <hci_cmd_done+0xf0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    54a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    54a8:	f018 fae1 	bl	1da6e <atomic_or>
	if (cmd(buf)->sync) {
    54ac:	4620      	mov	r0, r4
    54ae:	f014 faeb 	bl	19a88 <net_buf_id>
    54b2:	260c      	movs	r6, #12
    54b4:	fb06 5000 	mla	r0, r6, r0, r5
    54b8:	6883      	ldr	r3, [r0, #8]
    54ba:	2b00      	cmp	r3, #0
    54bc:	d0b8      	beq.n	5430 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    54be:	4620      	mov	r0, r4
    54c0:	f014 fae2 	bl	19a88 <net_buf_id>
    54c4:	4370      	muls	r0, r6
    54c6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    54ca:	4620      	mov	r0, r4
    54cc:	f014 fadc 	bl	19a88 <net_buf_id>
    54d0:	fb06 5500 	mla	r5, r6, r0, r5
    54d4:	68a8      	ldr	r0, [r5, #8]
}
    54d6:	b005      	add	sp, #20
    54d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    54dc:	f015 be7c 	b.w	1b1d8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    54e0:	43c9      	mvns	r1, r1
    54e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    54e6:	f018 fab3 	bl	1da50 <atomic_and>
    54ea:	e7df      	b.n	54ac <hci_cmd_done+0xbc>
    54ec:	200007d8 	.word	0x200007d8
    54f0:	0001ff94 	.word	0x0001ff94
    54f4:	0002008c 	.word	0x0002008c
    54f8:	00022104 	.word	0x00022104
    54fc:	200012b0 	.word	0x200012b0
    5500:	00022139 	.word	0x00022139

00005504 <hci_cmd_status>:
{
    5504:	b538      	push	{r3, r4, r5, lr}
    5506:	2104      	movs	r1, #4
    5508:	4604      	mov	r4, r0
    550a:	3008      	adds	r0, #8
    550c:	f019 fd3e 	bl	1ef8c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5510:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5512:	7801      	ldrb	r1, [r0, #0]
    5514:	8840      	ldrh	r0, [r0, #2]
    5516:	4622      	mov	r2, r4
    5518:	f7ff ff6a 	bl	53f0 <hci_cmd_done>
	if (ncmd) {
    551c:	b125      	cbz	r5, 5528 <hci_cmd_status+0x24>
    551e:	4803      	ldr	r0, [pc, #12]	; (552c <hci_cmd_status+0x28>)
}
    5520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5524:	f015 be58 	b.w	1b1d8 <z_impl_k_sem_give>
    5528:	bd38      	pop	{r3, r4, r5, pc}
    552a:	bf00      	nop
    552c:	200000e8 	.word	0x200000e8

00005530 <hci_cmd_complete>:
{
    5530:	b538      	push	{r3, r4, r5, lr}
    5532:	2103      	movs	r1, #3
    5534:	4604      	mov	r4, r0
    5536:	3008      	adds	r0, #8
    5538:	f019 fd28 	bl	1ef8c <net_buf_simple_pull_mem>
	status = buf->data[0];
    553c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    553e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5540:	7819      	ldrb	r1, [r3, #0]
    5542:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5546:	4622      	mov	r2, r4
    5548:	f7ff ff52 	bl	53f0 <hci_cmd_done>
	if (ncmd) {
    554c:	b125      	cbz	r5, 5558 <hci_cmd_complete+0x28>
    554e:	4803      	ldr	r0, [pc, #12]	; (555c <hci_cmd_complete+0x2c>)
}
    5550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5554:	f015 be40 	b.w	1b1d8 <z_impl_k_sem_give>
    5558:	bd38      	pop	{r3, r4, r5, pc}
    555a:	bf00      	nop
    555c:	200000e8 	.word	0x200000e8

00005560 <hci_num_completed_packets>:
{
    5560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5564:	4d39      	ldr	r5, [pc, #228]	; (564c <hci_num_completed_packets+0xec>)
    5566:	4b3a      	ldr	r3, [pc, #232]	; (5650 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5568:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    556c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 5654 <hci_num_completed_packets+0xf4>
    5570:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    5572:	2600      	movs	r6, #0
    5574:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    5576:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    5578:	f898 3000 	ldrb.w	r3, [r8]
    557c:	429e      	cmp	r6, r3
    557e:	db01      	blt.n	5584 <hci_num_completed_packets+0x24>
}
    5580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5584:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    5588:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    558c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    5590:	4658      	mov	r0, fp
    5592:	f002 fc6f 	bl	7e74 <bt_conn_lookup_handle>
		if (!conn) {
    5596:	4604      	mov	r4, r0
    5598:	b1d8      	cbz	r0, 55d2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    559a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    559e:	2f00      	cmp	r7, #0
    55a0:	d033      	beq.n	560a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    55a2:	f04f 0320 	mov.w	r3, #32
    55a6:	f3ef 8211 	mrs	r2, BASEPRI
    55aa:	f383 8811 	msr	BASEPRI, r3
    55ae:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    55b2:	69e3      	ldr	r3, [r4, #28]
    55b4:	b1b3      	cbz	r3, 55e4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    55b6:	3b01      	subs	r3, #1
    55b8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    55ba:	f382 8811 	msr	BASEPRI, r2
    55be:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    55c2:	4620      	mov	r0, r4
    55c4:	f002 fa82 	bl	7acc <bt_conn_get_pkts>
    55c8:	3f01      	subs	r7, #1
    55ca:	f015 fe05 	bl	1b1d8 <z_impl_k_sem_give>
    55ce:	b2bf      	uxth	r7, r7
    55d0:	e7e5      	b.n	559e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    55d2:	01aa      	lsls	r2, r5, #6
    55d4:	4820      	ldr	r0, [pc, #128]	; (5658 <hci_num_completed_packets+0xf8>)
    55d6:	f042 0201 	orr.w	r2, r2, #1
    55da:	4659      	mov	r1, fp
    55dc:	f017 faaa 	bl	1cb34 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    55e0:	3601      	adds	r6, #1
    55e2:	e7c9      	b.n	5578 <hci_num_completed_packets+0x18>
	return list->head;
    55e4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    55e6:	b12b      	cbz	r3, 55f4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    55e8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    55ea:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    55ec:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    55ee:	428b      	cmp	r3, r1
	list->tail = node;
    55f0:	bf08      	it	eq
    55f2:	61a0      	streq	r0, [r4, #24]
    55f4:	f382 8811 	msr	BASEPRI, r2
    55f8:	f3bf 8f6f 	isb	sy
			if (!node) {
    55fc:	b94b      	cbnz	r3, 5612 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    55fe:	01a9      	lsls	r1, r5, #6
    5600:	f041 0101 	orr.w	r1, r1, #1
    5604:	4650      	mov	r0, sl
    5606:	f017 fa88 	bl	1cb1a <log_0>
		bt_conn_unref(conn);
    560a:	4620      	mov	r0, r4
    560c:	f018 fcfd 	bl	1e00a <bt_conn_unref>
    5610:	e7e6      	b.n	55e0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    5612:	f04f 0220 	mov.w	r2, #32
    5616:	f3ef 8111 	mrs	r1, BASEPRI
    561a:	f382 8811 	msr	BASEPRI, r2
    561e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5622:	68da      	ldr	r2, [r3, #12]
    5624:	61e2      	str	r2, [r4, #28]
	return list->tail;
    5626:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5628:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    562c:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    5630:	b94a      	cbnz	r2, 5646 <hci_num_completed_packets+0xe6>
	list->head = node;
    5632:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5636:	f381 8811 	msr	BASEPRI, r1
    563a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    563e:	4658      	mov	r0, fp
    5640:	f015 ff36 	bl	1b4b0 <k_work_submit>
    5644:	e7bd      	b.n	55c2 <hci_num_completed_packets+0x62>
	parent->next = child;
    5646:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5648:	6263      	str	r3, [r4, #36]	; 0x24
}
    564a:	e7f4      	b.n	5636 <hci_num_completed_packets+0xd6>
    564c:	0002008c 	.word	0x0002008c
    5650:	0001ff94 	.word	0x0001ff94
    5654:	00022188 	.word	0x00022188
    5658:	0002216c 	.word	0x0002216c

0000565c <hci_disconn_complete>:
{
    565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    565e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    5660:	7835      	ldrb	r5, [r6, #0]
    5662:	bb85      	cbnz	r5, 56c6 <hci_disconn_complete+0x6a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5664:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    5668:	4638      	mov	r0, r7
    566a:	f002 fc03 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    566e:	4604      	mov	r4, r0
    5670:	b960      	cbnz	r0, 568c <hci_disconn_complete+0x30>
    5672:	4b15      	ldr	r3, [pc, #84]	; (56c8 <hci_disconn_complete+0x6c>)
    5674:	4a15      	ldr	r2, [pc, #84]	; (56cc <hci_disconn_complete+0x70>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5676:	4816      	ldr	r0, [pc, #88]	; (56d0 <hci_disconn_complete+0x74>)
    5678:	1ad2      	subs	r2, r2, r3
    567a:	08d2      	lsrs	r2, r2, #3
    567c:	0192      	lsls	r2, r2, #6
    567e:	4639      	mov	r1, r7
    5680:	f042 0201 	orr.w	r2, r2, #1
}
    5684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5688:	f017 ba54 	b.w	1cb34 <log_1>
	conn->err = evt->reason;
    568c:	78f3      	ldrb	r3, [r6, #3]
    568e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5690:	4629      	mov	r1, r5
    5692:	f002 fbf7 	bl	7e84 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    5696:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    5698:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    569a:	2b01      	cmp	r3, #1
    569c:	d004      	beq.n	56a8 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    569e:	4620      	mov	r0, r4
}
    56a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    56a4:	f018 bcb1 	b.w	1e00a <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56a8:	f3bf 8f5b 	dmb	ish
    56ac:	6863      	ldr	r3, [r4, #4]
    56ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    56b2:	07db      	lsls	r3, r3, #31
    56b4:	d5f3      	bpl.n	569e <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    56b6:	4620      	mov	r0, r4
    56b8:	2102      	movs	r1, #2
    56ba:	f002 fbe3 	bl	7e84 <bt_conn_set_state>
		bt_le_scan_update(false);
    56be:	4628      	mov	r0, r5
    56c0:	f001 ff86 	bl	75d0 <bt_le_scan_update>
    56c4:	e7eb      	b.n	569e <hci_disconn_complete+0x42>
}
    56c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56c8:	0001ff94 	.word	0x0001ff94
    56cc:	0002008c 	.word	0x0002008c
    56d0:	0002219f 	.word	0x0002219f

000056d4 <bt_hci_cmd_state_set_init>:
{
    56d4:	b510      	push	{r4, lr}
	state->bit = bit;
    56d6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    56da:	f89d 3008 	ldrb.w	r3, [sp, #8]
    56de:	720b      	strb	r3, [r1, #8]
{
    56e0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    56e2:	f014 f9d1 	bl	19a88 <net_buf_id>
    56e6:	4b03      	ldr	r3, [pc, #12]	; (56f4 <bt_hci_cmd_state_set_init+0x20>)
    56e8:	220c      	movs	r2, #12
    56ea:	fb02 3300 	mla	r3, r2, r0, r3
    56ee:	605c      	str	r4, [r3, #4]
}
    56f0:	bd10      	pop	{r4, pc}
    56f2:	bf00      	nop
    56f4:	200012b0 	.word	0x200012b0

000056f8 <bt_hci_cmd_create>:
{
    56f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    56fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5704:	4606      	mov	r6, r0
    5706:	4817      	ldr	r0, [pc, #92]	; (5764 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    5708:	4d17      	ldr	r5, [pc, #92]	; (5768 <bt_hci_cmd_create+0x70>)
{
    570a:	460f      	mov	r7, r1
    570c:	f019 fbb5 	bl	1ee7a <net_buf_alloc_fixed>
    5710:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5712:	f100 0a08 	add.w	sl, r0, #8
    5716:	2100      	movs	r1, #0
    5718:	f04f 0800 	mov.w	r8, #0
    571c:	4650      	mov	r0, sl
    571e:	f019 fbcb 	bl	1eeb8 <net_buf_simple_reserve>
    5722:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    5726:	4620      	mov	r0, r4
    5728:	f014 f9ae 	bl	19a88 <net_buf_id>
    572c:	f04f 090c 	mov.w	r9, #12
    5730:	fb09 5000 	mla	r0, r9, r0, r5
    5734:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    5736:	4620      	mov	r0, r4
    5738:	f014 f9a6 	bl	19a88 <net_buf_id>
    573c:	fb09 5000 	mla	r0, r9, r0, r5
    5740:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    5744:	4620      	mov	r0, r4
    5746:	f014 f99f 	bl	19a88 <net_buf_id>
    574a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    574e:	2103      	movs	r1, #3
    5750:	f8c5 8004 	str.w	r8, [r5, #4]
    5754:	4650      	mov	r0, sl
    5756:	f019 fbf2 	bl	1ef3e <net_buf_simple_add>
	hdr->param_len = param_len;
    575a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    575c:	8006      	strh	r6, [r0, #0]
}
    575e:	4620      	mov	r0, r4
    5760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5764:	200007d8 	.word	0x200007d8
    5768:	200012b0 	.word	0x200012b0

0000576c <bt_hci_cmd_send_sync>:
{
    576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5770:	4607      	mov	r7, r0
    5772:	b086      	sub	sp, #24
    5774:	4615      	mov	r5, r2
	if (!buf) {
    5776:	460c      	mov	r4, r1
    5778:	b921      	cbnz	r1, 5784 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    577a:	f7ff ffbd 	bl	56f8 <bt_hci_cmd_create>
		if (!buf) {
    577e:	4604      	mov	r4, r0
    5780:	2800      	cmp	r0, #0
    5782:	d057      	beq.n	5834 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5784:	2201      	movs	r2, #1
    5786:	2100      	movs	r1, #0
    5788:	4668      	mov	r0, sp
    578a:	f019 fef1 	bl	1f570 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    578e:	4620      	mov	r0, r4
    5790:	f014 f97a 	bl	19a88 <net_buf_id>
    5794:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 583c <bt_hci_cmd_send_sync+0xd0>
    5798:	230c      	movs	r3, #12
    579a:	fb03 8000 	mla	r0, r3, r0, r8
    579e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    57a2:	4620      	mov	r0, r4
    57a4:	f019 fb99 	bl	1eeda <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    57a8:	4825      	ldr	r0, [pc, #148]	; (5840 <bt_hci_cmd_send_sync+0xd4>)
    57aa:	4621      	mov	r1, r4
    57ac:	f019 fb88 	bl	1eec0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    57b0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    57b4:	2300      	movs	r3, #0
    57b6:	4668      	mov	r0, sp
    57b8:	f015 fd34 	bl	1b224 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    57bc:	4606      	mov	r6, r0
    57be:	b180      	cbz	r0, 57e2 <bt_hci_cmd_send_sync+0x76>
    57c0:	4a20      	ldr	r2, [pc, #128]	; (5844 <bt_hci_cmd_send_sync+0xd8>)
    57c2:	4921      	ldr	r1, [pc, #132]	; (5848 <bt_hci_cmd_send_sync+0xdc>)
    57c4:	4821      	ldr	r0, [pc, #132]	; (584c <bt_hci_cmd_send_sync+0xe0>)
    57c6:	f240 1333 	movw	r3, #307	; 0x133
    57ca:	f016 fd67 	bl	1c29c <printk>
    57ce:	4820      	ldr	r0, [pc, #128]	; (5850 <bt_hci_cmd_send_sync+0xe4>)
    57d0:	4631      	mov	r1, r6
    57d2:	f016 fd63 	bl	1c29c <printk>
    57d6:	4040      	eors	r0, r0
    57d8:	f380 8811 	msr	BASEPRI, r0
    57dc:	f04f 0003 	mov.w	r0, #3
    57e0:	df02      	svc	2
	status = cmd(buf)->status;
    57e2:	4620      	mov	r0, r4
    57e4:	f014 f950 	bl	19a88 <net_buf_id>
    57e8:	230c      	movs	r3, #12
    57ea:	4358      	muls	r0, r3
    57ec:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    57f0:	b1be      	cbz	r6, 5822 <bt_hci_cmd_send_sync+0xb6>
    57f2:	4a18      	ldr	r2, [pc, #96]	; (5854 <bt_hci_cmd_send_sync+0xe8>)
    57f4:	4b18      	ldr	r3, [pc, #96]	; (5858 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    57f6:	4819      	ldr	r0, [pc, #100]	; (585c <bt_hci_cmd_send_sync+0xf0>)
    57f8:	1a9b      	subs	r3, r3, r2
    57fa:	08db      	lsrs	r3, r3, #3
    57fc:	019b      	lsls	r3, r3, #6
    57fe:	f043 0302 	orr.w	r3, r3, #2
    5802:	4632      	mov	r2, r6
    5804:	4639      	mov	r1, r7
    5806:	f017 f9a9 	bl	1cb5c <log_2>
		net_buf_unref(buf);
    580a:	4620      	mov	r0, r4
    580c:	f014 f9f2 	bl	19bf4 <net_buf_unref>
			return -EIO;
    5810:	2e09      	cmp	r6, #9
    5812:	bf0c      	ite	eq
    5814:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    5818:	f06f 0004 	mvnne.w	r0, #4
}
    581c:	b006      	add	sp, #24
    581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5822:	b115      	cbz	r5, 582a <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    5824:	602c      	str	r4, [r5, #0]
	return 0;
    5826:	4630      	mov	r0, r6
    5828:	e7f8      	b.n	581c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    582a:	4620      	mov	r0, r4
    582c:	f014 f9e2 	bl	19bf4 <net_buf_unref>
	return 0;
    5830:	4628      	mov	r0, r5
    5832:	e7f3      	b.n	581c <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    5834:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5838:	e7f0      	b.n	581c <bt_hci_cmd_send_sync+0xb0>
    583a:	bf00      	nop
    583c:	200012b0 	.word	0x200012b0
    5840:	20000104 	.word	0x20000104
    5844:	000221c5 	.word	0x000221c5
    5848:	000221f9 	.word	0x000221f9
    584c:	00022202 	.word	0x00022202
    5850:	0002221f 	.word	0x0002221f
    5854:	0001ff94 	.word	0x0001ff94
    5858:	0002008c 	.word	0x0002008c
    585c:	0002223f 	.word	0x0002223f

00005860 <hci_le_read_max_data_len>:
{
    5860:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5862:	4606      	mov	r6, r0
    5864:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5866:	aa01      	add	r2, sp, #4
    5868:	2100      	movs	r1, #0
    586a:	f242 002f 	movw	r0, #8239	; 0x202f
    586e:	f7ff ff7d 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    5872:	4604      	mov	r4, r0
    5874:	b160      	cbz	r0, 5890 <hci_le_read_max_data_len+0x30>
    5876:	490c      	ldr	r1, [pc, #48]	; (58a8 <hci_le_read_max_data_len+0x48>)
    5878:	4b0c      	ldr	r3, [pc, #48]	; (58ac <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    587a:	480d      	ldr	r0, [pc, #52]	; (58b0 <hci_le_read_max_data_len+0x50>)
    587c:	1ac9      	subs	r1, r1, r3
    587e:	08c9      	lsrs	r1, r1, #3
    5880:	0189      	lsls	r1, r1, #6
    5882:	f041 0101 	orr.w	r1, r1, #1
    5886:	f017 f948 	bl	1cb1a <log_0>
}
    588a:	4620      	mov	r0, r4
    588c:	b002      	add	sp, #8
    588e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5890:	9801      	ldr	r0, [sp, #4]
    5892:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5894:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5898:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    589a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    589e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    58a0:	f014 f9a8 	bl	19bf4 <net_buf_unref>
	return 0;
    58a4:	e7f1      	b.n	588a <hci_le_read_max_data_len+0x2a>
    58a6:	bf00      	nop
    58a8:	0002008c 	.word	0x0002008c
    58ac:	0001ff94 	.word	0x0001ff94
    58b0:	0002225b 	.word	0x0002225b

000058b4 <bt_le_create_conn_legacy>:
{
    58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58b6:	b087      	sub	sp, #28
    58b8:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    58ba:	f10d 010b 	add.w	r1, sp, #11
    58be:	2000      	movs	r0, #0
    58c0:	f001 fa3e 	bl	6d40 <bt_id_set_create_conn_own_addr>
	if (err) {
    58c4:	4604      	mov	r4, r0
    58c6:	2800      	cmp	r0, #0
    58c8:	d13c      	bne.n	5944 <bt_le_create_conn_legacy+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    58ca:	2119      	movs	r1, #25
    58cc:	f242 000d 	movw	r0, #8205	; 0x200d
    58d0:	f7ff ff12 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    58d4:	4607      	mov	r7, r0
    58d6:	b3c0      	cbz	r0, 594a <bt_le_create_conn_legacy+0x96>
    58d8:	2119      	movs	r1, #25
    58da:	3008      	adds	r0, #8
    58dc:	f019 fb2f 	bl	1ef3e <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    58e0:	2219      	movs	r2, #25
    58e2:	4605      	mov	r5, r0
    58e4:	4621      	mov	r1, r4
    58e6:	f017 ffba 	bl	1d85e <memset>
	cp->own_addr_type = own_addr_type;
    58ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    58ee:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    58f0:	f106 0188 	add.w	r1, r6, #136	; 0x88
    58f4:	1d68      	adds	r0, r5, #5
    58f6:	f018 f8a8 	bl	1da4a <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    58fa:	4a15      	ldr	r2, [pc, #84]	; (5950 <bt_le_create_conn_legacy+0x9c>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    58fc:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    58fe:	8993      	ldrh	r3, [r2, #12]
    5900:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    5902:	89d3      	ldrh	r3, [r2, #14]
    5904:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    5906:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    590a:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    590e:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    5912:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    5916:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    591a:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    591e:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    5922:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    5926:	2301      	movs	r3, #1
    5928:	9300      	str	r3, [sp, #0]
    592a:	3298      	adds	r2, #152	; 0x98
    592c:	230b      	movs	r3, #11
    592e:	a903      	add	r1, sp, #12
    5930:	4638      	mov	r0, r7
    5932:	f7ff fecf 	bl	56d4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    5936:	4622      	mov	r2, r4
    5938:	4639      	mov	r1, r7
    593a:	f242 000d 	movw	r0, #8205	; 0x200d
    593e:	f7ff ff15 	bl	576c <bt_hci_cmd_send_sync>
    5942:	4604      	mov	r4, r0
}
    5944:	4620      	mov	r0, r4
    5946:	b007      	add	sp, #28
    5948:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    594a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    594e:	e7f9      	b.n	5944 <bt_le_create_conn_legacy+0x90>
    5950:	20000000 	.word	0x20000000

00005954 <bt_le_create_conn_cancel>:
{
    5954:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5956:	2100      	movs	r1, #0
{
    5958:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    595a:	f242 000e 	movw	r0, #8206	; 0x200e
    595e:	f7ff fecb 	bl	56f8 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    5962:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5964:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    5966:	230b      	movs	r3, #11
    5968:	a903      	add	r1, sp, #12
    596a:	4a06      	ldr	r2, [pc, #24]	; (5984 <bt_le_create_conn_cancel+0x30>)
    596c:	9500      	str	r5, [sp, #0]
    596e:	f7ff feb1 	bl	56d4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    5972:	462a      	mov	r2, r5
    5974:	4621      	mov	r1, r4
    5976:	f242 000e 	movw	r0, #8206	; 0x200e
    597a:	f7ff fef7 	bl	576c <bt_hci_cmd_send_sync>
}
    597e:	b007      	add	sp, #28
    5980:	bd30      	pop	{r4, r5, pc}
    5982:	bf00      	nop
    5984:	20000098 	.word	0x20000098

00005988 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    5988:	4b02      	ldr	r3, [pc, #8]	; (5994 <bt_send+0xc>)
    598a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    598e:	691b      	ldr	r3, [r3, #16]
    5990:	4718      	bx	r3
    5992:	bf00      	nop
    5994:	20000000 	.word	0x20000000

00005998 <bt_hci_cmd_send>:
{
    5998:	b538      	push	{r3, r4, r5, lr}
    599a:	4605      	mov	r5, r0
	if (!buf) {
    599c:	460c      	mov	r4, r1
    599e:	b919      	cbnz	r1, 59a8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    59a0:	f7ff feaa 	bl	56f8 <bt_hci_cmd_create>
		if (!buf) {
    59a4:	4604      	mov	r4, r0
    59a6:	b1f0      	cbz	r0, 59e6 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    59a8:	f640 4335 	movw	r3, #3125	; 0xc35
    59ac:	429d      	cmp	r5, r3
    59ae:	d114      	bne.n	59da <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    59b0:	4620      	mov	r0, r4
    59b2:	f7ff ffe9 	bl	5988 <bt_send>
		if (err) {
    59b6:	4605      	mov	r5, r0
    59b8:	b168      	cbz	r0, 59d6 <bt_hci_cmd_send+0x3e>
    59ba:	4b0c      	ldr	r3, [pc, #48]	; (59ec <bt_hci_cmd_send+0x54>)
    59bc:	4a0c      	ldr	r2, [pc, #48]	; (59f0 <bt_hci_cmd_send+0x58>)
    59be:	1ad2      	subs	r2, r2, r3
    59c0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    59c2:	0192      	lsls	r2, r2, #6
    59c4:	4601      	mov	r1, r0
    59c6:	f042 0201 	orr.w	r2, r2, #1
    59ca:	480a      	ldr	r0, [pc, #40]	; (59f4 <bt_hci_cmd_send+0x5c>)
    59cc:	f017 f8b2 	bl	1cb34 <log_1>
			net_buf_unref(buf);
    59d0:	4620      	mov	r0, r4
    59d2:	f014 f90f 	bl	19bf4 <net_buf_unref>
}
    59d6:	4628      	mov	r0, r5
    59d8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    59da:	4807      	ldr	r0, [pc, #28]	; (59f8 <bt_hci_cmd_send+0x60>)
    59dc:	4621      	mov	r1, r4
    59de:	f019 fa6f 	bl	1eec0 <net_buf_put>
	return 0;
    59e2:	2500      	movs	r5, #0
    59e4:	e7f7      	b.n	59d6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    59e6:	f06f 0568 	mvn.w	r5, #104	; 0x68
    59ea:	e7f4      	b.n	59d6 <bt_hci_cmd_send+0x3e>
    59ec:	0001ff94 	.word	0x0001ff94
    59f0:	0002008c 	.word	0x0002008c
    59f4:	0002227b 	.word	0x0002227b
    59f8:	20000104 	.word	0x20000104

000059fc <conn_auto_initiate>:
{
    59fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    59fe:	7a83      	ldrb	r3, [r0, #10]
    5a00:	2b07      	cmp	r3, #7
{
    5a02:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5a04:	d16e      	bne.n	5ae4 <conn_auto_initiate+0xe8>
    5a06:	f3bf 8f5b 	dmb	ish
    5a0a:	6843      	ldr	r3, [r0, #4]
    5a0c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5a10:	049b      	lsls	r3, r3, #18
    5a12:	f100 0604 	add.w	r6, r0, #4
    5a16:	d41b      	bmi.n	5a50 <conn_auto_initiate+0x54>
    5a18:	78c3      	ldrb	r3, [r0, #3]
    5a1a:	b123      	cbz	r3, 5a26 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5a1c:	4b32      	ldr	r3, [pc, #200]	; (5ae8 <conn_auto_initiate+0xec>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    5a1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    5a22:	071d      	lsls	r5, r3, #28
    5a24:	d514      	bpl.n	5a50 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5a26:	2102      	movs	r1, #2
    5a28:	f242 0016 	movw	r0, #8214	; 0x2016
    5a2c:	f7ff fe64 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    5a30:	4605      	mov	r5, r0
    5a32:	b168      	cbz	r0, 5a50 <conn_auto_initiate+0x54>
    5a34:	2102      	movs	r1, #2
    5a36:	3008      	adds	r0, #8
    5a38:	f019 fa81 	bl	1ef3e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5a3c:	8823      	ldrh	r3, [r4, #0]
    5a3e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5a40:	4629      	mov	r1, r5
    5a42:	f242 0016 	movw	r0, #8214	; 0x2016
}
    5a46:	b004      	add	sp, #16
    5a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5a4c:	f7ff bfa4 	b.w	5998 <bt_hci_cmd_send>
    5a50:	f3bf 8f5b 	dmb	ish
    5a54:	6863      	ldr	r3, [r4, #4]
    5a56:	4d24      	ldr	r5, [pc, #144]	; (5ae8 <conn_auto_initiate+0xec>)
    5a58:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5a5c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5a60:	f3c3 3100 	ubfx	r1, r3, #12, #1
    5a64:	d11c      	bne.n	5aa0 <conn_auto_initiate+0xa4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    5a66:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    5a6a:	07d8      	lsls	r0, r3, #31
    5a6c:	d518      	bpl.n	5aa0 <conn_auto_initiate+0xa4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    5a6e:	2302      	movs	r3, #2
    5a70:	9100      	str	r1, [sp, #0]
    5a72:	461a      	mov	r2, r3
    5a74:	4620      	mov	r0, r4
    5a76:	f018 f864 	bl	1db42 <bt_le_set_phy>
		if (!err) {
    5a7a:	4601      	mov	r1, r0
    5a7c:	b930      	cbnz	r0, 5a8c <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a7e:	2180      	movs	r1, #128	; 0x80
    5a80:	4630      	mov	r0, r6
}
    5a82:	b004      	add	sp, #16
    5a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a88:	f017 bff1 	b.w	1da6e <atomic_or>
    5a8c:	4a17      	ldr	r2, [pc, #92]	; (5aec <conn_auto_initiate+0xf0>)
    5a8e:	4b18      	ldr	r3, [pc, #96]	; (5af0 <conn_auto_initiate+0xf4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    5a90:	4818      	ldr	r0, [pc, #96]	; (5af4 <conn_auto_initiate+0xf8>)
    5a92:	1ad2      	subs	r2, r2, r3
    5a94:	08d2      	lsrs	r2, r2, #3
    5a96:	0192      	lsls	r2, r2, #6
    5a98:	f042 0201 	orr.w	r2, r2, #1
    5a9c:	f017 f84a 	bl	1cb34 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    5aa0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5aa4:	069a      	lsls	r2, r3, #26
    5aa6:	d51d      	bpl.n	5ae4 <conn_auto_initiate+0xe8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    5aa8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5aac:	689b      	ldr	r3, [r3, #8]
    5aae:	079b      	lsls	r3, r3, #30
    5ab0:	d518      	bpl.n	5ae4 <conn_auto_initiate+0xe8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5ab2:	f10d 010e 	add.w	r1, sp, #14
    5ab6:	a803      	add	r0, sp, #12
    5ab8:	f7ff fed2 	bl	5860 <hci_le_read_max_data_len>
			if (!err) {
    5abc:	b990      	cbnz	r0, 5ae4 <conn_auto_initiate+0xe8>
				err = bt_le_set_data_len(conn,
    5abe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    5ac2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ac6:	4620      	mov	r0, r4
    5ac8:	f018 f81e 	bl	1db08 <bt_le_set_data_len>
				if (err) {
    5acc:	4601      	mov	r1, r0
    5ace:	b148      	cbz	r0, 5ae4 <conn_auto_initiate+0xe8>
    5ad0:	4a06      	ldr	r2, [pc, #24]	; (5aec <conn_auto_initiate+0xf0>)
    5ad2:	4b07      	ldr	r3, [pc, #28]	; (5af0 <conn_auto_initiate+0xf4>)
					BT_ERR("Failed to set data len (%d)", err);
    5ad4:	4808      	ldr	r0, [pc, #32]	; (5af8 <conn_auto_initiate+0xfc>)
    5ad6:	1ad2      	subs	r2, r2, r3
    5ad8:	08d2      	lsrs	r2, r2, #3
    5ada:	0192      	lsls	r2, r2, #6
    5adc:	f042 0201 	orr.w	r2, r2, #1
    5ae0:	f017 f828 	bl	1cb34 <log_1>
}
    5ae4:	b004      	add	sp, #16
    5ae6:	bd70      	pop	{r4, r5, r6, pc}
    5ae8:	20000000 	.word	0x20000000
    5aec:	0002008c 	.word	0x0002008c
    5af0:	0001ff94 	.word	0x0001ff94
    5af4:	0002229d 	.word	0x0002229d
    5af8:	000222b7 	.word	0x000222b7

00005afc <bt_hci_le_enh_conn_complete>:
{
    5afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5b00:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
    5b04:	4a9b      	ldr	r2, [pc, #620]	; (5d74 <bt_hci_le_enh_conn_complete+0x278>)
	if (evt->status) {
    5b06:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    5b08:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    5b0a:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    5b0e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    5b12:	b29b      	uxth	r3, r3
    5b14:	4299      	cmp	r1, r3
    5b16:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
    5b1a:	bf08      	it	eq
    5b1c:	f8a2 8000 	strheq.w	r8, [r2]
{
    5b20:	b085      	sub	sp, #20
    5b22:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5b24:	fa1f f789 	uxth.w	r7, r9
			return true;
    5b28:	bf08      	it	eq
    5b2a:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
    5b2e:	2c00      	cmp	r4, #0
    5b30:	d05e      	beq.n	5bf0 <bt_hci_le_enh_conn_complete+0xf4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5b32:	2c3c      	cmp	r4, #60	; 0x3c
    5b34:	d122      	bne.n	5b7c <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    5b36:	f001 fad7 	bl	70e8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5b3a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5b3e:	3010      	adds	r0, #16
    5b40:	f017 ff86 	bl	1da50 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5b44:	2000      	movs	r0, #0
    5b46:	f7ff fbe1 	bl	530c <find_pending_connect.part.0>
		if (!conn) {
    5b4a:	4605      	mov	r5, r0
    5b4c:	b960      	cbnz	r0, 5b68 <bt_hci_le_enh_conn_complete+0x6c>
    5b4e:	4b8a      	ldr	r3, [pc, #552]	; (5d78 <bt_hci_le_enh_conn_complete+0x27c>)
    5b50:	498a      	ldr	r1, [pc, #552]	; (5d7c <bt_hci_le_enh_conn_complete+0x280>)
			BT_ERR("No pending slave connection");
    5b52:	488b      	ldr	r0, [pc, #556]	; (5d80 <bt_hci_le_enh_conn_complete+0x284>)
    5b54:	1ac9      	subs	r1, r1, r3
    5b56:	08c9      	lsrs	r1, r1, #3
    5b58:	0189      	lsls	r1, r1, #6
    5b5a:	f041 0101 	orr.w	r1, r1, #1
}
    5b5e:	b005      	add	sp, #20
    5b60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending slave connection");
    5b64:	f016 bfd9 	b.w	1cb1a <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    5b68:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b6a:	2100      	movs	r1, #0
    5b6c:	f002 f98a 	bl	7e84 <bt_conn_set_state>
		bt_conn_unref(conn);
    5b70:	4628      	mov	r0, r5
}
    5b72:	b005      	add	sp, #20
    5b74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    5b78:	f018 ba47 	b.w	1e00a <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5b7c:	2c02      	cmp	r4, #2
    5b7e:	d129      	bne.n	5bd4 <bt_hci_le_enh_conn_complete+0xd8>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5b80:	2100      	movs	r1, #0
    5b82:	2206      	movs	r2, #6
    5b84:	4608      	mov	r0, r1
    5b86:	f002 fad1 	bl	812c <bt_conn_lookup_state_le>
	if (!conn) {
    5b8a:	4605      	mov	r5, r0
    5b8c:	b978      	cbnz	r0, 5bae <bt_hci_le_enh_conn_complete+0xb2>
    5b8e:	497b      	ldr	r1, [pc, #492]	; (5d7c <bt_hci_le_enh_conn_complete+0x280>)
    5b90:	4b79      	ldr	r3, [pc, #484]	; (5d78 <bt_hci_le_enh_conn_complete+0x27c>)
		BT_ERR("No pending master connection");
    5b92:	487c      	ldr	r0, [pc, #496]	; (5d84 <bt_hci_le_enh_conn_complete+0x288>)
    5b94:	1ac9      	subs	r1, r1, r3
    5b96:	08c9      	lsrs	r1, r1, #3
    5b98:	0189      	lsls	r1, r1, #6
    5b9a:	f041 0101 	orr.w	r1, r1, #1
    5b9e:	f016 ffbc 	bl	1cb1a <log_0>
			bt_le_scan_update(false);
    5ba2:	2000      	movs	r0, #0
    5ba4:	f001 fd14 	bl	75d0 <bt_le_scan_update>
}
    5ba8:	b005      	add	sp, #20
    5baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    5bae:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5bb0:	2100      	movs	r1, #0
    5bb2:	f002 f967 	bl	7e84 <bt_conn_set_state>
    5bb6:	f3bf 8f5b 	dmb	ish
    5bba:	686b      	ldr	r3, [r5, #4]
    5bbc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    5bc0:	07da      	lsls	r2, r3, #31
    5bc2:	d503      	bpl.n	5bcc <bt_hci_le_enh_conn_complete+0xd0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5bc4:	4621      	mov	r1, r4
    5bc6:	4628      	mov	r0, r5
    5bc8:	f002 f95c 	bl	7e84 <bt_conn_set_state>
	bt_conn_unref(conn);
    5bcc:	4628      	mov	r0, r5
    5bce:	f018 fa1c 	bl	1e00a <bt_conn_unref>
    5bd2:	e7e6      	b.n	5ba2 <bt_hci_le_enh_conn_complete+0xa6>
    5bd4:	4b68      	ldr	r3, [pc, #416]	; (5d78 <bt_hci_le_enh_conn_complete+0x27c>)
    5bd6:	4a69      	ldr	r2, [pc, #420]	; (5d7c <bt_hci_le_enh_conn_complete+0x280>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    5bd8:	486b      	ldr	r0, [pc, #428]	; (5d88 <bt_hci_le_enh_conn_complete+0x28c>)
    5bda:	1ad2      	subs	r2, r2, r3
    5bdc:	08d2      	lsrs	r2, r2, #3
    5bde:	0192      	lsls	r2, r2, #6
    5be0:	f042 0202 	orr.w	r2, r2, #2
    5be4:	4621      	mov	r1, r4
}
    5be6:	b005      	add	sp, #20
    5be8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    5bec:	f016 bfa2 	b.w	1cb34 <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5bf0:	7903      	ldrb	r3, [r0, #4]
    5bf2:	3b02      	subs	r3, #2
    5bf4:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5bf6:	f100 0604 	add.w	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5bfa:	d842      	bhi.n	5c82 <bt_hci_le_enh_conn_complete+0x186>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5bfc:	4631      	mov	r1, r6
    5bfe:	a802      	add	r0, sp, #8
    5c00:	f017 ff23 	bl	1da4a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5c04:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    5c08:	2206      	movs	r2, #6
    5c0a:	3b02      	subs	r3, #2
    5c0c:	f105 0111 	add.w	r1, r5, #17
    5c10:	f10d 0001 	add.w	r0, sp, #1
    5c14:	f88d 3008 	strb.w	r3, [sp, #8]
    5c18:	f017 fdf6 	bl	1d808 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    5c1c:	2301      	movs	r3, #1
    5c1e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    5c22:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    5c24:	2800      	cmp	r0, #0
    5c26:	d13f      	bne.n	5ca8 <bt_hci_le_enh_conn_complete+0x1ac>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5c28:	2206      	movs	r2, #6
    5c2a:	a902      	add	r1, sp, #8
    5c2c:	f002 fa7e 	bl	812c <bt_conn_lookup_state_le>
    5c30:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5c32:	78eb      	ldrb	r3, [r5, #3]
    5c34:	2b01      	cmp	r3, #1
    5c36:	d106      	bne.n	5c46 <bt_hci_le_enh_conn_complete+0x14a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    5c38:	f001 fa56 	bl	70e8 <bt_le_adv_lookup_legacy>
    5c3c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5c40:	3010      	adds	r0, #16
    5c42:	f017 ff05 	bl	1da50 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5c46:	78eb      	ldrb	r3, [r5, #3]
    5c48:	b923      	cbnz	r3, 5c54 <bt_hci_le_enh_conn_complete+0x158>
    5c4a:	4850      	ldr	r0, [pc, #320]	; (5d8c <bt_hci_le_enh_conn_complete+0x290>)
    5c4c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    5c50:	f017 fefe 	bl	1da50 <atomic_and>
	if (!conn) {
    5c54:	bb84      	cbnz	r4, 5cb8 <bt_hci_le_enh_conn_complete+0x1bc>
    5c56:	4a48      	ldr	r2, [pc, #288]	; (5d78 <bt_hci_le_enh_conn_complete+0x27c>)
    5c58:	4c48      	ldr	r4, [pc, #288]	; (5d7c <bt_hci_le_enh_conn_complete+0x280>)
		BT_ERR("No pending conn for peer %s",
    5c5a:	4630      	mov	r0, r6
    5c5c:	1aa4      	subs	r4, r4, r2
    5c5e:	f7ff f989 	bl	4f74 <bt_addr_le_str_real>
    5c62:	f7fd fc5f 	bl	3524 <z_log_strdup>
    5c66:	08e4      	lsrs	r4, r4, #3
    5c68:	01a4      	lsls	r4, r4, #6
    5c6a:	f044 0401 	orr.w	r4, r4, #1
    5c6e:	4601      	mov	r1, r0
    5c70:	4622      	mov	r2, r4
    5c72:	4847      	ldr	r0, [pc, #284]	; (5d90 <bt_hci_le_enh_conn_complete+0x294>)
    5c74:	f016 ff5e 	bl	1cb34 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    5c78:	211f      	movs	r1, #31
    5c7a:	4638      	mov	r0, r7
    5c7c:	f017 ff08 	bl	1da90 <bt_hci_disconnect>
		return;
    5c80:	e792      	b.n	5ba8 <bt_hci_le_enh_conn_complete+0xac>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    5c82:	78c3      	ldrb	r3, [r0, #3]
    5c84:	2b01      	cmp	r3, #1
    5c86:	bf04      	itt	eq
    5c88:	4b42      	ldreq	r3, [pc, #264]	; (5d94 <bt_hci_le_enh_conn_complete+0x298>)
    5c8a:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    5c8e:	4631      	mov	r1, r6
    5c90:	4620      	mov	r0, r4
    5c92:	f018 f800 	bl	1dc96 <bt_lookup_id_addr>
    5c96:	4601      	mov	r1, r0
    5c98:	a802      	add	r0, sp, #8
    5c9a:	f017 fed6 	bl	1da4a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    5c9e:	4631      	mov	r1, r6
    5ca0:	4668      	mov	r0, sp
    5ca2:	f017 fed2 	bl	1da4a <bt_addr_le_copy>
    5ca6:	e7bc      	b.n	5c22 <bt_hci_le_enh_conn_complete+0x126>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5ca8:	2801      	cmp	r0, #1
    5caa:	d103      	bne.n	5cb4 <bt_hci_le_enh_conn_complete+0x1b8>
    5cac:	a802      	add	r0, sp, #8
    5cae:	f7ff fb2d 	bl	530c <find_pending_connect.part.0>
    5cb2:	e7bd      	b.n	5c30 <bt_hci_le_enh_conn_complete+0x134>
	return NULL;
    5cb4:	2400      	movs	r4, #0
    5cb6:	e7bc      	b.n	5c32 <bt_hci_le_enh_conn_complete+0x136>
	conn->handle = handle;
    5cb8:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5cba:	a902      	add	r1, sp, #8
	conn->handle = handle;
    5cbc:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5cc0:	f017 fec3 	bl	1da4a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5cc4:	7e2a      	ldrb	r2, [r5, #24]
    5cc6:	7deb      	ldrb	r3, [r5, #23]
    5cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5ccc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5cd0:	7eaa      	ldrb	r2, [r5, #26]
    5cd2:	7e6b      	ldrb	r3, [r5, #25]
    5cd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5cd8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5cdc:	7f2a      	ldrb	r2, [r5, #28]
    5cde:	7eeb      	ldrb	r3, [r5, #27]
    5ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5ce4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    5ce8:	78eb      	ldrb	r3, [r5, #3]
    5cea:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    5cec:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5cee:	2b01      	cmp	r3, #1
	conn->err = 0U;
    5cf0:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5cf2:	d115      	bne.n	5d20 <bt_hci_le_enh_conn_complete+0x224>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    5cf4:	4669      	mov	r1, sp
    5cf6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    5cfa:	f017 fea6 	bl	1da4a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    5cfe:	f001 f9f3 	bl	70e8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    5d02:	7a21      	ldrb	r1, [r4, #8]
    5d04:	4d23      	ldr	r5, [pc, #140]	; (5d94 <bt_hci_le_enh_conn_complete+0x298>)
    5d06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    5d0a:	4429      	add	r1, r5
    5d0c:	f104 0096 	add.w	r0, r4, #150	; 0x96
    5d10:	f017 fe9b 	bl	1da4a <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5d14:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
    5d18:	065b      	lsls	r3, r3, #25
    5d1a:	d501      	bpl.n	5d20 <bt_hci_le_enh_conn_complete+0x224>
			bt_le_adv_resume();
    5d1c:	f001 fb84 	bl	7428 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5d20:	78e3      	ldrb	r3, [r4, #3]
    5d22:	b96b      	cbnz	r3, 5d40 <bt_hci_le_enh_conn_complete+0x244>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    5d24:	4669      	mov	r1, sp
    5d26:	f104 0096 	add.w	r0, r4, #150	; 0x96
    5d2a:	f017 fe8e 	bl	1da4a <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    5d2e:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    5d30:	4b18      	ldr	r3, [pc, #96]	; (5d94 <bt_hci_le_enh_conn_complete+0x298>)
					&bt_dev.id_addr[conn->id]);
    5d32:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    5d36:	4419      	add	r1, r3
    5d38:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    5d3c:	f017 fe85 	bl	1da4a <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5d40:	2107      	movs	r1, #7
    5d42:	4620      	mov	r0, r4
    5d44:	f002 f89e 	bl	7e84 <bt_conn_set_state>
	if (is_disconnected) {
    5d48:	f1b8 0f00 	cmp.w	r8, #0
    5d4c:	d003      	beq.n	5d56 <bt_hci_le_enh_conn_complete+0x25a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5d4e:	2101      	movs	r1, #1
    5d50:	4620      	mov	r0, r4
    5d52:	f002 f897 	bl	7e84 <bt_conn_set_state>
	bt_conn_connected(conn);
    5d56:	4620      	mov	r0, r4
    5d58:	f018 f913 	bl	1df82 <bt_conn_connected>
	conn_auto_initiate(conn);
    5d5c:	4620      	mov	r0, r4
    5d5e:	f7ff fe4d 	bl	59fc <conn_auto_initiate>
	bt_conn_unref(conn);
    5d62:	4620      	mov	r0, r4
    5d64:	f018 f951 	bl	1e00a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5d68:	78e3      	ldrb	r3, [r4, #3]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	f47f af1c 	bne.w	5ba8 <bt_hci_le_enh_conn_complete+0xac>
    5d70:	e717      	b.n	5ba2 <bt_hci_le_enh_conn_complete+0xa6>
    5d72:	bf00      	nop
    5d74:	20002814 	.word	0x20002814
    5d78:	0001ff94 	.word	0x0001ff94
    5d7c:	0002008c 	.word	0x0002008c
    5d80:	000222d3 	.word	0x000222d3
    5d84:	000222ef 	.word	0x000222ef
    5d88:	0002230c 	.word	0x0002230c
    5d8c:	20000098 	.word	0x20000098
    5d90:	00022325 	.word	0x00022325
    5d94:	20000000 	.word	0x20000000

00005d98 <le_phy_update_complete>:
{
    5d98:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5d9a:	6883      	ldr	r3, [r0, #8]
    5d9c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5da0:	4628      	mov	r0, r5
    5da2:	f002 f867 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    5da6:	4604      	mov	r4, r0
    5da8:	b960      	cbnz	r0, 5dc4 <le_phy_update_complete+0x2c>
    5daa:	4b11      	ldr	r3, [pc, #68]	; (5df0 <le_phy_update_complete+0x58>)
    5dac:	4a11      	ldr	r2, [pc, #68]	; (5df4 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5dae:	4812      	ldr	r0, [pc, #72]	; (5df8 <le_phy_update_complete+0x60>)
    5db0:	1ad2      	subs	r2, r2, r3
    5db2:	08d2      	lsrs	r2, r2, #3
    5db4:	0192      	lsls	r2, r2, #6
    5db6:	4629      	mov	r1, r5
    5db8:	f042 0201 	orr.w	r2, r2, #1
}
    5dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5dc0:	f016 beb8 	b.w	1cb34 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5dc4:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5dc6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5dca:	4628      	mov	r0, r5
    5dcc:	f017 fe40 	bl	1da50 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5dd0:	0603      	lsls	r3, r0, #24
    5dd2:	d507      	bpl.n	5de4 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5dd8:	4628      	mov	r0, r5
    5dda:	f017 fe48 	bl	1da6e <atomic_or>
		conn_auto_initiate(conn);
    5dde:	4620      	mov	r0, r4
    5de0:	f7ff fe0c 	bl	59fc <conn_auto_initiate>
	bt_conn_unref(conn);
    5de4:	4620      	mov	r0, r4
}
    5de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5dea:	f018 b90e 	b.w	1e00a <bt_conn_unref>
    5dee:	bf00      	nop
    5df0:	0001ff94 	.word	0x0001ff94
    5df4:	0002008c 	.word	0x0002008c
    5df8:	00022056 	.word	0x00022056

00005dfc <le_remote_feat_complete>:
{
    5dfc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5dfe:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5e00:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5e04:	4630      	mov	r0, r6
    5e06:	f002 f835 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    5e0a:	4604      	mov	r4, r0
    5e0c:	b960      	cbnz	r0, 5e28 <le_remote_feat_complete+0x2c>
    5e0e:	4a10      	ldr	r2, [pc, #64]	; (5e50 <le_remote_feat_complete+0x54>)
    5e10:	4b10      	ldr	r3, [pc, #64]	; (5e54 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5e12:	4811      	ldr	r0, [pc, #68]	; (5e58 <le_remote_feat_complete+0x5c>)
    5e14:	1ad2      	subs	r2, r2, r3
    5e16:	08d2      	lsrs	r2, r2, #3
    5e18:	0192      	lsls	r2, r2, #6
    5e1a:	4631      	mov	r1, r6
    5e1c:	f042 0201 	orr.w	r2, r2, #1
}
    5e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5e24:	f016 be86 	b.w	1cb34 <log_1>
	if (!evt->status) {
    5e28:	782b      	ldrb	r3, [r5, #0]
    5e2a:	b923      	cbnz	r3, 5e36 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    5e2c:	2208      	movs	r2, #8
    5e2e:	1ce9      	adds	r1, r5, #3
    5e30:	30ac      	adds	r0, #172	; 0xac
    5e32:	f017 fce9 	bl	1d808 <memcpy>
    5e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5e3a:	1d20      	adds	r0, r4, #4
    5e3c:	f017 fe17 	bl	1da6e <atomic_or>
	conn_auto_initiate(conn);
    5e40:	4620      	mov	r0, r4
    5e42:	f7ff fddb 	bl	59fc <conn_auto_initiate>
	bt_conn_unref(conn);
    5e46:	4620      	mov	r0, r4
}
    5e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5e4c:	f018 b8dd 	b.w	1e00a <bt_conn_unref>
    5e50:	0002008c 	.word	0x0002008c
    5e54:	0001ff94 	.word	0x0001ff94
    5e58:	00022056 	.word	0x00022056

00005e5c <le_conn_param_neg_reply>:
{
    5e5c:	b570      	push	{r4, r5, r6, lr}
    5e5e:	4606      	mov	r6, r0
    5e60:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5e62:	f242 0021 	movw	r0, #8225	; 0x2021
    5e66:	2103      	movs	r1, #3
    5e68:	f7ff fc46 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    5e6c:	4604      	mov	r4, r0
    5e6e:	b958      	cbnz	r0, 5e88 <le_conn_param_neg_reply+0x2c>
    5e70:	490c      	ldr	r1, [pc, #48]	; (5ea4 <le_conn_param_neg_reply+0x48>)
    5e72:	4b0d      	ldr	r3, [pc, #52]	; (5ea8 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    5e74:	480d      	ldr	r0, [pc, #52]	; (5eac <le_conn_param_neg_reply+0x50>)
    5e76:	1ac9      	subs	r1, r1, r3
    5e78:	08c9      	lsrs	r1, r1, #3
    5e7a:	0189      	lsls	r1, r1, #6
}
    5e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    5e80:	f041 0101 	orr.w	r1, r1, #1
    5e84:	f016 be49 	b.w	1cb1a <log_0>
    5e88:	2103      	movs	r1, #3
    5e8a:	3008      	adds	r0, #8
    5e8c:	f019 f857 	bl	1ef3e <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    5e90:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    5e92:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5e94:	4621      	mov	r1, r4
    5e96:	f242 0021 	movw	r0, #8225	; 0x2021
}
    5e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5e9e:	f7ff bd7b 	b.w	5998 <bt_hci_cmd_send>
    5ea2:	bf00      	nop
    5ea4:	0002008c 	.word	0x0002008c
    5ea8:	0001ff94 	.word	0x0001ff94
    5eac:	00022341 	.word	0x00022341

00005eb0 <le_conn_param_req>:
{
    5eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    5eb2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5eb4:	78d9      	ldrb	r1, [r3, #3]
    5eb6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    5eb8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5eba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5ebe:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    5ec2:	7959      	ldrb	r1, [r3, #5]
    5ec4:	791a      	ldrb	r2, [r3, #4]
    5ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5eca:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    5ece:	799a      	ldrb	r2, [r3, #6]
    5ed0:	79d9      	ldrb	r1, [r3, #7]
    5ed2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5ed6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5eda:	7a1a      	ldrb	r2, [r3, #8]
    5edc:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    5ede:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5ee0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    5ee4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5ee6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5eea:	f001 ffc3 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    5eee:	4606      	mov	r6, r0
    5ef0:	b980      	cbnz	r0, 5f14 <le_conn_param_req+0x64>
    5ef2:	4b20      	ldr	r3, [pc, #128]	; (5f74 <le_conn_param_req+0xc4>)
    5ef4:	4a20      	ldr	r2, [pc, #128]	; (5f78 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5ef6:	4821      	ldr	r0, [pc, #132]	; (5f7c <le_conn_param_req+0xcc>)
    5ef8:	1ad2      	subs	r2, r2, r3
    5efa:	08d2      	lsrs	r2, r2, #3
    5efc:	0192      	lsls	r2, r2, #6
    5efe:	4621      	mov	r1, r4
    5f00:	f042 0201 	orr.w	r2, r2, #1
    5f04:	f016 fe16 	bl	1cb34 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    5f08:	2102      	movs	r1, #2
    5f0a:	4620      	mov	r0, r4
    5f0c:	f7ff ffa6 	bl	5e5c <le_conn_param_neg_reply>
}
    5f10:	b003      	add	sp, #12
    5f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    5f14:	4669      	mov	r1, sp
    5f16:	f001 fe11 	bl	7b3c <le_param_req>
    5f1a:	b938      	cbnz	r0, 5f2c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    5f1c:	211e      	movs	r1, #30
    5f1e:	4620      	mov	r0, r4
    5f20:	f7ff ff9c 	bl	5e5c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    5f24:	4630      	mov	r0, r6
    5f26:	f018 f870 	bl	1e00a <bt_conn_unref>
    5f2a:	e7f1      	b.n	5f10 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5f2c:	210e      	movs	r1, #14
    5f2e:	f242 0020 	movw	r0, #8224	; 0x2020
    5f32:	f7ff fbe1 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    5f36:	4605      	mov	r5, r0
    5f38:	2800      	cmp	r0, #0
    5f3a:	d0f3      	beq.n	5f24 <le_conn_param_req+0x74>
    5f3c:	210e      	movs	r1, #14
    5f3e:	3008      	adds	r0, #8
    5f40:	f018 fffd 	bl	1ef3e <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    5f44:	220e      	movs	r2, #14
    5f46:	4604      	mov	r4, r0
    5f48:	2100      	movs	r1, #0
    5f4a:	f017 fc88 	bl	1d85e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5f4e:	f8bd 3000 	ldrh.w	r3, [sp]
    5f52:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5f54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5f58:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5f5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5f5e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5f60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    5f64:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5f66:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5f68:	4629      	mov	r1, r5
    5f6a:	f242 0020 	movw	r0, #8224	; 0x2020
    5f6e:	f7ff fd13 	bl	5998 <bt_hci_cmd_send>
    5f72:	e7d7      	b.n	5f24 <le_conn_param_req+0x74>
    5f74:	0001ff94 	.word	0x0001ff94
    5f78:	0002008c 	.word	0x0002008c
    5f7c:	00022056 	.word	0x00022056

00005f80 <hci_tx_thread>:
{
    5f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f84:	4d51      	ldr	r5, [pc, #324]	; (60cc <hci_tx_thread+0x14c>)
    5f86:	4b52      	ldr	r3, [pc, #328]	; (60d0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5f88:	f8df 9148 	ldr.w	r9, [pc, #328]	; 60d4 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    5f8c:	f8df a148 	ldr.w	sl, [pc, #328]	; 60d8 <hci_tx_thread+0x158>
    5f90:	1aed      	subs	r5, r5, r3
    5f92:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    5f94:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5f98:	4850      	ldr	r0, [pc, #320]	; (60dc <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5f9a:	f36f 3352 	bfc	r3, #13, #6
    5f9e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5fa2:	f001 ff11 	bl	7dc8 <bt_conn_prepare_events>
    5fa6:	1c47      	adds	r7, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5fa8:	484a      	ldr	r0, [pc, #296]	; (60d4 <hci_tx_thread+0x154>)
    5faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fb2:	4639      	mov	r1, r7
    5fb4:	f016 f856 	bl	1c064 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5fb8:	b160      	cbz	r0, 5fd4 <hci_tx_thread+0x54>
    5fba:	4949      	ldr	r1, [pc, #292]	; (60e0 <hci_tx_thread+0x160>)
    5fbc:	4849      	ldr	r0, [pc, #292]	; (60e4 <hci_tx_thread+0x164>)
    5fbe:	f640 136f 	movw	r3, #2415	; 0x96f
    5fc2:	4652      	mov	r2, sl
    5fc4:	f016 f96a 	bl	1c29c <printk>
    5fc8:	4040      	eors	r0, r0
    5fca:	f380 8811 	msr	BASEPRI, r0
    5fce:	f04f 0003 	mov.w	r0, #3
    5fd2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5fd4:	4e44      	ldr	r6, [pc, #272]	; (60e8 <hci_tx_thread+0x168>)
{
    5fd6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 60d4 <hci_tx_thread+0x154>
    5fda:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    5fde:	b917      	cbnz	r7, 5fe6 <hci_tx_thread+0x66>
	z_impl_k_yield();
    5fe0:	f015 fd56 	bl	1ba90 <z_impl_k_yield>
	while (1) {
    5fe4:	e7d6      	b.n	5f94 <hci_tx_thread+0x14>
		switch (ev->state) {
    5fe6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5fea:	f3c1 3145 	ubfx	r1, r1, #13, #6
    5fee:	2901      	cmp	r1, #1
    5ff0:	d959      	bls.n	60a6 <hci_tx_thread+0x126>
    5ff2:	2904      	cmp	r1, #4
    5ff4:	d163      	bne.n	60be <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5ff6:	f898 300c 	ldrb.w	r3, [r8, #12]
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d157      	bne.n	60ae <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5ffe:	483b      	ldr	r0, [pc, #236]	; (60ec <hci_tx_thread+0x16c>)
    6000:	2200      	movs	r2, #0
    6002:	2300      	movs	r3, #0
    6004:	f018 ff3e 	bl	1ee84 <net_buf_get>
	BT_ASSERT(buf);
    6008:	4604      	mov	r4, r0
    600a:	b960      	cbnz	r0, 6026 <hci_tx_thread+0xa6>
    600c:	4938      	ldr	r1, [pc, #224]	; (60f0 <hci_tx_thread+0x170>)
    600e:	4835      	ldr	r0, [pc, #212]	; (60e4 <hci_tx_thread+0x164>)
    6010:	f640 130c 	movw	r3, #2316	; 0x90c
    6014:	4652      	mov	r2, sl
    6016:	f016 f941 	bl	1c29c <printk>
    601a:	4040      	eors	r0, r0
    601c:	f380 8811 	msr	BASEPRI, r0
    6020:	f04f 0003 	mov.w	r0, #3
    6024:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    602a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    602e:	4658      	mov	r0, fp
    6030:	f015 f8f8 	bl	1b224 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6034:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    6038:	b163      	cbz	r3, 6054 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    603a:	01a9      	lsls	r1, r5, #6
    603c:	482d      	ldr	r0, [pc, #180]	; (60f4 <hci_tx_thread+0x174>)
    603e:	f041 0101 	orr.w	r1, r1, #1
    6042:	f016 fd6a 	bl	1cb1a <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6046:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    604a:	f013 fdd3 	bl	19bf4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    604e:	2300      	movs	r3, #0
    6050:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    6054:	4620      	mov	r0, r4
    6056:	f018 ff40 	bl	1eeda <net_buf_ref>
    605a:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    605e:	4620      	mov	r0, r4
    6060:	f7ff fc92 	bl	5988 <bt_send>
	if (err) {
    6064:	4601      	mov	r1, r0
    6066:	b1f0      	cbz	r0, 60a6 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6068:	01aa      	lsls	r2, r5, #6
    606a:	4823      	ldr	r0, [pc, #140]	; (60f8 <hci_tx_thread+0x178>)
    606c:	f042 0201 	orr.w	r2, r2, #1
    6070:	f016 fd60 	bl	1cb34 <log_1>
	z_impl_k_sem_give(sem);
    6074:	4821      	ldr	r0, [pc, #132]	; (60fc <hci_tx_thread+0x17c>)
    6076:	f015 f8af 	bl	1b1d8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    607a:	4620      	mov	r0, r4
    607c:	f013 fd04 	bl	19a88 <net_buf_id>
    6080:	4b1f      	ldr	r3, [pc, #124]	; (6100 <hci_tx_thread+0x180>)
    6082:	220c      	movs	r2, #12
    6084:	fb02 3000 	mla	r0, r2, r0, r3
    6088:	211f      	movs	r1, #31
    608a:	8840      	ldrh	r0, [r0, #2]
    608c:	4622      	mov	r2, r4
    608e:	f7ff f9af 	bl	53f0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6092:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    6096:	f013 fdad 	bl	19bf4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    609a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    609c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    609e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    60a2:	f013 fda7 	bl	19bf4 <net_buf_unref>
	for (; count; ev++, count--) {
    60a6:	f108 0814 	add.w	r8, r8, #20
    60aa:	3f01      	subs	r7, #1
    60ac:	e797      	b.n	5fde <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    60ae:	2b01      	cmp	r3, #1
    60b0:	d1f9      	bne.n	60a6 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    60b2:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    60b6:	3838      	subs	r0, #56	; 0x38
    60b8:	f002 f94c 	bl	8354 <bt_conn_process_tx>
    60bc:	e7f3      	b.n	60a6 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    60be:	01aa      	lsls	r2, r5, #6
    60c0:	4810      	ldr	r0, [pc, #64]	; (6104 <hci_tx_thread+0x184>)
    60c2:	f042 0202 	orr.w	r2, r2, #2
    60c6:	f016 fd35 	bl	1cb34 <log_1>
    60ca:	e7ec      	b.n	60a6 <hci_tx_thread+0x126>
    60cc:	0002008c 	.word	0x0002008c
    60d0:	0001ff94 	.word	0x0001ff94
    60d4:	2000016c 	.word	0x2000016c
    60d8:	000221c5 	.word	0x000221c5
    60dc:	20000180 	.word	0x20000180
    60e0:	000221f9 	.word	0x000221f9
    60e4:	00022202 	.word	0x00022202
    60e8:	20000000 	.word	0x20000000
    60ec:	20000104 	.word	0x20000104
    60f0:	00021f37 	.word	0x00021f37
    60f4:	0002235b 	.word	0x0002235b
    60f8:	0002227b 	.word	0x0002227b
    60fc:	200000e8 	.word	0x200000e8
    6100:	200012b0 	.word	0x200012b0
    6104:	00022376 	.word	0x00022376

00006108 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    6108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    610c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    610e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6112:	4630      	mov	r0, r6
    6114:	f018 ff52 	bl	1efbc <net_buf_simple_headroom>
	state->len = buf->len;
    6118:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    611c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    6120:	4605      	mov	r5, r0
    6122:	d80c      	bhi.n	613e <hci_event_prio+0x36>
    6124:	4a1c      	ldr	r2, [pc, #112]	; (6198 <hci_event_prio+0x90>)
    6126:	491d      	ldr	r1, [pc, #116]	; (619c <hci_event_prio+0x94>)
    6128:	481d      	ldr	r0, [pc, #116]	; (61a0 <hci_event_prio+0x98>)
    612a:	f640 43dc 	movw	r3, #3292	; 0xcdc
    612e:	f016 f8b5 	bl	1c29c <printk>
    6132:	4040      	eors	r0, r0
    6134:	f380 8811 	msr	BASEPRI, r0
    6138:	f04f 0003 	mov.w	r0, #3
    613c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    613e:	4630      	mov	r0, r6
    6140:	2102      	movs	r1, #2
    6142:	f018 ff23 	bl	1ef8c <net_buf_simple_pull_mem>
    6146:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6148:	7800      	ldrb	r0, [r0, #0]
    614a:	f017 fc6c 	bl	1da26 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    614e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6150:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6152:	d40c      	bmi.n	616e <hci_event_prio+0x66>
    6154:	4a10      	ldr	r2, [pc, #64]	; (6198 <hci_event_prio+0x90>)
    6156:	4913      	ldr	r1, [pc, #76]	; (61a4 <hci_event_prio+0x9c>)
    6158:	4811      	ldr	r0, [pc, #68]	; (61a0 <hci_event_prio+0x98>)
    615a:	f44f 634e 	mov.w	r3, #3296	; 0xce0
    615e:	f016 f89d 	bl	1c29c <printk>
    6162:	4040      	eors	r0, r0
    6164:	f380 8811 	msr	BASEPRI, r0
    6168:	f04f 0003 	mov.w	r0, #3
    616c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    616e:	2305      	movs	r3, #5
    6170:	4a0d      	ldr	r2, [pc, #52]	; (61a8 <hci_event_prio+0xa0>)
    6172:	7838      	ldrb	r0, [r7, #0]
    6174:	4621      	mov	r1, r4
    6176:	f7ff f8e9 	bl	534c <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    617a:	07b3      	lsls	r3, r6, #30
    617c:	d507      	bpl.n	618e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    617e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6180:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6184:	fa10 f585 	uxtah	r5, r0, r5
    6188:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    618e:	4620      	mov	r0, r4
}
    6190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6194:	f013 bd2e 	b.w	19bf4 <net_buf_unref>
    6198:	000221c5 	.word	0x000221c5
    619c:	00022397 	.word	0x00022397
    61a0:	00022202 	.word	0x00022202
    61a4:	000223b0 	.word	0x000223b0
    61a8:	00020368 	.word	0x00020368

000061ac <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    61ac:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    61ae:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    61b0:	2901      	cmp	r1, #1
{
    61b2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    61b4:	d04b      	beq.n	624e <bt_recv+0xa2>
    61b6:	2903      	cmp	r1, #3
    61b8:	d178      	bne.n	62ac <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    61ba:	8983      	ldrh	r3, [r0, #12]
    61bc:	2b03      	cmp	r3, #3
    61be:	d80c      	bhi.n	61da <bt_recv+0x2e>
    61c0:	4a42      	ldr	r2, [pc, #264]	; (62cc <bt_recv+0x120>)
    61c2:	4943      	ldr	r1, [pc, #268]	; (62d0 <bt_recv+0x124>)
    61c4:	4843      	ldr	r0, [pc, #268]	; (62d4 <bt_recv+0x128>)
    61c6:	f240 1379 	movw	r3, #377	; 0x179
    61ca:	f016 f867 	bl	1c29c <printk>
    61ce:	4040      	eors	r0, r0
    61d0:	f380 8811 	msr	BASEPRI, r0
    61d4:	f04f 0003 	mov.w	r0, #3
    61d8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    61da:	2104      	movs	r1, #4
    61dc:	f104 0008 	add.w	r0, r4, #8
    61e0:	f018 fed4 	bl	1ef8c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    61e4:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    61e6:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    61e8:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    61ea:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    61ec:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    61f0:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    61f2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    61f4:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    61f6:	d00d      	beq.n	6214 <bt_recv+0x68>
    61f8:	4837      	ldr	r0, [pc, #220]	; (62d8 <bt_recv+0x12c>)
    61fa:	4b38      	ldr	r3, [pc, #224]	; (62dc <bt_recv+0x130>)
    61fc:	1a1b      	subs	r3, r3, r0
    61fe:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    6200:	019b      	lsls	r3, r3, #6
    6202:	4837      	ldr	r0, [pc, #220]	; (62e0 <bt_recv+0x134>)
    6204:	f043 0301 	orr.w	r3, r3, #1
    6208:	f016 fca8 	bl	1cb5c <log_2>
	net_buf_unref(buf);
    620c:	4620      	mov	r0, r4
    620e:	f013 fcf1 	bl	19bf4 <net_buf_unref>
    6212:	e01a      	b.n	624a <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6214:	f001 fe2e 	bl	7e74 <bt_conn_lookup_handle>
	if (!conn) {
    6218:	4605      	mov	r5, r0
    621a:	b958      	cbnz	r0, 6234 <bt_recv+0x88>
    621c:	4b2e      	ldr	r3, [pc, #184]	; (62d8 <bt_recv+0x12c>)
    621e:	4a2f      	ldr	r2, [pc, #188]	; (62dc <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    6220:	8ae1      	ldrh	r1, [r4, #22]
    6222:	4830      	ldr	r0, [pc, #192]	; (62e4 <bt_recv+0x138>)
    6224:	1ad2      	subs	r2, r2, r3
    6226:	08d2      	lsrs	r2, r2, #3
    6228:	0192      	lsls	r2, r2, #6
    622a:	f042 0201 	orr.w	r2, r2, #1
    622e:	f016 fc81 	bl	1cb34 <log_1>
		net_buf_unref(buf);
    6232:	e7eb      	b.n	620c <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    6234:	f002 f8f4 	bl	8420 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6238:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    623a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    623c:	4621      	mov	r1, r4
    623e:	4628      	mov	r0, r5
    6240:	f001 fcd8 	bl	7bf4 <bt_conn_recv>
	bt_conn_unref(conn);
    6244:	4628      	mov	r0, r5
    6246:	f017 fee0 	bl	1e00a <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    624a:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    624c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    624e:	8983      	ldrh	r3, [r0, #12]
    6250:	2b01      	cmp	r3, #1
    6252:	d80c      	bhi.n	626e <bt_recv+0xc2>
    6254:	4a1d      	ldr	r2, [pc, #116]	; (62cc <bt_recv+0x120>)
    6256:	491e      	ldr	r1, [pc, #120]	; (62d0 <bt_recv+0x124>)
    6258:	481e      	ldr	r0, [pc, #120]	; (62d4 <bt_recv+0x128>)
    625a:	f640 03f9 	movw	r3, #2297	; 0x8f9
    625e:	f016 f81d 	bl	1c29c <printk>
    6262:	4040      	eors	r0, r0
    6264:	f380 8811 	msr	BASEPRI, r0
    6268:	f04f 0003 	mov.w	r0, #3
    626c:	df02      	svc	2
    626e:	2102      	movs	r1, #2
    6270:	f104 0008 	add.w	r0, r4, #8
    6274:	f018 fe8a 	bl	1ef8c <net_buf_simple_pull_mem>
    6278:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    627a:	7800      	ldrb	r0, [r0, #0]
    627c:	f017 fbd3 	bl	1da26 <bt_hci_evt_get_flags>
    6280:	0783      	lsls	r3, r0, #30
    6282:	d40c      	bmi.n	629e <bt_recv+0xf2>
    6284:	4a11      	ldr	r2, [pc, #68]	; (62cc <bt_recv+0x120>)
    6286:	4918      	ldr	r1, [pc, #96]	; (62e8 <bt_recv+0x13c>)
    6288:	4812      	ldr	r0, [pc, #72]	; (62d4 <bt_recv+0x128>)
    628a:	f640 03fd 	movw	r3, #2301	; 0x8fd
    628e:	f016 f805 	bl	1c29c <printk>
    6292:	4040      	eors	r0, r0
    6294:	f380 8811 	msr	BASEPRI, r0
    6298:	f04f 0003 	mov.w	r0, #3
    629c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    629e:	4a13      	ldr	r2, [pc, #76]	; (62ec <bt_recv+0x140>)
    62a0:	7828      	ldrb	r0, [r5, #0]
    62a2:	2304      	movs	r3, #4
    62a4:	4621      	mov	r1, r4
    62a6:	f7ff f851 	bl	534c <handle_event>
    62aa:	e7af      	b.n	620c <bt_recv+0x60>
    62ac:	4b0a      	ldr	r3, [pc, #40]	; (62d8 <bt_recv+0x12c>)
    62ae:	4a0b      	ldr	r2, [pc, #44]	; (62dc <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    62b0:	480f      	ldr	r0, [pc, #60]	; (62f0 <bt_recv+0x144>)
    62b2:	1ad2      	subs	r2, r2, r3
    62b4:	08d2      	lsrs	r2, r2, #3
    62b6:	0192      	lsls	r2, r2, #6
    62b8:	f042 0201 	orr.w	r2, r2, #1
    62bc:	f016 fc3a 	bl	1cb34 <log_1>
		net_buf_unref(buf);
    62c0:	4620      	mov	r0, r4
    62c2:	f013 fc97 	bl	19bf4 <net_buf_unref>
		return -EINVAL;
    62c6:	f06f 0015 	mvn.w	r0, #21
    62ca:	e7bf      	b.n	624c <bt_recv+0xa0>
    62cc:	000221c5 	.word	0x000221c5
    62d0:	00022397 	.word	0x00022397
    62d4:	00022202 	.word	0x00022202
    62d8:	0001ff94 	.word	0x0001ff94
    62dc:	0002008c 	.word	0x0002008c
    62e0:	000223c9 	.word	0x000223c9
    62e4:	000223ed 	.word	0x000223ed
    62e8:	0002240f 	.word	0x0002240f
    62ec:	00020338 	.word	0x00020338
    62f0:	0002243d 	.word	0x0002243d

000062f4 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    62f4:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    62f6:	7d03      	ldrb	r3, [r0, #20]
    62f8:	2b01      	cmp	r3, #1
{
    62fa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    62fc:	d00c      	beq.n	6318 <bt_recv_prio+0x24>
    62fe:	4a09      	ldr	r2, [pc, #36]	; (6324 <bt_recv_prio+0x30>)
    6300:	4909      	ldr	r1, [pc, #36]	; (6328 <bt_recv_prio+0x34>)
    6302:	480a      	ldr	r0, [pc, #40]	; (632c <bt_recv_prio+0x38>)
    6304:	f640 5323 	movw	r3, #3363	; 0xd23
    6308:	f015 ffc8 	bl	1c29c <printk>
    630c:	4040      	eors	r0, r0
    630e:	f380 8811 	msr	BASEPRI, r0
    6312:	f04f 0003 	mov.w	r0, #3
    6316:	df02      	svc	2

	hci_event_prio(buf);
    6318:	4620      	mov	r0, r4
    631a:	f7ff fef5 	bl	6108 <hci_event_prio>

	return 0;
}
    631e:	2000      	movs	r0, #0
    6320:	bd10      	pop	{r4, pc}
    6322:	bf00      	nop
    6324:	000221c5 	.word	0x000221c5
    6328:	00022451 	.word	0x00022451
    632c:	00022202 	.word	0x00022202

00006330 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    6330:	4a08      	ldr	r2, [pc, #32]	; (6354 <bt_hci_driver_register+0x24>)
{
    6332:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6334:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    6338:	b930      	cbnz	r0, 6348 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    633a:	68d9      	ldr	r1, [r3, #12]
    633c:	b139      	cbz	r1, 634e <bt_hci_driver_register+0x1e>
    633e:	6919      	ldr	r1, [r3, #16]
    6340:	b129      	cbz	r1, 634e <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    6342:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    6346:	4770      	bx	lr
		return -EALREADY;
    6348:	f06f 0077 	mvn.w	r0, #119	; 0x77
    634c:	4770      	bx	lr
		return -EINVAL;
    634e:	f06f 0015 	mvn.w	r0, #21
}
    6352:	4770      	bx	lr
    6354:	20000000 	.word	0x20000000

00006358 <bt_finalize_init>:

void bt_finalize_init(void)
{
    6358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    635c:	4d2d      	ldr	r5, [pc, #180]	; (6414 <bt_finalize_init+0xbc>)
    635e:	4c2e      	ldr	r4, [pc, #184]	; (6418 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    6360:	4e2e      	ldr	r6, [pc, #184]	; (641c <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    6362:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 6420 <bt_finalize_init+0xc8>
{
    6366:	b087      	sub	sp, #28
    6368:	2102      	movs	r1, #2
    636a:	f105 0098 	add.w	r0, r5, #152	; 0x98
    636e:	f017 fb7e 	bl	1da6e <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    6372:	2000      	movs	r0, #0
    6374:	f001 f92c 	bl	75d0 <bt_le_scan_update>
    6378:	4b2a      	ldr	r3, [pc, #168]	; (6424 <bt_finalize_init+0xcc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    637a:	492b      	ldr	r1, [pc, #172]	; (6428 <bt_finalize_init+0xd0>)
    637c:	1ae4      	subs	r4, r4, r3
    637e:	79eb      	ldrb	r3, [r5, #7]
    6380:	4628      	mov	r0, r5
    6382:	2b01      	cmp	r3, #1
    6384:	bf88      	it	hi
    6386:	460e      	movhi	r6, r1
    6388:	f7fe fdf4 	bl	4f74 <bt_addr_le_str_real>
    638c:	f7fd f8ca 	bl	3524 <z_log_strdup>
    6390:	08e4      	lsrs	r4, r4, #3
    6392:	01a4      	lsls	r4, r4, #6
    6394:	f044 0803 	orr.w	r8, r4, #3
    6398:	4602      	mov	r2, r0
    639a:	4631      	mov	r1, r6
    639c:	4823      	ldr	r0, [pc, #140]	; (642c <bt_finalize_init+0xd4>)
    639e:	4643      	mov	r3, r8
    63a0:	f016 fbdc 	bl	1cb5c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    63a4:	462f      	mov	r7, r5
    63a6:	2601      	movs	r6, #1
    63a8:	79eb      	ldrb	r3, [r5, #7]
    63aa:	429e      	cmp	r6, r3
    63ac:	f107 0707 	add.w	r7, r7, #7
    63b0:	db22      	blt.n	63f8 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    63b2:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    63b6:	4630      	mov	r0, r6
    63b8:	f7fe feb0 	bl	511c <ver_str>
    63bc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    63be:	9304      	str	r3, [sp, #16]
    63c0:	f044 0403 	orr.w	r4, r4, #3
    63c4:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    63c6:	9305      	str	r3, [sp, #20]
    63c8:	e9cd 0602 	strd	r0, r6, [sp, #8]
    63cc:	4623      	mov	r3, r4
    63ce:	a902      	add	r1, sp, #8
    63d0:	2204      	movs	r2, #4
    63d2:	4817      	ldr	r0, [pc, #92]	; (6430 <bt_finalize_init+0xd8>)
    63d4:	f016 fbf7 	bl	1cbc6 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    63d8:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    63dc:	4630      	mov	r0, r6
    63de:	f7fe fe9d 	bl	511c <ver_str>
    63e2:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    63e4:	f8ad 4000 	strh.w	r4, [sp]
    63e8:	4601      	mov	r1, r0
    63ea:	4632      	mov	r2, r6
    63ec:	4811      	ldr	r0, [pc, #68]	; (6434 <bt_finalize_init+0xdc>)
    63ee:	f016 fbce 	bl	1cb8e <log_3>
	}

	bt_dev_show_info();
}
    63f2:	b007      	add	sp, #28
    63f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    63f8:	4638      	mov	r0, r7
    63fa:	f7fe fdbb 	bl	4f74 <bt_addr_le_str_real>
    63fe:	f7fd f891 	bl	3524 <z_log_strdup>
    6402:	4631      	mov	r1, r6
    6404:	4602      	mov	r2, r0
    6406:	4643      	mov	r3, r8
    6408:	4648      	mov	r0, r9
    640a:	f016 fba7 	bl	1cb5c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    640e:	3601      	adds	r6, #1
    6410:	e7ca      	b.n	63a8 <bt_finalize_init+0x50>
    6412:	bf00      	nop
    6414:	20000000 	.word	0x20000000
    6418:	0002008c 	.word	0x0002008c
    641c:	00021929 	.word	0x00021929
    6420:	00022487 	.word	0x00022487
    6424:	0001ff94 	.word	0x0001ff94
    6428:	00022474 	.word	0x00022474
    642c:	00022478 	.word	0x00022478
    6430:	00022498 	.word	0x00022498
    6434:	000224d6 	.word	0x000224d6

00006438 <bt_init>:

static int bt_init(void)
{
    6438:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    643a:	4d43      	ldr	r5, [pc, #268]	; (6548 <bt_init+0x110>)
    643c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    6440:	6899      	ldr	r1, [r3, #8]
    6442:	f011 0101 	ands.w	r1, r1, #1
{
    6446:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6448:	d123      	bne.n	6492 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    644a:	aa03      	add	r2, sp, #12
    644c:	f640 4003 	movw	r0, #3075	; 0xc03
    6450:	f7ff f98c 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    6454:	4604      	mov	r4, r0
    6456:	2800      	cmp	r0, #0
    6458:	d172      	bne.n	6540 <bt_init+0x108>
	uint8_t status = buf->data[0];
    645a:	9b03      	ldr	r3, [sp, #12]
    645c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	b9a3      	cbnz	r3, 648c <bt_init+0x54>
		bt_scan_reset();
    6462:	f001 f8af 	bl	75c4 <bt_scan_reset>
    6466:	f3bf 8f5b 	dmb	ish
    646a:	462b      	mov	r3, r5
    646c:	f853 2f98 	ldr.w	r2, [r3, #152]!
    6470:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    6474:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6478:	f3bf 8f5b 	dmb	ish
    647c:	e853 1f00 	ldrex	r1, [r3]
    6480:	e843 2000 	strex	r0, r2, [r3]
    6484:	2800      	cmp	r0, #0
    6486:	d1f9      	bne.n	647c <bt_init+0x44>
    6488:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    648c:	9803      	ldr	r0, [sp, #12]
    648e:	f013 fbb1 	bl	19bf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    6492:	aa03      	add	r2, sp, #12
    6494:	2100      	movs	r1, #0
    6496:	f241 0003 	movw	r0, #4099	; 0x1003
    649a:	f7ff f967 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    649e:	4604      	mov	r4, r0
    64a0:	2800      	cmp	r0, #0
    64a2:	d14d      	bne.n	6540 <bt_init+0x108>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    64a4:	9b03      	ldr	r3, [sp, #12]
    64a6:	4829      	ldr	r0, [pc, #164]	; (654c <bt_init+0x114>)
    64a8:	6899      	ldr	r1, [r3, #8]
    64aa:	2208      	movs	r2, #8
    64ac:	3101      	adds	r1, #1
    64ae:	f017 f9ab 	bl	1d808 <memcpy>
	net_buf_unref(rsp);
    64b2:	9803      	ldr	r0, [sp, #12]
    64b4:	f013 fb9e 	bl	19bf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    64b8:	4621      	mov	r1, r4
    64ba:	aa03      	add	r2, sp, #12
    64bc:	f241 0001 	movw	r0, #4097	; 0x1001
    64c0:	f7ff f954 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    64c4:	4604      	mov	r4, r0
    64c6:	2800      	cmp	r0, #0
    64c8:	d13a      	bne.n	6540 <bt_init+0x108>
	read_local_ver_complete(rsp);
    64ca:	9803      	ldr	r0, [sp, #12]
    64cc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    64ce:	785a      	ldrb	r2, [r3, #1]
    64d0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    64d4:	78d9      	ldrb	r1, [r3, #3]
    64d6:	789a      	ldrb	r2, [r3, #2]
    64d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    64dc:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    64de:	791a      	ldrb	r2, [r3, #4]
    64e0:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    64e4:	7a19      	ldrb	r1, [r3, #8]
    64e6:	79da      	ldrb	r2, [r3, #7]
    64e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    64ec:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    64ee:	795a      	ldrb	r2, [r3, #5]
    64f0:	799b      	ldrb	r3, [r3, #6]
    64f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    64f6:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    64f8:	f013 fb7c 	bl	19bf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    64fc:	4621      	mov	r1, r4
    64fe:	aa03      	add	r2, sp, #12
    6500:	f241 0002 	movw	r0, #4098	; 0x1002
    6504:	f7ff f932 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    6508:	4604      	mov	r4, r0
    650a:	b9c8      	cbnz	r0, 6540 <bt_init+0x108>
	memcpy(bt_dev.supported_commands, rp->commands,
    650c:	9b03      	ldr	r3, [sp, #12]
    650e:	4810      	ldr	r0, [pc, #64]	; (6550 <bt_init+0x118>)
    6510:	6899      	ldr	r1, [r3, #8]
    6512:	2240      	movs	r2, #64	; 0x40
    6514:	3101      	adds	r1, #1
    6516:	f017 f977 	bl	1d808 <memcpy>
	net_buf_unref(rsp);
    651a:	9803      	ldr	r0, [sp, #12]
    651c:	f013 fb6a 	bl	19bf4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    6520:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6524:	065e      	lsls	r6, r3, #25
    6526:	d41b      	bmi.n	6560 <bt_init+0x128>
    6528:	4b0a      	ldr	r3, [pc, #40]	; (6554 <bt_init+0x11c>)
    652a:	490b      	ldr	r1, [pc, #44]	; (6558 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
    652c:	480b      	ldr	r0, [pc, #44]	; (655c <bt_init+0x124>)
    652e:	1ac9      	subs	r1, r1, r3
    6530:	08c9      	lsrs	r1, r1, #3
    6532:	0189      	lsls	r1, r1, #6
    6534:	f041 0101 	orr.w	r1, r1, #1
    6538:	f016 faef 	bl	1cb1a <log_0>
		return -ENODEV;
    653c:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    6540:	4620      	mov	r0, r4
    6542:	b008      	add	sp, #32
    6544:	bd70      	pop	{r4, r5, r6, pc}
    6546:	bf00      	nop
    6548:	20000000 	.word	0x20000000
    654c:	2000003c 	.word	0x2000003c
    6550:	20000044 	.word	0x20000044
    6554:	0001ff94 	.word	0x0001ff94
    6558:	0002008c 	.word	0x0002008c
    655c:	000224fd 	.word	0x000224fd
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    6560:	4621      	mov	r1, r4
    6562:	aa03      	add	r2, sp, #12
    6564:	f242 0003 	movw	r0, #8195	; 0x2003
    6568:	f7ff f900 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    656c:	4604      	mov	r4, r0
    656e:	2800      	cmp	r0, #0
    6570:	d1e6      	bne.n	6540 <bt_init+0x108>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    6572:	9b03      	ldr	r3, [sp, #12]
    6574:	48be      	ldr	r0, [pc, #760]	; (6870 <bt_init+0x438>)
    6576:	6899      	ldr	r1, [r3, #8]
    6578:	2208      	movs	r2, #8
    657a:	3101      	adds	r1, #1
    657c:	f017 f944 	bl	1d808 <memcpy>
	net_buf_unref(rsp);
    6580:	9803      	ldr	r0, [sp, #12]
    6582:	f013 fb37 	bl	19bf4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    6586:	4621      	mov	r1, r4
    6588:	aa03      	add	r2, sp, #12
    658a:	f242 0002 	movw	r0, #8194	; 0x2002
    658e:	f7ff f8ed 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    6592:	4604      	mov	r4, r0
    6594:	2800      	cmp	r0, #0
    6596:	d1d3      	bne.n	6540 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
    6598:	9b03      	ldr	r3, [sp, #12]
    659a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    659c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    65a0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    65a4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    65a6:	b121      	cbz	r1, 65b2 <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    65a8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    65aa:	48b2      	ldr	r0, [pc, #712]	; (6874 <bt_init+0x43c>)
    65ac:	4611      	mov	r1, r2
    65ae:	f018 ffdf 	bl	1f570 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    65b2:	9803      	ldr	r0, [sp, #12]
    65b4:	f013 fb1e 	bl	19bf4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    65b8:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    65bc:	f016 0620 	ands.w	r6, r6, #32
    65c0:	f000 80d8 	beq.w	6774 <bt_init+0x33c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    65c4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    65c8:	071c      	lsls	r4, r3, #28
    65ca:	d512      	bpl.n	65f2 <bt_init+0x1ba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    65cc:	aa03      	add	r2, sp, #12
    65ce:	2100      	movs	r1, #0
    65d0:	f242 001c 	movw	r0, #8220	; 0x201c
    65d4:	f7ff f8ca 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    65d8:	4604      	mov	r4, r0
    65da:	2800      	cmp	r0, #0
    65dc:	d1b0      	bne.n	6540 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
    65de:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    65e0:	6883      	ldr	r3, [r0, #8]
    65e2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    65e6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    65ea:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    65ee:	f013 fb01 	bl	19bf4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    65f2:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    65f6:	0698      	lsls	r0, r3, #26
    65f8:	d524      	bpl.n	6644 <bt_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    65fa:	a902      	add	r1, sp, #8
    65fc:	f10d 0006 	add.w	r0, sp, #6
    6600:	f7ff f92e 	bl	5860 <hci_le_read_max_data_len>
		if (err) {
    6604:	4604      	mov	r4, r0
    6606:	2800      	cmp	r0, #0
    6608:	d19a      	bne.n	6540 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    660a:	2104      	movs	r1, #4
    660c:	f242 0024 	movw	r0, #8228	; 0x2024
    6610:	f7ff f872 	bl	56f8 <bt_hci_cmd_create>
		if (!buf) {
    6614:	4606      	mov	r6, r0
    6616:	2800      	cmp	r0, #0
    6618:	f000 80b3 	beq.w	6782 <bt_init+0x34a>
	return net_buf_simple_add(&buf->b, len);
    661c:	2104      	movs	r1, #4
    661e:	3008      	adds	r0, #8
    6620:	f018 fc8d 	bl	1ef3e <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    6624:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6628:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    662a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    662e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    6630:	4622      	mov	r2, r4
    6632:	4631      	mov	r1, r6
    6634:	f242 0024 	movw	r0, #8228	; 0x2024
    6638:	f7ff f898 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    663c:	4604      	mov	r4, r0
    663e:	2800      	cmp	r0, #0
    6640:	f47f af7e 	bne.w	6540 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    6644:	2108      	movs	r1, #8
    6646:	f242 0001 	movw	r0, #8193	; 0x2001
    664a:	f7ff f855 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    664e:	4604      	mov	r4, r0
    6650:	2800      	cmp	r0, #0
    6652:	f000 8096 	beq.w	6782 <bt_init+0x34a>
    6656:	2108      	movs	r1, #8
    6658:	4408      	add	r0, r1
    665a:	f018 fc70 	bl	1ef3e <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    665e:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6662:	f012 0f02 	tst.w	r2, #2
    6666:	bf14      	ite	ne
    6668:	232f      	movne	r3, #47	; 0x2f
    666a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    666c:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    666e:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    6672:	bf48      	it	mi
    6674:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    6678:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    667c:	bf18      	it	ne
    667e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    6682:	2200      	movs	r2, #0
    6684:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6686:	f3c3 2307 	ubfx	r3, r3, #8, #8
    668a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    668c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    668e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    6690:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6692:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6694:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6696:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    6698:	4621      	mov	r1, r4
    669a:	f242 0001 	movw	r0, #8193	; 0x2001
    669e:	f7ff f865 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    66a2:	4604      	mov	r4, r0
    66a4:	2800      	cmp	r0, #0
    66a6:	f47f af4b 	bne.w	6540 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    66aa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    66ae:	069a      	lsls	r2, r3, #26
    66b0:	d41e      	bmi.n	66f0 <bt_init+0x2b8>
	if (bt_dev.le.acl_mtu) {
    66b2:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    66b6:	b9d9      	cbnz	r1, 66f0 <bt_init+0x2b8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    66b8:	aa03      	add	r2, sp, #12
    66ba:	f241 0005 	movw	r0, #4101	; 0x1005
    66be:	f7ff f855 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    66c2:	4604      	mov	r4, r0
    66c4:	2800      	cmp	r0, #0
    66c6:	f47f af3b 	bne.w	6540 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
    66ca:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    66ce:	b963      	cbnz	r3, 66ea <bt_init+0x2b2>
    66d0:	9b03      	ldr	r3, [sp, #12]
    66d2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    66d4:	785a      	ldrb	r2, [r3, #1]
    66d6:	7899      	ldrb	r1, [r3, #2]
    66d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    66dc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    66e0:	889a      	ldrh	r2, [r3, #4]
    66e2:	4864      	ldr	r0, [pc, #400]	; (6874 <bt_init+0x43c>)
    66e4:	4611      	mov	r1, r2
    66e6:	f018 ff43 	bl	1f570 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    66ea:	9803      	ldr	r0, [sp, #12]
    66ec:	f013 fa82 	bl	19bf4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    66f0:	2108      	movs	r1, #8
    66f2:	f640 4001 	movw	r0, #3073	; 0xc01
    66f6:	f7fe ffff 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    66fa:	4604      	mov	r4, r0
    66fc:	2800      	cmp	r0, #0
    66fe:	d040      	beq.n	6782 <bt_init+0x34a>
    6700:	2108      	movs	r1, #8
    6702:	4408      	add	r0, r1
    6704:	f018 fc1b 	bl	1ef3e <net_buf_simple_add>
	dst[0] = val;
    6708:	2310      	movs	r3, #16
    670a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    670c:	2388      	movs	r3, #136	; 0x88
    670e:	7043      	strb	r3, [r0, #1]
    6710:	2302      	movs	r3, #2
	dst[0] = val;
    6712:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6714:	70c3      	strb	r3, [r0, #3]
    6716:	2320      	movs	r3, #32
	dst[0] = val;
    6718:	7082      	strb	r2, [r0, #2]
    671a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    671c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    671e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6720:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6722:	4621      	mov	r1, r4
    6724:	f640 4001 	movw	r0, #3073	; 0xc01
    6728:	f7ff f820 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    672c:	4604      	mov	r4, r0
    672e:	2800      	cmp	r0, #0
    6730:	f47f af06 	bne.w	6540 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6734:	4601      	mov	r1, r0
    6736:	aa02      	add	r2, sp, #8
    6738:	f64f 4001 	movw	r0, #64513	; 0xfc01
    673c:	f7ff f816 	bl	576c <bt_hci_cmd_send_sync>
    6740:	4c4d      	ldr	r4, [pc, #308]	; (6878 <bt_init+0x440>)
    6742:	4b4e      	ldr	r3, [pc, #312]	; (687c <bt_init+0x444>)
    6744:	1ae4      	subs	r4, r4, r3
    6746:	08e4      	lsrs	r4, r4, #3
    6748:	01a4      	lsls	r4, r4, #6
	if (err) {
    674a:	b378      	cbz	r0, 67ac <bt_init+0x374>
		BT_WARN("Vendor HCI extensions not available");
    674c:	484c      	ldr	r0, [pc, #304]	; (6880 <bt_init+0x448>)
    674e:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
    6752:	f016 f9e2 	bl	1cb1a <log_0>
	err = bt_id_init();
    6756:	f000 fb99 	bl	6e8c <bt_id_init>
	if (err) {
    675a:	4604      	mov	r4, r0
    675c:	2800      	cmp	r0, #0
    675e:	f47f aeef 	bne.w	6540 <bt_init+0x108>
		err = bt_conn_init();
    6762:	f001 fe69 	bl	8438 <bt_conn_init>
		if (err) {
    6766:	4604      	mov	r4, r0
    6768:	2800      	cmp	r0, #0
    676a:	f47f aee9 	bne.w	6540 <bt_init+0x108>
	bt_finalize_init();
    676e:	f7ff fdf3 	bl	6358 <bt_finalize_init>
	return 0;
    6772:	e6e5      	b.n	6540 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6774:	2102      	movs	r1, #2
    6776:	f640 406d 	movw	r0, #3181	; 0xc6d
    677a:	f7fe ffbd 	bl	56f8 <bt_hci_cmd_create>
		if (!buf) {
    677e:	4604      	mov	r4, r0
    6780:	b910      	cbnz	r0, 6788 <bt_init+0x350>
		return -ENOBUFS;
    6782:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6786:	e6db      	b.n	6540 <bt_init+0x108>
    6788:	2102      	movs	r1, #2
    678a:	3008      	adds	r0, #8
    678c:	f018 fbd7 	bl	1ef3e <net_buf_simple_add>
		cp_le->le = 0x01;
    6790:	2301      	movs	r3, #1
    6792:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    6794:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    6796:	4621      	mov	r1, r4
    6798:	4632      	mov	r2, r6
    679a:	f640 406d 	movw	r0, #3181	; 0xc6d
    679e:	f7fe ffe5 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    67a2:	4604      	mov	r4, r0
    67a4:	2800      	cmp	r0, #0
    67a6:	f43f af0d 	beq.w	65c4 <bt_init+0x18c>
    67aa:	e6c9      	b.n	6540 <bt_init+0x108>
	rp.info = (void *)rsp->data;
    67ac:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    67ae:	4835      	ldr	r0, [pc, #212]	; (6884 <bt_init+0x44c>)
	rp.info = (void *)rsp->data;
    67b0:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    67b2:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    67b6:	2a03      	cmp	r2, #3
		return plat_str[platform];
    67b8:	bf96      	itet	ls
    67ba:	4933      	ldrls	r1, [pc, #204]	; (6888 <bt_init+0x450>)
	return "unknown";
    67bc:	4933      	ldrhi	r1, [pc, #204]	; (688c <bt_init+0x454>)
		return plat_str[platform];
    67be:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    67c2:	f044 0303 	orr.w	r3, r4, #3
    67c6:	f016 f9c9 	bl	1cb5c <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    67ca:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    67ce:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    67d2:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    67d4:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    67d8:	d12e      	bne.n	6838 <bt_init+0x400>
	if (variant < ARRAY_SIZE(nordic_str)) {
    67da:	2a03      	cmp	r2, #3
    67dc:	d82c      	bhi.n	6838 <bt_init+0x400>
		return nordic_str[variant];
    67de:	492c      	ldr	r1, [pc, #176]	; (6890 <bt_init+0x458>)
    67e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    67e4:	482b      	ldr	r0, [pc, #172]	; (6894 <bt_init+0x45c>)
    67e6:	f016 f9b9 	bl	1cb5c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    67ea:	7972      	ldrb	r2, [r6, #5]
    67ec:	482a      	ldr	r0, [pc, #168]	; (6898 <bt_init+0x460>)
	if (variant < ARRAY_SIZE(var_str)) {
    67ee:	2a03      	cmp	r2, #3
		return var_str[variant];
    67f0:	bf96      	itet	ls
    67f2:	492a      	ldrls	r1, [pc, #168]	; (689c <bt_init+0x464>)
	return "unknown";
    67f4:	4925      	ldrhi	r1, [pc, #148]	; (688c <bt_init+0x454>)
		return var_str[variant];
    67f6:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    67fa:	e9cd 1203 	strd	r1, r2, [sp, #12]
    67fe:	79b2      	ldrb	r2, [r6, #6]
    6800:	9205      	str	r2, [sp, #20]
    6802:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    6806:	9206      	str	r2, [sp, #24]
    6808:	f8d6 2009 	ldr.w	r2, [r6, #9]
    680c:	9207      	str	r2, [sp, #28]
    680e:	f044 0303 	orr.w	r3, r4, #3
    6812:	2205      	movs	r2, #5
    6814:	a903      	add	r1, sp, #12
    6816:	f016 f9d6 	bl	1cbc6 <log_n>
	net_buf_unref(rsp);
    681a:	9802      	ldr	r0, [sp, #8]
    681c:	f013 f9ea 	bl	19bf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    6820:	aa02      	add	r2, sp, #8
    6822:	2100      	movs	r1, #0
    6824:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6828:	f7fe ffa0 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    682c:	4606      	mov	r6, r0
    682e:	b128      	cbz	r0, 683c <bt_init+0x404>
		BT_WARN("Failed to read supported vendor commands");
    6830:	481b      	ldr	r0, [pc, #108]	; (68a0 <bt_init+0x468>)
    6832:	f044 0102 	orr.w	r1, r4, #2
    6836:	e78c      	b.n	6752 <bt_init+0x31a>
		return "unknown";
    6838:	4914      	ldr	r1, [pc, #80]	; (688c <bt_init+0x454>)
    683a:	e7d3      	b.n	67e4 <bt_init+0x3ac>
	rp.cmds = (void *)rsp->data;
    683c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    683e:	4819      	ldr	r0, [pc, #100]	; (68a4 <bt_init+0x46c>)
    6840:	6899      	ldr	r1, [r3, #8]
    6842:	2202      	movs	r2, #2
    6844:	3101      	adds	r1, #1
    6846:	f016 ffdf 	bl	1d808 <memcpy>
	net_buf_unref(rsp);
    684a:	9802      	ldr	r0, [sp, #8]
    684c:	f013 f9d2 	bl	19bf4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    6850:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    6854:	075b      	lsls	r3, r3, #29
    6856:	f57f af7e 	bpl.w	6756 <bt_init+0x31e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    685a:	aa02      	add	r2, sp, #8
    685c:	4631      	mov	r1, r6
    685e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6862:	f7fe ff83 	bl	576c <bt_hci_cmd_send_sync>
		if (err) {
    6866:	b308      	cbz	r0, 68ac <bt_init+0x474>
			BT_WARN("Failed to read supported vendor features");
    6868:	480f      	ldr	r0, [pc, #60]	; (68a8 <bt_init+0x470>)
    686a:	f044 0102 	orr.w	r1, r4, #2
    686e:	e770      	b.n	6752 <bt_init+0x31a>
    6870:	200000a0 	.word	0x200000a0
    6874:	200000d0 	.word	0x200000d0
    6878:	0002008c 	.word	0x0002008c
    687c:	0001ff94 	.word	0x0001ff94
    6880:	00022521 	.word	0x00022521
    6884:	00022545 	.word	0x00022545
    6888:	00020358 	.word	0x00020358
    688c:	00022026 	.word	0x00022026
    6890:	00020328 	.word	0x00020328
    6894:	0002255e 	.word	0x0002255e
    6898:	00022576 	.word	0x00022576
    689c:	00020390 	.word	0x00020390
    68a0:	000225a3 	.word	0x000225a3
    68a4:	20000085 	.word	0x20000085
    68a8:	000225cc 	.word	0x000225cc
		rp.feat = (void *)rsp->data;
    68ac:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    68ae:	4805      	ldr	r0, [pc, #20]	; (68c4 <bt_init+0x48c>)
    68b0:	6899      	ldr	r1, [r3, #8]
    68b2:	2201      	movs	r2, #1
    68b4:	4411      	add	r1, r2
    68b6:	f016 ffa7 	bl	1d808 <memcpy>
		net_buf_unref(rsp);
    68ba:	9802      	ldr	r0, [sp, #8]
    68bc:	f013 f99a 	bl	19bf4 <net_buf_unref>
    68c0:	e749      	b.n	6756 <bt_init+0x31e>
    68c2:	bf00      	nop
    68c4:	20000084 	.word	0x20000084

000068c8 <init_work>:

static void init_work(struct k_work *work)
{
    68c8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    68ca:	f7ff fdb5 	bl	6438 <bt_init>
	if (ready_cb) {
    68ce:	4b03      	ldr	r3, [pc, #12]	; (68dc <init_work+0x14>)
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	b113      	cbz	r3, 68da <init_work+0x12>
		ready_cb(err);
	}
}
    68d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    68d8:	4718      	bx	r3
}
    68da:	bd10      	pop	{r4, pc}
    68dc:	200012c8 	.word	0x200012c8

000068e0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    68e0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    68e2:	4d2a      	ldr	r5, [pc, #168]	; (698c <bt_enable+0xac>)
    68e4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    68e8:	b088      	sub	sp, #32
    68ea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    68ec:	b973      	cbnz	r3, 690c <bt_enable+0x2c>
    68ee:	4b28      	ldr	r3, [pc, #160]	; (6990 <bt_enable+0xb0>)
    68f0:	4928      	ldr	r1, [pc, #160]	; (6994 <bt_enable+0xb4>)
		BT_ERR("No HCI driver registered");
    68f2:	4829      	ldr	r0, [pc, #164]	; (6998 <bt_enable+0xb8>)
    68f4:	1ac9      	subs	r1, r1, r3
    68f6:	08c9      	lsrs	r1, r1, #3
    68f8:	0189      	lsls	r1, r1, #6
    68fa:	f041 0101 	orr.w	r1, r1, #1
    68fe:	f016 f90c 	bl	1cb1a <log_0>
		return -ENODEV;
    6902:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    6906:	4620      	mov	r0, r4
    6908:	b008      	add	sp, #32
    690a:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    690c:	2101      	movs	r1, #1
    690e:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6912:	f017 f8ac 	bl	1da6e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6916:	ea10 0301 	ands.w	r3, r0, r1
    691a:	d134      	bne.n	6986 <bt_enable+0xa6>
	ready_cb = cb;
    691c:	4a1f      	ldr	r2, [pc, #124]	; (699c <bt_enable+0xbc>)
    691e:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6920:	2000      	movs	r0, #0
    6922:	2100      	movs	r1, #0
    6924:	f06f 0208 	mvn.w	r2, #8
    6928:	e9cd 0106 	strd	r0, r1, [sp, #24]
    692c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6930:	e9cd 3300 	strd	r3, r3, [sp]
    6934:	9304      	str	r3, [sp, #16]
    6936:	491a      	ldr	r1, [pc, #104]	; (69a0 <bt_enable+0xc0>)
    6938:	4b1a      	ldr	r3, [pc, #104]	; (69a4 <bt_enable+0xc4>)
    693a:	481b      	ldr	r0, [pc, #108]	; (69a8 <bt_enable+0xc8>)
    693c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6940:	f014 fabe 	bl	1aec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    6944:	4919      	ldr	r1, [pc, #100]	; (69ac <bt_enable+0xcc>)
    6946:	4818      	ldr	r0, [pc, #96]	; (69a8 <bt_enable+0xc8>)
    6948:	f018 fd2f 	bl	1f3aa <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    694c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    6950:	68db      	ldr	r3, [r3, #12]
    6952:	4798      	blx	r3
	if (err) {
    6954:	4604      	mov	r4, r0
    6956:	b158      	cbz	r0, 6970 <bt_enable+0x90>
    6958:	4b0d      	ldr	r3, [pc, #52]	; (6990 <bt_enable+0xb0>)
    695a:	4a0e      	ldr	r2, [pc, #56]	; (6994 <bt_enable+0xb4>)
    695c:	1ad2      	subs	r2, r2, r3
    695e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    6960:	0192      	lsls	r2, r2, #6
    6962:	4601      	mov	r1, r0
    6964:	f042 0201 	orr.w	r2, r2, #1
    6968:	4811      	ldr	r0, [pc, #68]	; (69b0 <bt_enable+0xd0>)
    696a:	f016 f8e3 	bl	1cb34 <log_1>
		return err;
    696e:	e7ca      	b.n	6906 <bt_enable+0x26>
	if (!cb) {
    6970:	b926      	cbnz	r6, 697c <bt_enable+0x9c>
}
    6972:	b008      	add	sp, #32
    6974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    6978:	f7ff bd5e 	b.w	6438 <bt_init>
	k_work_submit(&bt_dev.init);
    697c:	f105 0088 	add.w	r0, r5, #136	; 0x88
    6980:	f014 fd96 	bl	1b4b0 <k_work_submit>
	return 0;
    6984:	e7bf      	b.n	6906 <bt_enable+0x26>
		return -EALREADY;
    6986:	f06f 0477 	mvn.w	r4, #119	; 0x77
    698a:	e7bc      	b.n	6906 <bt_enable+0x26>
    698c:	20000000 	.word	0x20000000
    6990:	0001ff94 	.word	0x0001ff94
    6994:	0002008c 	.word	0x0002008c
    6998:	000225f5 	.word	0x000225f5
    699c:	200012c8 	.word	0x200012c8
    69a0:	20003020 	.word	0x20003020
    69a4:	00005f81 	.word	0x00005f81
    69a8:	20000908 	.word	0x20000908
    69ac:	0002260e 	.word	0x0002260e
    69b0:	00022614 	.word	0x00022614

000069b4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    69b4:	4800      	ldr	r0, [pc, #0]	; (69b8 <bt_get_name+0x4>)
    69b6:	4770      	bx	lr
    69b8:	00022630 	.word	0x00022630

000069bc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    69bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    69be:	4f0b      	ldr	r7, [pc, #44]	; (69ec <id_find+0x30>)
{
    69c0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    69c2:	2500      	movs	r5, #0
    69c4:	79fb      	ldrb	r3, [r7, #7]
    69c6:	b2ec      	uxtb	r4, r5
    69c8:	42a3      	cmp	r3, r4
    69ca:	d802      	bhi.n	69d2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    69cc:	f06f 0401 	mvn.w	r4, #1
    69d0:	e009      	b.n	69e6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    69d2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    69d6:	2207      	movs	r2, #7
    69d8:	4439      	add	r1, r7
    69da:	4630      	mov	r0, r6
    69dc:	f016 ff03 	bl	1d7e6 <memcmp>
    69e0:	3501      	adds	r5, #1
    69e2:	2800      	cmp	r0, #0
    69e4:	d1ee      	bne.n	69c4 <id_find+0x8>
}
    69e6:	4620      	mov	r0, r4
    69e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ea:	bf00      	nop
    69ec:	20000000 	.word	0x20000000

000069f0 <set_random_address>:
{
    69f0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    69f2:	4914      	ldr	r1, [pc, #80]	; (6a44 <set_random_address+0x54>)
    69f4:	2206      	movs	r2, #6
    69f6:	4605      	mov	r5, r0
    69f8:	f016 fef5 	bl	1d7e6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    69fc:	4604      	mov	r4, r0
    69fe:	b1e0      	cbz	r0, 6a3a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    6a00:	2106      	movs	r1, #6
    6a02:	f242 0005 	movw	r0, #8197	; 0x2005
    6a06:	f7fe fe77 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    6a0a:	4604      	mov	r4, r0
    6a0c:	b1b8      	cbz	r0, 6a3e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6a0e:	2206      	movs	r2, #6
    6a10:	4629      	mov	r1, r5
    6a12:	3008      	adds	r0, #8
    6a14:	f018 fa99 	bl	1ef4a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6a18:	4621      	mov	r1, r4
    6a1a:	2200      	movs	r2, #0
    6a1c:	f242 0005 	movw	r0, #8197	; 0x2005
    6a20:	f7fe fea4 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    6a24:	4604      	mov	r4, r0
    6a26:	b940      	cbnz	r0, 6a3a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    6a28:	2206      	movs	r2, #6
    6a2a:	4806      	ldr	r0, [pc, #24]	; (6a44 <set_random_address+0x54>)
    6a2c:	4629      	mov	r1, r5
    6a2e:	f016 feeb 	bl	1d808 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    6a32:	4b05      	ldr	r3, [pc, #20]	; (6a48 <set_random_address+0x58>)
    6a34:	2201      	movs	r2, #1
    6a36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    6a3a:	4620      	mov	r0, r4
    6a3c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    6a3e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6a42:	e7fa      	b.n	6a3a <set_random_address+0x4a>
    6a44:	2000002d 	.word	0x2000002d
    6a48:	20000000 	.word	0x20000000

00006a4c <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    6a4c:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    6a4e:	4c15      	ldr	r4, [pc, #84]	; (6aa4 <id_create.constprop.0+0x58>)
    6a50:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    6a54:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    6a56:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6a58:	460d      	mov	r5, r1
    6a5a:	b181      	cbz	r1, 6a7e <id_create.constprop.0+0x32>
    6a5c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6a5e:	2207      	movs	r2, #7
    6a60:	4669      	mov	r1, sp
    6a62:	4628      	mov	r0, r5
    6a64:	9300      	str	r3, [sp, #0]
    6a66:	f8cd 3003 	str.w	r3, [sp, #3]
    6a6a:	f016 febc 	bl	1d7e6 <memcmp>
    6a6e:	b130      	cbz	r0, 6a7e <id_create.constprop.0+0x32>
	memcpy(dst, src, sizeof(*dst));
    6a70:	2207      	movs	r2, #7
    6a72:	4629      	mov	r1, r5
    6a74:	4620      	mov	r0, r4
    6a76:	f016 fec7 	bl	1d808 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    6a7a:	b005      	add	sp, #20
    6a7c:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    6a7e:	a802      	add	r0, sp, #8
    6a80:	f016 ffc3 	bl	1da0a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    6a84:	a802      	add	r0, sp, #8
    6a86:	f7ff ff99 	bl	69bc <id_find>
    6a8a:	2800      	cmp	r0, #0
    6a8c:	daf7      	bge.n	6a7e <id_create.constprop.0+0x32>
    6a8e:	2207      	movs	r2, #7
    6a90:	a902      	add	r1, sp, #8
    6a92:	4620      	mov	r0, r4
    6a94:	f016 feb8 	bl	1d808 <memcpy>
		if (addr) {
    6a98:	2d00      	cmp	r5, #0
    6a9a:	d0ee      	beq.n	6a7a <id_create.constprop.0+0x2e>
    6a9c:	2207      	movs	r2, #7
    6a9e:	4621      	mov	r1, r4
    6aa0:	4628      	mov	r0, r5
    6aa2:	e7e8      	b.n	6a76 <id_create.constprop.0+0x2a>
    6aa4:	20000000 	.word	0x20000000

00006aa8 <bt_id_adv_random_addr_check>:
{
    6aa8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6aaa:	4805      	ldr	r0, [pc, #20]	; (6ac0 <bt_id_adv_random_addr_check+0x18>)
    6aac:	f017 f8e3 	bl	1dc76 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    6ab0:	0503      	lsls	r3, r0, #20
    6ab2:	d402      	bmi.n	6aba <bt_id_adv_random_addr_check+0x12>
    6ab4:	4802      	ldr	r0, [pc, #8]	; (6ac0 <bt_id_adv_random_addr_check+0x18>)
    6ab6:	f017 f8de 	bl	1dc76 <atomic_get>
}
    6aba:	2001      	movs	r0, #1
    6abc:	bd08      	pop	{r3, pc}
    6abe:	bf00      	nop
    6ac0:	20000098 	.word	0x20000098

00006ac4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    6ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6ac6:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6ac8:	4605      	mov	r5, r0
    6aca:	b918      	cbnz	r0, 6ad4 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6acc:	b34c      	cbz	r4, 6b22 <bt_id_create+0x5e>
		return -EINVAL;
    6ace:	f06f 0415 	mvn.w	r4, #21
    6ad2:	e023      	b.n	6b1c <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6ad4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6ad6:	2207      	movs	r2, #7
    6ad8:	4669      	mov	r1, sp
    6ada:	9300      	str	r3, [sp, #0]
    6adc:	f8cd 3003 	str.w	r3, [sp, #3]
    6ae0:	f016 fe81 	bl	1d7e6 <memcmp>
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d0f1      	beq.n	6acc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6ae8:	782b      	ldrb	r3, [r5, #0]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d104      	bne.n	6af8 <bt_id_create+0x34>
    6aee:	79ab      	ldrb	r3, [r5, #6]
    6af0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6af4:	2bc0      	cmp	r3, #192	; 0xc0
    6af6:	d00a      	beq.n	6b0e <bt_id_create+0x4a>
    6af8:	4b1a      	ldr	r3, [pc, #104]	; (6b64 <bt_id_create+0xa0>)
    6afa:	491b      	ldr	r1, [pc, #108]	; (6b68 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
    6afc:	481b      	ldr	r0, [pc, #108]	; (6b6c <bt_id_create+0xa8>)
    6afe:	1ac9      	subs	r1, r1, r3
    6b00:	08c9      	lsrs	r1, r1, #3
    6b02:	0189      	lsls	r1, r1, #6
    6b04:	f041 0101 	orr.w	r1, r1, #1
    6b08:	f016 f807 	bl	1cb1a <log_0>
			return -EINVAL;
    6b0c:	e7df      	b.n	6ace <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6b0e:	4628      	mov	r0, r5
    6b10:	f7ff ff54 	bl	69bc <id_find>
    6b14:	2800      	cmp	r0, #0
    6b16:	dbd9      	blt.n	6acc <bt_id_create+0x8>
			return -EALREADY;
    6b18:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    6b1c:	4620      	mov	r0, r4
    6b1e:	b002      	add	sp, #8
    6b20:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6b22:	4e13      	ldr	r6, [pc, #76]	; (6b70 <bt_id_create+0xac>)
    6b24:	79f3      	ldrb	r3, [r6, #7]
    6b26:	2b01      	cmp	r3, #1
    6b28:	d019      	beq.n	6b5e <bt_id_create+0x9a>
    6b2a:	f106 0098 	add.w	r0, r6, #152	; 0x98
    6b2e:	f017 f8a2 	bl	1dc76 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6b32:	07c3      	lsls	r3, r0, #31
    6b34:	d40b      	bmi.n	6b4e <bt_id_create+0x8a>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    6b36:	2d00      	cmp	r5, #0
    6b38:	d0c9      	beq.n	6ace <bt_id_create+0xa>
    6b3a:	2207      	movs	r2, #7
    6b3c:	4669      	mov	r1, sp
    6b3e:	4628      	mov	r0, r5
    6b40:	9400      	str	r4, [sp, #0]
    6b42:	f8cd 4003 	str.w	r4, [sp, #3]
    6b46:	f016 fe4e 	bl	1d7e6 <memcmp>
    6b4a:	2800      	cmp	r0, #0
    6b4c:	d0bf      	beq.n	6ace <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    6b4e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    6b50:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    6b52:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    6b54:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6b56:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    6b58:	f7ff ff78 	bl	6a4c <id_create.constprop.0>
	return new_id;
    6b5c:	e7de      	b.n	6b1c <bt_id_create+0x58>
		return -ENOMEM;
    6b5e:	f06f 040b 	mvn.w	r4, #11
    6b62:	e7db      	b.n	6b1c <bt_id_create+0x58>
    6b64:	0001ff94 	.word	0x0001ff94
    6b68:	00020094 	.word	0x00020094
    6b6c:	00022641 	.word	0x00022641
    6b70:	20000000 	.word	0x20000000

00006b74 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    6b74:	b570      	push	{r4, r5, r6, lr}
    6b76:	b086      	sub	sp, #24
    6b78:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6b7a:	aa01      	add	r2, sp, #4
    6b7c:	2100      	movs	r1, #0
    6b7e:	f241 0009 	movw	r0, #4105	; 0x1009
    6b82:	f7fe fdf3 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    6b86:	4604      	mov	r4, r0
    6b88:	b160      	cbz	r0, 6ba4 <bt_id_read_public_addr+0x30>
    6b8a:	491e      	ldr	r1, [pc, #120]	; (6c04 <bt_id_read_public_addr+0x90>)
    6b8c:	4b1e      	ldr	r3, [pc, #120]	; (6c08 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
    6b8e:	481f      	ldr	r0, [pc, #124]	; (6c0c <bt_id_read_public_addr+0x98>)
    6b90:	1ac9      	subs	r1, r1, r3
    6b92:	08c9      	lsrs	r1, r1, #3
    6b94:	0189      	lsls	r1, r1, #6
    6b96:	f041 0102 	orr.w	r1, r1, #2
    6b9a:	f015 ffbe 	bl	1cb1a <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    6b9e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    6ba0:	b006      	add	sp, #24
    6ba2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6ba4:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6ba6:	9002      	str	r0, [sp, #8]
    6ba8:	689d      	ldr	r5, [r3, #8]
    6baa:	f8ad 000c 	strh.w	r0, [sp, #12]
    6bae:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    6bb0:	2206      	movs	r2, #6
    6bb2:	a902      	add	r1, sp, #8
    6bb4:	4628      	mov	r0, r5
    6bb6:	f016 fe16 	bl	1d7e6 <memcmp>
    6bba:	b918      	cbnz	r0, 6bc4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    6bbc:	9801      	ldr	r0, [sp, #4]
    6bbe:	f013 f819 	bl	19bf4 <net_buf_unref>
    6bc2:	e7ec      	b.n	6b9e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    6bc4:	23ff      	movs	r3, #255	; 0xff
    6bc6:	2206      	movs	r2, #6
    6bc8:	a904      	add	r1, sp, #16
    6bca:	4628      	mov	r0, r5
    6bcc:	f88d 3010 	strb.w	r3, [sp, #16]
    6bd0:	f88d 3011 	strb.w	r3, [sp, #17]
    6bd4:	f88d 3012 	strb.w	r3, [sp, #18]
    6bd8:	f88d 3013 	strb.w	r3, [sp, #19]
    6bdc:	f88d 3014 	strb.w	r3, [sp, #20]
    6be0:	f88d 3015 	strb.w	r3, [sp, #21]
    6be4:	f016 fdff 	bl	1d7e6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6be8:	2800      	cmp	r0, #0
    6bea:	d0e7      	beq.n	6bbc <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    6bec:	2206      	movs	r2, #6
    6bee:	4629      	mov	r1, r5
    6bf0:	1c70      	adds	r0, r6, #1
    6bf2:	f016 fe09 	bl	1d808 <memcpy>
	net_buf_unref(rsp);
    6bf6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6bf8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    6bfa:	f012 fffb 	bl	19bf4 <net_buf_unref>
	return 1U;
    6bfe:	2001      	movs	r0, #1
    6c00:	e7ce      	b.n	6ba0 <bt_id_read_public_addr+0x2c>
    6c02:	bf00      	nop
    6c04:	00020094 	.word	0x00020094
    6c08:	0001ff94 	.word	0x0001ff94
    6c0c:	0002266f 	.word	0x0002266f

00006c10 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    6c10:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    6c12:	4668      	mov	r0, sp
    6c14:	f7ff ffae 	bl	6b74 <bt_id_read_public_addr>
    6c18:	4b04      	ldr	r3, [pc, #16]	; (6c2c <bt_setup_public_id_addr+0x1c>)
    6c1a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    6c1c:	b118      	cbz	r0, 6c26 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    6c1e:	4669      	mov	r1, sp
    6c20:	2000      	movs	r0, #0
    6c22:	f7ff ff13 	bl	6a4c <id_create.constprop.0>
}
    6c26:	b003      	add	sp, #12
    6c28:	f85d fb04 	ldr.w	pc, [sp], #4
    6c2c:	20000000 	.word	0x20000000

00006c30 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    6c30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6c34:	4b25      	ldr	r3, [pc, #148]	; (6ccc <bt_read_static_addr+0x9c>)
    6c36:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    6c3a:	f014 0401 	ands.w	r4, r4, #1
{
    6c3e:	4607      	mov	r7, r0
    6c40:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6c42:	d10a      	bne.n	6c5a <bt_read_static_addr+0x2a>
    6c44:	4922      	ldr	r1, [pc, #136]	; (6cd0 <bt_read_static_addr+0xa0>)
    6c46:	4b23      	ldr	r3, [pc, #140]	; (6cd4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    6c48:	4823      	ldr	r0, [pc, #140]	; (6cd8 <bt_read_static_addr+0xa8>)
    6c4a:	1ac9      	subs	r1, r1, r3
    6c4c:	08c9      	lsrs	r1, r1, #3
    6c4e:	0189      	lsls	r1, r1, #6
    6c50:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    6c54:	f015 ff61 	bl	1cb1a <log_0>
    6c58:	e012      	b.n	6c80 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6c5a:	aa01      	add	r2, sp, #4
    6c5c:	2100      	movs	r1, #0
    6c5e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6c62:	f7fe fd83 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    6c66:	4605      	mov	r5, r0
    6c68:	b170      	cbz	r0, 6c88 <bt_read_static_addr+0x58>
    6c6a:	4b1a      	ldr	r3, [pc, #104]	; (6cd4 <bt_read_static_addr+0xa4>)
    6c6c:	4918      	ldr	r1, [pc, #96]	; (6cd0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    6c6e:	481b      	ldr	r0, [pc, #108]	; (6cdc <bt_read_static_addr+0xac>)
    6c70:	1ac9      	subs	r1, r1, r3
    6c72:	08c9      	lsrs	r1, r1, #3
    6c74:	0189      	lsls	r1, r1, #6
    6c76:	f041 0102 	orr.w	r1, r1, #2
    6c7a:	f015 ff4e 	bl	1cb1a <log_0>
		return 0;
    6c7e:	2400      	movs	r4, #0
	}

	return cnt;
}
    6c80:	4620      	mov	r0, r4
    6c82:	b002      	add	sp, #8
    6c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    6c88:	9b01      	ldr	r3, [sp, #4]
    6c8a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6c8c:	785c      	ldrb	r4, [r3, #1]
    6c8e:	42b4      	cmp	r4, r6
    6c90:	bf28      	it	cs
    6c92:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6c94:	f04f 0816 	mov.w	r8, #22
    6c98:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    6c9a:	42a5      	cmp	r5, r4
    6c9c:	db0d      	blt.n	6cba <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    6c9e:	9801      	ldr	r0, [sp, #4]
    6ca0:	f012 ffa8 	bl	19bf4 <net_buf_unref>
	if (!cnt) {
    6ca4:	2c00      	cmp	r4, #0
    6ca6:	d1eb      	bne.n	6c80 <bt_read_static_addr+0x50>
    6ca8:	4909      	ldr	r1, [pc, #36]	; (6cd0 <bt_read_static_addr+0xa0>)
    6caa:	4b0a      	ldr	r3, [pc, #40]	; (6cd4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    6cac:	480c      	ldr	r0, [pc, #48]	; (6ce0 <bt_read_static_addr+0xb0>)
    6cae:	1ac9      	subs	r1, r1, r3
    6cb0:	08c9      	lsrs	r1, r1, #3
    6cb2:	0189      	lsls	r1, r1, #6
    6cb4:	f041 0102 	orr.w	r1, r1, #2
    6cb8:	e7cc      	b.n	6c54 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6cba:	fb08 7005 	mla	r0, r8, r5, r7
    6cbe:	2216      	movs	r2, #22
    6cc0:	4631      	mov	r1, r6
    6cc2:	f016 fda1 	bl	1d808 <memcpy>
	for (i = 0; i < cnt; i++) {
    6cc6:	3501      	adds	r5, #1
    6cc8:	e7e7      	b.n	6c9a <bt_read_static_addr+0x6a>
    6cca:	bf00      	nop
    6ccc:	20000000 	.word	0x20000000
    6cd0:	00020094 	.word	0x00020094
    6cd4:	0001ff94 	.word	0x0001ff94
    6cd8:	0002268d 	.word	0x0002268d
    6cdc:	000226b9 	.word	0x000226b9
    6ce0:	000226d9 	.word	0x000226d9

00006ce4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    6ce6:	4d15      	ldr	r5, [pc, #84]	; (6d3c <bt_setup_random_id_addr+0x58>)
    6ce8:	79ec      	ldrb	r4, [r5, #7]
{
    6cea:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    6cec:	b9f4      	cbnz	r4, 6d2c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6cee:	2101      	movs	r1, #1
    6cf0:	a802      	add	r0, sp, #8
    6cf2:	f7ff ff9d 	bl	6c30 <bt_read_static_addr>
    6cf6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    6cf8:	b1c0      	cbz	r0, 6d2c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6cfa:	2716      	movs	r7, #22
    6cfc:	b2e6      	uxtb	r6, r4
    6cfe:	ab02      	add	r3, sp, #8
    6d00:	2206      	movs	r2, #6
    6d02:	fb07 3106 	mla	r1, r7, r6, r3
    6d06:	f10d 0001 	add.w	r0, sp, #1
    6d0a:	f016 fd7d 	bl	1d808 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    6d0e:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    6d10:	4669      	mov	r1, sp
    6d12:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    6d14:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6d18:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    6d1a:	f7ff fe97 	bl	6a4c <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6d1e:	79ea      	ldrb	r2, [r5, #7]
    6d20:	b2e3      	uxtb	r3, r4
    6d22:	429a      	cmp	r2, r3
    6d24:	d8ea      	bhi.n	6cfc <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    6d26:	2000      	movs	r0, #0
    6d28:	b009      	add	sp, #36	; 0x24
    6d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    6d2c:	2100      	movs	r1, #0
    6d2e:	4608      	mov	r0, r1
}
    6d30:	b009      	add	sp, #36	; 0x24
    6d32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    6d36:	f7ff bec5 	b.w	6ac4 <bt_id_create>
    6d3a:	bf00      	nop
    6d3c:	20000000 	.word	0x20000000

00006d40 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    6d40:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    6d42:	4c07      	ldr	r4, [pc, #28]	; (6d60 <bt_id_set_create_conn_own_addr+0x20>)
    6d44:	7823      	ldrb	r3, [r4, #0]
    6d46:	2b01      	cmp	r3, #1
{
    6d48:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    6d4a:	d003      	beq.n	6d54 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    6d4c:	7823      	ldrb	r3, [r4, #0]
    6d4e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    6d50:	2000      	movs	r0, #0
}
    6d52:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    6d54:	1c60      	adds	r0, r4, #1
    6d56:	f7ff fe4b 	bl	69f0 <set_random_address>
			if (err) {
    6d5a:	2800      	cmp	r0, #0
    6d5c:	d0f6      	beq.n	6d4c <bt_id_set_create_conn_own_addr+0xc>
    6d5e:	e7f8      	b.n	6d52 <bt_id_set_create_conn_own_addr+0x12>
    6d60:	20000000 	.word	0x20000000

00006d64 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    6d64:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    6d66:	4b10      	ldr	r3, [pc, #64]	; (6da8 <bt_id_set_scan_own_addr+0x44>)
    6d68:	781b      	ldrb	r3, [r3, #0]
    6d6a:	700b      	strb	r3, [r1, #0]
{
    6d6c:	4606      	mov	r6, r0
    6d6e:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    6d70:	f016 ff87 	bl	1dc82 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    6d74:	b9a0      	cbnz	r0, 6da0 <bt_id_set_scan_own_addr+0x3c>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    6d76:	f016 ff90 	bl	1dc9a <bt_id_set_private_addr>
			if (err) {
    6d7a:	4604      	mov	r4, r0
    6d7c:	b170      	cbz	r0, 6d9c <bt_id_set_scan_own_addr+0x38>
				if (active_scan || !is_adv_using_rand_addr()) {
    6d7e:	b986      	cbnz	r6, 6da2 <bt_id_set_scan_own_addr+0x3e>
    6d80:	f016 ff7f 	bl	1dc82 <is_adv_using_rand_addr>
    6d84:	b168      	cbz	r0, 6da2 <bt_id_set_scan_own_addr+0x3e>
    6d86:	4a09      	ldr	r2, [pc, #36]	; (6dac <bt_id_set_scan_own_addr+0x48>)
    6d88:	4b09      	ldr	r3, [pc, #36]	; (6db0 <bt_id_set_scan_own_addr+0x4c>)
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    6d8a:	480a      	ldr	r0, [pc, #40]	; (6db4 <bt_id_set_scan_own_addr+0x50>)
    6d8c:	1ad2      	subs	r2, r2, r3
    6d8e:	08d2      	lsrs	r2, r2, #3
    6d90:	0192      	lsls	r2, r2, #6
    6d92:	f042 0202 	orr.w	r2, r2, #2
    6d96:	4621      	mov	r1, r4
    6d98:	f015 fecc 	bl	1cb34 <log_1>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    6d9c:	2301      	movs	r3, #1
    6d9e:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    6da0:	2400      	movs	r4, #0
}
    6da2:	4620      	mov	r0, r4
    6da4:	bd70      	pop	{r4, r5, r6, pc}
    6da6:	bf00      	nop
    6da8:	20000000 	.word	0x20000000
    6dac:	00020094 	.word	0x00020094
    6db0:	0001ff94 	.word	0x0001ff94
    6db4:	00022702 	.word	0x00022702

00006db8 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    6db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6dbc:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    6dc0:	7806      	ldrb	r6, [r0, #0]
{
    6dc2:	4680      	mov	r8, r0
    6dc4:	460d      	mov	r5, r1
    6dc6:	4691      	mov	r9, r2
    6dc8:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6dca:	d02b      	beq.n	6e24 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    6dcc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6e84 <bt_id_set_adv_own_addr+0xcc>
    6dd0:	b12a      	cbz	r2, 6dde <bt_id_set_adv_own_addr+0x26>
    6dd2:	0688      	lsls	r0, r1, #26
    6dd4:	d503      	bpl.n	6dde <bt_id_set_adv_own_addr+0x26>
    6dd6:	f898 30a0 	ldrb.w	r3, [r8, #160]	; 0xa0
    6dda:	0659      	lsls	r1, r3, #25
    6ddc:	d54f      	bpl.n	6e7e <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6dde:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    6de2:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    6de6:	f818 3003 	ldrb.w	r3, [r8, r3]
    6dea:	2b01      	cmp	r3, #1
    6dec:	d009      	beq.n	6e02 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    6dee:	ebaa 0606 	sub.w	r6, sl, r6
    6df2:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    6df6:	f1b9 0f00 	cmp.w	r9, #0
    6dfa:	d10e      	bne.n	6e1a <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6dfc:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    6dfe:	2400      	movs	r4, #0
    6e00:	e008      	b.n	6e14 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    6e02:	2007      	movs	r0, #7
    6e04:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    6e08:	4440      	add	r0, r8
    6e0a:	f7ff fdf1 	bl	69f0 <set_random_address>
				if (err) {
    6e0e:	4604      	mov	r4, r0
    6e10:	2800      	cmp	r0, #0
    6e12:	d0ec      	beq.n	6dee <bt_id_set_adv_own_addr+0x36>
}
    6e14:	4620      	mov	r0, r4
    6e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    6e1a:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6e1c:	bf48      	it	mi
    6e1e:	f043 0302 	orrmi.w	r3, r3, #2
    6e22:	e7eb      	b.n	6dfc <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    6e24:	f011 0504 	ands.w	r5, r1, #4
    6e28:	d014      	beq.n	6e54 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6e2a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 6e84 <bt_id_set_adv_own_addr+0xcc>
    6e2e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    6e32:	00f5      	lsls	r5, r6, #3
    6e34:	f818 3003 	ldrb.w	r3, [r8, r3]
    6e38:	2b01      	cmp	r3, #1
    6e3a:	d106      	bne.n	6e4a <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    6e3c:	2007      	movs	r0, #7
    6e3e:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    6e42:	4440      	add	r0, r8
    6e44:	f7ff fdd4 	bl	69f0 <set_random_address>
    6e48:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    6e4a:	1bad      	subs	r5, r5, r6
    6e4c:	f818 3005 	ldrb.w	r3, [r8, r5]
    6e50:	703b      	strb	r3, [r7, #0]
    6e52:	e7df      	b.n	6e14 <bt_id_set_adv_own_addr+0x5c>
    6e54:	480c      	ldr	r0, [pc, #48]	; (6e88 <bt_id_set_adv_own_addr+0xd0>)
    6e56:	f016 ff0e 	bl	1dc76 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    6e5a:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    6e5c:	f3c0 1640 	ubfx	r6, r0, #5, #1
    6e60:	d502      	bpl.n	6e68 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    6e62:	4628      	mov	r0, r5
    6e64:	f017 f836 	bl	1ded4 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    6e68:	4640      	mov	r0, r8
    6e6a:	f016 ff28 	bl	1dcbe <bt_id_set_adv_private_addr>
    6e6e:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    6e70:	2001      	movs	r0, #1
    6e72:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    6e74:	2e00      	cmp	r6, #0
    6e76:	d0cd      	beq.n	6e14 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    6e78:	f017 f82c 	bl	1ded4 <bt_le_scan_set_enable>
		if (err) {
    6e7c:	e7ca      	b.n	6e14 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    6e7e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6e82:	e7c7      	b.n	6e14 <bt_id_set_adv_own_addr+0x5c>
    6e84:	20000000 	.word	0x20000000
    6e88:	20000098 	.word	0x20000098

00006e8c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    6e8c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    6e8e:	4d14      	ldr	r5, [pc, #80]	; (6ee0 <bt_id_init+0x54>)
    6e90:	79eb      	ldrb	r3, [r5, #7]
    6e92:	b113      	cbz	r3, 6e9a <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    6e94:	2400      	movs	r4, #0
}
    6e96:	4620      	mov	r0, r4
    6e98:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    6e9a:	f7ff feb9 	bl	6c10 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    6e9e:	79eb      	ldrb	r3, [r5, #7]
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d1f7      	bne.n	6e94 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    6ea4:	f7ff ff1e 	bl	6ce4 <bt_setup_random_id_addr>
		if (err) {
    6ea8:	4604      	mov	r4, r0
    6eaa:	b150      	cbz	r0, 6ec2 <bt_id_init+0x36>
    6eac:	490d      	ldr	r1, [pc, #52]	; (6ee4 <bt_id_init+0x58>)
    6eae:	4b0e      	ldr	r3, [pc, #56]	; (6ee8 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    6eb0:	480e      	ldr	r0, [pc, #56]	; (6eec <bt_id_init+0x60>)
    6eb2:	1ac9      	subs	r1, r1, r3
    6eb4:	08c9      	lsrs	r1, r1, #3
    6eb6:	0189      	lsls	r1, r1, #6
    6eb8:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    6ebc:	f015 fe2d 	bl	1cb1a <log_0>
			return err;
    6ec0:	e7e9      	b.n	6e96 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    6ec2:	1c68      	adds	r0, r5, #1
    6ec4:	f7ff fd94 	bl	69f0 <set_random_address>
		if (err) {
    6ec8:	4604      	mov	r4, r0
    6eca:	2800      	cmp	r0, #0
    6ecc:	d0e3      	beq.n	6e96 <bt_id_init+0xa>
    6ece:	4905      	ldr	r1, [pc, #20]	; (6ee4 <bt_id_init+0x58>)
    6ed0:	4b05      	ldr	r3, [pc, #20]	; (6ee8 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    6ed2:	4807      	ldr	r0, [pc, #28]	; (6ef0 <bt_id_init+0x64>)
    6ed4:	1ac9      	subs	r1, r1, r3
    6ed6:	08c9      	lsrs	r1, r1, #3
    6ed8:	0189      	lsls	r1, r1, #6
    6eda:	f041 0101 	orr.w	r1, r1, #1
    6ede:	e7ed      	b.n	6ebc <bt_id_init+0x30>
    6ee0:	20000000 	.word	0x20000000
    6ee4:	00020094 	.word	0x00020094
    6ee8:	0001ff94 	.word	0x0001ff94
    6eec:	00022738 	.word	0x00022738
    6ef0:	00022757 	.word	0x00022757

00006ef4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6ef4:	6843      	ldr	r3, [r0, #4]
{
    6ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6ef8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6efa:	0558      	lsls	r0, r3, #21
    6efc:	d502      	bpl.n	6f04 <valid_adv_param+0x10>
		return false;
    6efe:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    6f00:	b003      	add	sp, #12
    6f02:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6f04:	6922      	ldr	r2, [r4, #16]
    6f06:	b10a      	cbz	r2, 6f0c <valid_adv_param+0x18>
    6f08:	07d9      	lsls	r1, r3, #31
    6f0a:	d5f8      	bpl.n	6efe <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    6f0c:	4d1a      	ldr	r5, [pc, #104]	; (6f78 <valid_adv_param+0x84>)
    6f0e:	7820      	ldrb	r0, [r4, #0]
    6f10:	79eb      	ldrb	r3, [r5, #7]
    6f12:	4283      	cmp	r3, r0
    6f14:	d9f3      	bls.n	6efe <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    6f16:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6f1a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6f1c:	2207      	movs	r2, #7
    6f1e:	4669      	mov	r1, sp
    6f20:	4428      	add	r0, r5
    6f22:	9300      	str	r3, [sp, #0]
    6f24:	f8cd 3003 	str.w	r3, [sp, #3]
    6f28:	f016 fc5d 	bl	1d7e6 <memcmp>
	if (param->id >= bt_dev.id_count ||
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d0e6      	beq.n	6efe <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6f30:	6860      	ldr	r0, [r4, #4]
    6f32:	07c2      	lsls	r2, r0, #31
    6f34:	d406      	bmi.n	6f44 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    6f36:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    6f3a:	2b08      	cmp	r3, #8
    6f3c:	d802      	bhi.n	6f44 <valid_adv_param+0x50>
    6f3e:	68a3      	ldr	r3, [r4, #8]
    6f40:	2b9f      	cmp	r3, #159	; 0x9f
    6f42:	d9dc      	bls.n	6efe <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    6f44:	f010 0f30 	tst.w	r0, #48	; 0x30
    6f48:	d002      	beq.n	6f50 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    6f4a:	6923      	ldr	r3, [r4, #16]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d0d6      	beq.n	6efe <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    6f50:	06c3      	lsls	r3, r0, #27
    6f52:	d401      	bmi.n	6f58 <valid_adv_param+0x64>
    6f54:	6923      	ldr	r3, [r4, #16]
    6f56:	b943      	cbnz	r3, 6f6a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    6f58:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    6f5c:	429a      	cmp	r2, r3
    6f5e:	d8ce      	bhi.n	6efe <valid_adv_param+0xa>
    6f60:	2a1f      	cmp	r2, #31
    6f62:	d9cc      	bls.n	6efe <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    6f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6f68:	d8c9      	bhi.n	6efe <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    6f6a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    6f6e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    6f72:	bf18      	it	ne
    6f74:	2001      	movne	r0, #1
    6f76:	e7c3      	b.n	6f00 <valid_adv_param+0xc>
    6f78:	20000000 	.word	0x20000000

00006f7c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    6f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f80:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6f82:	2120      	movs	r1, #32
{
    6f84:	4682      	mov	sl, r0
    6f86:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6f88:	f7fe fbb6 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    6f8c:	4606      	mov	r6, r0
    6f8e:	2800      	cmp	r0, #0
    6f90:	d05c      	beq.n	704c <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    6f92:	2120      	movs	r1, #32
    6f94:	3008      	adds	r0, #8
    6f96:	f017 ffd2 	bl	1ef3e <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    6f9a:	2220      	movs	r2, #32
    6f9c:	2100      	movs	r1, #0
    6f9e:	4681      	mov	r9, r0
    6fa0:	f016 fc5d 	bl	1d85e <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    6fa4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    6fa8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    6fac:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    6fae:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    6fb0:	f8d4 8000 	ldr.w	r8, [r4]
    6fb4:	2300      	movs	r3, #0
    6fb6:	6862      	ldr	r2, [r4, #4]
    6fb8:	4293      	cmp	r3, r2
    6fba:	d30d      	bcc.n	6fd8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    6fbc:	9b00      	ldr	r3, [sp, #0]
    6fbe:	3408      	adds	r4, #8
    6fc0:	429c      	cmp	r4, r3
    6fc2:	d1f5      	bne.n	6fb0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    6fc4:	2200      	movs	r2, #0
    6fc6:	4631      	mov	r1, r6
    6fc8:	4650      	mov	r0, sl
	*data_len = set_data_len;
    6fca:	f889 5000 	strb.w	r5, [r9]
}
    6fce:	b003      	add	sp, #12
    6fd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    6fd4:	f7fe bbca 	b.w	576c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    6fd8:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    6fdc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    6fe0:	1ca8      	adds	r0, r5, #2
    6fe2:	1881      	adds	r1, r0, r2
    6fe4:	291f      	cmp	r1, #31
    6fe6:	d91a      	bls.n	701e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    6fe8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    6fec:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    6ff0:	d101      	bne.n	6ff6 <hci_set_ad+0x7a>
    6ff2:	2a00      	cmp	r2, #0
    6ff4:	dc11      	bgt.n	701a <hci_set_ad+0x9e>
    6ff6:	4b17      	ldr	r3, [pc, #92]	; (7054 <hci_set_ad+0xd8>)
    6ff8:	4917      	ldr	r1, [pc, #92]	; (7058 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    6ffa:	4818      	ldr	r0, [pc, #96]	; (705c <hci_set_ad+0xe0>)
    6ffc:	1ac9      	subs	r1, r1, r3
    6ffe:	08c9      	lsrs	r1, r1, #3
    7000:	0189      	lsls	r1, r1, #6
    7002:	f041 0101 	orr.w	r1, r1, #1
    7006:	f015 fd88 	bl	1cb1a <log_0>
		net_buf_unref(buf);
    700a:	4630      	mov	r0, r6
    700c:	f012 fdf2 	bl	19bf4 <net_buf_unref>
					return -EINVAL;
    7010:	f06f 0015 	mvn.w	r0, #21
}
    7014:	b003      	add	sp, #12
    7016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    701a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    701e:	b2d7      	uxtb	r7, r2
    7020:	1c79      	adds	r1, r7, #1
    7022:	f80b 1005 	strb.w	r1, [fp, r5]
    7026:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    7028:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    702a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    702e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    7032:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7036:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    7038:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    703a:	f016 fbe5 	bl	1d808 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    703e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    7040:	443d      	add	r5, r7
    7042:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    7044:	3301      	adds	r3, #1
    7046:	f108 0808 	add.w	r8, r8, #8
    704a:	e7b4      	b.n	6fb6 <hci_set_ad+0x3a>
		return -ENOBUFS;
    704c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7050:	e7e0      	b.n	7014 <hci_set_ad+0x98>
    7052:	bf00      	nop
    7054:	0001ff94 	.word	0x0001ff94
    7058:	0001ff94 	.word	0x0001ff94
    705c:	0002277a 	.word	0x0002277a

00007060 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7060:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    7062:	4606      	mov	r6, r0
    7064:	4b1e      	ldr	r3, [pc, #120]	; (70e0 <le_adv_start_add_conn+0x80>)
    7066:	f816 2b09 	ldrb.w	r2, [r6], #9
    706a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
    706e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7070:	2300      	movs	r3, #0
{
    7072:	4605      	mov	r5, r0
    7074:	2207      	movs	r2, #7
    7076:	460f      	mov	r7, r1
    7078:	4630      	mov	r0, r6
    707a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    707c:	9300      	str	r3, [sp, #0]
    707e:	f8cd 3003 	str.w	r3, [sp, #3]
    7082:	f016 fbb0 	bl	1d7e6 <memcmp>
    7086:	782a      	ldrb	r2, [r5, #0]
    7088:	4604      	mov	r4, r0
    708a:	b9a8      	cbnz	r0, 70b8 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    708c:	4b15      	ldr	r3, [pc, #84]	; (70e4 <le_adv_start_add_conn+0x84>)
    708e:	6818      	ldr	r0, [r3, #0]
    7090:	8899      	ldrh	r1, [r3, #4]
    7092:	9002      	str	r0, [sp, #8]
    7094:	799b      	ldrb	r3, [r3, #6]
    7096:	f8ad 100c 	strh.w	r1, [sp, #12]
    709a:	4610      	mov	r0, r2
    709c:	a902      	add	r1, sp, #8
    709e:	f88d 300e 	strb.w	r3, [sp, #14]
    70a2:	f000 fecd 	bl	7e40 <bt_conn_add_le>
		if (!conn) {
    70a6:	4605      	mov	r5, r0
    70a8:	b1b8      	cbz	r0, 70da <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    70aa:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    70ac:	f000 feea 	bl	7e84 <bt_conn_set_state>
	*out_conn = conn;
    70b0:	603d      	str	r5, [r7, #0]
	return 0;
}
    70b2:	4620      	mov	r0, r4
    70b4:	b005      	add	sp, #20
    70b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    70b8:	4631      	mov	r1, r6
    70ba:	4610      	mov	r0, r2
    70bc:	f001 f810 	bl	80e0 <bt_conn_exists_le>
    70c0:	4604      	mov	r4, r0
    70c2:	b938      	cbnz	r0, 70d4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    70c4:	7828      	ldrb	r0, [r5, #0]
    70c6:	4631      	mov	r1, r6
    70c8:	f000 feba 	bl	7e40 <bt_conn_add_le>
	if (!conn) {
    70cc:	4605      	mov	r5, r0
    70ce:	b120      	cbz	r0, 70da <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    70d0:	2105      	movs	r1, #5
    70d2:	e7eb      	b.n	70ac <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    70d4:	f06f 0415 	mvn.w	r4, #21
    70d8:	e7eb      	b.n	70b2 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    70da:	f06f 040b 	mvn.w	r4, #11
    70de:	e7e8      	b.n	70b2 <le_adv_start_add_conn+0x52>
    70e0:	20000000 	.word	0x20000000
    70e4:	000201ce 	.word	0x000201ce

000070e8 <bt_le_adv_lookup_legacy>:
}
    70e8:	4800      	ldr	r0, [pc, #0]	; (70ec <bt_le_adv_lookup_legacy+0x4>)
    70ea:	4770      	bx	lr
    70ec:	20000018 	.word	0x20000018

000070f0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    70f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    70f4:	690e      	ldr	r6, [r1, #16]
{
    70f6:	b08f      	sub	sp, #60	; 0x3c
    70f8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    70fa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    70fc:	ebb6 0b03 	subs.w	fp, r6, r3
{
    7100:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7102:	488f      	ldr	r0, [pc, #572]	; (7340 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
    7104:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    7106:	bf18      	it	ne
    7108:	f04f 0b01 	movne.w	fp, #1
    710c:	f016 fe01 	bl	1dd12 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7110:	0787      	lsls	r7, r0, #30
{
    7112:	460c      	mov	r4, r1
    7114:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7116:	f140 8108 	bpl.w	732a <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    711a:	4608      	mov	r0, r1
    711c:	f7ff feea 	bl	6ef4 <valid_adv_param>
    7120:	b928      	cbnz	r0, 712e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    7122:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    7126:	4658      	mov	r0, fp
    7128:	b00f      	add	sp, #60	; 0x3c
    712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    712e:	4620      	mov	r0, r4
    7130:	f7ff fcba 	bl	6aa8 <bt_id_adv_random_addr_check>
    7134:	4680      	mov	r8, r0
    7136:	2800      	cmp	r0, #0
    7138:	d0f3      	beq.n	7122 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    713a:	f105 0710 	add.w	r7, r5, #16
    713e:	4638      	mov	r0, r7
    7140:	f016 fde7 	bl	1dd12 <atomic_get>
    7144:	f3c0 1180 	ubfx	r1, r0, #6, #1
    7148:	0640      	lsls	r0, r0, #25
    714a:	f100 80f1 	bmi.w	7330 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
    714e:	220f      	movs	r2, #15
    7150:	a80a      	add	r0, sp, #40	; 0x28
    7152:	9105      	str	r1, [sp, #20]
    7154:	f016 fb83 	bl	1d85e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    7158:	68a3      	ldr	r3, [r4, #8]
    715a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    715e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    7160:	68e3      	ldr	r3, [r4, #12]
    7162:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    7166:	f016 fdc5 	bl	1dcf4 <get_adv_channel_map>
	if (adv->id != param->id) {
    716a:	782a      	ldrb	r2, [r5, #0]
    716c:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    716e:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    7170:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    7174:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    7176:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    717a:	d004      	beq.n	7186 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    717c:	4870      	ldr	r0, [pc, #448]	; (7340 <bt_le_adv_start_legacy+0x250>)
    717e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7182:	f016 fdcc 	bl	1dd1e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    7186:	4a6f      	ldr	r2, [pc, #444]	; (7344 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
    7188:	7823      	ldrb	r3, [r4, #0]
    718a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    718c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    7190:	6861      	ldr	r1, [r4, #4]
    7192:	465a      	mov	r2, fp
    7194:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    7198:	4628      	mov	r0, r5
    719a:	f7ff fe0d 	bl	6db8 <bt_id_set_adv_own_addr>
	if (err) {
    719e:	4683      	mov	fp, r0
    71a0:	2800      	cmp	r0, #0
    71a2:	d1c0      	bne.n	7126 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    71a4:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    71a8:	2e00      	cmp	r6, #0
    71aa:	d04d      	beq.n	7248 <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
    71ac:	6921      	ldr	r1, [r4, #16]
    71ae:	2207      	movs	r2, #7
    71b0:	f016 fb2a 	bl	1d808 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    71b4:	6860      	ldr	r0, [r4, #4]
    71b6:	07c1      	lsls	r1, r0, #31
    71b8:	d54f      	bpl.n	725a <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
    71ba:	2e00      	cmp	r6, #0
    71bc:	d04a      	beq.n	7254 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    71be:	f010 0f10 	tst.w	r0, #16
    71c2:	bf14      	ite	ne
    71c4:	2304      	movne	r3, #4
    71c6:	2301      	moveq	r3, #1
    71c8:	6921      	ldr	r1, [r4, #16]
    71ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    71ce:	2207      	movs	r2, #7
    71d0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    71d4:	f016 fb18 	bl	1d808 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    71d8:	210f      	movs	r1, #15
    71da:	f242 0006 	movw	r0, #8198	; 0x2006
    71de:	f7fe fa8b 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    71e2:	4683      	mov	fp, r0
    71e4:	2800      	cmp	r0, #0
    71e6:	f000 80a6 	beq.w	7336 <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    71ea:	220f      	movs	r2, #15
    71ec:	a90a      	add	r1, sp, #40	; 0x28
    71ee:	3008      	adds	r0, #8
    71f0:	f017 feab 	bl	1ef4a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    71f4:	2200      	movs	r2, #0
    71f6:	4659      	mov	r1, fp
    71f8:	f242 0006 	movw	r0, #8198	; 0x2006
    71fc:	f7fe fab6 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    7200:	2800      	cmp	r0, #0
    7202:	f040 809b 	bne.w	733c <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
    7206:	2e00      	cmp	r6, #0
    7208:	d033      	beq.n	7272 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    720a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    720c:	07da      	lsls	r2, r3, #31
    720e:	d444      	bmi.n	729a <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7210:	2101      	movs	r1, #1
    7212:	4628      	mov	r0, r5
    7214:	f016 fe2a 	bl	1de6c <bt_le_adv_set_enable_legacy>
	if (err) {
    7218:	4683      	mov	fp, r0
    721a:	2800      	cmp	r0, #0
    721c:	d07e      	beq.n	731c <bt_le_adv_start_legacy+0x22c>
    721e:	4b4a      	ldr	r3, [pc, #296]	; (7348 <bt_le_adv_start_legacy+0x258>)
    7220:	494a      	ldr	r1, [pc, #296]	; (734c <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
    7222:	484b      	ldr	r0, [pc, #300]	; (7350 <bt_le_adv_start_legacy+0x260>)
    7224:	1ac9      	subs	r1, r1, r3
    7226:	08c9      	lsrs	r1, r1, #3
    7228:	0189      	lsls	r1, r1, #6
    722a:	f041 0101 	orr.w	r1, r1, #1
    722e:	f015 fc74 	bl	1cb1a <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7232:	9807      	ldr	r0, [sp, #28]
    7234:	2800      	cmp	r0, #0
    7236:	f43f af76 	beq.w	7126 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    723a:	2100      	movs	r1, #0
    723c:	f000 fe22 	bl	7e84 <bt_conn_set_state>
			bt_conn_unref(conn);
    7240:	9807      	ldr	r0, [sp, #28]
    7242:	f016 fee2 	bl	1e00a <bt_conn_unref>
    7246:	e76e      	b.n	7126 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7248:	9608      	str	r6, [sp, #32]
    724a:	2207      	movs	r2, #7
    724c:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    7250:	a908      	add	r1, sp, #32
    7252:	e7ad      	b.n	71b0 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
    7254:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    7258:	e7be      	b.n	71d8 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    725a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    725c:	b933      	cbnz	r3, 726c <bt_le_adv_start_legacy+0x17c>
    725e:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    7262:	f1c8 0303 	rsb	r3, r8, #3
    7266:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    726a:	e7b5      	b.n	71d8 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    726c:	f04f 0801 	mov.w	r8, #1
    7270:	e7f7      	b.n	7262 <bt_le_adv_start_legacy+0x172>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
    7272:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    7274:	f3c3 4280 	ubfx	r2, r3, #18, #1
    7278:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    727c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    7280:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7282:	9203      	str	r2, [sp, #12]
    7284:	9300      	str	r3, [sp, #0]
    7286:	4652      	mov	r2, sl
    7288:	9b18      	ldr	r3, [sp, #96]	; 0x60
    728a:	4649      	mov	r1, r9
    728c:	4628      	mov	r0, r5
    728e:	f016 fd6c 	bl	1dd6a <le_adv_update.constprop.0>
		if (err) {
    7292:	4683      	mov	fp, r0
    7294:	2800      	cmp	r0, #0
    7296:	d0b8      	beq.n	720a <bt_le_adv_start_legacy+0x11a>
    7298:	e745      	b.n	7126 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    729a:	a907      	add	r1, sp, #28
    729c:	4628      	mov	r0, r5
    729e:	f7ff fedf 	bl	7060 <le_adv_start_add_conn>
		if (err) {
    72a2:	4683      	mov	fp, r0
    72a4:	2800      	cmp	r0, #0
    72a6:	d0b3      	beq.n	7210 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
    72a8:	f110 0f0c 	cmn.w	r0, #12
    72ac:	f47f af3b 	bne.w	7126 <bt_le_adv_start_legacy+0x36>
    72b0:	2e00      	cmp	r6, #0
    72b2:	f47f af38 	bne.w	7126 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    72b6:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    72b8:	079b      	lsls	r3, r3, #30
    72ba:	f53f af34 	bmi.w	7126 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    72be:	6860      	ldr	r0, [r4, #4]
    72c0:	f080 0002 	eor.w	r0, r0, #2
    72c4:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    72c8:	f00b 0201 	and.w	r2, fp, #1
    72cc:	210c      	movs	r1, #12
    72ce:	4638      	mov	r0, r7
    72d0:	f016 fd34 	bl	1dd3c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    72d4:	6862      	ldr	r2, [r4, #4]
    72d6:	2107      	movs	r1, #7
    72d8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    72dc:	4638      	mov	r0, r7
    72de:	f016 fd2d 	bl	1dd3c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
    72e2:	6862      	ldr	r2, [r4, #4]
    72e4:	2112      	movs	r1, #18
    72e6:	f3c2 4280 	ubfx	r2, r2, #18, #1
    72ea:	4638      	mov	r0, r7
    72ec:	f016 fd26 	bl	1dd3c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    72f0:	6862      	ldr	r2, [r4, #4]
    72f2:	2108      	movs	r1, #8
    72f4:	f002 0201 	and.w	r2, r2, #1
    72f8:	4638      	mov	r0, r7
    72fa:	f016 fd1f 	bl	1dd3c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    72fe:	4642      	mov	r2, r8
    7300:	2109      	movs	r1, #9
    7302:	4638      	mov	r0, r7
    7304:	f016 fd1a 	bl	1dd3c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7308:	6862      	ldr	r2, [r4, #4]
    730a:	210b      	movs	r1, #11
    730c:	f3c2 0280 	ubfx	r2, r2, #2, #1
    7310:	4638      	mov	r0, r7
    7312:	f016 fd13 	bl	1dd3c <atomic_set_bit_to>
	return 0;
    7316:	f04f 0b00 	mov.w	fp, #0
    731a:	e704      	b.n	7126 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    731c:	9807      	ldr	r0, [sp, #28]
    731e:	b108      	cbz	r0, 7324 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
    7320:	f016 fe73 	bl	1e00a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7324:	2e00      	cmp	r6, #0
    7326:	d1cf      	bne.n	72c8 <bt_le_adv_start_legacy+0x1d8>
    7328:	e7c9      	b.n	72be <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
    732a:	f06f 0b0a 	mvn.w	fp, #10
    732e:	e6fa      	b.n	7126 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    7330:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    7334:	e6f7      	b.n	7126 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    7336:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    733a:	e6f4      	b.n	7126 <bt_le_adv_start_legacy+0x36>
    733c:	4683      	mov	fp, r0
    733e:	e6f2      	b.n	7126 <bt_le_adv_start_legacy+0x36>
    7340:	20000098 	.word	0x20000098
    7344:	20000000 	.word	0x20000000
    7348:	0001ff94 	.word	0x0001ff94
    734c:	0001ff94 	.word	0x0001ff94
    7350:	00022793 	.word	0x00022793

00007354 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7354:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7356:	9c04      	ldr	r4, [sp, #16]
    7358:	e9cd 3400 	strd	r3, r4, [sp]
    735c:	4613      	mov	r3, r2
    735e:	460a      	mov	r2, r1
    7360:	4601      	mov	r1, r0
    7362:	4802      	ldr	r0, [pc, #8]	; (736c <bt_le_adv_start+0x18>)
    7364:	f7ff fec4 	bl	70f0 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    7368:	b002      	add	sp, #8
    736a:	bd10      	pop	{r4, pc}
    736c:	20000018 	.word	0x20000018

00007370 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7372:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7376:	4826      	ldr	r0, [pc, #152]	; (7410 <bt_le_adv_stop+0xa0>)
    7378:	f016 fcd1 	bl	1dd1e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    737c:	4824      	ldr	r0, [pc, #144]	; (7410 <bt_le_adv_stop+0xa0>)
    737e:	f016 fcc8 	bl	1dd12 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7382:	0641      	lsls	r1, r0, #25
    7384:	d403      	bmi.n	738e <bt_le_adv_stop+0x1e>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    7386:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    7388:	4620      	mov	r0, r4
    738a:	b004      	add	sp, #16
    738c:	bd10      	pop	{r4, pc}
    738e:	4820      	ldr	r0, [pc, #128]	; (7410 <bt_le_adv_stop+0xa0>)
    7390:	f016 fcbf 	bl	1dd12 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7394:	05c2      	lsls	r2, r0, #23
    7396:	d521      	bpl.n	73dc <bt_le_adv_stop+0x6c>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7398:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    739a:	481e      	ldr	r0, [pc, #120]	; (7414 <bt_le_adv_stop+0xa4>)
    739c:	9300      	str	r3, [sp, #0]
    739e:	2207      	movs	r2, #7
    73a0:	4669      	mov	r1, sp
    73a2:	f8cd 3003 	str.w	r3, [sp, #3]
    73a6:	f016 fa1e 	bl	1d7e6 <memcmp>
    73aa:	4b1b      	ldr	r3, [pc, #108]	; (7418 <bt_le_adv_stop+0xa8>)
    73ac:	bb60      	cbnz	r0, 7408 <bt_le_adv_stop+0x98>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    73ae:	4a1b      	ldr	r2, [pc, #108]	; (741c <bt_le_adv_stop+0xac>)
    73b0:	8891      	ldrh	r1, [r2, #4]
    73b2:	6810      	ldr	r0, [r2, #0]
    73b4:	7992      	ldrb	r2, [r2, #6]
    73b6:	f8ad 100c 	strh.w	r1, [sp, #12]
    73ba:	f88d 200e 	strb.w	r2, [sp, #14]
    73be:	9002      	str	r0, [sp, #8]
    73c0:	2204      	movs	r2, #4
    73c2:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    73c4:	7e18      	ldrb	r0, [r3, #24]
    73c6:	f000 feb1 	bl	812c <bt_conn_lookup_state_le>
    73ca:	4604      	mov	r4, r0
	if (conn) {
    73cc:	b130      	cbz	r0, 73dc <bt_le_adv_stop+0x6c>
		conn->err = status;
    73ce:	2100      	movs	r1, #0
    73d0:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    73d2:	f000 fd57 	bl	7e84 <bt_conn_set_state>
		bt_conn_unref(conn);
    73d6:	4620      	mov	r0, r4
    73d8:	f016 fe17 	bl	1e00a <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    73dc:	4810      	ldr	r0, [pc, #64]	; (7420 <bt_le_adv_stop+0xb0>)
    73de:	2100      	movs	r1, #0
    73e0:	f016 fd44 	bl	1de6c <bt_le_adv_set_enable_legacy>
		if (err) {
    73e4:	4604      	mov	r4, r0
    73e6:	2800      	cmp	r0, #0
    73e8:	d1ce      	bne.n	7388 <bt_le_adv_stop+0x18>
    73ea:	480e      	ldr	r0, [pc, #56]	; (7424 <bt_le_adv_stop+0xb4>)
    73ec:	f016 fc91 	bl	1dd12 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    73f0:	0683      	lsls	r3, r0, #26
    73f2:	d5c8      	bpl.n	7386 <bt_le_adv_stop+0x16>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    73f4:	4620      	mov	r0, r4
    73f6:	f016 fd6d 	bl	1ded4 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    73fa:	4620      	mov	r0, r4
    73fc:	f016 fc4d 	bl	1dc9a <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7400:	2001      	movs	r0, #1
    7402:	f016 fd67 	bl	1ded4 <bt_le_scan_set_enable>
    7406:	e7bf      	b.n	7388 <bt_le_adv_stop+0x18>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7408:	2205      	movs	r2, #5
    740a:	f103 0121 	add.w	r1, r3, #33	; 0x21
    740e:	e7d9      	b.n	73c4 <bt_le_adv_stop+0x54>
    7410:	20000028 	.word	0x20000028
    7414:	20000021 	.word	0x20000021
    7418:	20000000 	.word	0x20000000
    741c:	000201ce 	.word	0x000201ce
    7420:	20000018 	.word	0x20000018
    7424:	20000098 	.word	0x20000098

00007428 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    7428:	b537      	push	{r0, r1, r2, r4, r5, lr}
    742a:	481e      	ldr	r0, [pc, #120]	; (74a4 <bt_le_adv_resume+0x7c>)
    742c:	4c1d      	ldr	r4, [pc, #116]	; (74a4 <bt_le_adv_resume+0x7c>)
    742e:	f016 fc70 	bl	1dd12 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    7432:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    7436:	d032      	beq.n	749e <bt_le_adv_resume+0x76>
    7438:	4620      	mov	r0, r4
    743a:	f016 fc6a 	bl	1dd12 <atomic_get>
    743e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7440:	f3c0 1580 	ubfx	r5, r0, #6, #1
    7444:	d42b      	bmi.n	749e <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7446:	4620      	mov	r0, r4
    7448:	f016 fc63 	bl	1dd12 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    744c:	05c3      	lsls	r3, r0, #23
    744e:	d526      	bpl.n	749e <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7450:	a901      	add	r1, sp, #4
    7452:	f1a4 0010 	sub.w	r0, r4, #16
    7456:	f7ff fe03 	bl	7060 <le_adv_start_add_conn>
	if (err) {
    745a:	bb00      	cbnz	r0, 749e <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    745c:	2101      	movs	r1, #1
    745e:	f1a4 0010 	sub.w	r0, r4, #16
    7462:	f016 fd03 	bl	1de6c <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    7466:	b150      	cbz	r0, 747e <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7468:	4629      	mov	r1, r5
    746a:	9801      	ldr	r0, [sp, #4]
    746c:	f000 fd0a 	bl	7e84 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7470:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7474:	4620      	mov	r0, r4
    7476:	f016 fc52 	bl	1dd1e <atomic_and>
	return (old & mask) != 0;
    747a:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    747e:	9801      	ldr	r0, [sp, #4]
    7480:	f016 fdc3 	bl	1e00a <bt_conn_unref>
	if (persist_paused) {
    7484:	b15d      	cbz	r5, 749e <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7486:	f3bf 8f5b 	dmb	ish
    748a:	e854 3f00 	ldrex	r3, [r4]
    748e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7492:	e844 3200 	strex	r2, r3, [r4]
    7496:	2a00      	cmp	r2, #0
    7498:	d1f7      	bne.n	748a <bt_le_adv_resume+0x62>
    749a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    749e:	b003      	add	sp, #12
    74a0:	bd30      	pop	{r4, r5, pc}
    74a2:	bf00      	nop
    74a4:	20000028 	.word	0x20000028

000074a8 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74a8:	4b03      	ldr	r3, [pc, #12]	; (74b8 <atomic_get.constprop.0+0x10>)
    74aa:	f3bf 8f5b 	dmb	ish
    74ae:	6818      	ldr	r0, [r3, #0]
    74b0:	f3bf 8f5b 	dmb	ish
}
    74b4:	4770      	bx	lr
    74b6:	bf00      	nop
    74b8:	20000098 	.word	0x20000098

000074bc <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    74bc:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    74be:	2102      	movs	r1, #2
{
    74c0:	b087      	sub	sp, #28
    74c2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    74c4:	f242 000c 	movw	r0, #8204	; 0x200c
    74c8:	f7fe f916 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    74cc:	4605      	mov	r5, r0
    74ce:	b308      	cbz	r0, 7514 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    74d0:	2102      	movs	r1, #2
    74d2:	3008      	adds	r0, #8
    74d4:	f017 fd33 	bl	1ef3e <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    74d8:	2c01      	cmp	r4, #1
    74da:	4602      	mov	r2, r0
    74dc:	d117      	bne.n	750e <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    74de:	f7ff ffe3 	bl	74a8 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    74e2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    74e6:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    74e8:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    74ea:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    74ec:	425c      	negs	r4, r3
    74ee:	415c      	adcs	r4, r3
    74f0:	4a0a      	ldr	r2, [pc, #40]	; (751c <bt_le_scan_set_enable_legacy+0x60>)
    74f2:	9400      	str	r4, [sp, #0]
    74f4:	a903      	add	r1, sp, #12
    74f6:	4628      	mov	r0, r5
    74f8:	2305      	movs	r3, #5
    74fa:	f7fe f8eb 	bl	56d4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    74fe:	2200      	movs	r2, #0
    7500:	4629      	mov	r1, r5
    7502:	f242 000c 	movw	r0, #8204	; 0x200c
    7506:	f7fe f931 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    750a:	b007      	add	sp, #28
    750c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    750e:	2300      	movs	r3, #0
    7510:	7043      	strb	r3, [r0, #1]
    7512:	e7e9      	b.n	74e8 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    7514:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7518:	e7f7      	b.n	750a <bt_le_scan_set_enable_legacy+0x4e>
    751a:	bf00      	nop
    751c:	20000098 	.word	0x20000098

00007520 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    7520:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7522:	4605      	mov	r5, r0
    7524:	4614      	mov	r4, r2
    7526:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    7528:	2207      	movs	r2, #7
    752a:	2100      	movs	r1, #0
    752c:	4668      	mov	r0, sp
    752e:	f016 f996 	bl	1d85e <memset>

	if (IS_ENABLED(CONFIG_BT_WHITELIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_WL)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_USE_WHITELIST;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    7532:	2300      	movs	r3, #0
    7534:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    7538:	1e6b      	subs	r3, r5, #1
    753a:	4258      	negs	r0, r3
    753c:	f10d 0105 	add.w	r1, sp, #5
    7540:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    7542:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    7546:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    754a:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    754e:	f7ff fc09 	bl	6d64 <bt_id_set_scan_own_addr>
	if (err) {
    7552:	4604      	mov	r4, r0
    7554:	bb38      	cbnz	r0, 75a6 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    7556:	2107      	movs	r1, #7
    7558:	f242 000b 	movw	r0, #8203	; 0x200b
    755c:	f7fe f8cc 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
    7560:	4606      	mov	r6, r0
    7562:	b348      	cbz	r0, 75b8 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7564:	2207      	movs	r2, #7
    7566:	4669      	mov	r1, sp
    7568:	3008      	adds	r0, #8
    756a:	f017 fcee 	bl	1ef4a <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    756e:	4622      	mov	r2, r4
    7570:	4631      	mov	r1, r6
    7572:	f242 000b 	movw	r0, #8203	; 0x200b
    7576:	f7fe f8f9 	bl	576c <bt_hci_cmd_send_sync>
	if (err) {
    757a:	4604      	mov	r4, r0
    757c:	b998      	cbnz	r0, 75a6 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    757e:	2001      	movs	r0, #1
    7580:	f7ff ff9c 	bl	74bc <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    7584:	4604      	mov	r4, r0
    7586:	b970      	cbnz	r0, 75a6 <start_le_scan_legacy+0x86>
	if (val) {
    7588:	2d01      	cmp	r5, #1
    758a:	d10f      	bne.n	75ac <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    758c:	f3bf 8f5b 	dmb	ish
    7590:	4b0b      	ldr	r3, [pc, #44]	; (75c0 <start_le_scan_legacy+0xa0>)
    7592:	e853 2f00 	ldrex	r2, [r3]
    7596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    759a:	e843 2100 	strex	r1, r2, [r3]
    759e:	2900      	cmp	r1, #0
    75a0:	d1f7      	bne.n	7592 <start_le_scan_legacy+0x72>
    75a2:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    75a6:	4620      	mov	r0, r4
    75a8:	b002      	add	sp, #8
    75aa:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    75ac:	f06f 0180 	mvn.w	r1, #128	; 0x80
    75b0:	4803      	ldr	r0, [pc, #12]	; (75c0 <start_le_scan_legacy+0xa0>)
    75b2:	f016 fc80 	bl	1deb6 <atomic_and>
    75b6:	e7f6      	b.n	75a6 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    75b8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    75bc:	e7f3      	b.n	75a6 <start_le_scan_legacy+0x86>
    75be:	bf00      	nop
    75c0:	20000098 	.word	0x20000098

000075c4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    75c4:	4b01      	ldr	r3, [pc, #4]	; (75cc <bt_scan_reset+0x8>)
    75c6:	2200      	movs	r2, #0
    75c8:	601a      	str	r2, [r3, #0]
}
    75ca:	4770      	bx	lr
    75cc:	200012d4 	.word	0x200012d4

000075d0 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    75d0:	b538      	push	{r3, r4, r5, lr}
    75d2:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    75d4:	f7ff ff68 	bl	74a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    75d8:	0641      	lsls	r1, r0, #25
    75da:	f3c0 1280 	ubfx	r2, r0, #6, #1
    75de:	d501      	bpl.n	75e4 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    75e0:	2000      	movs	r0, #0
    75e2:	e031      	b.n	7648 <bt_le_scan_update+0x78>
    75e4:	f7ff ff60 	bl	74a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    75e8:	0683      	lsls	r3, r0, #26
    75ea:	d428      	bmi.n	763e <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    75ec:	2100      	movs	r1, #0
    75ee:	2206      	movs	r2, #6
    75f0:	4608      	mov	r0, r1
    75f2:	f000 fd9b 	bl	812c <bt_conn_lookup_state_le>
		if (conn) {
    75f6:	4604      	mov	r4, r0
    75f8:	bb38      	cbnz	r0, 764a <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    75fa:	2202      	movs	r2, #2
    75fc:	4601      	mov	r1, r0
    75fe:	f000 fd95 	bl	812c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    7602:	2800      	cmp	r0, #0
    7604:	d0ec      	beq.n	75e0 <bt_le_scan_update+0x10>
    7606:	f3bf 8f5b 	dmb	ish
    760a:	4b11      	ldr	r3, [pc, #68]	; (7650 <bt_le_scan_update+0x80>)
    760c:	e853 2f00 	ldrex	r2, [r3]
    7610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    7614:	e843 2100 	strex	r1, r2, [r3]
    7618:	2900      	cmp	r1, #0
    761a:	d1f7      	bne.n	760c <bt_le_scan_update+0x3c>
    761c:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    7620:	f016 fcf3 	bl	1e00a <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    7624:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7626:	4620      	mov	r0, r4
    7628:	bf18      	it	ne
    762a:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    762c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7630:	bf0a      	itet	eq
    7632:	2212      	moveq	r2, #18
    7634:	2160      	movne	r1, #96	; 0x60
    7636:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    763a:	f7ff bf71 	b.w	7520 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    763e:	4610      	mov	r0, r2
    7640:	f7ff ff3c 	bl	74bc <bt_le_scan_set_enable_legacy>
		if (err) {
    7644:	2800      	cmp	r0, #0
    7646:	d0d1      	beq.n	75ec <bt_le_scan_update+0x1c>
}
    7648:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    764a:	f016 fcde 	bl	1e00a <bt_conn_unref>
    764e:	e7c7      	b.n	75e0 <bt_le_scan_update+0x10>
    7650:	20000098 	.word	0x20000098

00007654 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    7654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    7658:	f100 0708 	add.w	r7, r0, #8
    765c:	b08d      	sub	sp, #52	; 0x34
    765e:	4604      	mov	r4, r0
    7660:	4638      	mov	r0, r7
    7662:	f017 fc9b 	bl	1ef9c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7666:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 7840 <bt_hci_le_adv_report+0x1ec>
    766a:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    766c:	9b01      	ldr	r3, [sp, #4]
    766e:	b913      	cbnz	r3, 7676 <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    7670:	b00d      	add	sp, #52	; 0x34
    7672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    7676:	89a3      	ldrh	r3, [r4, #12]
    7678:	2b08      	cmp	r3, #8
    767a:	d80c      	bhi.n	7696 <bt_hci_le_adv_report+0x42>
    767c:	4b71      	ldr	r3, [pc, #452]	; (7844 <bt_hci_le_adv_report+0x1f0>)
    767e:	4972      	ldr	r1, [pc, #456]	; (7848 <bt_hci_le_adv_report+0x1f4>)
			BT_ERR("Unexpected end of buffer");
    7680:	4872      	ldr	r0, [pc, #456]	; (784c <bt_hci_le_adv_report+0x1f8>)
    7682:	1ac9      	subs	r1, r1, r3
    7684:	08c9      	lsrs	r1, r1, #3
    7686:	0189      	lsls	r1, r1, #6
    7688:	f041 0101 	orr.w	r1, r1, #1
}
    768c:	b00d      	add	sp, #52	; 0x34
    768e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    7692:	f015 ba42 	b.w	1cb1a <log_0>
	return net_buf_simple_pull_mem(&buf->b, len);
    7696:	2109      	movs	r1, #9
    7698:	4638      	mov	r0, r7
    769a:	f017 fc77 	bl	1ef8c <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    769e:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    76a2:	237f      	movs	r3, #127	; 0x7f
    76a4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    76a8:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    76ac:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    76ae:	7a5b      	ldrb	r3, [r3, #9]
    76b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    76b4:	23ff      	movs	r3, #255	; 0xff
    76b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    76ba:	2300      	movs	r3, #0
    76bc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    76c0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    76c4:	7802      	ldrb	r2, [r0, #0]
    76c6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    76ca:	2a04      	cmp	r2, #4
    76cc:	bf9c      	itt	ls
    76ce:	4b60      	ldrls	r3, [pc, #384]	; (7850 <bt_hci_le_adv_report+0x1fc>)
    76d0:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    76d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    76d6:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    76d8:	f100 0801 	add.w	r8, r0, #1
    76dc:	f7ff fee4 	bl	74a8 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    76e0:	0645      	lsls	r5, r0, #25
    76e2:	d50d      	bpl.n	7700 <bt_hci_le_adv_report+0xac>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    76e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    76e8:	0758      	lsls	r0, r3, #29
    76ea:	d509      	bpl.n	7700 <bt_hci_le_adv_report+0xac>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    76ec:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    76ee:	4638      	mov	r0, r7
    76f0:	3101      	adds	r1, #1
    76f2:	f017 fc43 	bl	1ef7c <net_buf_simple_pull>
    76f6:	9b01      	ldr	r3, [sp, #4]
    76f8:	1e58      	subs	r0, r3, #1
    76fa:	b2c3      	uxtb	r3, r0
    76fc:	9301      	str	r3, [sp, #4]
    76fe:	e7b5      	b.n	766c <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7700:	7873      	ldrb	r3, [r6, #1]
    7702:	1e9a      	subs	r2, r3, #2
    7704:	2a01      	cmp	r2, #1
    7706:	d84d      	bhi.n	77a4 <bt_hci_le_adv_report+0x150>
	memcpy(dst, src, sizeof(*dst));
    7708:	2207      	movs	r2, #7
    770a:	4641      	mov	r1, r8
    770c:	a804      	add	r0, sp, #16
    770e:	f016 f87b 	bl	1d808 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7712:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7716:	3b02      	subs	r3, #2
    7718:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    771c:	ab04      	add	r3, sp, #16
    771e:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    7720:	f8da 3000 	ldr.w	r3, [sl]
    7724:	b1a3      	cbz	r3, 7750 <bt_hci_le_adv_report+0xfc>
	state->offset = net_buf_simple_headroom(buf);
    7726:	4638      	mov	r0, r7
    7728:	f017 fc48 	bl	1efbc <net_buf_simple_headroom>
	state->len = buf->len;
    772c:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    772e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    7732:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    7736:	f8da c000 	ldr.w	ip, [sl]
		buf->len = len;
    773a:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    773e:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7740:	463b      	mov	r3, r7
    7742:	a804      	add	r0, sp, #16
    7744:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    7746:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7748:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    774a:	fa10 f08b 	uxtah	r0, r0, fp
    774e:	60a0      	str	r0, [r4, #8]
	return list->head;
    7750:	4b40      	ldr	r3, [pc, #256]	; (7854 <bt_hci_le_adv_report+0x200>)
    7752:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7754:	2b00      	cmp	r3, #0
    7756:	d038      	beq.n	77ca <bt_hci_le_adv_report+0x176>
    7758:	f1b3 0208 	subs.w	r2, r3, #8
    775c:	d035      	beq.n	77ca <bt_hci_le_adv_report+0x176>
	return node->next;
    775e:	681d      	ldr	r5, [r3, #0]
    7760:	b105      	cbz	r5, 7764 <bt_hci_le_adv_report+0x110>
    7762:	3d08      	subs	r5, #8
		if (listener->recv) {
    7764:	6813      	ldr	r3, [r2, #0]
    7766:	9203      	str	r2, [sp, #12]
    7768:	b193      	cbz	r3, 7790 <bt_hci_le_adv_report+0x13c>
	state->offset = net_buf_simple_headroom(buf);
    776a:	4638      	mov	r0, r7
    776c:	f017 fc26 	bl	1efbc <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    7770:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
    7772:	89a3      	ldrh	r3, [r4, #12]
    7774:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    7776:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    777a:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
    777c:	4639      	mov	r1, r7
    777e:	a808      	add	r0, sp, #32
	state->len = buf->len;
    7780:	9302      	str	r3, [sp, #8]
    7782:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    7784:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7786:	9b02      	ldr	r3, [sp, #8]
    7788:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    778a:	fa10 f08b 	uxtah	r0, r0, fp
    778e:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7790:	b1dd      	cbz	r5, 77ca <bt_hci_le_adv_report+0x176>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7792:	f115 0308 	adds.w	r3, r5, #8
    7796:	d002      	beq.n	779e <bt_hci_le_adv_report+0x14a>
	return node->next;
    7798:	68ab      	ldr	r3, [r5, #8]
    779a:	b103      	cbz	r3, 779e <bt_hci_le_adv_report+0x14a>
    779c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    779e:	462a      	mov	r2, r5
    77a0:	461d      	mov	r5, r3
    77a2:	e7df      	b.n	7764 <bt_hci_le_adv_report+0x110>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    77a4:	2bff      	cmp	r3, #255	; 0xff
    77a6:	d109      	bne.n	77bc <bt_hci_le_adv_report+0x168>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    77a8:	2300      	movs	r3, #0
    77aa:	9306      	str	r3, [sp, #24]
    77ac:	2207      	movs	r2, #7
    77ae:	f8cd 301b 	str.w	r3, [sp, #27]
    77b2:	a906      	add	r1, sp, #24
    77b4:	a804      	add	r0, sp, #16
    77b6:	f016 f827 	bl	1d808 <memcpy>
}
    77ba:	e7af      	b.n	771c <bt_hci_le_adv_report+0xc8>
		bt_addr_le_copy(&id_addr,
    77bc:	4641      	mov	r1, r8
    77be:	2000      	movs	r0, #0
    77c0:	f016 fa69 	bl	1dc96 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    77c4:	2207      	movs	r2, #7
    77c6:	4601      	mov	r1, r0
    77c8:	e7f4      	b.n	77b4 <bt_hci_le_adv_report+0x160>
	check_pending_conn(&id_addr, addr, info->adv_props);
    77ca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    77ce:	f7ff fe6b 	bl	74a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    77d2:	0641      	lsls	r1, r0, #25
    77d4:	f3c0 1980 	ubfx	r9, r0, #6, #1
    77d8:	d488      	bmi.n	76ec <bt_hci_le_adv_report+0x98>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    77da:	07d2      	lsls	r2, r2, #31
    77dc:	d586      	bpl.n	76ec <bt_hci_le_adv_report+0x98>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    77de:	2202      	movs	r2, #2
    77e0:	a904      	add	r1, sp, #16
    77e2:	4648      	mov	r0, r9
    77e4:	f000 fca2 	bl	812c <bt_conn_lookup_state_le>
	if (!conn) {
    77e8:	4605      	mov	r5, r0
    77ea:	2800      	cmp	r0, #0
    77ec:	f43f af7e 	beq.w	76ec <bt_hci_le_adv_report+0x98>
    77f0:	f7ff fe5a 	bl	74a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    77f4:	0683      	lsls	r3, r0, #26
    77f6:	d411      	bmi.n	781c <bt_hci_le_adv_report+0x1c8>
    77f8:	2207      	movs	r2, #7
    77fa:	4641      	mov	r1, r8
    77fc:	f105 0096 	add.w	r0, r5, #150	; 0x96
    7800:	f016 f802 	bl	1d808 <memcpy>
	if (bt_le_create_conn(conn)) {
    7804:	4628      	mov	r0, r5
    7806:	f016 f941 	bl	1da8c <bt_le_create_conn>
    780a:	b960      	cbnz	r0, 7826 <bt_hci_le_adv_report+0x1d2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    780c:	4628      	mov	r0, r5
    780e:	2106      	movs	r1, #6
    7810:	f000 fb38 	bl	7e84 <bt_conn_set_state>
	bt_conn_unref(conn);
    7814:	4628      	mov	r0, r5
    7816:	f016 fbf8 	bl	1e00a <bt_conn_unref>
	return;
    781a:	e767      	b.n	76ec <bt_hci_le_adv_report+0x98>
	return bt_le_scan_set_enable_legacy(enable);
    781c:	4648      	mov	r0, r9
    781e:	f7ff fe4d 	bl	74bc <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    7822:	2800      	cmp	r0, #0
    7824:	d0e8      	beq.n	77f8 <bt_hci_le_adv_report+0x1a4>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    7826:	231f      	movs	r3, #31
    7828:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    782a:	2100      	movs	r1, #0
    782c:	4628      	mov	r0, r5
    782e:	f000 fb29 	bl	7e84 <bt_conn_set_state>
	bt_conn_unref(conn);
    7832:	4628      	mov	r0, r5
    7834:	f016 fbe9 	bl	1e00a <bt_conn_unref>
	bt_le_scan_update(false);
    7838:	2000      	movs	r0, #0
    783a:	f7ff fec9 	bl	75d0 <bt_le_scan_update>
    783e:	e755      	b.n	76ec <bt_hci_le_adv_report+0x98>
    7840:	200012d4 	.word	0x200012d4
    7844:	0001ff94 	.word	0x0001ff94
    7848:	000200ac 	.word	0x000200ac
    784c:	000227b5 	.word	0x000227b5
    7850:	000227d6 	.word	0x000227d6
    7854:	200012cc 	.word	0x200012cc

00007858 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    7858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    785c:	4605      	mov	r5, r0
    785e:	f7ff fe23 	bl	74a8 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7862:	0780      	lsls	r0, r0, #30
{
    7864:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7866:	d56f      	bpl.n	7948 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    7868:	782a      	ldrb	r2, [r5, #0]
    786a:	2a01      	cmp	r2, #1
    786c:	d904      	bls.n	7878 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    786e:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    7872:	4620      	mov	r0, r4
    7874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    7878:	686b      	ldr	r3, [r5, #4]
    787a:	f033 030f 	bics.w	r3, r3, #15
    787e:	d1f6      	bne.n	786e <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    7880:	8928      	ldrh	r0, [r5, #8]
    7882:	1f03      	subs	r3, r0, #4
    7884:	b29b      	uxth	r3, r3
    7886:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    788a:	42a3      	cmp	r3, r4
    788c:	d8ef      	bhi.n	786e <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    788e:	8969      	ldrh	r1, [r5, #10]
    7890:	1f0b      	subs	r3, r1, #4
    7892:	b29b      	uxth	r3, r3
    7894:	42a3      	cmp	r3, r4
    7896:	d8ea      	bhi.n	786e <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    7898:	4288      	cmp	r0, r1
    789a:	d3e8      	bcc.n	786e <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    789c:	b99a      	cbnz	r2, 78c6 <bt_le_scan_start+0x6e>
    789e:	f3bf 8f5b 	dmb	ish
    78a2:	4e2b      	ldr	r6, [pc, #172]	; (7950 <bt_le_scan_start+0xf8>)
    78a4:	e856 0f00 	ldrex	r0, [r6]
    78a8:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    78ac:	e846 3200 	strex	r2, r3, [r6]
    78b0:	2a00      	cmp	r2, #0
    78b2:	d1f7      	bne.n	78a4 <bt_le_scan_start+0x4c>
    78b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    78b8:	f010 0240 	ands.w	r2, r0, #64	; 0x40
    78bc:	46b0      	mov	r8, r6
    78be:	d007      	beq.n	78d0 <bt_le_scan_start+0x78>
		return -EALREADY;
    78c0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    78c4:	e7d5      	b.n	7872 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    78c6:	f016 fa0c 	bl	1dce2 <bt_id_scan_random_addr_check>
    78ca:	2800      	cmp	r0, #0
    78cc:	d1e7      	bne.n	789e <bt_le_scan_start+0x46>
    78ce:	e7ce      	b.n	786e <bt_le_scan_start+0x16>
    78d0:	f7ff fdea 	bl	74a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    78d4:	0681      	lsls	r1, r0, #26
    78d6:	d50a      	bpl.n	78ee <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    78d8:	4610      	mov	r0, r2
    78da:	f7ff fdef 	bl	74bc <bt_le_scan_set_enable_legacy>
		if (err) {
    78de:	4604      	mov	r4, r0
    78e0:	b128      	cbz	r0, 78ee <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    78e2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    78e6:	4630      	mov	r0, r6
    78e8:	f016 fae5 	bl	1deb6 <atomic_and>
		return err;
    78ec:	e7c1      	b.n	7872 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    78ee:	686b      	ldr	r3, [r5, #4]
	if (val) {
    78f0:	07db      	lsls	r3, r3, #31
    78f2:	d515      	bpl.n	7920 <bt_le_scan_start+0xc8>
    78f4:	f3bf 8f5b 	dmb	ish
    78f8:	e858 3f00 	ldrex	r3, [r8]
    78fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7900:	e848 3200 	strex	r2, r3, [r8]
    7904:	2a00      	cmp	r2, #0
    7906:	d1f7      	bne.n	78f8 <bt_le_scan_start+0xa0>
    7908:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    790c:	89ab      	ldrh	r3, [r5, #12]
    790e:	b16b      	cbz	r3, 792c <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7910:	480f      	ldr	r0, [pc, #60]	; (7950 <bt_le_scan_start+0xf8>)
    7912:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7916:	f016 face 	bl	1deb6 <atomic_and>
			return -ENOTSUP;
    791a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    791e:	e7a8      	b.n	7872 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7920:	f46f 7180 	mvn.w	r1, #256	; 0x100
    7924:	480a      	ldr	r0, [pc, #40]	; (7950 <bt_le_scan_start+0xf8>)
    7926:	f016 fac6 	bl	1deb6 <atomic_and>
    792a:	e7ef      	b.n	790c <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    792c:	896a      	ldrh	r2, [r5, #10]
    792e:	8929      	ldrh	r1, [r5, #8]
    7930:	7828      	ldrb	r0, [r5, #0]
    7932:	f7ff fdf5 	bl	7520 <start_le_scan_legacy>
	if (err) {
    7936:	4604      	mov	r4, r0
    7938:	b118      	cbz	r0, 7942 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    793a:	4805      	ldr	r0, [pc, #20]	; (7950 <bt_le_scan_start+0xf8>)
    793c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7940:	e7d2      	b.n	78e8 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    7942:	4b04      	ldr	r3, [pc, #16]	; (7954 <bt_le_scan_start+0xfc>)
    7944:	601f      	str	r7, [r3, #0]
	return 0;
    7946:	e794      	b.n	7872 <bt_le_scan_start+0x1a>
		return -EAGAIN;
    7948:	f06f 040a 	mvn.w	r4, #10
    794c:	e791      	b.n	7872 <bt_le_scan_start+0x1a>
    794e:	bf00      	nop
    7950:	20000098 	.word	0x20000098
    7954:	200012d4 	.word	0x200012d4

00007958 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7958:	2300      	movs	r3, #0
	tx->user_data = NULL;
    795a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    795e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    7960:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7962:	4801      	ldr	r0, [pc, #4]	; (7968 <tx_free+0x10>)
    7964:	f017 bdb3 	b.w	1f4ce <k_queue_append>
    7968:	20000730 	.word	0x20000730

0000796c <notify_connected>:
{
    796c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    796e:	4b09      	ldr	r3, [pc, #36]	; (7994 <notify_connected+0x28>)
    7970:	681d      	ldr	r5, [r3, #0]
{
    7972:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    7974:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    7976:	b92d      	cbnz	r5, 7984 <notify_connected+0x18>
	if (!conn->err) {
    7978:	b951      	cbnz	r1, 7990 <notify_connected+0x24>
		bt_gatt_connected(conn);
    797a:	4620      	mov	r0, r4
}
    797c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    7980:	f002 bbec 	b.w	a15c <bt_gatt_connected>
		if (cb->connected) {
    7984:	682b      	ldr	r3, [r5, #0]
    7986:	b10b      	cbz	r3, 798c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    7988:	4620      	mov	r0, r4
    798a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    798c:	692d      	ldr	r5, [r5, #16]
    798e:	e7f1      	b.n	7974 <notify_connected+0x8>
}
    7990:	bd38      	pop	{r3, r4, r5, pc}
    7992:	bf00      	nop
    7994:	200012d8 	.word	0x200012d8

00007998 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    7998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    799c:	694d      	ldr	r5, [r1, #20]
{
    799e:	4604      	mov	r4, r0
    79a0:	460e      	mov	r6, r1
    79a2:	4691      	mov	r9, r2
    79a4:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    79a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    79aa:	4844      	ldr	r0, [pc, #272]	; (7abc <send_frag+0x124>)
    79ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    79b0:	f013 fc38 	bl	1b224 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    79b4:	7aa3      	ldrb	r3, [r4, #10]
    79b6:	2b07      	cmp	r3, #7
    79b8:	d151      	bne.n	7a5e <send_frag+0xc6>
	__asm__ volatile(
    79ba:	f04f 0320 	mov.w	r3, #32
    79be:	f3ef 8211 	mrs	r2, BASEPRI
    79c2:	f383 8811 	msr	BASEPRI, r3
    79c6:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    79ca:	69a3      	ldr	r3, [r4, #24]
    79cc:	2d00      	cmp	r5, #0
    79ce:	d058      	beq.n	7a82 <send_frag+0xea>
	parent->next = child;
    79d0:	2100      	movs	r1, #0
    79d2:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    79d4:	2b00      	cmp	r3, #0
    79d6:	d151      	bne.n	7a7c <send_frag+0xe4>
	list->head = node;
    79d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    79dc:	f382 8811 	msr	BASEPRI, r2
    79e0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    79e4:	2104      	movs	r1, #4
    79e6:	f106 0008 	add.w	r0, r6, #8
    79ea:	f017 fabf 	bl	1ef6c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    79ee:	8823      	ldrh	r3, [r4, #0]
    79f0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    79f4:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    79f8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    79fa:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    79fe:	3b04      	subs	r3, #4
    7a00:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7a02:	2302      	movs	r3, #2
    7a04:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7a06:	4630      	mov	r0, r6
    7a08:	f7fd ffbe 	bl	5988 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7a0c:	4601      	mov	r1, r0
    7a0e:	2800      	cmp	r0, #0
    7a10:	d051      	beq.n	7ab6 <send_frag+0x11e>
    7a12:	4b2b      	ldr	r3, [pc, #172]	; (7ac0 <send_frag+0x128>)
    7a14:	4a2b      	ldr	r2, [pc, #172]	; (7ac4 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    7a16:	482c      	ldr	r0, [pc, #176]	; (7ac8 <send_frag+0x130>)
    7a18:	1ad2      	subs	r2, r2, r3
    7a1a:	08d2      	lsrs	r2, r2, #3
    7a1c:	0192      	lsls	r2, r2, #6
    7a1e:	f042 0201 	orr.w	r2, r2, #1
    7a22:	f015 f887 	bl	1cb34 <log_1>
	__asm__ volatile(
    7a26:	f04f 0320 	mov.w	r3, #32
    7a2a:	f3ef 8011 	mrs	r0, BASEPRI
    7a2e:	f383 8811 	msr	BASEPRI, r3
    7a32:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    7a36:	2d00      	cmp	r5, #0
    7a38:	d037      	beq.n	7aaa <send_frag+0x112>
	return list->head;
    7a3a:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7a3c:	2200      	movs	r2, #0
    7a3e:	b153      	cbz	r3, 7a56 <send_frag+0xbe>
    7a40:	429d      	cmp	r5, r3
    7a42:	d12f      	bne.n	7aa4 <send_frag+0x10c>
	return node->next;
    7a44:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    7a46:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    7a48:	bb3a      	cbnz	r2, 7a9a <send_frag+0x102>
    7a4a:	42a9      	cmp	r1, r5
	list->head = node;
    7a4c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7a4e:	d100      	bne.n	7a52 <send_frag+0xba>
	list->tail = node;
    7a50:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7a52:	2300      	movs	r3, #0
    7a54:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7a56:	f380 8811 	msr	BASEPRI, r0
    7a5a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7a5e:	4817      	ldr	r0, [pc, #92]	; (7abc <send_frag+0x124>)
    7a60:	f013 fbba 	bl	1b1d8 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7a64:	b115      	cbz	r5, 7a6c <send_frag+0xd4>
		tx_free(tx);
    7a66:	4628      	mov	r0, r5
    7a68:	f7ff ff76 	bl	7958 <tx_free>
	}

	if (always_consume) {
    7a6c:	b11f      	cbz	r7, 7a76 <send_frag+0xde>
		net_buf_unref(buf);
    7a6e:	4630      	mov	r0, r6
    7a70:	f012 f8c0 	bl	19bf4 <net_buf_unref>
	}
	return false;
    7a74:	2700      	movs	r7, #0
}
    7a76:	4638      	mov	r0, r7
    7a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7a7c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7a7e:	61a5      	str	r5, [r4, #24]
}
    7a80:	e7ac      	b.n	79dc <send_frag+0x44>
		if (tail_tx) {
    7a82:	b133      	cbz	r3, 7a92 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    7a84:	f103 080c 	add.w	r8, r3, #12
    7a88:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7a8a:	3301      	adds	r3, #1
    7a8c:	f8c8 3000 	str.w	r3, [r8]
    7a90:	e7a4      	b.n	79dc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7a92:	69e3      	ldr	r3, [r4, #28]
    7a94:	f104 081c 	add.w	r8, r4, #28
    7a98:	e7f7      	b.n	7a8a <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    7a9a:	42a9      	cmp	r1, r5
	parent->next = child;
    7a9c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7a9e:	bf08      	it	eq
    7aa0:	61a2      	streq	r2, [r4, #24]
}
    7aa2:	e7d6      	b.n	7a52 <send_frag+0xba>
	return node->next;
    7aa4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7aa6:	681b      	ldr	r3, [r3, #0]
    7aa8:	e7c9      	b.n	7a3e <send_frag+0xa6>
			(*pending_no_cb)--;
    7aaa:	f8d8 3000 	ldr.w	r3, [r8]
    7aae:	3b01      	subs	r3, #1
    7ab0:	f8c8 3000 	str.w	r3, [r8]
    7ab4:	e7cf      	b.n	7a56 <send_frag+0xbe>
	return true;
    7ab6:	2701      	movs	r7, #1
    7ab8:	e7dd      	b.n	7a76 <send_frag+0xde>
    7aba:	bf00      	nop
    7abc:	200000d0 	.word	0x200000d0
    7ac0:	0001ff94 	.word	0x0001ff94
    7ac4:	0001ffac 	.word	0x0001ffac
    7ac8:	0002227b 	.word	0x0002227b

00007acc <bt_conn_get_pkts>:
}
    7acc:	4800      	ldr	r0, [pc, #0]	; (7ad0 <bt_conn_get_pkts+0x4>)
    7ace:	4770      	bx	lr
    7ad0:	200000d0 	.word	0x200000d0

00007ad4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7ad4:	1d03      	adds	r3, r0, #4
{
    7ad6:	b570      	push	{r4, r5, r6, lr}
    7ad8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7ada:	4618      	mov	r0, r3
    7adc:	f016 f9fc 	bl	1ded8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7ae0:	0582      	lsls	r2, r0, #22
    7ae2:	d519      	bpl.n	7b18 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7ae4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7ae8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    7aec:	4291      	cmp	r1, r2
    7aee:	d813      	bhi.n	7b18 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7af0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    7af4:	4291      	cmp	r1, r2
    7af6:	d30f      	bcc.n	7b18 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    7af8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    7afc:	4291      	cmp	r1, r2
    7afe:	d10b      	bne.n	7b18 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b00:	f3bf 8f5b 	dmb	ish
    7b04:	e853 2f00 	ldrex	r2, [r3]
    7b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7b0c:	e843 2100 	strex	r1, r2, [r3]
    7b10:	2900      	cmp	r1, #0
    7b12:	d1f7      	bne.n	7b04 <notify_le_param_updated+0x30>
    7b14:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    7b18:	4b07      	ldr	r3, [pc, #28]	; (7b38 <notify_le_param_updated+0x64>)
    7b1a:	681d      	ldr	r5, [r3, #0]
    7b1c:	b905      	cbnz	r5, 7b20 <notify_le_param_updated+0x4c>
}
    7b1e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7b20:	68ee      	ldr	r6, [r5, #12]
    7b22:	b13e      	cbz	r6, 7b34 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    7b24:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7b28:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7b2c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7b30:	4620      	mov	r0, r4
    7b32:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7b34:	692d      	ldr	r5, [r5, #16]
    7b36:	e7f1      	b.n	7b1c <notify_le_param_updated+0x48>
    7b38:	200012d8 	.word	0x200012d8

00007b3c <le_param_req>:
{
    7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b3e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7b40:	4608      	mov	r0, r1
{
    7b42:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7b44:	f015 ffbf 	bl	1dac6 <bt_le_conn_params_valid>
    7b48:	4604      	mov	r4, r0
    7b4a:	b910      	cbnz	r0, 7b52 <le_param_req+0x16>
		return false;
    7b4c:	2400      	movs	r4, #0
}
    7b4e:	4620      	mov	r0, r4
    7b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    7b52:	4b09      	ldr	r3, [pc, #36]	; (7b78 <le_param_req+0x3c>)
    7b54:	681e      	ldr	r6, [r3, #0]
    7b56:	2e00      	cmp	r6, #0
    7b58:	d0f9      	beq.n	7b4e <le_param_req+0x12>
		if (!cb->le_param_req) {
    7b5a:	68b3      	ldr	r3, [r6, #8]
    7b5c:	b90b      	cbnz	r3, 7b62 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7b5e:	6936      	ldr	r6, [r6, #16]
    7b60:	e7f9      	b.n	7b56 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    7b62:	4629      	mov	r1, r5
    7b64:	4638      	mov	r0, r7
    7b66:	4798      	blx	r3
    7b68:	2800      	cmp	r0, #0
    7b6a:	d0ef      	beq.n	7b4c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    7b6c:	4628      	mov	r0, r5
    7b6e:	f015 ffaa 	bl	1dac6 <bt_le_conn_params_valid>
    7b72:	2800      	cmp	r0, #0
    7b74:	d1f3      	bne.n	7b5e <le_param_req+0x22>
    7b76:	e7e9      	b.n	7b4c <le_param_req+0x10>
    7b78:	200012d8 	.word	0x200012d8

00007b7c <bt_conn_new>:
{
    7b7c:	b538      	push	{r3, r4, r5, lr}
    7b7e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    7b80:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7b82:	2501      	movs	r5, #1
    7b84:	428b      	cmp	r3, r1
    7b86:	d102      	bne.n	7b8e <bt_conn_new+0x12>
		return NULL;
    7b88:	2400      	movs	r4, #0
}
    7b8a:	4620      	mov	r0, r4
    7b8c:	bd38      	pop	{r3, r4, r5, pc}
    7b8e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    7b92:	f3bf 8f5b 	dmb	ish
    7b96:	e852 0f00 	ldrex	r0, [r2]
    7b9a:	2800      	cmp	r0, #0
    7b9c:	d104      	bne.n	7ba8 <bt_conn_new+0x2c>
    7b9e:	e842 5c00 	strex	ip, r5, [r2]
    7ba2:	f1bc 0f00 	cmp.w	ip, #0
    7ba6:	d1f6      	bne.n	7b96 <bt_conn_new+0x1a>
    7ba8:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    7bac:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7bb0:	d002      	beq.n	7bb8 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    7bb2:	3301      	adds	r3, #1
    7bb4:	4604      	mov	r4, r0
    7bb6:	e7e5      	b.n	7b84 <bt_conn_new+0x8>
	if (!conn) {
    7bb8:	2c00      	cmp	r4, #0
    7bba:	d0e6      	beq.n	7b8a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    7bbc:	22b8      	movs	r2, #184	; 0xb8
    7bbe:	2100      	movs	r1, #0
    7bc0:	4620      	mov	r0, r4
    7bc2:	f015 fe4c 	bl	1d85e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    7bc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7bca:	4904      	ldr	r1, [pc, #16]	; (7bdc <bt_conn_new+0x60>)
    7bcc:	f017 fd76 	bl	1f6bc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    7bd0:	4903      	ldr	r1, [pc, #12]	; (7be0 <bt_conn_new+0x64>)
    7bd2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7bd6:	f017 fd4b 	bl	1f670 <k_work_init>
	return conn;
    7bda:	e7d6      	b.n	7b8a <bt_conn_new+0xe>
    7bdc:	000081cd 	.word	0x000081cd
    7be0:	0001df2b 	.word	0x0001df2b

00007be4 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7be4:	4b02      	ldr	r3, [pc, #8]	; (7bf0 <bt_conn_cb_register+0xc>)
    7be6:	681a      	ldr	r2, [r3, #0]
    7be8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    7bea:	6018      	str	r0, [r3, #0]
}
    7bec:	4770      	bx	lr
    7bee:	bf00      	nop
    7bf0:	200012d8 	.word	0x200012d8

00007bf4 <bt_conn_recv>:
{
    7bf4:	b570      	push	{r4, r5, r6, lr}
    7bf6:	4616      	mov	r6, r2
    7bf8:	4604      	mov	r4, r0
    7bfa:	460d      	mov	r5, r1
	tx_notify(conn);
    7bfc:	f016 f972 	bl	1dee4 <tx_notify>
	switch (flags) {
    7c00:	2e01      	cmp	r6, #1
    7c02:	d02b      	beq.n	7c5c <bt_conn_recv+0x68>
    7c04:	2e02      	cmp	r6, #2
    7c06:	d158      	bne.n	7cba <bt_conn_recv+0xc6>
		if (conn->rx) {
    7c08:	6923      	ldr	r3, [r4, #16]
    7c0a:	b163      	cbz	r3, 7c26 <bt_conn_recv+0x32>
    7c0c:	4b35      	ldr	r3, [pc, #212]	; (7ce4 <bt_conn_recv+0xf0>)
    7c0e:	4936      	ldr	r1, [pc, #216]	; (7ce8 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    7c10:	4836      	ldr	r0, [pc, #216]	; (7cec <bt_conn_recv+0xf8>)
    7c12:	1ac9      	subs	r1, r1, r3
    7c14:	08c9      	lsrs	r1, r1, #3
    7c16:	0189      	lsls	r1, r1, #6
    7c18:	f041 0101 	orr.w	r1, r1, #1
    7c1c:	f014 ff7d 	bl	1cb1a <log_0>
			bt_conn_reset_rx_state(conn);
    7c20:	4620      	mov	r0, r4
    7c22:	f016 f987 	bl	1df34 <bt_conn_reset_rx_state>
		conn->rx = buf;
    7c26:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7c28:	6923      	ldr	r3, [r4, #16]
    7c2a:	8999      	ldrh	r1, [r3, #12]
    7c2c:	2901      	cmp	r1, #1
    7c2e:	d958      	bls.n	7ce2 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    7c30:	689a      	ldr	r2, [r3, #8]
    7c32:	8812      	ldrh	r2, [r2, #0]
    7c34:	3204      	adds	r2, #4
    7c36:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    7c38:	4291      	cmp	r1, r2
    7c3a:	d352      	bcc.n	7ce2 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    7c3c:	d949      	bls.n	7cd2 <bt_conn_recv+0xde>
    7c3e:	4829      	ldr	r0, [pc, #164]	; (7ce4 <bt_conn_recv+0xf0>)
    7c40:	4b29      	ldr	r3, [pc, #164]	; (7ce8 <bt_conn_recv+0xf4>)
    7c42:	1a1b      	subs	r3, r3, r0
    7c44:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    7c46:	019b      	lsls	r3, r3, #6
    7c48:	4829      	ldr	r0, [pc, #164]	; (7cf0 <bt_conn_recv+0xfc>)
    7c4a:	f043 0301 	orr.w	r3, r3, #1
    7c4e:	f014 ff85 	bl	1cb5c <log_2>
		bt_conn_reset_rx_state(conn);
    7c52:	4620      	mov	r0, r4
}
    7c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    7c58:	f016 b96c 	b.w	1df34 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7c5c:	6920      	ldr	r0, [r4, #16]
    7c5e:	b968      	cbnz	r0, 7c7c <bt_conn_recv+0x88>
    7c60:	4921      	ldr	r1, [pc, #132]	; (7ce8 <bt_conn_recv+0xf4>)
    7c62:	4b20      	ldr	r3, [pc, #128]	; (7ce4 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    7c64:	4823      	ldr	r0, [pc, #140]	; (7cf4 <bt_conn_recv+0x100>)
    7c66:	1ac9      	subs	r1, r1, r3
    7c68:	08c9      	lsrs	r1, r1, #3
    7c6a:	0189      	lsls	r1, r1, #6
    7c6c:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    7c70:	f014 ff53 	bl	1cb1a <log_0>
			bt_conn_reset_rx_state(conn);
    7c74:	4620      	mov	r0, r4
    7c76:	f016 f95d 	bl	1df34 <bt_conn_reset_rx_state>
    7c7a:	e001      	b.n	7c80 <bt_conn_recv+0x8c>
		if (!buf->len) {
    7c7c:	89ae      	ldrh	r6, [r5, #12]
    7c7e:	b926      	cbnz	r6, 7c8a <bt_conn_recv+0x96>
			net_buf_unref(buf);
    7c80:	4628      	mov	r0, r5
}
    7c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7c86:	f011 bfb5 	b.w	19bf4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7c8a:	3008      	adds	r0, #8
    7c8c:	f017 f99a 	bl	1efc4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7c90:	4286      	cmp	r6, r0
    7c92:	d908      	bls.n	7ca6 <bt_conn_recv+0xb2>
    7c94:	4914      	ldr	r1, [pc, #80]	; (7ce8 <bt_conn_recv+0xf4>)
    7c96:	4b13      	ldr	r3, [pc, #76]	; (7ce4 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    7c98:	4817      	ldr	r0, [pc, #92]	; (7cf8 <bt_conn_recv+0x104>)
    7c9a:	1ac9      	subs	r1, r1, r3
    7c9c:	08c9      	lsrs	r1, r1, #3
    7c9e:	0189      	lsls	r1, r1, #6
    7ca0:	f041 0101 	orr.w	r1, r1, #1
    7ca4:	e7e4      	b.n	7c70 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7ca6:	6920      	ldr	r0, [r4, #16]
    7ca8:	89aa      	ldrh	r2, [r5, #12]
    7caa:	68a9      	ldr	r1, [r5, #8]
    7cac:	3008      	adds	r0, #8
    7cae:	f017 f94c 	bl	1ef4a <net_buf_simple_add_mem>
		net_buf_unref(buf);
    7cb2:	4628      	mov	r0, r5
    7cb4:	f011 ff9e 	bl	19bf4 <net_buf_unref>
		break;
    7cb8:	e7b6      	b.n	7c28 <bt_conn_recv+0x34>
    7cba:	4a0a      	ldr	r2, [pc, #40]	; (7ce4 <bt_conn_recv+0xf0>)
    7cbc:	4b0a      	ldr	r3, [pc, #40]	; (7ce8 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7cbe:	480f      	ldr	r0, [pc, #60]	; (7cfc <bt_conn_recv+0x108>)
    7cc0:	1a9b      	subs	r3, r3, r2
    7cc2:	08db      	lsrs	r3, r3, #3
    7cc4:	019b      	lsls	r3, r3, #6
    7cc6:	f043 0201 	orr.w	r2, r3, #1
    7cca:	4631      	mov	r1, r6
    7ccc:	f014 ff32 	bl	1cb34 <log_1>
		bt_conn_reset_rx_state(conn);
    7cd0:	e7d0      	b.n	7c74 <bt_conn_recv+0x80>
	conn->rx = NULL;
    7cd2:	2200      	movs	r2, #0
    7cd4:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    7cd6:	4620      	mov	r0, r4
    7cd8:	4619      	mov	r1, r3
}
    7cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7cde:	f000 bd59 	b.w	8794 <bt_l2cap_recv>
}
    7ce2:	bd70      	pop	{r4, r5, r6, pc}
    7ce4:	0001ff94 	.word	0x0001ff94
    7ce8:	0001ffac 	.word	0x0001ffac
    7cec:	000227db 	.word	0x000227db
    7cf0:	0002285b 	.word	0x0002285b
    7cf4:	000227f8 	.word	0x000227f8
    7cf8:	00022816 	.word	0x00022816
    7cfc:	0002283d 	.word	0x0002283d

00007d00 <bt_conn_send_cb>:
{
    7d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d04:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7d06:	7a83      	ldrb	r3, [r0, #10]
    7d08:	2b07      	cmp	r3, #7
{
    7d0a:	4605      	mov	r5, r0
    7d0c:	460e      	mov	r6, r1
    7d0e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7d10:	d00c      	beq.n	7d2c <bt_conn_send_cb+0x2c>
    7d12:	4926      	ldr	r1, [pc, #152]	; (7dac <bt_conn_send_cb+0xac>)
    7d14:	4b26      	ldr	r3, [pc, #152]	; (7db0 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
    7d16:	4827      	ldr	r0, [pc, #156]	; (7db4 <bt_conn_send_cb+0xb4>)
    7d18:	1ac9      	subs	r1, r1, r3
    7d1a:	08c9      	lsrs	r1, r1, #3
    7d1c:	0189      	lsls	r1, r1, #6
    7d1e:	f041 0101 	orr.w	r1, r1, #1
    7d22:	f014 fefa 	bl	1cb1a <log_0>
			return -ENOTCONN;
    7d26:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7d2a:	e01d      	b.n	7d68 <bt_conn_send_cb+0x68>
	if (cb) {
    7d2c:	2a00      	cmp	r2, #0
    7d2e:	d03a      	beq.n	7da6 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
    7d30:	f013 ff50 	bl	1bbd4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7d34:	4b20      	ldr	r3, [pc, #128]	; (7db8 <bt_conn_send_cb+0xb8>)
    7d36:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7d38:	4820      	ldr	r0, [pc, #128]	; (7dbc <bt_conn_send_cb+0xbc>)
    7d3a:	bf07      	ittee	eq
    7d3c:	2200      	moveq	r2, #0
    7d3e:	2300      	moveq	r3, #0
    7d40:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    7d44:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    7d48:	f013 fa12 	bl	1b170 <z_impl_k_queue_get>
    7d4c:	4604      	mov	r4, r0
		if (!tx) {
    7d4e:	b968      	cbnz	r0, 7d6c <bt_conn_send_cb+0x6c>
    7d50:	4b17      	ldr	r3, [pc, #92]	; (7db0 <bt_conn_send_cb+0xb0>)
    7d52:	4916      	ldr	r1, [pc, #88]	; (7dac <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
    7d54:	481a      	ldr	r0, [pc, #104]	; (7dc0 <bt_conn_send_cb+0xc0>)
    7d56:	1ac9      	subs	r1, r1, r3
    7d58:	08c9      	lsrs	r1, r1, #3
    7d5a:	0189      	lsls	r1, r1, #6
    7d5c:	f041 0101 	orr.w	r1, r1, #1
    7d60:	f014 fedb 	bl	1cb1a <log_0>
			return -ENOBUFS;
    7d64:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    7d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7d6c:	7aab      	ldrb	r3, [r5, #10]
    7d6e:	2b07      	cmp	r3, #7
    7d70:	d00d      	beq.n	7d8e <bt_conn_send_cb+0x8e>
    7d72:	4b0f      	ldr	r3, [pc, #60]	; (7db0 <bt_conn_send_cb+0xb0>)
    7d74:	490d      	ldr	r1, [pc, #52]	; (7dac <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
    7d76:	4813      	ldr	r0, [pc, #76]	; (7dc4 <bt_conn_send_cb+0xc4>)
    7d78:	1ac9      	subs	r1, r1, r3
    7d7a:	08c9      	lsrs	r1, r1, #3
    7d7c:	0189      	lsls	r1, r1, #6
    7d7e:	f041 0102 	orr.w	r1, r1, #2
    7d82:	f014 feca 	bl	1cb1a <log_0>
			tx_free(tx);
    7d86:	4620      	mov	r0, r4
    7d88:	f7ff fde6 	bl	7958 <tx_free>
    7d8c:	e7cb      	b.n	7d26 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
    7d8e:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7d90:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7d94:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7d96:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    7d98:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7d9c:	4631      	mov	r1, r6
    7d9e:	f017 f88f 	bl	1eec0 <net_buf_put>
	return 0;
    7da2:	2000      	movs	r0, #0
    7da4:	e7e0      	b.n	7d68 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
    7da6:	614a      	str	r2, [r1, #20]
    7da8:	e7f6      	b.n	7d98 <bt_conn_send_cb+0x98>
    7daa:	bf00      	nop
    7dac:	0001ffac 	.word	0x0001ffac
    7db0:	0001ff94 	.word	0x0001ff94
    7db4:	00022876 	.word	0x00022876
    7db8:	200010f8 	.word	0x200010f8
    7dbc:	20000730 	.word	0x20000730
    7dc0:	00022885 	.word	0x00022885
    7dc4:	000228a3 	.word	0x000228a3

00007dc8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    7dc8:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    7dca:	4b1a      	ldr	r3, [pc, #104]	; (7e34 <bt_conn_prepare_events+0x6c>)
    7dcc:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7dce:	2101      	movs	r1, #1
{
    7dd0:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    7dd2:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7dd4:	f017 ffa3 	bl	1fd1e <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    7dd8:	4b17      	ldr	r3, [pc, #92]	; (7e38 <bt_conn_prepare_events+0x70>)
    7dda:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    7dde:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    7de2:	f016 f879 	bl	1ded8 <atomic_get>
    7de6:	b908      	cbnz	r0, 7dec <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    7de8:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    7dea:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7dec:	7a9a      	ldrb	r2, [r3, #10]
    7dee:	b99a      	cbnz	r2, 7e18 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7df0:	f3bf 8f5b 	dmb	ish
    7df4:	1d1a      	adds	r2, r3, #4
    7df6:	e852 1f00 	ldrex	r1, [r2]
    7dfa:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    7dfe:	e842 0c00 	strex	ip, r0, [r2]
    7e02:	f1bc 0f00 	cmp.w	ip, #0
    7e06:	d1f6      	bne.n	7df6 <bt_conn_prepare_events+0x2e>
    7e08:	f3bf 8f5b 	dmb	ish
    7e0c:	064a      	lsls	r2, r1, #25
    7e0e:	d503      	bpl.n	7e18 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
    7e10:	4618      	mov	r0, r3
    7e12:	f016 f898 	bl	1df46 <conn_cleanup>
    7e16:	e7e7      	b.n	7de8 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    7e18:	7a9b      	ldrb	r3, [r3, #10]
    7e1a:	2b07      	cmp	r3, #7
    7e1c:	d1e4      	bne.n	7de8 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    7e1e:	4b07      	ldr	r3, [pc, #28]	; (7e3c <bt_conn_prepare_events+0x74>)
    7e20:	4628      	mov	r0, r5
    7e22:	2200      	movs	r2, #0
    7e24:	2104      	movs	r1, #4
    7e26:	f017 ff7a 	bl	1fd1e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7e2a:	2301      	movs	r3, #1
    7e2c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    7e30:	2002      	movs	r0, #2
	return ev_count;
    7e32:	e7da      	b.n	7dea <bt_conn_prepare_events+0x22>
    7e34:	200001a8 	.word	0x200001a8
    7e38:	20000988 	.word	0x20000988
    7e3c:	200009c0 	.word	0x200009c0

00007e40 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    7e40:	b570      	push	{r4, r5, r6, lr}
    7e42:	4606      	mov	r6, r0
    7e44:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    7e46:	4809      	ldr	r0, [pc, #36]	; (7e6c <bt_conn_add_le+0x2c>)
    7e48:	2101      	movs	r1, #1
    7e4a:	f7ff fe97 	bl	7b7c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    7e4e:	4604      	mov	r4, r0
    7e50:	b150      	cbz	r0, 7e68 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    7e52:	7206      	strb	r6, [r0, #8]
    7e54:	2207      	movs	r2, #7
    7e56:	4629      	mov	r1, r5
    7e58:	3088      	adds	r0, #136	; 0x88
    7e5a:	f015 fcd5 	bl	1d808 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    7e5e:	2301      	movs	r3, #1
    7e60:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7e62:	4b03      	ldr	r3, [pc, #12]	; (7e70 <bt_conn_add_le+0x30>)
    7e64:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7e68:	4620      	mov	r0, r4
    7e6a:	bd70      	pop	{r4, r5, r6, pc}
    7e6c:	20000988 	.word	0x20000988
    7e70:	00280018 	.word	0x00280018

00007e74 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    7e74:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    7e76:	2101      	movs	r1, #1
    7e78:	4801      	ldr	r0, [pc, #4]	; (7e80 <bt_conn_lookup_handle+0xc>)
    7e7a:	f016 b8df 	b.w	1e03c <conn_lookup_handle>
    7e7e:	bf00      	nop
    7e80:	20000988 	.word	0x20000988

00007e84 <bt_conn_set_state>:
{
    7e84:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    7e86:	7a86      	ldrb	r6, [r0, #10]
    7e88:	428e      	cmp	r6, r1
{
    7e8a:	4604      	mov	r4, r0
    7e8c:	460d      	mov	r5, r1
	if (conn->state == state) {
    7e8e:	d112      	bne.n	7eb6 <bt_conn_set_state+0x32>
    7e90:	4b7a      	ldr	r3, [pc, #488]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    7e92:	4a7b      	ldr	r2, [pc, #492]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
		BT_WARN("no transition %s", state2str(state));
    7e94:	487b      	ldr	r0, [pc, #492]	; (8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>)
    7e96:	2e08      	cmp	r6, #8
    7e98:	eba2 0203 	sub.w	r2, r2, r3
    7e9c:	bf96      	itet	ls
    7e9e:	4b7a      	ldrls	r3, [pc, #488]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
    7ea0:	497a      	ldrhi	r1, [pc, #488]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    7ea2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    7ea6:	08d2      	lsrs	r2, r2, #3
    7ea8:	0192      	lsls	r2, r2, #6
    7eaa:	f042 0202 	orr.w	r2, r2, #2
}
    7eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    7eb2:	f014 be3f 	b.w	1cb34 <log_1>
	conn->state = state;
    7eb6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    7eb8:	b186      	cbz	r6, 7edc <bt_conn_set_state+0x58>
    7eba:	2e06      	cmp	r6, #6
    7ebc:	d014      	beq.n	7ee8 <bt_conn_set_state+0x64>
	switch (conn->state) {
    7ebe:	7aa3      	ldrb	r3, [r4, #10]
    7ec0:	2b08      	cmp	r3, #8
    7ec2:	f200 80d0 	bhi.w	8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
    7ec6:	e8df f013 	tbh	[pc, r3, lsl #1]
    7eca:	004a      	.short	0x004a
    7ecc:	00d80016 	.word	0x00d80016
    7ed0:	00d800d8 	.word	0x00d800d8
    7ed4:	009900d8 	.word	0x009900d8
    7ed8:	00d8002e 	.word	0x00d8002e
		if (conn->type != BT_CONN_TYPE_ISO) {
    7edc:	7883      	ldrb	r3, [r0, #2]
    7ede:	2b08      	cmp	r3, #8
    7ee0:	d0ed      	beq.n	7ebe <bt_conn_set_state+0x3a>
			bt_conn_ref(conn);
    7ee2:	f016 f877 	bl	1dfd4 <bt_conn_ref>
    7ee6:	e7ea      	b.n	7ebe <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7ee8:	7883      	ldrb	r3, [r0, #2]
    7eea:	2b01      	cmp	r3, #1
    7eec:	d1e7      	bne.n	7ebe <bt_conn_set_state+0x3a>
			k_work_cancel_delayable(&conn->deferred_work);
    7eee:	3058      	adds	r0, #88	; 0x58
    7ef0:	f017 fbf0 	bl	1f6d4 <k_work_cancel_delayable>
    7ef4:	e7e3      	b.n	7ebe <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    7ef6:	4d66      	ldr	r5, [pc, #408]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
		tx->pending_no_cb = 0U;
    7ef8:	2600      	movs	r6, #0
	__asm__ volatile(
    7efa:	f04f 0320 	mov.w	r3, #32
    7efe:	f3ef 8211 	mrs	r2, BASEPRI
    7f02:	f383 8811 	msr	BASEPRI, r3
    7f06:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7f0a:	69e3      	ldr	r3, [r4, #28]
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	f000 808b 	beq.w	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
			conn->pending_no_cb--;
    7f12:	3b01      	subs	r3, #1
    7f14:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7f16:	f382 8811 	msr	BASEPRI, r2
    7f1a:	f3bf 8f6f 	isb	sy
    7f1e:	4628      	mov	r0, r5
    7f20:	f013 f95a 	bl	1b1d8 <z_impl_k_sem_give>
}
    7f24:	e7e9      	b.n	7efa <bt_conn_set_state+0x76>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7f26:	78a3      	ldrb	r3, [r4, #2]
    7f28:	2b04      	cmp	r3, #4
    7f2a:	f000 80a6 	beq.w	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
	z_impl_k_queue_init(queue);
    7f2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7f32:	f017 fac0 	bl	1f4b6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    7f36:	4857      	ldr	r0, [pc, #348]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    7f38:	2100      	movs	r1, #0
    7f3a:	f014 f8ef 	bl	1c11c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7f3e:	2300      	movs	r3, #0
	list->tail = NULL;
    7f40:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7f44:	78e3      	ldrb	r3, [r4, #3]
    7f46:	2b01      	cmp	r3, #1
    7f48:	f040 8097 	bne.w	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
			k_work_schedule(&conn->deferred_work,
    7f4c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    7f50:	2300      	movs	r3, #0
			k_work_schedule(&conn->deferred_work,
    7f52:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    7f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    7f5a:	f013 bb11 	b.w	1b580 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7f5e:	78a3      	ldrb	r3, [r4, #2]
    7f60:	2b04      	cmp	r3, #4
    7f62:	d104      	bne.n	7f6e <bt_conn_set_state+0xea>
			bt_conn_unref(conn);
    7f64:	4620      	mov	r0, r4
}
    7f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    7f6a:	f016 b84e 	b.w	1e00a <bt_conn_unref>
		switch (old_state) {
    7f6e:	2e08      	cmp	r6, #8
    7f70:	f200 8083 	bhi.w	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
    7f74:	a301      	add	r3, pc, #4	; (adr r3, 7f7c <bt_conn_set_state+0xf8>)
    7f76:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    7f7a:	bf00      	nop
    7f7c:	00007fe9 	.word	0x00007fe9
    7f80:	00007fa1 	.word	0x00007fa1
    7f84:	00007fdb 	.word	0x00007fdb
    7f88:	00007f65 	.word	0x00007f65
    7f8c:	00007f65 	.word	0x00007f65
    7f90:	00007fdb 	.word	0x00007fdb
    7f94:	00007fdb 	.word	0x00007fdb
    7f98:	00007fe9 	.word	0x00007fe9
    7f9c:	00007fe9 	.word	0x00007fe9
			tx_notify(conn);
    7fa0:	4620      	mov	r0, r4
    7fa2:	f015 ff9f 	bl	1dee4 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7fa6:	78a3      	ldrb	r3, [r4, #2]
    7fa8:	2b01      	cmp	r3, #1
    7faa:	d103      	bne.n	7fb4 <bt_conn_set_state+0x130>
				k_work_cancel_delayable(&conn->deferred_work);
    7fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7fb0:	f017 fb90 	bl	1f6d4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7fb4:	f3bf 8f5b 	dmb	ish
    7fb8:	3404      	adds	r4, #4
    7fba:	e854 3f00 	ldrex	r3, [r4]
    7fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7fc2:	e844 3200 	strex	r2, r3, [r4]
    7fc6:	2a00      	cmp	r2, #0
    7fc8:	d1f7      	bne.n	7fba <bt_conn_set_state+0x136>
    7fca:	f3bf 8f5b 	dmb	ish
    7fce:	4831      	ldr	r0, [pc, #196]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
}
    7fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fd4:	2100      	movs	r1, #0
    7fd6:	f014 b8a1 	b.w	1c11c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7fda:	7a63      	ldrb	r3, [r4, #9]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d0c1      	beq.n	7f64 <bt_conn_set_state+0xe0>
				notify_connected(conn);
    7fe0:	4620      	mov	r0, r4
    7fe2:	f7ff fcc3 	bl	796c <notify_connected>
    7fe6:	e7bd      	b.n	7f64 <bt_conn_set_state+0xe0>
    7fe8:	4a25      	ldr	r2, [pc, #148]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
    7fea:	4b24      	ldr	r3, [pc, #144]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
			BT_WARN("Invalid (%u) old state", state);
    7fec:	482a      	ldr	r0, [pc, #168]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    7fee:	1ad2      	subs	r2, r2, r3
    7ff0:	08d2      	lsrs	r2, r2, #3
    7ff2:	0192      	lsls	r2, r2, #6
    7ff4:	f042 0202 	orr.w	r2, r2, #2
    7ff8:	4629      	mov	r1, r5
    7ffa:	e758      	b.n	7eae <bt_conn_set_state+0x2a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7ffc:	78a3      	ldrb	r3, [r4, #2]
    7ffe:	2b01      	cmp	r3, #1
    8000:	d13b      	bne.n	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
					K_MSEC(10 * bt_dev.create_param.timeout));
    8002:	4b26      	ldr	r3, [pc, #152]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    8004:	8a9d      	ldrh	r5, [r3, #20]
    8006:	230a      	movs	r3, #10
    8008:	435d      	muls	r5, r3
		} else {
			return (t * to_hz + off) / from_hz;
    800a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    800e:	f240 30e7 	movw	r0, #999	; 0x3e7
    8012:	2100      	movs	r1, #0
    8014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8018:	2300      	movs	r3, #0
    801a:	fbc5 0106 	smlal	r0, r1, r5, r6
    801e:	f7f8 f86f 	bl	100 <__aeabi_uldivmod>
    8022:	4602      	mov	r2, r0
    8024:	460b      	mov	r3, r1
    8026:	e794      	b.n	7f52 <bt_conn_set_state+0xce>
	return list->head;
    8028:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    802a:	b128      	cbz	r0, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    802c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    802e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    8030:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8032:	4288      	cmp	r0, r1
	list->tail = node;
    8034:	bf08      	it	eq
    8036:	61a3      	streq	r3, [r4, #24]
    8038:	f382 8811 	msr	BASEPRI, r2
    803c:	f3bf 8f6f 	isb	sy
		if (!node) {
    8040:	b1d8      	cbz	r0, 807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
	__asm__ volatile(
    8042:	f04f 0220 	mov.w	r2, #32
    8046:	f3ef 8311 	mrs	r3, BASEPRI
    804a:	f382 8811 	msr	BASEPRI, r2
    804e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    8052:	68c2      	ldr	r2, [r0, #12]
    8054:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8056:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8058:	f383 8811 	msr	BASEPRI, r3
    805c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8060:	f7ff fc7a 	bl	7958 <tx_free>
    8064:	e75b      	b.n	7f1e <bt_conn_set_state+0x9a>
    8066:	4a06      	ldr	r2, [pc, #24]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
    8068:	4b04      	ldr	r3, [pc, #16]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
		BT_WARN("no valid (%u) state was set", state);
    806a:	480d      	ldr	r0, [pc, #52]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    806c:	1ad2      	subs	r2, r2, r3
    806e:	08d2      	lsrs	r2, r2, #3
    8070:	0192      	lsls	r2, r2, #6
    8072:	f042 0202 	orr.w	r2, r2, #2
    8076:	4629      	mov	r1, r5
    8078:	e719      	b.n	7eae <bt_conn_set_state+0x2a>
}
    807a:	bd70      	pop	{r4, r5, r6, pc}
    807c:	0001ff94 	.word	0x0001ff94
    8080:	0001ffac 	.word	0x0001ffac
    8084:	000228d3 	.word	0x000228d3
    8088:	000203a0 	.word	0x000203a0
    808c:	000228c9 	.word	0x000228c9
    8090:	200000d0 	.word	0x200000d0
    8094:	200001a8 	.word	0x200001a8
    8098:	000228e4 	.word	0x000228e4
    809c:	20000000 	.word	0x20000000
    80a0:	000228fb 	.word	0x000228fb

000080a4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    80a4:	b570      	push	{r4, r5, r6, lr}
    80a6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    80a8:	480c      	ldr	r0, [pc, #48]	; (80dc <bt_conn_lookup_addr_le+0x38>)
{
    80aa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    80ac:	f015 ff92 	bl	1dfd4 <bt_conn_ref>

		if (!conn) {
    80b0:	4604      	mov	r4, r0
    80b2:	b128      	cbz	r0, 80c0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    80b4:	7883      	ldrb	r3, [r0, #2]
    80b6:	2b01      	cmp	r3, #1
    80b8:	d004      	beq.n	80c4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    80ba:	f015 ffa6 	bl	1e00a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    80be:	2400      	movs	r4, #0
}
    80c0:	4620      	mov	r0, r4
    80c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    80c4:	4629      	mov	r1, r5
    80c6:	4632      	mov	r2, r6
    80c8:	f015 ff64 	bl	1df94 <bt_conn_is_peer_addr_le>
    80cc:	4605      	mov	r5, r0
    80ce:	2800      	cmp	r0, #0
    80d0:	d1f6      	bne.n	80c0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    80d2:	4620      	mov	r0, r4
    80d4:	f015 ff99 	bl	1e00a <bt_conn_unref>
	return NULL;
    80d8:	462c      	mov	r4, r5
			continue;
    80da:	e7f1      	b.n	80c0 <bt_conn_lookup_addr_le+0x1c>
    80dc:	20000988 	.word	0x20000988

000080e0 <bt_conn_exists_le>:
{
    80e0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    80e2:	f7ff ffdf 	bl	80a4 <bt_conn_lookup_addr_le>
	if (conn) {
    80e6:	4604      	mov	r4, r0
    80e8:	b1a0      	cbz	r0, 8114 <bt_conn_exists_le+0x34>
    80ea:	4b0b      	ldr	r3, [pc, #44]	; (8118 <bt_conn_exists_le+0x38>)
    80ec:	4a0b      	ldr	r2, [pc, #44]	; (811c <bt_conn_exists_le+0x3c>)
    80ee:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    80f0:	7a83      	ldrb	r3, [r0, #10]
    80f2:	480b      	ldr	r0, [pc, #44]	; (8120 <bt_conn_exists_le+0x40>)
    80f4:	2b08      	cmp	r3, #8
    80f6:	bf96      	itet	ls
    80f8:	490a      	ldrls	r1, [pc, #40]	; (8124 <bt_conn_exists_le+0x44>)
    80fa:	490b      	ldrhi	r1, [pc, #44]	; (8128 <bt_conn_exists_le+0x48>)
    80fc:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    8100:	08d2      	lsrs	r2, r2, #3
    8102:	0192      	lsls	r2, r2, #6
    8104:	f042 0202 	orr.w	r2, r2, #2
    8108:	f014 fd14 	bl	1cb34 <log_1>
		bt_conn_unref(conn);
    810c:	4620      	mov	r0, r4
    810e:	f015 ff7c 	bl	1e00a <bt_conn_unref>
		return true;
    8112:	2001      	movs	r0, #1
}
    8114:	bd10      	pop	{r4, pc}
    8116:	bf00      	nop
    8118:	0001ff94 	.word	0x0001ff94
    811c:	0001ffac 	.word	0x0001ffac
    8120:	00022917 	.word	0x00022917
    8124:	000203a0 	.word	0x000203a0
    8128:	000228c9 	.word	0x000228c9

0000812c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    812e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8130:	480e      	ldr	r0, [pc, #56]	; (816c <bt_conn_lookup_state_le+0x40>)
{
    8132:	460e      	mov	r6, r1
    8134:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8136:	f015 ff4d 	bl	1dfd4 <bt_conn_ref>

		if (!conn) {
    813a:	4604      	mov	r4, r0
    813c:	b1a0      	cbz	r0, 8168 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    813e:	7883      	ldrb	r3, [r0, #2]
    8140:	2b01      	cmp	r3, #1
    8142:	d003      	beq.n	814c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    8144:	f015 ff61 	bl	1e00a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    8148:	2400      	movs	r4, #0
			continue;
    814a:	e00d      	b.n	8168 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    814c:	b136      	cbz	r6, 815c <bt_conn_lookup_state_le+0x30>
    814e:	4632      	mov	r2, r6
    8150:	4629      	mov	r1, r5
    8152:	f015 ff1f 	bl	1df94 <bt_conn_is_peer_addr_le>
    8156:	b908      	cbnz	r0, 815c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    8158:	4620      	mov	r0, r4
    815a:	e7f3      	b.n	8144 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    815c:	7aa3      	ldrb	r3, [r4, #10]
    815e:	42bb      	cmp	r3, r7
    8160:	d1fa      	bne.n	8158 <bt_conn_lookup_state_le+0x2c>
    8162:	7a23      	ldrb	r3, [r4, #8]
    8164:	42ab      	cmp	r3, r5
    8166:	d1f7      	bne.n	8158 <bt_conn_lookup_state_le+0x2c>
}
    8168:	4620      	mov	r0, r4
    816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    816c:	20000988 	.word	0x20000988

00008170 <send_conn_le_param_update>:
{
    8170:	b538      	push	{r3, r4, r5, lr}
    8172:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8174:	4608      	mov	r0, r1
{
    8176:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8178:	f015 fca5 	bl	1dac6 <bt_le_conn_params_valid>
    817c:	b308      	cbz	r0, 81c2 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    817e:	4b12      	ldr	r3, [pc, #72]	; (81c8 <send_conn_le_param_update+0x58>)
    8180:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    8184:	0799      	lsls	r1, r3, #30
    8186:	d407      	bmi.n	8198 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    8188:	78e3      	ldrb	r3, [r4, #3]
    818a:	b173      	cbz	r3, 81aa <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    818c:	4629      	mov	r1, r5
    818e:	4620      	mov	r0, r4
}
    8190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8194:	f000 bb36 	b.w	8804 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8198:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    819c:	079a      	lsls	r2, r3, #30
    819e:	d5f3      	bpl.n	8188 <send_conn_le_param_update+0x18>
    81a0:	1d20      	adds	r0, r4, #4
    81a2:	f015 fe99 	bl	1ded8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    81a6:	0543      	lsls	r3, r0, #21
    81a8:	d4ee      	bmi.n	8188 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    81aa:	4629      	mov	r1, r5
    81ac:	4620      	mov	r0, r4
    81ae:	f015 ff69 	bl	1e084 <bt_conn_le_conn_update>
		if (rc == 0) {
    81b2:	b928      	cbnz	r0, 81c0 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    81b4:	88ab      	ldrh	r3, [r5, #4]
    81b6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    81ba:	88eb      	ldrh	r3, [r5, #6]
    81bc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    81c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    81c2:	f06f 0015 	mvn.w	r0, #21
    81c6:	e7fb      	b.n	81c0 <send_conn_le_param_update+0x50>
    81c8:	20000000 	.word	0x20000000

000081cc <deferred_work>:
{
    81cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    81ce:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    81d2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    81d4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    81d8:	b99b      	cbnz	r3, 8202 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    81da:	4630      	mov	r0, r6
    81dc:	f015 ffb4 	bl	1e148 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    81e0:	4b2a      	ldr	r3, [pc, #168]	; (828c <deferred_work+0xc0>)
    81e2:	681d      	ldr	r5, [r3, #0]
    81e4:	b92d      	cbnz	r5, 81f2 <deferred_work+0x26>
		bt_conn_unref(conn);
    81e6:	4630      	mov	r0, r6
}
    81e8:	b002      	add	sp, #8
    81ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    81ee:	f015 bf0c 	b.w	1e00a <bt_conn_unref>
		if (cb->disconnected) {
    81f2:	686b      	ldr	r3, [r5, #4]
    81f4:	b11b      	cbz	r3, 81fe <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    81f6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    81fa:	4630      	mov	r0, r6
    81fc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    81fe:	692d      	ldr	r5, [r5, #16]
    8200:	e7f0      	b.n	81e4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    8202:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    8206:	2b01      	cmp	r3, #1
    8208:	d137      	bne.n	827a <deferred_work+0xae>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    820a:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    820e:	b923      	cbnz	r3, 821a <deferred_work+0x4e>
}
    8210:	b002      	add	sp, #8
    8212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    8216:	f7fd bb9d 	b.w	5954 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    821a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    821e:	f3bf 8f5b 	dmb	ish
    8222:	e855 3f00 	ldrex	r3, [r5]
    8226:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    822a:	e845 2100 	strex	r1, r2, [r5]
    822e:	2900      	cmp	r1, #0
    8230:	d1f7      	bne.n	8222 <deferred_work+0x56>
    8232:	f3bf 8f5b 	dmb	ish
    8236:	059b      	lsls	r3, r3, #22
    8238:	d521      	bpl.n	827e <deferred_work+0xb2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    823a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    823e:	f8ad 3000 	strh.w	r3, [sp]
    8242:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    8246:	f8ad 3002 	strh.w	r3, [sp, #2]
    824a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    824e:	f8ad 3004 	strh.w	r3, [sp, #4]
    8252:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    8256:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    825a:	4669      	mov	r1, sp
    825c:	4630      	mov	r0, r6
    825e:	f7ff ff87 	bl	8170 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8262:	f3bf 8f5b 	dmb	ish
    8266:	e855 3f00 	ldrex	r3, [r5]
    826a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    826e:	e845 3200 	strex	r2, r3, [r5]
    8272:	2a00      	cmp	r2, #0
    8274:	d1f7      	bne.n	8266 <deferred_work+0x9a>
    8276:	f3bf 8f5b 	dmb	ish
}
    827a:	b002      	add	sp, #8
    827c:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    827e:	4a04      	ldr	r2, [pc, #16]	; (8290 <deferred_work+0xc4>)
    8280:	6810      	ldr	r0, [r2, #0]
    8282:	6851      	ldr	r1, [r2, #4]
    8284:	466b      	mov	r3, sp
    8286:	c303      	stmia	r3!, {r0, r1}
    8288:	e7e7      	b.n	825a <deferred_work+0x8e>
    828a:	bf00      	nop
    828c:	200012d8 	.word	0x200012d8
    8290:	000201c6 	.word	0x000201c6

00008294 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    8294:	b538      	push	{r3, r4, r5, lr}
    8296:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    8298:	490c      	ldr	r1, [pc, #48]	; (82cc <bt_conn_create_pdu_timeout+0x38>)
    829a:	2800      	cmp	r0, #0
    829c:	bf08      	it	eq
    829e:	4608      	moveq	r0, r1
    82a0:	f016 fdeb 	bl	1ee7a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    82a4:	4604      	mov	r4, r0
    82a6:	b958      	cbnz	r0, 82c0 <bt_conn_create_pdu_timeout+0x2c>
    82a8:	4909      	ldr	r1, [pc, #36]	; (82d0 <bt_conn_create_pdu_timeout+0x3c>)
    82aa:	4b0a      	ldr	r3, [pc, #40]	; (82d4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    82ac:	480a      	ldr	r0, [pc, #40]	; (82d8 <bt_conn_create_pdu_timeout+0x44>)
    82ae:	1ac9      	subs	r1, r1, r3
    82b0:	08c9      	lsrs	r1, r1, #3
    82b2:	0189      	lsls	r1, r1, #6
    82b4:	f041 0102 	orr.w	r1, r1, #2
    82b8:	f014 fc2f 	bl	1cb1a <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    82bc:	4620      	mov	r0, r4
    82be:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    82c0:	1d29      	adds	r1, r5, #4
    82c2:	3008      	adds	r0, #8
    82c4:	f016 fdf8 	bl	1eeb8 <net_buf_simple_reserve>
	return buf;
    82c8:	e7f8      	b.n	82bc <bt_conn_create_pdu_timeout+0x28>
    82ca:	bf00      	nop
    82cc:	20000760 	.word	0x20000760
    82d0:	0001ffac 	.word	0x0001ffac
    82d4:	0001ff94 	.word	0x0001ff94
    82d8:	0002293a 	.word	0x0002293a

000082dc <bt_conn_create_frag_timeout>:
{
    82dc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    82de:	4801      	ldr	r0, [pc, #4]	; (82e4 <bt_conn_create_frag_timeout+0x8>)
    82e0:	f7ff bfd8 	b.w	8294 <bt_conn_create_pdu_timeout>
    82e4:	200007b0 	.word	0x200007b0

000082e8 <create_frag>:
{
    82e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82ec:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    82ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82f6:	2000      	movs	r0, #0
{
    82f8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    82fa:	f7ff ffef 	bl	82dc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    82fe:	7ab3      	ldrb	r3, [r6, #10]
    8300:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    8302:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8304:	f04f 0600 	mov.w	r6, #0
    8308:	d005      	beq.n	8316 <create_frag+0x2e>
		net_buf_unref(frag);
    830a:	f011 fc73 	bl	19bf4 <net_buf_unref>
		return NULL;
    830e:	4635      	mov	r5, r6
}
    8310:	4628      	mov	r0, r5
    8312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    8316:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    8318:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    831c:	4e0c      	ldr	r6, [pc, #48]	; (8350 <create_frag+0x68>)
    831e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8320:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    8324:	f016 fe4e 	bl	1efc4 <net_buf_simple_tailroom>
    8328:	4580      	cmp	r8, r0
    832a:	d20c      	bcs.n	8346 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    832c:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8330:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8334:	4632      	mov	r2, r6
    8336:	4638      	mov	r0, r7
    8338:	f016 fe07 	bl	1ef4a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    833c:	4631      	mov	r1, r6
    833e:	4620      	mov	r0, r4
    8340:	f016 fe1c 	bl	1ef7c <net_buf_simple_pull>
    8344:	e7e4      	b.n	8310 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    8346:	4638      	mov	r0, r7
    8348:	f016 fe3c 	bl	1efc4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    834c:	b286      	uxth	r6, r0
    834e:	e7ef      	b.n	8330 <create_frag+0x48>
    8350:	20000000 	.word	0x20000000

00008354 <bt_conn_process_tx>:
{
    8354:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8356:	7a83      	ldrb	r3, [r0, #10]
{
    8358:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    835a:	b993      	cbnz	r3, 8382 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    835c:	f3bf 8f5b 	dmb	ish
    8360:	1d03      	adds	r3, r0, #4
    8362:	e853 2f00 	ldrex	r2, [r3]
    8366:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    836a:	e843 1500 	strex	r5, r1, [r3]
    836e:	2d00      	cmp	r5, #0
    8370:	d1f7      	bne.n	8362 <bt_conn_process_tx+0xe>
    8372:	f3bf 8f5b 	dmb	ish
    8376:	0653      	lsls	r3, r2, #25
    8378:	d503      	bpl.n	8382 <bt_conn_process_tx+0x2e>
}
    837a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    837e:	f015 bde2 	b.w	1df46 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    8382:	2200      	movs	r2, #0
    8384:	2300      	movs	r3, #0
    8386:	f104 0038 	add.w	r0, r4, #56	; 0x38
    838a:	f016 fd7b 	bl	1ee84 <net_buf_get>
	BT_ASSERT(buf);
    838e:	4605      	mov	r5, r0
    8390:	b960      	cbnz	r0, 83ac <bt_conn_process_tx+0x58>
    8392:	4a1f      	ldr	r2, [pc, #124]	; (8410 <bt_conn_process_tx+0xbc>)
    8394:	491f      	ldr	r1, [pc, #124]	; (8414 <bt_conn_process_tx+0xc0>)
    8396:	4820      	ldr	r0, [pc, #128]	; (8418 <bt_conn_process_tx+0xc4>)
    8398:	f240 537a 	movw	r3, #1402	; 0x57a
    839c:	f013 ff7e 	bl	1c29c <printk>
    83a0:	4040      	eors	r0, r0
    83a2:	f380 8811 	msr	BASEPRI, r0
    83a6:	f04f 0003 	mov.w	r0, #3
    83aa:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    83ac:	4e1b      	ldr	r6, [pc, #108]	; (841c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    83ae:	89aa      	ldrh	r2, [r5, #12]
    83b0:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    83b4:	429a      	cmp	r2, r3
    83b6:	d807      	bhi.n	83c8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    83b8:	2300      	movs	r3, #0
    83ba:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    83bc:	4629      	mov	r1, r5
    83be:	4620      	mov	r0, r4
    83c0:	f7ff faea 	bl	7998 <send_frag>
	if (!send_buf(conn, buf)) {
    83c4:	b130      	cbz	r0, 83d4 <bt_conn_process_tx+0x80>
}
    83c6:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    83c8:	4629      	mov	r1, r5
    83ca:	4620      	mov	r0, r4
    83cc:	f7ff ff8c 	bl	82e8 <create_frag>
	if (!frag) {
    83d0:	4601      	mov	r1, r0
    83d2:	b920      	cbnz	r0, 83de <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    83d4:	4628      	mov	r0, r5
}
    83d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    83da:	f011 bc0b 	b.w	19bf4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    83de:	2301      	movs	r3, #1
    83e0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    83e2:	4620      	mov	r0, r4
    83e4:	f7ff fad8 	bl	7998 <send_frag>
    83e8:	2800      	cmp	r0, #0
    83ea:	d0f3      	beq.n	83d4 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    83ec:	89aa      	ldrh	r2, [r5, #12]
    83ee:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    83f2:	429a      	cmp	r2, r3
    83f4:	d802      	bhi.n	83fc <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    83f6:	2300      	movs	r3, #0
    83f8:	2203      	movs	r2, #3
    83fa:	e7df      	b.n	83bc <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    83fc:	4629      	mov	r1, r5
    83fe:	4620      	mov	r0, r4
    8400:	f7ff ff72 	bl	82e8 <create_frag>
		if (!frag) {
    8404:	4601      	mov	r1, r0
    8406:	2800      	cmp	r0, #0
    8408:	d0e4      	beq.n	83d4 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    840a:	2301      	movs	r3, #1
    840c:	461a      	mov	r2, r3
    840e:	e7e8      	b.n	83e2 <bt_conn_process_tx+0x8e>
    8410:	00022963 	.word	0x00022963
    8414:	00021f37 	.word	0x00021f37
    8418:	00022202 	.word	0x00022202
    841c:	20000000 	.word	0x20000000

00008420 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    8420:	4b03      	ldr	r3, [pc, #12]	; (8430 <bt_conn_index+0x10>)
    8422:	1ac0      	subs	r0, r0, r3
    8424:	4b03      	ldr	r3, [pc, #12]	; (8434 <bt_conn_index+0x14>)
    8426:	1180      	asrs	r0, r0, #6
    8428:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    842a:	b2c0      	uxtb	r0, r0
    842c:	4770      	bx	lr
    842e:	bf00      	nop
    8430:	20000988 	.word	0x20000988
    8434:	aaaaaaab 	.word	0xaaaaaaab

00008438 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    8438:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    843a:	4914      	ldr	r1, [pc, #80]	; (848c <bt_conn_init+0x54>)
    843c:	4814      	ldr	r0, [pc, #80]	; (8490 <bt_conn_init+0x58>)
    843e:	f017 f846 	bl	1f4ce <k_queue_append>
    8442:	4914      	ldr	r1, [pc, #80]	; (8494 <bt_conn_init+0x5c>)
    8444:	4812      	ldr	r0, [pc, #72]	; (8490 <bt_conn_init+0x58>)
    8446:	f017 f842 	bl	1f4ce <k_queue_append>
    844a:	4913      	ldr	r1, [pc, #76]	; (8498 <bt_conn_init+0x60>)
    844c:	4810      	ldr	r0, [pc, #64]	; (8490 <bt_conn_init+0x58>)
    844e:	f017 f83e 	bl	1f4ce <k_queue_append>
	}

	bt_att_init();
    8452:	f016 fa16 	bl	1e882 <bt_att_init>

	err = bt_smp_init();
    8456:	f016 fd0d 	bl	1ee74 <bt_smp_init>
	if (err) {
    845a:	4605      	mov	r5, r0
    845c:	b998      	cbnz	r0, 8486 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
    845e:	f015 fee3 	bl	1e228 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8462:	480e      	ldr	r0, [pc, #56]	; (849c <bt_conn_init+0x64>)
    8464:	f015 fdb6 	bl	1dfd4 <bt_conn_ref>

			if (!conn) {
    8468:	4604      	mov	r4, r0
    846a:	b160      	cbz	r0, 8486 <bt_conn_init+0x4e>
    846c:	3004      	adds	r0, #4
    846e:	f015 fd33 	bl	1ded8 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    8472:	07c3      	lsls	r3, r0, #31
    8474:	d504      	bpl.n	8480 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    8476:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8478:	2102      	movs	r1, #2
    847a:	4620      	mov	r0, r4
    847c:	f7ff fd02 	bl	7e84 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
    8480:	4620      	mov	r0, r4
    8482:	f015 fdc2 	bl	1e00a <bt_conn_unref>
		}
	}

	return 0;
}
    8486:	4628      	mov	r0, r5
    8488:	bd38      	pop	{r3, r4, r5, pc}
    848a:	bf00      	nop
    848c:	200012dc 	.word	0x200012dc
    8490:	20000730 	.word	0x20000730
    8494:	200012ec 	.word	0x200012ec
    8498:	200012fc 	.word	0x200012fc
    849c:	20000988 	.word	0x20000988

000084a0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    84a0:	4a0b      	ldr	r2, [pc, #44]	; (84d0 <l2cap_accept+0x30>)
{
    84a2:	b508      	push	{r3, lr}
    84a4:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    84a6:	6810      	ldr	r0, [r2, #0]
    84a8:	b918      	cbnz	r0, 84b2 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    84aa:	4b0a      	ldr	r3, [pc, #40]	; (84d4 <l2cap_accept+0x34>)
    84ac:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    84ae:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    84b0:	bd08      	pop	{r3, pc}
    84b2:	4909      	ldr	r1, [pc, #36]	; (84d8 <l2cap_accept+0x38>)
    84b4:	4a09      	ldr	r2, [pc, #36]	; (84dc <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    84b6:	480a      	ldr	r0, [pc, #40]	; (84e0 <l2cap_accept+0x40>)
    84b8:	1a52      	subs	r2, r2, r1
    84ba:	08d2      	lsrs	r2, r2, #3
    84bc:	0192      	lsls	r2, r2, #6
    84be:	f042 0201 	orr.w	r2, r2, #1
    84c2:	4619      	mov	r1, r3
    84c4:	f014 fb36 	bl	1cb34 <log_1>
	return -ENOMEM;
    84c8:	f06f 000b 	mvn.w	r0, #11
    84cc:	e7f0      	b.n	84b0 <l2cap_accept+0x10>
    84ce:	bf00      	nop
    84d0:	20000a48 	.word	0x20000a48
    84d4:	000203e4 	.word	0x000203e4
    84d8:	0001ff94 	.word	0x0001ff94
    84dc:	0002009c 	.word	0x0002009c
    84e0:	000229f0 	.word	0x000229f0

000084e4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    84e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84e6:	4605      	mov	r5, r0
    84e8:	460f      	mov	r7, r1
    84ea:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    84ec:	2300      	movs	r3, #0
    84ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    84f2:	2104      	movs	r1, #4
    84f4:	2000      	movs	r0, #0
    84f6:	f7ff fecd 	bl	8294 <bt_conn_create_pdu_timeout>
	if (!buf) {
    84fa:	4604      	mov	r4, r0
    84fc:	b960      	cbnz	r0, 8518 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    84fe:	4a0a      	ldr	r2, [pc, #40]	; (8528 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    8500:	4b0a      	ldr	r3, [pc, #40]	; (852c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    8502:	480b      	ldr	r0, [pc, #44]	; (8530 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    8504:	1ad2      	subs	r2, r2, r3
    8506:	08d2      	lsrs	r2, r2, #3
    8508:	0192      	lsls	r2, r2, #6
    850a:	f042 0201 	orr.w	r2, r2, #1
    850e:	4629      	mov	r1, r5
    8510:	f014 fb10 	bl	1cb34 <log_1>
}
    8514:	4620      	mov	r0, r4
    8516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    8518:	2104      	movs	r1, #4
    851a:	3008      	adds	r0, #8
    851c:	f016 fd0f 	bl	1ef3e <net_buf_simple_add>
	hdr->code = code;
    8520:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    8522:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    8524:	8046      	strh	r6, [r0, #2]
	return buf;
    8526:	e7f5      	b.n	8514 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    8528:	0002009c 	.word	0x0002009c
    852c:	0001ff94 	.word	0x0001ff94
    8530:	00022a17 	.word	0x00022a17

00008534 <l2cap_rtx_timeout>:
{
    8534:	b538      	push	{r3, r4, r5, lr}
    8536:	4a0b      	ldr	r2, [pc, #44]	; (8564 <l2cap_rtx_timeout+0x30>)
    8538:	4b0b      	ldr	r3, [pc, #44]	; (8568 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    853a:	4604      	mov	r4, r0
    853c:	1ad2      	subs	r2, r2, r3
    853e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    8542:	480a      	ldr	r0, [pc, #40]	; (856c <l2cap_rtx_timeout+0x38>)
    8544:	08d2      	lsrs	r2, r2, #3
    8546:	0192      	lsls	r2, r2, #6
    8548:	4621      	mov	r1, r4
    854a:	f042 0201 	orr.w	r2, r2, #1
    854e:	f014 faf1 	bl	1cb34 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    8552:	4628      	mov	r0, r5
    8554:	4621      	mov	r1, r4
    8556:	f015 fdc1 	bl	1e0dc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    855a:	4620      	mov	r0, r4
}
    855c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8560:	f015 bddd 	b.w	1e11e <bt_l2cap_chan_del>
    8564:	0002009c 	.word	0x0002009c
    8568:	0001ff94 	.word	0x0001ff94
    856c:	00022a3f 	.word	0x00022a3f

00008570 <bt_l2cap_connected>:
{
    8570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8574:	4e29      	ldr	r6, [pc, #164]	; (861c <bt_l2cap_connected+0xac>)
    8576:	4f2a      	ldr	r7, [pc, #168]	; (8620 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8578:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8624 <bt_l2cap_connected+0xb4>
{
    857c:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    857e:	42be      	cmp	r6, r7
    8580:	d302      	bcc.n	8588 <bt_l2cap_connected+0x18>
}
    8582:	b003      	add	sp, #12
    8584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8588:	6873      	ldr	r3, [r6, #4]
    858a:	a901      	add	r1, sp, #4
    858c:	4620      	mov	r0, r4
    858e:	4798      	blx	r3
    8590:	2800      	cmp	r0, #0
    8592:	db3d      	blt.n	8610 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    8594:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    8596:	8833      	ldrh	r3, [r6, #0]
    8598:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    859c:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    85a0:	4641      	mov	r1, r8
    85a2:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    85a6:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    85aa:	f017 f887 	bl	1f6bc <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    85ae:	f3bf 8f5b 	dmb	ish
    85b2:	f105 0368 	add.w	r3, r5, #104	; 0x68
    85b6:	2200      	movs	r2, #0
    85b8:	e853 1f00 	ldrex	r1, [r3]
    85bc:	e843 2000 	strex	r0, r2, [r3]
    85c0:	2800      	cmp	r0, #0
    85c2:	d1f9      	bne.n	85b8 <bt_l2cap_connected+0x48>
    85c4:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    85c8:	60aa      	str	r2, [r5, #8]
	return list->tail;
    85ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    85cc:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    85d0:	bb02      	cbnz	r2, 8614 <bt_l2cap_connected+0xa4>
	list->head = node;
    85d2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    85d6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    85d8:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    85da:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    85dc:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    85e0:	681b      	ldr	r3, [r3, #0]
    85e2:	b103      	cbz	r3, 85e6 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    85e4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    85e6:	9b01      	ldr	r3, [sp, #4]
    85e8:	f3bf 8f5b 	dmb	ish
    85ec:	3368      	adds	r3, #104	; 0x68
    85ee:	e853 2f00 	ldrex	r2, [r3]
    85f2:	f042 0201 	orr.w	r2, r2, #1
    85f6:	e843 2100 	strex	r1, r2, [r3]
    85fa:	2900      	cmp	r1, #0
    85fc:	d1f7      	bne.n	85ee <bt_l2cap_connected+0x7e>
    85fe:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    8602:	9801      	ldr	r0, [sp, #4]
    8604:	6843      	ldr	r3, [r0, #4]
    8606:	699b      	ldr	r3, [r3, #24]
    8608:	b113      	cbz	r3, 8610 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    860a:	f100 0168 	add.w	r1, r0, #104	; 0x68
    860e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8610:	360c      	adds	r6, #12
    8612:	e7b4      	b.n	857e <bt_l2cap_connected+0xe>
	parent->next = child;
    8614:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8616:	6563      	str	r3, [r4, #84]	; 0x54
}
    8618:	e7dd      	b.n	85d6 <bt_l2cap_connected+0x66>
    861a:	bf00      	nop
    861c:	0001ff60 	.word	0x0001ff60
    8620:	0001ff84 	.word	0x0001ff84
    8624:	00008535 	.word	0x00008535

00008628 <l2cap_recv>:
{
    8628:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    862a:	898b      	ldrh	r3, [r1, #12]
    862c:	2b03      	cmp	r3, #3
{
    862e:	b085      	sub	sp, #20
    8630:	4606      	mov	r6, r0
    8632:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8634:	d80a      	bhi.n	864c <l2cap_recv+0x24>
    8636:	494f      	ldr	r1, [pc, #316]	; (8774 <l2cap_recv+0x14c>)
    8638:	4b4f      	ldr	r3, [pc, #316]	; (8778 <l2cap_recv+0x150>)
		BT_ERR("Too small L2CAP signaling PDU");
    863a:	4850      	ldr	r0, [pc, #320]	; (877c <l2cap_recv+0x154>)
    863c:	1ac9      	subs	r1, r1, r3
    863e:	08c9      	lsrs	r1, r1, #3
    8640:	0189      	lsls	r1, r1, #6
    8642:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    8646:	f014 fa68 	bl	1cb1a <log_0>
		return 0;
    864a:	e013      	b.n	8674 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
    864c:	2104      	movs	r1, #4
    864e:	f105 0008 	add.w	r0, r5, #8
    8652:	f016 fc9b 	bl	1ef8c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8656:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    8658:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    865a:	428a      	cmp	r2, r1
    865c:	4604      	mov	r4, r0
    865e:	d00c      	beq.n	867a <l2cap_recv+0x52>
    8660:	4845      	ldr	r0, [pc, #276]	; (8778 <l2cap_recv+0x150>)
    8662:	4b44      	ldr	r3, [pc, #272]	; (8774 <l2cap_recv+0x14c>)
    8664:	1a1b      	subs	r3, r3, r0
    8666:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    8668:	019b      	lsls	r3, r3, #6
    866a:	4845      	ldr	r0, [pc, #276]	; (8780 <l2cap_recv+0x158>)
    866c:	f043 0301 	orr.w	r3, r3, #1
    8670:	f014 fa74 	bl	1cb5c <log_2>
}
    8674:	2000      	movs	r0, #0
    8676:	b005      	add	sp, #20
    8678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    867a:	7841      	ldrb	r1, [r0, #1]
    867c:	b941      	cbnz	r1, 8690 <l2cap_recv+0x68>
    867e:	493d      	ldr	r1, [pc, #244]	; (8774 <l2cap_recv+0x14c>)
    8680:	4b3d      	ldr	r3, [pc, #244]	; (8778 <l2cap_recv+0x150>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    8682:	4840      	ldr	r0, [pc, #256]	; (8784 <l2cap_recv+0x15c>)
    8684:	1ac9      	subs	r1, r1, r3
    8686:	08c9      	lsrs	r1, r1, #3
    8688:	0189      	lsls	r1, r1, #6
    868a:	f041 0101 	orr.w	r1, r1, #1
    868e:	e7da      	b.n	8646 <l2cap_recv+0x1e>
	switch (hdr->code) {
    8690:	7803      	ldrb	r3, [r0, #0]
    8692:	2b12      	cmp	r3, #18
    8694:	d01c      	beq.n	86d0 <l2cap_recv+0xa8>
    8696:	2b13      	cmp	r3, #19
    8698:	d00f      	beq.n	86ba <l2cap_recv+0x92>
    869a:	2b01      	cmp	r3, #1
    869c:	d0ea      	beq.n	8674 <l2cap_recv+0x4c>
    869e:	4936      	ldr	r1, [pc, #216]	; (8778 <l2cap_recv+0x150>)
    86a0:	4a34      	ldr	r2, [pc, #208]	; (8774 <l2cap_recv+0x14c>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    86a2:	4839      	ldr	r0, [pc, #228]	; (8788 <l2cap_recv+0x160>)
    86a4:	1a52      	subs	r2, r2, r1
    86a6:	08d2      	lsrs	r2, r2, #3
    86a8:	0192      	lsls	r2, r2, #6
    86aa:	4619      	mov	r1, r3
    86ac:	f042 0202 	orr.w	r2, r2, #2
    86b0:	f014 fa40 	bl	1cb34 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    86b4:	7861      	ldrb	r1, [r4, #1]
    86b6:	6830      	ldr	r0, [r6, #0]
    86b8:	e019      	b.n	86ee <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
    86ba:	2a01      	cmp	r2, #1
    86bc:	d8da      	bhi.n	8674 <l2cap_recv+0x4c>
    86be:	492d      	ldr	r1, [pc, #180]	; (8774 <l2cap_recv+0x14c>)
    86c0:	4b2d      	ldr	r3, [pc, #180]	; (8778 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn param rsp");
    86c2:	4832      	ldr	r0, [pc, #200]	; (878c <l2cap_recv+0x164>)
    86c4:	1ac9      	subs	r1, r1, r3
    86c6:	08c9      	lsrs	r1, r1, #3
    86c8:	0189      	lsls	r1, r1, #6
    86ca:	f041 0101 	orr.w	r1, r1, #1
    86ce:	e7ba      	b.n	8646 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    86d0:	2a07      	cmp	r2, #7
    86d2:	d808      	bhi.n	86e6 <l2cap_recv+0xbe>
    86d4:	4927      	ldr	r1, [pc, #156]	; (8774 <l2cap_recv+0x14c>)
    86d6:	4b28      	ldr	r3, [pc, #160]	; (8778 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn update param req");
    86d8:	482d      	ldr	r0, [pc, #180]	; (8790 <l2cap_recv+0x168>)
    86da:	1ac9      	subs	r1, r1, r3
    86dc:	08c9      	lsrs	r1, r1, #3
    86de:	0189      	lsls	r1, r1, #6
    86e0:	f041 0101 	orr.w	r1, r1, #1
    86e4:	e7af      	b.n	8646 <l2cap_recv+0x1e>
    86e6:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    86e8:	78f7      	ldrb	r7, [r6, #3]
    86ea:	b11f      	cbz	r7, 86f4 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    86ec:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    86ee:	f015 fd5d 	bl	1e1ac <l2cap_send_reject.constprop.0>
		break;
    86f2:	e7bf      	b.n	8674 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    86f4:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    86f6:	7850      	ldrb	r0, [r2, #1]
    86f8:	7813      	ldrb	r3, [r2, #0]
    86fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    86fe:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    8702:	78d0      	ldrb	r0, [r2, #3]
    8704:	7893      	ldrb	r3, [r2, #2]
    8706:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    870a:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    870e:	7950      	ldrb	r0, [r2, #5]
    8710:	7913      	ldrb	r3, [r2, #4]
    8712:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8716:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    871a:	7993      	ldrb	r3, [r2, #6]
    871c:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    871e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    8720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8724:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    8726:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    872a:	f7ff fedb 	bl	84e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    872e:	4604      	mov	r4, r0
    8730:	2800      	cmp	r0, #0
    8732:	d09f      	beq.n	8674 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
    8734:	a902      	add	r1, sp, #8
    8736:	4630      	mov	r0, r6
    8738:	f7ff fa00 	bl	7b3c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
    873c:	2102      	movs	r1, #2
    873e:	4605      	mov	r5, r0
    8740:	f104 0008 	add.w	r0, r4, #8
    8744:	f016 fbfb 	bl	1ef3e <net_buf_simple_add>
	if (accepted) {
    8748:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    874c:	b2db      	uxtb	r3, r3
    874e:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8750:	4622      	mov	r2, r4
    8752:	9700      	str	r7, [sp, #0]
    8754:	463b      	mov	r3, r7
    8756:	2105      	movs	r1, #5
    8758:	4630      	mov	r0, r6
    875a:	f015 fd0e 	bl	1e17a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    875e:	b110      	cbz	r0, 8766 <l2cap_recv+0x13e>
		net_buf_unref(buf);
    8760:	4620      	mov	r0, r4
    8762:	f011 fa47 	bl	19bf4 <net_buf_unref>
	if (accepted) {
    8766:	2d00      	cmp	r5, #0
    8768:	d084      	beq.n	8674 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    876a:	a902      	add	r1, sp, #8
    876c:	4630      	mov	r0, r6
    876e:	f015 fc89 	bl	1e084 <bt_conn_le_conn_update>
    8772:	e77f      	b.n	8674 <l2cap_recv+0x4c>
    8774:	0002009c 	.word	0x0002009c
    8778:	0001ff94 	.word	0x0001ff94
    877c:	00022a4f 	.word	0x00022a4f
    8780:	00022a6d 	.word	0x00022a6d
    8784:	00022a8e 	.word	0x00022a8e
    8788:	00022aee 	.word	0x00022aee
    878c:	00022aaf 	.word	0x00022aaf
    8790:	00022acb 	.word	0x00022acb

00008794 <bt_l2cap_recv>:
{
    8794:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    8796:	898b      	ldrh	r3, [r1, #12]
    8798:	2b03      	cmp	r3, #3
{
    879a:	4605      	mov	r5, r0
    879c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    879e:	d80e      	bhi.n	87be <bt_l2cap_recv+0x2a>
    87a0:	4914      	ldr	r1, [pc, #80]	; (87f4 <bt_l2cap_recv+0x60>)
    87a2:	4b15      	ldr	r3, [pc, #84]	; (87f8 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    87a4:	4815      	ldr	r0, [pc, #84]	; (87fc <bt_l2cap_recv+0x68>)
    87a6:	1ac9      	subs	r1, r1, r3
    87a8:	08c9      	lsrs	r1, r1, #3
    87aa:	0189      	lsls	r1, r1, #6
    87ac:	f041 0101 	orr.w	r1, r1, #1
    87b0:	f014 f9b3 	bl	1cb1a <log_0>
	net_buf_unref(buf);
    87b4:	4620      	mov	r0, r4
}
    87b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    87ba:	f011 ba1b 	b.w	19bf4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    87be:	2104      	movs	r1, #4
    87c0:	f104 0008 	add.w	r0, r4, #8
    87c4:	f016 fbe2 	bl	1ef8c <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    87c8:	8841      	ldrh	r1, [r0, #2]
    87ca:	4628      	mov	r0, r5
    87cc:	f015 fd1c 	bl	1e208 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    87d0:	b950      	cbnz	r0, 87e8 <bt_l2cap_recv+0x54>
    87d2:	4b09      	ldr	r3, [pc, #36]	; (87f8 <bt_l2cap_recv+0x64>)
    87d4:	4a07      	ldr	r2, [pc, #28]	; (87f4 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    87d6:	480a      	ldr	r0, [pc, #40]	; (8800 <bt_l2cap_recv+0x6c>)
    87d8:	1ad2      	subs	r2, r2, r3
    87da:	08d2      	lsrs	r2, r2, #3
    87dc:	0192      	lsls	r2, r2, #6
    87de:	f042 0202 	orr.w	r2, r2, #2
    87e2:	f014 f9a7 	bl	1cb34 <log_1>
		net_buf_unref(buf);
    87e6:	e7e5      	b.n	87b4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    87e8:	6843      	ldr	r3, [r0, #4]
    87ea:	4621      	mov	r1, r4
    87ec:	691b      	ldr	r3, [r3, #16]
    87ee:	4798      	blx	r3
    87f0:	e7e0      	b.n	87b4 <bt_l2cap_recv+0x20>
    87f2:	bf00      	nop
    87f4:	0002009c 	.word	0x0002009c
    87f8:	0001ff94 	.word	0x0001ff94
    87fc:	00022b0c 	.word	0x00022b0c
    8800:	00022b29 	.word	0x00022b29

00008804 <bt_l2cap_update_conn_param>:
{
    8804:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8806:	460d      	mov	r5, r1
	ident++;
    8808:	4916      	ldr	r1, [pc, #88]	; (8864 <bt_l2cap_update_conn_param+0x60>)
    880a:	780b      	ldrb	r3, [r1, #0]
    880c:	3301      	adds	r3, #1
	if (!ident) {
    880e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    8812:	bf08      	it	eq
    8814:	2301      	moveq	r3, #1
    8816:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8818:	7809      	ldrb	r1, [r1, #0]
{
    881a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    881c:	2208      	movs	r2, #8
    881e:	2012      	movs	r0, #18
    8820:	f7ff fe60 	bl	84e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    8824:	4604      	mov	r4, r0
    8826:	b1d0      	cbz	r0, 885e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    8828:	2108      	movs	r1, #8
    882a:	4408      	add	r0, r1
    882c:	f016 fb87 	bl	1ef3e <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8830:	882b      	ldrh	r3, [r5, #0]
    8832:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8834:	886b      	ldrh	r3, [r5, #2]
    8836:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8838:	88ab      	ldrh	r3, [r5, #4]
    883a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    883c:	88eb      	ldrh	r3, [r5, #6]
    883e:	80c3      	strh	r3, [r0, #6]
    8840:	2300      	movs	r3, #0
    8842:	9300      	str	r3, [sp, #0]
    8844:	4622      	mov	r2, r4
    8846:	2105      	movs	r1, #5
    8848:	4630      	mov	r0, r6
    884a:	f015 fc96 	bl	1e17a <bt_l2cap_send_cb>
	if (err) {
    884e:	4605      	mov	r5, r0
    8850:	b110      	cbz	r0, 8858 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    8852:	4620      	mov	r0, r4
    8854:	f011 f9ce 	bl	19bf4 <net_buf_unref>
}
    8858:	4628      	mov	r0, r5
    885a:	b002      	add	sp, #8
    885c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    885e:	f06f 050b 	mvn.w	r5, #11
    8862:	e7f9      	b.n	8858 <bt_l2cap_update_conn_param+0x54>
    8864:	20002901 	.word	0x20002901

00008868 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8868:	4b02      	ldr	r3, [pc, #8]	; (8874 <att_cfm_sent+0xc>)
    886a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    886e:	f015 bcee 	b.w	1e24e <att_sent>
    8872:	bf00      	nop
    8874:	0001e5e5 	.word	0x0001e5e5

00008878 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8878:	4b02      	ldr	r3, [pc, #8]	; (8884 <att_rsp_sent+0xc>)
    887a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    887e:	f015 bce6 	b.w	1e24e <att_sent>
    8882:	bf00      	nop
    8884:	0001e5c9 	.word	0x0001e5c9

00008888 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8888:	4b02      	ldr	r3, [pc, #8]	; (8894 <att_req_sent+0xc>)
    888a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    888e:	f015 bcde 	b.w	1e24e <att_sent>
    8892:	bf00      	nop
    8894:	0001e3a7 	.word	0x0001e3a7

00008898 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    8898:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    889a:	7a83      	ldrb	r3, [r0, #10]
    889c:	2b07      	cmp	r3, #7
    889e:	d00b      	beq.n	88b8 <att_get+0x20>
    88a0:	4918      	ldr	r1, [pc, #96]	; (8904 <att_get+0x6c>)
    88a2:	4b19      	ldr	r3, [pc, #100]	; (8908 <att_get+0x70>)
		BT_WARN("Not connected");
    88a4:	4819      	ldr	r0, [pc, #100]	; (890c <att_get+0x74>)
    88a6:	1ac9      	subs	r1, r1, r3
    88a8:	08c9      	lsrs	r1, r1, #3
    88aa:	0189      	lsls	r1, r1, #6
    88ac:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    88b0:	f014 f933 	bl	1cb1a <log_0>
		return NULL;
    88b4:	2400      	movs	r4, #0
    88b6:	e00e      	b.n	88d6 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    88b8:	2104      	movs	r1, #4
    88ba:	f015 fca5 	bl	1e208 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    88be:	4604      	mov	r4, r0
    88c0:	b958      	cbnz	r0, 88da <att_get+0x42>
    88c2:	4910      	ldr	r1, [pc, #64]	; (8904 <att_get+0x6c>)
    88c4:	4b10      	ldr	r3, [pc, #64]	; (8908 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    88c6:	4812      	ldr	r0, [pc, #72]	; (8910 <att_get+0x78>)
    88c8:	1ac9      	subs	r1, r1, r3
    88ca:	08c9      	lsrs	r1, r1, #3
    88cc:	0189      	lsls	r1, r1, #6
    88ce:	f041 0101 	orr.w	r1, r1, #1
    88d2:	f014 f922 	bl	1cb1a <log_0>
	}

	return att_chan->att;
}
    88d6:	4620      	mov	r0, r4
    88d8:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    88da:	f3bf 8f5b 	dmb	ish
    88de:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    88e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    88e6:	075b      	lsls	r3, r3, #29
    88e8:	d508      	bpl.n	88fc <att_get+0x64>
    88ea:	4906      	ldr	r1, [pc, #24]	; (8904 <att_get+0x6c>)
    88ec:	4b06      	ldr	r3, [pc, #24]	; (8908 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    88ee:	4809      	ldr	r0, [pc, #36]	; (8914 <att_get+0x7c>)
    88f0:	1ac9      	subs	r1, r1, r3
    88f2:	08c9      	lsrs	r1, r1, #3
    88f4:	0189      	lsls	r1, r1, #6
    88f6:	f041 0102 	orr.w	r1, r1, #2
    88fa:	e7d9      	b.n	88b0 <att_get+0x18>
	return att_chan->att;
    88fc:	f850 4c08 	ldr.w	r4, [r0, #-8]
    8900:	e7e9      	b.n	88d6 <att_get+0x3e>
    8902:	bf00      	nop
    8904:	0001ff9c 	.word	0x0001ff9c
    8908:	0001ff94 	.word	0x0001ff94
    890c:	00022b65 	.word	0x00022b65
    8910:	00022b73 	.word	0x00022b73
    8914:	00022b8e 	.word	0x00022b8e

00008918 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8918:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    891a:	3808      	subs	r0, #8
    891c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    891e:	a901      	add	r1, sp, #4
    8920:	4802      	ldr	r0, [pc, #8]	; (892c <bt_att_released+0x14>)
    8922:	f016 fd13 	bl	1f34c <k_mem_slab_free>
}
    8926:	b003      	add	sp, #12
    8928:	f85d fb04 	ldr.w	pc, [sp], #4
    892c:	200006b4 	.word	0x200006b4

00008930 <find_type_cb>:
{
    8930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    8934:	f8d2 9000 	ldr.w	r9, [r2]
{
    8938:	b091      	sub	sp, #68	; 0x44
    893a:	4607      	mov	r7, r0
    893c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    893e:	2500      	movs	r5, #0
    8940:	f642 0301 	movw	r3, #10241	; 0x2801
    8944:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    8946:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    894a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    894e:	a90b      	add	r1, sp, #44	; 0x2c
{
    8950:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8952:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8956:	f015 f80f 	bl	1d978 <bt_uuid_cmp>
    895a:	2800      	cmp	r0, #0
    895c:	d066      	beq.n	8a2c <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    895e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8962:	6838      	ldr	r0, [r7, #0]
    8964:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8968:	a90b      	add	r1, sp, #44	; 0x2c
    896a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    896e:	f015 f803 	bl	1d978 <bt_uuid_cmp>
    8972:	b138      	cbz	r0, 8984 <find_type_cb+0x54>
		if (data->group &&
    8974:	68a3      	ldr	r3, [r4, #8]
    8976:	b11b      	cbz	r3, 8980 <find_type_cb+0x50>
    8978:	885a      	ldrh	r2, [r3, #2]
    897a:	42b2      	cmp	r2, r6
    897c:	d200      	bcs.n	8980 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    897e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8980:	2001      	movs	r0, #1
    8982:	e009      	b.n	8998 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    8984:	6861      	ldr	r1, [r4, #4]
    8986:	4608      	mov	r0, r1
    8988:	f015 fc59 	bl	1e23e <net_buf_frags_len>
    898c:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    8990:	1a1b      	subs	r3, r3, r0
    8992:	2b03      	cmp	r3, #3
    8994:	d803      	bhi.n	899e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    8996:	2000      	movs	r0, #0
}
    8998:	b011      	add	sp, #68	; 0x44
    899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    899e:	4608      	mov	r0, r1
    89a0:	f016 fa9f 	bl	1eee2 <net_buf_frag_last>
    89a4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    89a6:	6860      	ldr	r0, [r4, #4]
    89a8:	f015 fc49 	bl	1e23e <net_buf_frags_len>
    89ac:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
    89b0:	f105 0b08 	add.w	fp, r5, #8
    89b4:	ebaa 0a00 	sub.w	sl, sl, r0
    89b8:	4658      	mov	r0, fp
    89ba:	f016 fb03 	bl	1efc4 <net_buf_simple_tailroom>
    89be:	4582      	cmp	sl, r0
    89c0:	d237      	bcs.n	8a32 <find_type_cb+0x102>
    89c2:	6860      	ldr	r0, [r4, #4]
    89c4:	f015 fc3b 	bl	1e23e <net_buf_frags_len>
    89c8:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    89cc:	1a18      	subs	r0, r3, r0
	if (!len) {
    89ce:	b970      	cbnz	r0, 89ee <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    89d0:	6863      	ldr	r3, [r4, #4]
    89d2:	7998      	ldrb	r0, [r3, #6]
    89d4:	f011 f850 	bl	19a78 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    89d8:	2200      	movs	r2, #0
    89da:	2300      	movs	r3, #0
    89dc:	f016 fa4d 	bl	1ee7a <net_buf_alloc_fixed>
		if (!frag) {
    89e0:	4605      	mov	r5, r0
    89e2:	2800      	cmp	r0, #0
    89e4:	d0d7      	beq.n	8996 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    89e6:	4601      	mov	r1, r0
    89e8:	6860      	ldr	r0, [r4, #4]
    89ea:	f016 fa8b 	bl	1ef04 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    89ee:	2300      	movs	r3, #0
    89f0:	9300      	str	r3, [sp, #0]
    89f2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    89f6:	4639      	mov	r1, r7
    89f8:	2310      	movs	r3, #16
    89fa:	aa02      	add	r2, sp, #8
    89fc:	4640      	mov	r0, r8
    89fe:	47c8      	blx	r9
	if (read < 0) {
    8a00:	1e07      	subs	r7, r0, #0
    8a02:	db13      	blt.n	8a2c <find_type_cb+0xfc>
	if (read != data->value_len) {
    8a04:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8a06:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    8a08:	42ba      	cmp	r2, r7
    8a0a:	d037      	beq.n	8a7c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8a0c:	4601      	mov	r1, r0
    8a0e:	a80b      	add	r0, sp, #44	; 0x2c
    8a10:	f014 ffe0 	bl	1d9d4 <bt_uuid_create>
    8a14:	b988      	cbnz	r0, 8a3a <find_type_cb+0x10a>
    8a16:	4a1b      	ldr	r2, [pc, #108]	; (8a84 <find_type_cb+0x154>)
    8a18:	4b1b      	ldr	r3, [pc, #108]	; (8a88 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8a1a:	7c21      	ldrb	r1, [r4, #16]
    8a1c:	481b      	ldr	r0, [pc, #108]	; (8a8c <find_type_cb+0x15c>)
    8a1e:	1ad2      	subs	r2, r2, r3
    8a20:	08d2      	lsrs	r2, r2, #3
    8a22:	0192      	lsls	r2, r2, #6
    8a24:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    8a28:	f014 f884 	bl	1cb34 <log_1>
	data->group = NULL;
    8a2c:	2300      	movs	r3, #0
    8a2e:	60a3      	str	r3, [r4, #8]
    8a30:	e7a6      	b.n	8980 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    8a32:	4658      	mov	r0, fp
    8a34:	f016 fac6 	bl	1efc4 <net_buf_simple_tailroom>
    8a38:	e7c9      	b.n	89ce <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8a3a:	b2fa      	uxtb	r2, r7
    8a3c:	a902      	add	r1, sp, #8
    8a3e:	a806      	add	r0, sp, #24
    8a40:	f014 ffc8 	bl	1d9d4 <bt_uuid_create>
    8a44:	b948      	cbnz	r0, 8a5a <find_type_cb+0x12a>
    8a46:	4a0f      	ldr	r2, [pc, #60]	; (8a84 <find_type_cb+0x154>)
    8a48:	4b0f      	ldr	r3, [pc, #60]	; (8a88 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    8a4a:	4811      	ldr	r0, [pc, #68]	; (8a90 <find_type_cb+0x160>)
    8a4c:	1ad2      	subs	r2, r2, r3
    8a4e:	08d2      	lsrs	r2, r2, #3
    8a50:	0192      	lsls	r2, r2, #6
    8a52:	f042 0202 	orr.w	r2, r2, #2
    8a56:	4639      	mov	r1, r7
    8a58:	e7e6      	b.n	8a28 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8a5a:	a906      	add	r1, sp, #24
    8a5c:	a80b      	add	r0, sp, #44	; 0x2c
    8a5e:	f014 ff8b 	bl	1d978 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    8a62:	2800      	cmp	r0, #0
    8a64:	d1e2      	bne.n	8a2c <find_type_cb+0xfc>
	data->err = 0x00;
    8a66:	2300      	movs	r3, #0
    8a68:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    8a6a:	2104      	movs	r1, #4
    8a6c:	f105 0008 	add.w	r0, r5, #8
    8a70:	f016 fa65 	bl	1ef3e <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8a74:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8a76:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8a78:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8a7a:	e781      	b.n	8980 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8a7c:	a902      	add	r1, sp, #8
    8a7e:	f014 feb2 	bl	1d7e6 <memcmp>
    8a82:	e7ee      	b.n	8a62 <find_type_cb+0x132>
    8a84:	0001ff9c 	.word	0x0001ff9c
    8a88:	0001ff94 	.word	0x0001ff94
    8a8c:	00022bb2 	.word	0x00022bb2
    8a90:	00022bd1 	.word	0x00022bd1

00008a94 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8a96:	2300      	movs	r3, #0
{
    8a98:	4606      	mov	r6, r0
    8a9a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8a9c:	4828      	ldr	r0, [pc, #160]	; (8b40 <bt_att_accept+0xac>)
    8a9e:	2200      	movs	r2, #0
    8aa0:	4669      	mov	r1, sp
    8aa2:	f012 f9af 	bl	1ae04 <k_mem_slab_alloc>
    8aa6:	4604      	mov	r4, r0
    8aa8:	b178      	cbz	r0, 8aca <bt_att_accept+0x36>
    8aaa:	4a26      	ldr	r2, [pc, #152]	; (8b44 <bt_att_accept+0xb0>)
    8aac:	4b26      	ldr	r3, [pc, #152]	; (8b48 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    8aae:	4827      	ldr	r0, [pc, #156]	; (8b4c <bt_att_accept+0xb8>)
    8ab0:	1ad2      	subs	r2, r2, r3
    8ab2:	08d2      	lsrs	r2, r2, #3
    8ab4:	0192      	lsls	r2, r2, #6
    8ab6:	f042 0201 	orr.w	r2, r2, #1
    8aba:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8abc:	f014 f83a 	bl	1cb34 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8ac0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8ac4:	4620      	mov	r0, r4
    8ac6:	b003      	add	sp, #12
    8ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8aca:	4601      	mov	r1, r0
    8acc:	222c      	movs	r2, #44	; 0x2c
    8ace:	9800      	ldr	r0, [sp, #0]
    8ad0:	f014 fec5 	bl	1d85e <memset>
	att->conn = conn;
    8ad4:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8ad6:	481e      	ldr	r0, [pc, #120]	; (8b50 <bt_att_accept+0xbc>)
	list->tail = NULL;
    8ad8:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    8ada:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    8ade:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    8ae2:	2200      	movs	r2, #0
    8ae4:	2300      	movs	r3, #0
    8ae6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8ae8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8aea:	f012 f98b 	bl	1ae04 <k_mem_slab_alloc>
    8aee:	4604      	mov	r4, r0
    8af0:	b148      	cbz	r0, 8b06 <bt_att_accept+0x72>
    8af2:	4a14      	ldr	r2, [pc, #80]	; (8b44 <bt_att_accept+0xb0>)
    8af4:	4b14      	ldr	r3, [pc, #80]	; (8b48 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8af6:	6829      	ldr	r1, [r5, #0]
    8af8:	4816      	ldr	r0, [pc, #88]	; (8b54 <bt_att_accept+0xc0>)
    8afa:	1ad2      	subs	r2, r2, r3
    8afc:	08d2      	lsrs	r2, r2, #3
    8afe:	0192      	lsls	r2, r2, #6
    8b00:	f042 0201 	orr.w	r2, r2, #1
    8b04:	e7da      	b.n	8abc <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    8b06:	4601      	mov	r1, r0
    8b08:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8b0c:	9801      	ldr	r0, [sp, #4]
    8b0e:	f014 fea6 	bl	1d85e <memset>
	chan->chan.chan.ops = &ops;
    8b12:	9801      	ldr	r0, [sp, #4]
    8b14:	4b10      	ldr	r3, [pc, #64]	; (8b58 <bt_att_accept+0xc4>)
    8b16:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8b18:	30f8      	adds	r0, #248	; 0xf8
    8b1a:	f016 fccc 	bl	1f4b6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8b1e:	9b01      	ldr	r3, [sp, #4]
    8b20:	f3bf 8f5b 	dmb	ish
    8b24:	33f0      	adds	r3, #240	; 0xf0
    8b26:	e853 2f00 	ldrex	r2, [r3]
    8b2a:	e843 4100 	strex	r1, r4, [r3]
    8b2e:	2900      	cmp	r1, #0
    8b30:	d1f9      	bne.n	8b26 <bt_att_accept+0x92>
    8b32:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    8b36:	9b01      	ldr	r3, [sp, #4]
    8b38:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8b3c:	603b      	str	r3, [r7, #0]
	return 0;
    8b3e:	e7c1      	b.n	8ac4 <bt_att_accept+0x30>
    8b40:	20000698 	.word	0x20000698
    8b44:	0001ff9c 	.word	0x0001ff9c
    8b48:	0001ff94 	.word	0x0001ff94
    8b4c:	00022bf0 	.word	0x00022bf0
    8b50:	200006b4 	.word	0x200006b4
    8b54:	00022c15 	.word	0x00022c15
    8b58:	200001b8 	.word	0x200001b8

00008b5c <read_group_cb>:
{
    8b5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8b60:	4605      	mov	r5, r0
    8b62:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8b64:	f04f 0800 	mov.w	r8, #0
    8b68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8b6c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8b6e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8b70:	f88d 8008 	strb.w	r8, [sp, #8]
    8b74:	a902      	add	r1, sp, #8
{
    8b76:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8b78:	f8ad 300a 	strh.w	r3, [sp, #10]
    8b7c:	f014 fefc 	bl	1d978 <bt_uuid_cmp>
    8b80:	b1a0      	cbz	r0, 8bac <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8b82:	f642 0301 	movw	r3, #10241	; 0x2801
    8b86:	6828      	ldr	r0, [r5, #0]
    8b88:	f88d 800c 	strb.w	r8, [sp, #12]
    8b8c:	a903      	add	r1, sp, #12
    8b8e:	f8ad 300e 	strh.w	r3, [sp, #14]
    8b92:	f014 fef1 	bl	1d978 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8b96:	b148      	cbz	r0, 8bac <read_group_cb+0x50>
		if (data->group &&
    8b98:	6923      	ldr	r3, [r4, #16]
    8b9a:	b11b      	cbz	r3, 8ba4 <read_group_cb+0x48>
    8b9c:	885a      	ldrh	r2, [r3, #2]
    8b9e:	42b2      	cmp	r2, r6
    8ba0:	d200      	bcs.n	8ba4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8ba2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8ba4:	2001      	movs	r0, #1
}
    8ba6:	b004      	add	sp, #16
    8ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8bac:	6861      	ldr	r1, [r4, #4]
    8bae:	6828      	ldr	r0, [r5, #0]
    8bb0:	f014 fee2 	bl	1d978 <bt_uuid_cmp>
    8bb4:	b110      	cbz	r0, 8bbc <read_group_cb+0x60>
		data->group = NULL;
    8bb6:	2300      	movs	r3, #0
    8bb8:	6123      	str	r3, [r4, #16]
    8bba:	e7f3      	b.n	8ba4 <read_group_cb+0x48>
	if (data->rsp->len &&
    8bbc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8bbe:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    8bc0:	781a      	ldrb	r2, [r3, #0]
    8bc2:	b13a      	cbz	r2, 8bd4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    8bc8:	8981      	ldrh	r1, [r0, #12]
    8bca:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8bcc:	4293      	cmp	r3, r2
    8bce:	da01      	bge.n	8bd4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8bd0:	2000      	movs	r0, #0
    8bd2:	e7e8      	b.n	8ba6 <read_group_cb+0x4a>
    8bd4:	2104      	movs	r1, #4
    8bd6:	3008      	adds	r0, #8
    8bd8:	f016 f9b1 	bl	1ef3e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8bdc:	4b09      	ldr	r3, [pc, #36]	; (8c04 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8bde:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8be0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8be2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8be4:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8be6:	4629      	mov	r1, r5
    8be8:	9300      	str	r3, [sp, #0]
    8bea:	9401      	str	r4, [sp, #4]
    8bec:	2300      	movs	r3, #0
    8bee:	4638      	mov	r0, r7
    8bf0:	f015 fc12 	bl	1e418 <att_chan_read>
	if (read < 0) {
    8bf4:	2800      	cmp	r0, #0
    8bf6:	dbeb      	blt.n	8bd0 <read_group_cb+0x74>
	if (!data->group) {
    8bf8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8bfa:	3800      	subs	r0, #0
    8bfc:	bf18      	it	ne
    8bfe:	2001      	movne	r0, #1
    8c00:	e7d1      	b.n	8ba6 <read_group_cb+0x4a>
    8c02:	bf00      	nop
    8c04:	0001e387 	.word	0x0001e387

00008c08 <chan_send>:
{
    8c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8c0c:	688b      	ldr	r3, [r1, #8]
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	2bd2      	cmp	r3, #210	; 0xd2
{
    8c12:	4606      	mov	r6, r0
    8c14:	460c      	mov	r4, r1
    8c16:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8c18:	d116      	bne.n	8c48 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    8c1a:	6803      	ldr	r3, [r0, #0]
    8c1c:	6818      	ldr	r0, [r3, #0]
    8c1e:	f016 f926 	bl	1ee6e <bt_smp_sign>
		if (err) {
    8c22:	4605      	mov	r5, r0
    8c24:	b180      	cbz	r0, 8c48 <chan_send+0x40>
    8c26:	4b24      	ldr	r3, [pc, #144]	; (8cb8 <chan_send+0xb0>)
    8c28:	4924      	ldr	r1, [pc, #144]	; (8cbc <chan_send+0xb4>)
			BT_ERR("Error signing data");
    8c2a:	4825      	ldr	r0, [pc, #148]	; (8cc0 <chan_send+0xb8>)
    8c2c:	1ac9      	subs	r1, r1, r3
    8c2e:	08c9      	lsrs	r1, r1, #3
    8c30:	0189      	lsls	r1, r1, #6
    8c32:	f041 0101 	orr.w	r1, r1, #1
    8c36:	f013 ff70 	bl	1cb1a <log_0>
			net_buf_unref(buf);
    8c3a:	4620      	mov	r0, r4
    8c3c:	f010 ffda 	bl	19bf4 <net_buf_unref>
}
    8c40:	4628      	mov	r0, r5
    8c42:	b003      	add	sp, #12
    8c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8c48:	f104 0008 	add.w	r0, r4, #8
    8c4c:	f016 f9b6 	bl	1efbc <net_buf_simple_headroom>
	state->len = buf->len;
    8c50:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8c54:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8c56:	b957      	cbnz	r7, 8c6e <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    8c58:	68a3      	ldr	r3, [r4, #8]
    8c5a:	7818      	ldrb	r0, [r3, #0]
    8c5c:	f015 fb0f 	bl	1e27e <att_op_get_type>
    8c60:	1e43      	subs	r3, r0, #1
    8c62:	b2db      	uxtb	r3, r3
    8c64:	2b04      	cmp	r3, #4
    8c66:	bf9c      	itt	ls
    8c68:	4a16      	ldrls	r2, [pc, #88]	; (8cc4 <chan_send+0xbc>)
    8c6a:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c6e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8c70:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c74:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    8c76:	4b14      	ldr	r3, [pc, #80]	; (8cc8 <chan_send+0xc0>)
    8c78:	429f      	cmp	r7, r3
    8c7a:	d018      	beq.n	8cae <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    8c7c:	4b13      	ldr	r3, [pc, #76]	; (8ccc <chan_send+0xc4>)
    8c7e:	429f      	cmp	r7, r3
    8c80:	d017      	beq.n	8cb2 <chan_send+0xaa>
		return att_sent;
    8c82:	4913      	ldr	r1, [pc, #76]	; (8cd0 <chan_send+0xc8>)
    8c84:	4b13      	ldr	r3, [pc, #76]	; (8cd4 <chan_send+0xcc>)
    8c86:	4a14      	ldr	r2, [pc, #80]	; (8cd8 <chan_send+0xd0>)
    8c88:	428f      	cmp	r7, r1
    8c8a:	bf18      	it	ne
    8c8c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    8c8e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c90:	9600      	str	r6, [sp, #0]
    8c92:	4622      	mov	r2, r4
    8c94:	2104      	movs	r1, #4
    8c96:	f015 fa70 	bl	1e17a <bt_l2cap_send_cb>
	if (err) {
    8c9a:	4605      	mov	r5, r0
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d0cf      	beq.n	8c40 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    8ca0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8ca2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8ca6:	fa10 f088 	uxtah	r0, r0, r8
    8caa:	60a0      	str	r0, [r4, #8]
}
    8cac:	e7c8      	b.n	8c40 <chan_send+0x38>
		return att_rsp_sent;
    8cae:	4b0b      	ldr	r3, [pc, #44]	; (8cdc <chan_send+0xd4>)
    8cb0:	e7ed      	b.n	8c8e <chan_send+0x86>
		return att_cfm_sent;
    8cb2:	4b0b      	ldr	r3, [pc, #44]	; (8ce0 <chan_send+0xd8>)
    8cb4:	e7eb      	b.n	8c8e <chan_send+0x86>
    8cb6:	bf00      	nop
    8cb8:	0001ff94 	.word	0x0001ff94
    8cbc:	0001ff9c 	.word	0x0001ff9c
    8cc0:	00022c3a 	.word	0x00022c3a
    8cc4:	00020404 	.word	0x00020404
    8cc8:	0001e5c9 	.word	0x0001e5c9
    8ccc:	0001e5e5 	.word	0x0001e5e5
    8cd0:	0001e3a7 	.word	0x0001e3a7
    8cd4:	00008889 	.word	0x00008889
    8cd8:	0001e24f 	.word	0x0001e24f
    8cdc:	00008879 	.word	0x00008879
    8ce0:	00008869 	.word	0x00008869

00008ce4 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8ce4:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    8ce6:	4a07      	ldr	r2, [pc, #28]	; (8d04 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8ce8:	4604      	mov	r4, r0
    8cea:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    8cec:	f7ff ff8c 	bl	8c08 <chan_send>
	if (err) {
    8cf0:	b130      	cbz	r0, 8d00 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    8cf2:	4629      	mov	r1, r5
    8cf4:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    8cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    8cfc:	f016 b8e0 	b.w	1eec0 <net_buf_put>
}
    8d00:	bd38      	pop	{r3, r4, r5, pc}
    8d02:	bf00      	nop
    8d04:	0001e5c9 	.word	0x0001e5c9

00008d08 <read_type_cb>:
{
    8d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8d0c:	f8d2 8000 	ldr.w	r8, [r2]
{
    8d10:	4606      	mov	r6, r0
    8d12:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8d14:	6800      	ldr	r0, [r0, #0]
    8d16:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8d18:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8d1c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8d1e:	f014 fe2b 	bl	1d978 <bt_uuid_cmp>
    8d22:	4607      	mov	r7, r0
    8d24:	2800      	cmp	r0, #0
    8d26:	d13e      	bne.n	8da6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8d28:	4628      	mov	r0, r5
    8d2a:	2215      	movs	r2, #21
    8d2c:	4631      	mov	r1, r6
    8d2e:	f016 f823 	bl	1ed78 <bt_gatt_check_perm>
    8d32:	4605      	mov	r5, r0
    8d34:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8d36:	b148      	cbz	r0, 8d4c <read_type_cb+0x44>
		if (data->rsp->len) {
    8d38:	68e3      	ldr	r3, [r4, #12]
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	b923      	cbnz	r3, 8d48 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8d3e:	2500      	movs	r5, #0
}
    8d40:	4628      	mov	r0, r5
    8d42:	b003      	add	sp, #12
    8d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8d48:	7527      	strb	r7, [r4, #20]
    8d4a:	e7f8      	b.n	8d3e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8d4c:	68a0      	ldr	r0, [r4, #8]
    8d4e:	f016 f8c8 	bl	1eee2 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    8d52:	2102      	movs	r1, #2
    8d54:	3008      	adds	r0, #8
    8d56:	f016 f8f2 	bl	1ef3e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8d5a:	4b14      	ldr	r3, [pc, #80]	; (8dac <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8d5c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8d5e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8d60:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8d64:	4631      	mov	r1, r6
    8d66:	9300      	str	r3, [sp, #0]
    8d68:	9401      	str	r4, [sp, #4]
    8d6a:	462b      	mov	r3, r5
    8d6c:	4640      	mov	r0, r8
    8d6e:	f015 fb53 	bl	1e418 <att_chan_read>
	if (read < 0) {
    8d72:	2800      	cmp	r0, #0
    8d74:	da07      	bge.n	8d86 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    8d76:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8d7a:	bf26      	itte	cs
    8d7c:	4240      	negcs	r0, r0
    8d7e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8d80:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8d82:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8d84:	e7dc      	b.n	8d40 <read_type_cb+0x38>
	if (!data->item) {
    8d86:	6923      	ldr	r3, [r4, #16]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d0d8      	beq.n	8d3e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8d8c:	68a0      	ldr	r0, [r4, #8]
    8d8e:	f015 fa56 	bl	1e23e <net_buf_frags_len>
    8d92:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8d96:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8d98:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8d9a:	7818      	ldrb	r0, [r3, #0]
    8d9c:	4285      	cmp	r5, r0
    8d9e:	bf94      	ite	ls
    8da0:	2500      	movls	r5, #0
    8da2:	2501      	movhi	r5, #1
    8da4:	e7cc      	b.n	8d40 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    8da6:	2501      	movs	r5, #1
    8da8:	e7ca      	b.n	8d40 <read_type_cb+0x38>
    8daa:	bf00      	nop
    8dac:	0001e25b 	.word	0x0001e25b

00008db0 <bt_att_connected>:
{
    8db0:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8db2:	2104      	movs	r1, #4
{
    8db4:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8db6:	6800      	ldr	r0, [r0, #0]
    8db8:	f015 fa16 	bl	1e1e8 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8dbc:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8dc2:	b91b      	cbnz	r3, 8dcc <bt_att_connected+0x1c>
    8dc4:	f105 000c 	add.w	r0, r5, #12
    8dc8:	f016 fb75 	bl	1f4b6 <z_impl_k_queue_init>
	parent->next = child;
    8dcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8dce:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    8dd2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    8dd4:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    8dd8:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    8dda:	b902      	cbnz	r2, 8dde <bt_att_connected+0x2e>
	list->tail = node;
    8ddc:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8dde:	f3bf 8f5b 	dmb	ish
    8de2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8de6:	4908      	ldr	r1, [pc, #32]	; (8e08 <bt_att_connected+0x58>)
    8de8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8dec:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8dee:	bf5e      	ittt	pl
    8df0:	2317      	movpl	r3, #23
    8df2:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8df6:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8dfa:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
    8dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8e02:	f016 bc5b 	b.w	1f6bc <k_work_init_delayable>
    8e06:	bf00      	nop
    8e08:	000096d5 	.word	0x000096d5

00008e0c <bt_att_chan_create_pdu>:
{
    8e0c:	b538      	push	{r3, r4, r5, lr}
    8e0e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8e10:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    8e14:	3201      	adds	r2, #1
    8e16:	428a      	cmp	r2, r1
    8e18:	d90c      	bls.n	8e34 <bt_att_chan_create_pdu+0x28>
    8e1a:	481a      	ldr	r0, [pc, #104]	; (8e84 <bt_att_chan_create_pdu+0x78>)
    8e1c:	4b1a      	ldr	r3, [pc, #104]	; (8e88 <bt_att_chan_create_pdu+0x7c>)
    8e1e:	1a1b      	subs	r3, r3, r0
    8e20:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8e22:	019b      	lsls	r3, r3, #6
    8e24:	4819      	ldr	r0, [pc, #100]	; (8e8c <bt_att_chan_create_pdu+0x80>)
    8e26:	f043 0302 	orr.w	r3, r3, #2
    8e2a:	f013 fe97 	bl	1cb5c <log_2>
		return NULL;
    8e2e:	2400      	movs	r4, #0
}
    8e30:	4620      	mov	r0, r4
    8e32:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    8e34:	4628      	mov	r0, r5
    8e36:	f015 fa22 	bl	1e27e <att_op_get_type>
    8e3a:	2802      	cmp	r0, #2
    8e3c:	d001      	beq.n	8e42 <bt_att_chan_create_pdu+0x36>
    8e3e:	2804      	cmp	r0, #4
    8e40:	d114      	bne.n	8e6c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8e42:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8e46:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8e48:	2100      	movs	r1, #0
    8e4a:	4608      	mov	r0, r1
    8e4c:	f015 f992 	bl	1e174 <bt_l2cap_create_pdu_timeout>
    8e50:	4604      	mov	r4, r0
	if (!buf) {
    8e52:	b980      	cbnz	r0, 8e76 <bt_att_chan_create_pdu+0x6a>
    8e54:	4b0b      	ldr	r3, [pc, #44]	; (8e84 <bt_att_chan_create_pdu+0x78>)
    8e56:	4a0c      	ldr	r2, [pc, #48]	; (8e88 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8e58:	480d      	ldr	r0, [pc, #52]	; (8e90 <bt_att_chan_create_pdu+0x84>)
    8e5a:	1ad2      	subs	r2, r2, r3
    8e5c:	08d2      	lsrs	r2, r2, #3
    8e5e:	0192      	lsls	r2, r2, #6
    8e60:	f042 0201 	orr.w	r2, r2, #1
    8e64:	4629      	mov	r1, r5
    8e66:	f013 fe65 	bl	1cb34 <log_1>
		return NULL;
    8e6a:	e7e1      	b.n	8e30 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e74:	e7e8      	b.n	8e48 <bt_att_chan_create_pdu+0x3c>
    8e76:	2101      	movs	r1, #1
    8e78:	3008      	adds	r0, #8
    8e7a:	f016 f860 	bl	1ef3e <net_buf_simple_add>
	hdr->code = op;
    8e7e:	7005      	strb	r5, [r0, #0]
	return buf;
    8e80:	e7d6      	b.n	8e30 <bt_att_chan_create_pdu+0x24>
    8e82:	bf00      	nop
    8e84:	0001ff94 	.word	0x0001ff94
    8e88:	0001ff9c 	.word	0x0001ff9c
    8e8c:	00022c4d 	.word	0x00022c4d
    8e90:	00022a17 	.word	0x00022a17

00008e94 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8e94:	898b      	ldrh	r3, [r1, #12]
{
    8e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e9a:	4604      	mov	r4, r0
    8e9c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8e9e:	b963      	cbnz	r3, 8eba <bt_att_recv+0x26>
    8ea0:	494c      	ldr	r1, [pc, #304]	; (8fd4 <bt_att_recv+0x140>)
    8ea2:	4b4d      	ldr	r3, [pc, #308]	; (8fd8 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    8ea4:	484d      	ldr	r0, [pc, #308]	; (8fdc <bt_att_recv+0x148>)
    8ea6:	1ac9      	subs	r1, r1, r3
    8ea8:	08c9      	lsrs	r1, r1, #3
    8eaa:	0189      	lsls	r1, r1, #6
    8eac:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    8eb0:	f013 fe33 	bl	1cb1a <log_0>
}
    8eb4:	2000      	movs	r0, #0
    8eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    8eba:	2101      	movs	r1, #1
    8ebc:	f108 0008 	add.w	r0, r8, #8
    8ec0:	f016 f864 	bl	1ef8c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8ec4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8ec8:	4605      	mov	r5, r0
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d0f2      	beq.n	8eb4 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    8ece:	7801      	ldrb	r1, [r0, #0]
    8ed0:	4a43      	ldr	r2, [pc, #268]	; (8fe0 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8ed2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8ed6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    8ed8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8edc:	4288      	cmp	r0, r1
    8ede:	d11e      	bne.n	8f1e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    8ee0:	00d8      	lsls	r0, r3, #3
    8ee2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8ee6:	789f      	ldrb	r7, [r3, #2]
    8ee8:	2f01      	cmp	r7, #1
    8eea:	d133      	bne.n	8f54 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8eec:	f3bf 8f5b 	dmb	ish
    8ef0:	34e8      	adds	r4, #232	; 0xe8
    8ef2:	e854 3f00 	ldrex	r3, [r4]
    8ef6:	f043 0101 	orr.w	r1, r3, #1
    8efa:	e844 1c00 	strex	ip, r1, [r4]
    8efe:	f1bc 0f00 	cmp.w	ip, #0
    8f02:	d1f6      	bne.n	8ef2 <bt_att_recv+0x5e>
    8f04:	f3bf 8f5b 	dmb	ish
    8f08:	07d9      	lsls	r1, r3, #31
    8f0a:	d53e      	bpl.n	8f8a <bt_att_recv+0xf6>
    8f0c:	4931      	ldr	r1, [pc, #196]	; (8fd4 <bt_att_recv+0x140>)
    8f0e:	4b32      	ldr	r3, [pc, #200]	; (8fd8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    8f10:	4834      	ldr	r0, [pc, #208]	; (8fe4 <bt_att_recv+0x150>)
    8f12:	1ac9      	subs	r1, r1, r3
    8f14:	08c9      	lsrs	r1, r1, #3
    8f16:	0189      	lsls	r1, r1, #6
    8f18:	f041 0102 	orr.w	r1, r1, #2
    8f1c:	e7c8      	b.n	8eb0 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8f1e:	3301      	adds	r3, #1
    8f20:	2b0d      	cmp	r3, #13
    8f22:	d1d9      	bne.n	8ed8 <bt_att_recv+0x44>
    8f24:	4b2c      	ldr	r3, [pc, #176]	; (8fd8 <bt_att_recv+0x144>)
    8f26:	4a2b      	ldr	r2, [pc, #172]	; (8fd4 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8f28:	482f      	ldr	r0, [pc, #188]	; (8fe8 <bt_att_recv+0x154>)
    8f2a:	1ad2      	subs	r2, r2, r3
    8f2c:	08d2      	lsrs	r2, r2, #3
    8f2e:	0192      	lsls	r2, r2, #6
    8f30:	f042 0202 	orr.w	r2, r2, #2
    8f34:	f013 fdfe 	bl	1cb34 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8f38:	7829      	ldrb	r1, [r5, #0]
    8f3a:	4608      	mov	r0, r1
    8f3c:	f015 f99f 	bl	1e27e <att_op_get_type>
    8f40:	2800      	cmp	r0, #0
    8f42:	d0b7      	beq.n	8eb4 <bt_att_recv+0x20>
	if (!req) {
    8f44:	2900      	cmp	r1, #0
    8f46:	d0b5      	beq.n	8eb4 <bt_att_recv+0x20>
    8f48:	2306      	movs	r3, #6
    8f4a:	2200      	movs	r2, #0
    8f4c:	4630      	mov	r0, r6
    8f4e:	f015 fc0e 	bl	1e76e <send_err_rsp.part.0>
    8f52:	e7af      	b.n	8eb4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    8f54:	2f05      	cmp	r7, #5
    8f56:	d118      	bne.n	8f8a <bt_att_recv+0xf6>
    8f58:	f3bf 8f5b 	dmb	ish
    8f5c:	34e8      	adds	r4, #232	; 0xe8
    8f5e:	e854 3f00 	ldrex	r3, [r4]
    8f62:	f043 0102 	orr.w	r1, r3, #2
    8f66:	e844 1c00 	strex	ip, r1, [r4]
    8f6a:	f1bc 0f00 	cmp.w	ip, #0
    8f6e:	d1f6      	bne.n	8f5e <bt_att_recv+0xca>
    8f70:	f3bf 8f5b 	dmb	ish
    8f74:	079b      	lsls	r3, r3, #30
    8f76:	d508      	bpl.n	8f8a <bt_att_recv+0xf6>
    8f78:	4916      	ldr	r1, [pc, #88]	; (8fd4 <bt_att_recv+0x140>)
    8f7a:	4b17      	ldr	r3, [pc, #92]	; (8fd8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    8f7c:	481b      	ldr	r0, [pc, #108]	; (8fec <bt_att_recv+0x158>)
    8f7e:	1ac9      	subs	r1, r1, r3
    8f80:	08c9      	lsrs	r1, r1, #3
    8f82:	0189      	lsls	r1, r1, #6
    8f84:	f041 0102 	orr.w	r1, r1, #2
    8f88:	e792      	b.n	8eb0 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    8f8a:	1813      	adds	r3, r2, r0
    8f8c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    8f90:	785a      	ldrb	r2, [r3, #1]
    8f92:	428a      	cmp	r2, r1
    8f94:	d90e      	bls.n	8fb4 <bt_att_recv+0x120>
    8f96:	4a10      	ldr	r2, [pc, #64]	; (8fd8 <bt_att_recv+0x144>)
    8f98:	4b0e      	ldr	r3, [pc, #56]	; (8fd4 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8f9a:	4815      	ldr	r0, [pc, #84]	; (8ff0 <bt_att_recv+0x15c>)
    8f9c:	1a9b      	subs	r3, r3, r2
    8f9e:	08db      	lsrs	r3, r3, #3
    8fa0:	019b      	lsls	r3, r3, #6
    8fa2:	782a      	ldrb	r2, [r5, #0]
    8fa4:	f043 0301 	orr.w	r3, r3, #1
    8fa8:	f013 fdd8 	bl	1cb5c <log_2>
	if (handler->type == ATT_REQUEST && err) {
    8fac:	2f01      	cmp	r7, #1
    8fae:	d181      	bne.n	8eb4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    8fb0:	2304      	movs	r3, #4
    8fb2:	e00a      	b.n	8fca <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    8fb4:	685b      	ldr	r3, [r3, #4]
    8fb6:	4641      	mov	r1, r8
    8fb8:	4630      	mov	r0, r6
    8fba:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8fbc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    8fbe:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8fc0:	f47f af78 	bne.w	8eb4 <bt_att_recv+0x20>
    8fc4:	2800      	cmp	r0, #0
    8fc6:	f43f af75 	beq.w	8eb4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8fca:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8fcc:	2900      	cmp	r1, #0
    8fce:	f43f af71 	beq.w	8eb4 <bt_att_recv+0x20>
    8fd2:	e7ba      	b.n	8f4a <bt_att_recv+0xb6>
    8fd4:	0001ff9c 	.word	0x0001ff9c
    8fd8:	0001ff94 	.word	0x0001ff94
    8fdc:	00022c72 	.word	0x00022c72
    8fe0:	00020418 	.word	0x00020418
    8fe4:	00022c8d 	.word	0x00022c8d
    8fe8:	00022ce7 	.word	0x00022ce7
    8fec:	00022ca9 	.word	0x00022ca9
    8ff0:	00022cc8 	.word	0x00022cc8

00008ff4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    8ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ff8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8ffa:	6803      	ldr	r3, [r0, #0]
    8ffc:	460e      	mov	r6, r1
    8ffe:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    9000:	b087      	sub	sp, #28
    9002:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9004:	bf18      	it	ne
    9006:	2101      	movne	r1, #1
    9008:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    900a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    900c:	f015 fed7 	bl	1edbe <bt_gatt_change_aware>
    9010:	2800      	cmp	r0, #0
    9012:	d04a      	beq.n	90aa <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    9014:	2f00      	cmp	r7, #0
    9016:	d04a      	beq.n	90ae <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    9018:	2218      	movs	r2, #24
    901a:	2100      	movs	r1, #0
    901c:	4668      	mov	r0, sp
    901e:	f014 fc1e 	bl	1d85e <memset>
	if (rsp) {
    9022:	f1b8 0f00 	cmp.w	r8, #0
    9026:	d122      	bne.n	906e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    9028:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    902a:	4a22      	ldr	r2, [pc, #136]	; (90b4 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    902c:	681b      	ldr	r3, [r3, #0]
    902e:	9300      	str	r3, [sp, #0]
	data.value = value;
    9030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9032:	9303      	str	r3, [sp, #12]
	data.len = len;
    9034:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    9038:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    903c:	2301      	movs	r3, #1
    903e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    9042:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9046:	466b      	mov	r3, sp
    9048:	4639      	mov	r1, r7
    904a:	4638      	mov	r0, r7
	data.req = req;
    904c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    9050:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9054:	f015 f940 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (data.err) {
    9058:	f89d 4014 	ldrb.w	r4, [sp, #20]
    905c:	b1f4      	cbz	r4, 909c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    905e:	f1b8 0f00 	cmp.w	r8, #0
    9062:	d10e      	bne.n	9082 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9064:	2400      	movs	r4, #0
}
    9066:	4620      	mov	r0, r4
    9068:	b007      	add	sp, #28
    906a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    906e:	2200      	movs	r2, #0
    9070:	4641      	mov	r1, r8
    9072:	4628      	mov	r0, r5
    9074:	f7ff feca 	bl	8e0c <bt_att_chan_create_pdu>
    9078:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    907a:	2800      	cmp	r0, #0
    907c:	d1d4      	bne.n	9028 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    907e:	240e      	movs	r4, #14
    9080:	e7f1      	b.n	9066 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    9082:	9801      	ldr	r0, [sp, #4]
    9084:	f010 fdb6 	bl	19bf4 <net_buf_unref>
	if (!req) {
    9088:	2e00      	cmp	r6, #0
    908a:	d0eb      	beq.n	9064 <att_write_rsp.constprop.0+0x70>
    908c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9090:	463a      	mov	r2, r7
    9092:	4631      	mov	r1, r6
    9094:	4628      	mov	r0, r5
    9096:	f015 fb6a 	bl	1e76e <send_err_rsp.part.0>
    909a:	e7e3      	b.n	9064 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    909c:	9901      	ldr	r1, [sp, #4]
    909e:	2900      	cmp	r1, #0
    90a0:	d0e0      	beq.n	9064 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    90a2:	4628      	mov	r0, r5
    90a4:	f7ff fe1e 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
    90a8:	e7dd      	b.n	9066 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    90aa:	2412      	movs	r4, #18
    90ac:	e7db      	b.n	9066 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    90ae:	2401      	movs	r4, #1
    90b0:	e7d9      	b.n	9066 <att_write_rsp.constprop.0+0x72>
    90b2:	bf00      	nop
    90b4:	0001e3bd 	.word	0x0001e3bd

000090b8 <bt_att_create_pdu>:
{
    90b8:	b570      	push	{r4, r5, r6, lr}
    90ba:	460e      	mov	r6, r1
    90bc:	4615      	mov	r5, r2
	att = att_get(conn);
    90be:	f7ff fbeb 	bl	8898 <att_get>
	if (!att) {
    90c2:	b1c0      	cbz	r0, 90f6 <bt_att_create_pdu+0x3e>
	return list->head;
    90c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    90c6:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    90c8:	b15b      	cbz	r3, 90e2 <bt_att_create_pdu+0x2a>
    90ca:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
    90ce:	d008      	beq.n	90e2 <bt_att_create_pdu+0x2a>
	return node->next;
    90d0:	681b      	ldr	r3, [r3, #0]
    90d2:	b10b      	cbz	r3, 90d8 <bt_att_create_pdu+0x20>
    90d4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    90d8:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
    90dc:	4291      	cmp	r1, r2
    90de:	d90c      	bls.n	90fa <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    90e0:	b98b      	cbnz	r3, 9106 <bt_att_create_pdu+0x4e>
    90e2:	4a0e      	ldr	r2, [pc, #56]	; (911c <bt_att_create_pdu+0x64>)
    90e4:	4b0e      	ldr	r3, [pc, #56]	; (9120 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    90e6:	480f      	ldr	r0, [pc, #60]	; (9124 <bt_att_create_pdu+0x6c>)
    90e8:	1ad2      	subs	r2, r2, r3
    90ea:	08d2      	lsrs	r2, r2, #3
    90ec:	0192      	lsls	r2, r2, #6
    90ee:	f042 0202 	orr.w	r2, r2, #2
    90f2:	f013 fd1f 	bl	1cb34 <log_1>
}
    90f6:	2000      	movs	r0, #0
    90f8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    90fa:	462a      	mov	r2, r5
    90fc:	4631      	mov	r1, r6
}
    90fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    9102:	f7ff be83 	b.w	8e0c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9106:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
    910a:	d004      	beq.n	9116 <bt_att_create_pdu+0x5e>
	return node->next;
    910c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9110:	b10c      	cbz	r4, 9116 <bt_att_create_pdu+0x5e>
    9112:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    9116:	4618      	mov	r0, r3
    9118:	4623      	mov	r3, r4
    911a:	e7dd      	b.n	90d8 <bt_att_create_pdu+0x20>
    911c:	0001ff9c 	.word	0x0001ff9c
    9120:	0001ff94 	.word	0x0001ff94
    9124:	00022d01 	.word	0x00022d01

00009128 <att_read_group_req>:
{
    9128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    912c:	898c      	ldrh	r4, [r1, #12]
    912e:	3c04      	subs	r4, #4
    9130:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9132:	2c02      	cmp	r4, #2
{
    9134:	4605      	mov	r5, r0
    9136:	b08c      	sub	sp, #48	; 0x30
    9138:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    913a:	d001      	beq.n	9140 <att_read_group_req+0x18>
    913c:	2c10      	cmp	r4, #16
    913e:	d16e      	bne.n	921e <att_read_group_req+0xf6>
    9140:	2104      	movs	r1, #4
    9142:	3008      	adds	r0, #8
    9144:	f015 ff22 	bl	1ef8c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9148:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    914c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    914e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9150:	1d01      	adds	r1, r0, #4
    9152:	4622      	mov	r2, r4
    9154:	4640      	mov	r0, r8
    9156:	f014 fc3d 	bl	1d9d4 <bt_uuid_create>
    915a:	2800      	cmp	r0, #0
    915c:	d061      	beq.n	9222 <att_read_group_req+0xfa>
	if (!start || !end) {
    915e:	2e00      	cmp	r6, #0
    9160:	d03a      	beq.n	91d8 <att_read_group_req+0xb0>
    9162:	2400      	movs	r4, #0
    9164:	2f00      	cmp	r7, #0
    9166:	d036      	beq.n	91d6 <att_read_group_req+0xae>
	if (start > end) {
    9168:	42b7      	cmp	r7, r6
    916a:	d335      	bcc.n	91d8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    916c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9170:	a901      	add	r1, sp, #4
    9172:	4640      	mov	r0, r8
    9174:	f88d 4004 	strb.w	r4, [sp, #4]
    9178:	f8ad 3006 	strh.w	r3, [sp, #6]
    917c:	f014 fbfc 	bl	1d978 <bt_uuid_cmp>
    9180:	2800      	cmp	r0, #0
    9182:	d134      	bne.n	91ee <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    9184:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9186:	2214      	movs	r2, #20
    9188:	2100      	movs	r1, #0
    918a:	a807      	add	r0, sp, #28
    918c:	f014 fb67 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9190:	2201      	movs	r2, #1
    9192:	2111      	movs	r1, #17
    9194:	4620      	mov	r0, r4
    9196:	f7ff ff8f 	bl	90b8 <bt_att_create_pdu>
    919a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    919c:	2800      	cmp	r0, #0
    919e:	d040      	beq.n	9222 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    91a0:	2101      	movs	r1, #1
    91a2:	3008      	adds	r0, #8
	data.uuid = uuid;
    91a4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    91a8:	f015 fec9 	bl	1ef3e <net_buf_simple_add>
	data.rsp->len = 0U;
    91ac:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    91b0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    91b2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    91b4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    91b8:	4a1b      	ldr	r2, [pc, #108]	; (9228 <att_read_group_req+0x100>)
	data.group = NULL;
    91ba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    91be:	4639      	mov	r1, r7
    91c0:	4630      	mov	r0, r6
    91c2:	f015 f889 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    91c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    91c8:	781c      	ldrb	r4, [r3, #0]
    91ca:	bb1c      	cbnz	r4, 9214 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    91cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    91ce:	f010 fd11 	bl	19bf4 <net_buf_unref>
	if (!req) {
    91d2:	230a      	movs	r3, #10
    91d4:	e018      	b.n	9208 <att_read_group_req+0xe0>
			*err = 0U;
    91d6:	463e      	mov	r6, r7
	if (!req) {
    91d8:	2301      	movs	r3, #1
    91da:	4632      	mov	r2, r6
    91dc:	2110      	movs	r1, #16
    91de:	4628      	mov	r0, r5
    91e0:	f015 fac5 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    91e4:	2400      	movs	r4, #0
}
    91e6:	4620      	mov	r0, r4
    91e8:	b00c      	add	sp, #48	; 0x30
    91ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    91ee:	f642 0301 	movw	r3, #10241	; 0x2801
    91f2:	a907      	add	r1, sp, #28
    91f4:	4640      	mov	r0, r8
    91f6:	f88d 401c 	strb.w	r4, [sp, #28]
    91fa:	f8ad 301e 	strh.w	r3, [sp, #30]
    91fe:	f014 fbbb 	bl	1d978 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9202:	2800      	cmp	r0, #0
    9204:	d0be      	beq.n	9184 <att_read_group_req+0x5c>
	if (!req) {
    9206:	2310      	movs	r3, #16
    9208:	4632      	mov	r2, r6
    920a:	2110      	movs	r1, #16
    920c:	4628      	mov	r0, r5
    920e:	f015 faae 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    9212:	e7e8      	b.n	91e6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9214:	9909      	ldr	r1, [sp, #36]	; 0x24
    9216:	4628      	mov	r0, r5
    9218:	f7ff fd64 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    921c:	e7e2      	b.n	91e4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    921e:	2404      	movs	r4, #4
    9220:	e7e1      	b.n	91e6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    9222:	240e      	movs	r4, #14
    9224:	e7df      	b.n	91e6 <att_read_group_req+0xbe>
    9226:	bf00      	nop
    9228:	00008b5d 	.word	0x00008b5d

0000922c <att_read_mult_req>:
{
    922c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    9230:	6886      	ldr	r6, [r0, #8]
{
    9232:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    9234:	2210      	movs	r2, #16
{
    9236:	4604      	mov	r4, r0
    9238:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    923a:	4668      	mov	r0, sp
    923c:	2100      	movs	r1, #0
    923e:	f014 fb0e 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9242:	2200      	movs	r2, #0
    9244:	210f      	movs	r1, #15
    9246:	4630      	mov	r0, r6
    9248:	f7ff ff36 	bl	90b8 <bt_att_create_pdu>
    924c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    924e:	b358      	cbz	r0, 92a8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9250:	f8df 9058 	ldr.w	r9, [pc, #88]	; 92ac <att_read_mult_req+0x80>
	data.chan = chan;
    9254:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    9256:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    925a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    925e:	89ab      	ldrh	r3, [r5, #12]
    9260:	2b01      	cmp	r3, #1
    9262:	d804      	bhi.n	926e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9264:	9902      	ldr	r1, [sp, #8]
    9266:	4620      	mov	r0, r4
    9268:	f7ff fd3c 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
    926c:	e018      	b.n	92a0 <att_read_mult_req+0x74>
    926e:	4638      	mov	r0, r7
    9270:	f015 fe9c 	bl	1efac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9274:	466b      	mov	r3, sp
    9276:	464a      	mov	r2, r9
    9278:	4601      	mov	r1, r0
    927a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    927c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9280:	f015 f82a 	bl	1e2d8 <bt_gatt_foreach_attr>
		if (data.err) {
    9284:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9288:	2b00      	cmp	r3, #0
    928a:	d0e8      	beq.n	925e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    928c:	9802      	ldr	r0, [sp, #8]
    928e:	f010 fcb1 	bl	19bf4 <net_buf_unref>
	if (!req) {
    9292:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9296:	4632      	mov	r2, r6
    9298:	210e      	movs	r1, #14
    929a:	4620      	mov	r0, r4
    929c:	f015 fa67 	bl	1e76e <send_err_rsp.part.0>
	return 0;
    92a0:	2000      	movs	r0, #0
}
    92a2:	b005      	add	sp, #20
    92a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    92a8:	200e      	movs	r0, #14
    92aa:	e7fa      	b.n	92a2 <att_read_mult_req+0x76>
    92ac:	0001e601 	.word	0x0001e601

000092b0 <att_read_rsp>:
{
    92b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    92b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    92b8:	4605      	mov	r5, r0
    92ba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    92bc:	4640      	mov	r0, r8
    92be:	2101      	movs	r1, #1
{
    92c0:	4614      	mov	r4, r2
    92c2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    92c4:	f015 fd7b 	bl	1edbe <bt_gatt_change_aware>
    92c8:	b388      	cbz	r0, 932e <att_read_rsp+0x7e>
	if (!handle) {
    92ca:	b396      	cbz	r6, 9332 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    92cc:	2210      	movs	r2, #16
    92ce:	2100      	movs	r1, #0
    92d0:	4668      	mov	r0, sp
    92d2:	f014 fac4 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    92d6:	2200      	movs	r2, #0
    92d8:	4621      	mov	r1, r4
    92da:	4640      	mov	r0, r8
    92dc:	f7ff feec 	bl	90b8 <bt_att_create_pdu>
    92e0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    92e2:	b340      	cbz	r0, 9336 <att_read_rsp+0x86>
	data.offset = offset;
    92e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    92e8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    92ec:	2301      	movs	r3, #1
    92ee:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    92f2:	4a12      	ldr	r2, [pc, #72]	; (933c <att_read_rsp+0x8c>)
	data.chan = chan;
    92f4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    92f6:	466b      	mov	r3, sp
    92f8:	4631      	mov	r1, r6
    92fa:	4630      	mov	r0, r6
    92fc:	f014 ffec 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (data.err) {
    9300:	f89d 400c 	ldrb.w	r4, [sp, #12]
    9304:	b174      	cbz	r4, 9324 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9306:	9802      	ldr	r0, [sp, #8]
    9308:	f010 fc74 	bl	19bf4 <net_buf_unref>
	if (!req) {
    930c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9310:	4632      	mov	r2, r6
    9312:	4639      	mov	r1, r7
    9314:	4628      	mov	r0, r5
    9316:	f015 fa2a 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    931a:	2400      	movs	r4, #0
}
    931c:	4620      	mov	r0, r4
    931e:	b004      	add	sp, #16
    9320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9324:	9902      	ldr	r1, [sp, #8]
    9326:	4628      	mov	r0, r5
    9328:	f7ff fcdc 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    932c:	e7f6      	b.n	931c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    932e:	2412      	movs	r4, #18
    9330:	e7f4      	b.n	931c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9332:	2401      	movs	r4, #1
    9334:	e7f2      	b.n	931c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9336:	240e      	movs	r4, #14
    9338:	e7f0      	b.n	931c <att_read_rsp+0x6c>
    933a:	bf00      	nop
    933c:	0001e601 	.word	0x0001e601

00009340 <att_read_type_req>:
{
    9340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9344:	898c      	ldrh	r4, [r1, #12]
    9346:	3c04      	subs	r4, #4
    9348:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    934a:	2c02      	cmp	r4, #2
{
    934c:	4605      	mov	r5, r0
    934e:	b08c      	sub	sp, #48	; 0x30
    9350:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9352:	d001      	beq.n	9358 <att_read_type_req+0x18>
    9354:	2c10      	cmp	r4, #16
    9356:	d14f      	bne.n	93f8 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    9358:	2104      	movs	r1, #4
    935a:	3008      	adds	r0, #8
    935c:	f015 fe16 	bl	1ef8c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9360:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9364:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9366:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9368:	1d01      	adds	r1, r0, #4
    936a:	4622      	mov	r2, r4
    936c:	4640      	mov	r0, r8
    936e:	f014 fb31 	bl	1d9d4 <bt_uuid_create>
    9372:	b188      	cbz	r0, 9398 <att_read_type_req+0x58>
	if (!start || !end) {
    9374:	b19e      	cbz	r6, 939e <att_read_type_req+0x5e>
    9376:	b18f      	cbz	r7, 939c <att_read_type_req+0x5c>
	if (start > end) {
    9378:	42be      	cmp	r6, r7
    937a:	d810      	bhi.n	939e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    937c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    937e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9380:	2100      	movs	r1, #0
    9382:	eb0d 0002 	add.w	r0, sp, r2
    9386:	f014 fa6a 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    938a:	2201      	movs	r2, #1
    938c:	2109      	movs	r1, #9
    938e:	4620      	mov	r0, r4
    9390:	f7ff fe92 	bl	90b8 <bt_att_create_pdu>
    9394:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    9396:	b968      	cbnz	r0, 93b4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9398:	240e      	movs	r4, #14
    939a:	e007      	b.n	93ac <att_read_type_req+0x6c>
			*err = 0U;
    939c:	463e      	mov	r6, r7
	if (!req) {
    939e:	2301      	movs	r3, #1
    93a0:	4632      	mov	r2, r6
    93a2:	2108      	movs	r1, #8
    93a4:	4628      	mov	r0, r5
    93a6:	f015 f9e2 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    93aa:	2400      	movs	r4, #0
}
    93ac:	4620      	mov	r0, r4
    93ae:	b00c      	add	sp, #48	; 0x30
    93b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    93b4:	2101      	movs	r1, #1
    93b6:	3008      	adds	r0, #8
	data.uuid = uuid;
    93b8:	e9cd 5806 	strd	r5, r8, [sp, #24]
    93bc:	f015 fdbf 	bl	1ef3e <net_buf_simple_add>
	data.rsp->len = 0U;
    93c0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93c4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    93c6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93c8:	4a0c      	ldr	r2, [pc, #48]	; (93fc <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    93ca:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93ce:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93d4:	4630      	mov	r0, r6
    93d6:	ab06      	add	r3, sp, #24
    93d8:	f014 ff7e 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (data.err) {
    93dc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    93e0:	b12c      	cbz	r4, 93ee <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    93e2:	9808      	ldr	r0, [sp, #32]
    93e4:	f010 fc06 	bl	19bf4 <net_buf_unref>
	if (!req) {
    93e8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    93ec:	e7d8      	b.n	93a0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    93ee:	9908      	ldr	r1, [sp, #32]
    93f0:	4628      	mov	r0, r5
    93f2:	f7ff fc77 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    93f6:	e7d9      	b.n	93ac <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    93f8:	2404      	movs	r4, #4
    93fa:	e7d7      	b.n	93ac <att_read_type_req+0x6c>
    93fc:	00008d09 	.word	0x00008d09

00009400 <att_find_type_req>:
{
    9400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9404:	4688      	mov	r8, r1
    9406:	b086      	sub	sp, #24
    9408:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    940a:	2106      	movs	r1, #6
    940c:	f108 0008 	add.w	r0, r8, #8
    9410:	f015 fdbc 	bl	1ef8c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9414:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9416:	b317      	cbz	r7, 945e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9418:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    941c:	f1b9 0f00 	cmp.w	r9, #0
    9420:	d01c      	beq.n	945c <att_find_type_req+0x5c>
	if (start > end) {
    9422:	45b9      	cmp	r9, r7
    9424:	d31b      	bcc.n	945e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9426:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9428:	f8ad 3002 	strh.w	r3, [sp, #2]
    942c:	2400      	movs	r4, #0
    942e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9432:	a901      	add	r1, sp, #4
    9434:	4668      	mov	r0, sp
	value = buf->data;
    9436:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    943a:	f88d 4000 	strb.w	r4, [sp]
    943e:	f88d 4004 	strb.w	r4, [sp, #4]
    9442:	f8ad 3006 	strh.w	r3, [sp, #6]
    9446:	f014 fa97 	bl	1d978 <bt_uuid_cmp>
    944a:	4606      	mov	r6, r0
    944c:	b190      	cbz	r0, 9474 <att_find_type_req+0x74>
	if (!req) {
    944e:	230a      	movs	r3, #10
    9450:	463a      	mov	r2, r7
    9452:	2106      	movs	r1, #6
    9454:	4628      	mov	r0, r5
    9456:	f015 f98a 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    945a:	e007      	b.n	946c <att_find_type_req+0x6c>
			*err = 0U;
    945c:	464f      	mov	r7, r9
	if (!req) {
    945e:	2301      	movs	r3, #1
    9460:	463a      	mov	r2, r7
    9462:	2106      	movs	r1, #6
    9464:	4628      	mov	r0, r5
    9466:	f015 f982 	bl	1e76e <send_err_rsp.part.0>
		return 0;
    946a:	2400      	movs	r4, #0
}
    946c:	4620      	mov	r0, r4
    946e:	b006      	add	sp, #24
    9470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9474:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    9478:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    947c:	4601      	mov	r1, r0
    947e:	2214      	movs	r2, #20
    9480:	a801      	add	r0, sp, #4
    9482:	f014 f9ec 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9486:	4632      	mov	r2, r6
    9488:	2107      	movs	r1, #7
    948a:	4640      	mov	r0, r8
    948c:	f7ff fe14 	bl	90b8 <bt_att_create_pdu>
    9490:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9492:	b1d8      	cbz	r0, 94cc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9494:	230a      	movs	r3, #10
    9496:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    949a:	4a0d      	ldr	r2, [pc, #52]	; (94d0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    949c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    94a0:	ab01      	add	r3, sp, #4
    94a2:	4649      	mov	r1, r9
    94a4:	4638      	mov	r0, r7
	data.value = value;
    94a6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    94aa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    94ac:	f014 ff14 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (data.err) {
    94b0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    94b4:	b12c      	cbz	r4, 94c2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    94b6:	9802      	ldr	r0, [sp, #8]
    94b8:	f010 fb9c 	bl	19bf4 <net_buf_unref>
	if (!req) {
    94bc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    94c0:	e7ce      	b.n	9460 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    94c2:	9902      	ldr	r1, [sp, #8]
    94c4:	4628      	mov	r0, r5
    94c6:	f7ff fc0d 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    94ca:	e7cf      	b.n	946c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    94cc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    94ce:	e7cd      	b.n	946c <att_find_type_req+0x6c>
    94d0:	00008931 	.word	0x00008931

000094d4 <att_find_info_req>:
{
    94d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    94d6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    94d8:	881e      	ldrh	r6, [r3, #0]
{
    94da:	b085      	sub	sp, #20
    94dc:	4605      	mov	r5, r0
	if (!start || !end) {
    94de:	b19e      	cbz	r6, 9508 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    94e0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    94e2:	b184      	cbz	r4, 9506 <att_find_info_req+0x32>
	if (start > end) {
    94e4:	42a6      	cmp	r6, r4
    94e6:	d80f      	bhi.n	9508 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    94e8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    94ea:	2210      	movs	r2, #16
    94ec:	2100      	movs	r1, #0
    94ee:	4668      	mov	r0, sp
    94f0:	f014 f9b5 	bl	1d85e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    94f4:	2200      	movs	r2, #0
    94f6:	2105      	movs	r1, #5
    94f8:	4638      	mov	r0, r7
    94fa:	f7ff fddd 	bl	90b8 <bt_att_create_pdu>
    94fe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9500:	b958      	cbnz	r0, 951a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9502:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9504:	e007      	b.n	9516 <att_find_info_req+0x42>
			*err = 0U;
    9506:	4626      	mov	r6, r4
	if (!req) {
    9508:	2301      	movs	r3, #1
    950a:	4632      	mov	r2, r6
    950c:	2104      	movs	r1, #4
    950e:	4628      	mov	r0, r5
    9510:	f015 f92d 	bl	1e76e <send_err_rsp.part.0>
	return 0;
    9514:	2000      	movs	r0, #0
}
    9516:	b005      	add	sp, #20
    9518:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    951a:	4621      	mov	r1, r4
    951c:	4a08      	ldr	r2, [pc, #32]	; (9540 <att_find_info_req+0x6c>)
	data.chan = chan;
    951e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9520:	466b      	mov	r3, sp
    9522:	4630      	mov	r0, r6
    9524:	f014 fed8 	bl	1e2d8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9528:	9c02      	ldr	r4, [sp, #8]
    952a:	b924      	cbnz	r4, 9536 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    952c:	9801      	ldr	r0, [sp, #4]
    952e:	f010 fb61 	bl	19bf4 <net_buf_unref>
	if (!req) {
    9532:	230a      	movs	r3, #10
    9534:	e7e9      	b.n	950a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9536:	9901      	ldr	r1, [sp, #4]
    9538:	4628      	mov	r0, r5
    953a:	f7ff fbd3 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
    953e:	e7e9      	b.n	9514 <att_find_info_req+0x40>
    9540:	0001e2ef 	.word	0x0001e2ef

00009544 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9544:	b513      	push	{r0, r1, r4, lr}
    9546:	4602      	mov	r2, r0
    9548:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    954a:	4808      	ldr	r0, [pc, #32]	; (956c <bt_att_req_alloc+0x28>)
    954c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    954e:	2400      	movs	r4, #0
    9550:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9552:	f011 fc57 	bl	1ae04 <k_mem_slab_alloc>
    9556:	4601      	mov	r1, r0
    9558:	b930      	cbnz	r0, 9568 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    955a:	9801      	ldr	r0, [sp, #4]
    955c:	2210      	movs	r2, #16
    955e:	f014 f97e 	bl	1d85e <memset>

	return req;
    9562:	9801      	ldr	r0, [sp, #4]
}
    9564:	b002      	add	sp, #8
    9566:	bd10      	pop	{r4, pc}
		return NULL;
    9568:	4620      	mov	r0, r4
    956a:	e7fb      	b.n	9564 <bt_att_req_alloc+0x20>
    956c:	200006d0 	.word	0x200006d0

00009570 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9570:	b507      	push	{r0, r1, r2, lr}
    9572:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    9574:	6880      	ldr	r0, [r0, #8]
    9576:	b120      	cbz	r0, 9582 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    9578:	f010 fb3c 	bl	19bf4 <net_buf_unref>
		req->buf = NULL;
    957c:	9b01      	ldr	r3, [sp, #4]
    957e:	2200      	movs	r2, #0
    9580:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    9582:	4803      	ldr	r0, [pc, #12]	; (9590 <bt_att_req_free+0x20>)
    9584:	a901      	add	r1, sp, #4
    9586:	f015 fee1 	bl	1f34c <k_mem_slab_free>
}
    958a:	b003      	add	sp, #12
    958c:	f85d fb04 	ldr.w	pc, [sp], #4
    9590:	200006d0 	.word	0x200006d0

00009594 <att_handle_rsp>:
{
    9594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9598:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    959a:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    959e:	460f      	mov	r7, r1
    95a0:	4690      	mov	r8, r2
    95a2:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    95a4:	f016 f896 	bl	1f6d4 <k_work_cancel_delayable>
	if (!chan->req) {
    95a8:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    95ac:	b9e5      	cbnz	r5, 95e8 <att_handle_rsp+0x54>
    95ae:	4919      	ldr	r1, [pc, #100]	; (9614 <att_handle_rsp+0x80>)
    95b0:	4819      	ldr	r0, [pc, #100]	; (9618 <att_handle_rsp+0x84>)
    95b2:	1a40      	subs	r0, r0, r1
    95b4:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    95b6:	0180      	lsls	r0, r0, #6
    95b8:	f040 0102 	orr.w	r1, r0, #2
    95bc:	4817      	ldr	r0, [pc, #92]	; (961c <att_handle_rsp+0x88>)
    95be:	f013 faac 	bl	1cb1a <log_0>
	bt_att_func_t func = NULL;
    95c2:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    95c4:	6820      	ldr	r0, [r4, #0]
    95c6:	f015 f882 	bl	1e6ce <att_req_send_process>
	if (func) {
    95ca:	f1ba 0f00 	cmp.w	sl, #0
    95ce:	d007      	beq.n	95e0 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    95d0:	6820      	ldr	r0, [r4, #0]
    95d2:	f8cd 9000 	str.w	r9, [sp]
    95d6:	6800      	ldr	r0, [r0, #0]
    95d8:	4643      	mov	r3, r8
    95da:	463a      	mov	r2, r7
    95dc:	4631      	mov	r1, r6
    95de:	47d0      	blx	sl
}
    95e0:	2000      	movs	r0, #0
    95e2:	b003      	add	sp, #12
    95e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    95e8:	4b0d      	ldr	r3, [pc, #52]	; (9620 <att_handle_rsp+0x8c>)
    95ea:	429d      	cmp	r5, r3
    95ec:	f04f 0b00 	mov.w	fp, #0
    95f0:	d103      	bne.n	95fa <att_handle_rsp+0x66>
		chan->req = NULL;
    95f2:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    95f6:	46da      	mov	sl, fp
		goto process;
    95f8:	e7e4      	b.n	95c4 <att_handle_rsp+0x30>
	func = chan->req->func;
    95fa:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    95fe:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    9602:	4628      	mov	r0, r5
	params = chan->req->user_data;
    9604:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
    9608:	f7ff ffb2 	bl	9570 <bt_att_req_free>
	chan->req = NULL;
    960c:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
    9610:	e7d8      	b.n	95c4 <att_handle_rsp+0x30>
    9612:	bf00      	nop
    9614:	0001ff94 	.word	0x0001ff94
    9618:	0001ff9c 	.word	0x0001ff9c
    961c:	00022d1c 	.word	0x00022d1c
    9620:	2000130c 	.word	0x2000130c

00009624 <bt_att_disconnected>:
{
    9624:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    9626:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    962a:	b085      	sub	sp, #20
    962c:	4604      	mov	r4, r0
	if (!att_chan->att) {
    962e:	2d00      	cmp	r5, #0
    9630:	d04b      	beq.n	96ca <bt_att_disconnected+0xa6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    9632:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    9636:	f105 0024 	add.w	r0, r5, #36	; 0x24
    963a:	f014 ffab 	bl	1e594 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    963e:	f1a4 0608 	sub.w	r6, r4, #8
    9642:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    9646:	2200      	movs	r2, #0
    9648:	2300      	movs	r3, #0
    964a:	4638      	mov	r0, r7
    964c:	f015 fc1a 	bl	1ee84 <net_buf_get>
    9650:	4602      	mov	r2, r0
    9652:	bb10      	cbnz	r0, 969a <bt_att_disconnected+0x76>
	if (chan->req) {
    9654:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    9658:	b123      	cbz	r3, 9664 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    965a:	4601      	mov	r1, r0
    965c:	230e      	movs	r3, #14
    965e:	4630      	mov	r0, r6
    9660:	f7ff ff98 	bl	9594 <att_handle_rsp>
	chan->att = NULL;
    9664:	2300      	movs	r3, #0
    9666:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    966a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    966c:	bb6b      	cbnz	r3, 96ca <bt_att_disconnected+0xa6>
	att_reset(att);
    966e:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9670:	9803      	ldr	r0, [sp, #12]
    9672:	2200      	movs	r2, #0
    9674:	2300      	movs	r3, #0
    9676:	300c      	adds	r0, #12
    9678:	f015 fc04 	bl	1ee84 <net_buf_get>
    967c:	b980      	cbnz	r0, 96a0 <bt_att_disconnected+0x7c>
	att->conn = NULL;
    967e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    9680:	6855      	ldr	r5, [r2, #4]
    9682:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9684:	b97d      	cbnz	r5, 96a6 <bt_att_disconnected+0x82>
	k_mem_slab_free(&att_slab, (void **)&att);
    9686:	4812      	ldr	r0, [pc, #72]	; (96d0 <bt_att_disconnected+0xac>)
    9688:	a903      	add	r1, sp, #12
    968a:	f015 fe5f 	bl	1f34c <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    968e:	6820      	ldr	r0, [r4, #0]
}
    9690:	b005      	add	sp, #20
    9692:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    9696:	f000 bda3 	b.w	a1e0 <bt_gatt_disconnected>
		net_buf_unref(buf);
    969a:	f010 faab 	bl	19bf4 <net_buf_unref>
    969e:	e7d2      	b.n	9646 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    96a0:	f010 faa8 	bl	19bf4 <net_buf_unref>
    96a4:	e7e4      	b.n	9670 <bt_att_disconnected+0x4c>
	return node->next;
    96a6:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    96a8:	686f      	ldr	r7, [r5, #4]
    96aa:	b137      	cbz	r7, 96ba <bt_att_disconnected+0x96>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    96ac:	68eb      	ldr	r3, [r5, #12]
    96ae:	9300      	str	r3, [sp, #0]
    96b0:	2300      	movs	r3, #0
    96b2:	461a      	mov	r2, r3
    96b4:	210e      	movs	r1, #14
    96b6:	4618      	mov	r0, r3
    96b8:	47b8      	blx	r7
		bt_att_req_free(req);
    96ba:	4628      	mov	r0, r5
    96bc:	f7ff ff58 	bl	9570 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    96c0:	2e00      	cmp	r6, #0
    96c2:	d0e0      	beq.n	9686 <bt_att_disconnected+0x62>
    96c4:	4635      	mov	r5, r6
    96c6:	6836      	ldr	r6, [r6, #0]
    96c8:	e7ee      	b.n	96a8 <bt_att_disconnected+0x84>
}
    96ca:	b005      	add	sp, #20
    96cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96ce:	bf00      	nop
    96d0:	20000698 	.word	0x20000698

000096d4 <att_timeout>:
    96d4:	4b08      	ldr	r3, [pc, #32]	; (96f8 <att_timeout+0x24>)
    96d6:	4909      	ldr	r1, [pc, #36]	; (96fc <att_timeout+0x28>)
{
    96d8:	b510      	push	{r4, lr}
    96da:	1ac9      	subs	r1, r1, r3
    96dc:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    96de:	0189      	lsls	r1, r1, #6
{
    96e0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    96e2:	f041 0101 	orr.w	r1, r1, #1
    96e6:	4806      	ldr	r0, [pc, #24]	; (9700 <att_timeout+0x2c>)
    96e8:	f013 fa17 	bl	1cb1a <log_0>
	bt_att_disconnected(&chan->chan.chan);
    96ec:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    96f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    96f4:	f7ff bf96 	b.w	9624 <bt_att_disconnected>
    96f8:	0001ff94 	.word	0x0001ff94
    96fc:	0001ff9c 	.word	0x0001ff9c
    9700:	00022d33 	.word	0x00022d33

00009704 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    9704:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9706:	4d0d      	ldr	r5, [pc, #52]	; (973c <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    9708:	4604      	mov	r4, r0
    970a:	b968      	cbnz	r0, 9728 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    970c:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    970e:	2207      	movs	r2, #7
    9710:	f8cd 0003 	str.w	r0, [sp, #3]
    9714:	4669      	mov	r1, sp
    9716:	1c68      	adds	r0, r5, #1
    9718:	f014 f865 	bl	1d7e6 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    971c:	2800      	cmp	r0, #0
    971e:	bf08      	it	eq
    9720:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    9722:	4620      	mov	r0, r4
    9724:	b003      	add	sp, #12
    9726:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9728:	462a      	mov	r2, r5
    972a:	f812 1b01 	ldrb.w	r1, [r2], #1
    972e:	f014 fc31 	bl	1df94 <bt_conn_is_peer_addr_le>
	return NULL;
    9732:	2800      	cmp	r0, #0
    9734:	bf14      	ite	ne
    9736:	462c      	movne	r4, r5
    9738:	2400      	moveq	r4, #0
    973a:	e7f2      	b.n	9722 <find_cf_cfg+0x1e>
    973c:	2000131c 	.word	0x2000131c

00009740 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
    9740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9744:	4698      	mov	r8, r3
    9746:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
    974a:	2b01      	cmp	r3, #1
{
    974c:	4606      	mov	r6, r0
    974e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    9750:	d83d      	bhi.n	97ce <cf_write+0x8e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
    9752:	4443      	add	r3, r8
    9754:	2b01      	cmp	r3, #1
    9756:	4645      	mov	r5, r8
    9758:	dc3c      	bgt.n	97d4 <cf_write+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
    975a:	f7ff ffd3 	bl	9704 <find_cf_cfg>
	if (!cfg) {
    975e:	4604      	mov	r4, r0
    9760:	b918      	cbnz	r0, 976a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    9762:	f7ff ffcf 	bl	9704 <find_cf_cfg>
	}

	if (!cfg) {
    9766:	4604      	mov	r4, r0
    9768:	b180      	cbz	r0, 978c <cf_write+0x4c>
{
    976a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    976c:	f1b8 0f00 	cmp.w	r8, #0
    9770:	d11b      	bne.n	97aa <cf_write+0x6a>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9772:	f106 0188 	add.w	r1, r6, #136	; 0x88
    9776:	1c60      	adds	r0, r4, #1
    9778:	f015 f961 	bl	1ea3e <bt_addr_le_copy>
	cfg->id = conn->id;
    977c:	4620      	mov	r0, r4
    977e:	7a33      	ldrb	r3, [r6, #8]
    9780:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9784:	2100      	movs	r1, #0
    9786:	f015 f97a 	bl	1ea7e <atomic_set_bit>

	return len;
    978a:	e00b      	b.n	97a4 <cf_write+0x64>
    978c:	4b14      	ldr	r3, [pc, #80]	; (97e0 <cf_write+0xa0>)
    978e:	4915      	ldr	r1, [pc, #84]	; (97e4 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    9790:	4815      	ldr	r0, [pc, #84]	; (97e8 <cf_write+0xa8>)
    9792:	1ac9      	subs	r1, r1, r3
    9794:	08c9      	lsrs	r1, r1, #3
    9796:	0189      	lsls	r1, r1, #6
    9798:	f041 0102 	orr.w	r1, r1, #2
    979c:	f013 f9bd 	bl	1cb1a <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    97a0:	f06f 0510 	mvn.w	r5, #16
}
    97a4:	4628      	mov	r0, r5
    97a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    97aa:	7a20      	ldrb	r0, [r4, #8]
    97ac:	fa20 f301 	lsr.w	r3, r0, r1
    97b0:	07da      	lsls	r2, r3, #31
    97b2:	d503      	bpl.n	97bc <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    97b4:	783b      	ldrb	r3, [r7, #0]
    97b6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    97b8:	07db      	lsls	r3, r3, #31
    97ba:	d50e      	bpl.n	97da <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    97bc:	3101      	adds	r1, #1
    97be:	2903      	cmp	r1, #3
    97c0:	d1d4      	bne.n	976c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    97c2:	783b      	ldrb	r3, [r7, #0]
    97c4:	f003 0307 	and.w	r3, r3, #7
    97c8:	4318      	orrs	r0, r3
    97ca:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    97cc:	e7d1      	b.n	9772 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    97ce:	f06f 0506 	mvn.w	r5, #6
    97d2:	e7e7      	b.n	97a4 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    97d4:	f06f 050c 	mvn.w	r5, #12
    97d8:	e7e4      	b.n	97a4 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    97da:	f06f 0512 	mvn.w	r5, #18
    97de:	e7e1      	b.n	97a4 <cf_write+0x64>
    97e0:	0001ff94 	.word	0x0001ff94
    97e4:	00020084 	.word	0x00020084
    97e8:	00022d46 	.word	0x00022d46

000097ec <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
    97ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    97f0:	461f      	mov	r7, r3
    97f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    97f6:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    97fa:	4606      	mov	r6, r0
    97fc:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	uint16_t value;

	if (offset) {
    97fe:	2b00      	cmp	r3, #0
    9800:	d14e      	bne.n	98a0 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
    9802:	1e7b      	subs	r3, r7, #1
    9804:	2b01      	cmp	r3, #1
    9806:	d84e      	bhi.n	98a6 <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
    9808:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    980a:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
    980c:	4649      	mov	r1, r9
    980e:	bf14      	ite	ne
    9810:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    9812:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    9814:	f015 f9f8 	bl	1ec08 <find_ccc_cfg>
	if (!cfg) {
    9818:	4604      	mov	r4, r0
    981a:	b9e8      	cbnz	r0, 9858 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
    981c:	b91d      	cbnz	r5, 9826 <bt_gatt_attr_write_ccc+0x3a>
			return len;
    981e:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
    9820:	b003      	add	sp, #12
    9822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9826:	4649      	mov	r1, r9
    9828:	f015 f9ee 	bl	1ec08 <find_ccc_cfg>
		if (!cfg) {
    982c:	4604      	mov	r4, r0
    982e:	b960      	cbnz	r0, 984a <bt_gatt_attr_write_ccc+0x5e>
    9830:	4b1e      	ldr	r3, [pc, #120]	; (98ac <bt_gatt_attr_write_ccc+0xc0>)
    9832:	491f      	ldr	r1, [pc, #124]	; (98b0 <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
    9834:	481f      	ldr	r0, [pc, #124]	; (98b4 <bt_gatt_attr_write_ccc+0xc8>)
    9836:	1ac9      	subs	r1, r1, r3
    9838:	08c9      	lsrs	r1, r1, #3
    983a:	0189      	lsls	r1, r1, #6
    983c:	f041 0102 	orr.w	r1, r1, #2
    9840:	f013 f96b 	bl	1cb1a <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9844:	f06f 0010 	mvn.w	r0, #16
    9848:	e7ea      	b.n	9820 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    984a:	f106 0188 	add.w	r1, r6, #136	; 0x88
    984e:	3001      	adds	r0, #1
    9850:	f015 f8f5 	bl	1ea3e <bt_addr_le_copy>
		cfg->id = conn->id;
    9854:	7a33      	ldrb	r3, [r6, #8]
    9856:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    9858:	f8d9 3010 	ldr.w	r3, [r9, #16]
    985c:	b9a3      	cbnz	r3, 9888 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
    985e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    9862:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    9864:	42ab      	cmp	r3, r5
    9866:	d003      	beq.n	9870 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
    9868:	4649      	mov	r1, r9
    986a:	4640      	mov	r0, r8
    986c:	f015 f870 	bl	1e950 <gatt_ccc_changed>
	if (!value) {
    9870:	2d00      	cmp	r5, #0
    9872:	d1d4      	bne.n	981e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9874:	4669      	mov	r1, sp
    9876:	1c60      	adds	r0, r4, #1
    9878:	9500      	str	r5, [sp, #0]
    987a:	f8cd 5003 	str.w	r5, [sp, #3]
    987e:	f015 f8de 	bl	1ea3e <bt_addr_le_copy>
	cfg->id = 0U;
    9882:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    9884:	8125      	strh	r5, [r4, #8]
}
    9886:	e7ca      	b.n	981e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9888:	462a      	mov	r2, r5
    988a:	4641      	mov	r1, r8
    988c:	4630      	mov	r0, r6
    988e:	4798      	blx	r3
		if (write < 0) {
    9890:	2800      	cmp	r0, #0
    9892:	dbc5      	blt.n	9820 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    9894:	3801      	subs	r0, #1
    9896:	2801      	cmp	r0, #1
    9898:	d9e1      	bls.n	985e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    989a:	f06f 000d 	mvn.w	r0, #13
    989e:	e7bf      	b.n	9820 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    98a0:	f06f 0006 	mvn.w	r0, #6
    98a4:	e7bc      	b.n	9820 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    98a6:	f06f 000c 	mvn.w	r0, #12
    98aa:	e7b9      	b.n	9820 <bt_gatt_attr_write_ccc+0x34>
    98ac:	0001ff94 	.word	0x0001ff94
    98b0:	00020084 	.word	0x00020084
    98b4:	00022d72 	.word	0x00022d72

000098b8 <find_sc_cfg>:
{
    98b8:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    98ba:	4c06      	ldr	r4, [pc, #24]	; (98d4 <find_sc_cfg+0x1c>)
    98bc:	7823      	ldrb	r3, [r4, #0]
    98be:	4283      	cmp	r3, r0
    98c0:	d104      	bne.n	98cc <find_sc_cfg+0x14>
    98c2:	2207      	movs	r2, #7
    98c4:	1c60      	adds	r0, r4, #1
    98c6:	f013 ff8e 	bl	1d7e6 <memcmp>
    98ca:	b108      	cbz	r0, 98d0 <find_sc_cfg+0x18>
	return NULL;
    98cc:	2000      	movs	r0, #0
}
    98ce:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    98d0:	4620      	mov	r0, r4
    98d2:	e7fc      	b.n	98ce <find_sc_cfg+0x16>
    98d4:	20002818 	.word	0x20002818

000098d8 <sc_save>:
{
    98d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    98dc:	4680      	mov	r8, r0
    98de:	460f      	mov	r7, r1
    98e0:	4616      	mov	r6, r2
    98e2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    98e4:	f7ff ffe8 	bl	98b8 <find_sc_cfg>
	if (!cfg) {
    98e8:	4604      	mov	r4, r0
    98ea:	b9c8      	cbnz	r0, 9920 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    98ec:	4669      	mov	r1, sp
    98ee:	9000      	str	r0, [sp, #0]
    98f0:	f8cd 0003 	str.w	r0, [sp, #3]
    98f4:	f7ff ffe0 	bl	98b8 <find_sc_cfg>
		if (!cfg) {
    98f8:	4604      	mov	r4, r0
    98fa:	b960      	cbnz	r0, 9916 <sc_save+0x3e>
    98fc:	490f      	ldr	r1, [pc, #60]	; (993c <sc_save+0x64>)
    98fe:	4b10      	ldr	r3, [pc, #64]	; (9940 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    9900:	4810      	ldr	r0, [pc, #64]	; (9944 <sc_save+0x6c>)
    9902:	1ac9      	subs	r1, r1, r3
    9904:	08c9      	lsrs	r1, r1, #3
    9906:	0189      	lsls	r1, r1, #6
    9908:	f041 0101 	orr.w	r1, r1, #1
    990c:	f013 f905 	bl	1cb1a <log_0>
}
    9910:	b002      	add	sp, #8
    9912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    9916:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    991a:	4639      	mov	r1, r7
    991c:	f015 f88f 	bl	1ea3e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9920:	8922      	ldrh	r2, [r4, #8]
    9922:	8963      	ldrh	r3, [r4, #10]
    9924:	b91a      	cbnz	r2, 992e <sc_save+0x56>
    9926:	b923      	cbnz	r3, 9932 <sc_save+0x5a>
		cfg->data.start = start;
    9928:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    992a:	8165      	strh	r5, [r4, #10]
    992c:	e7f0      	b.n	9910 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    992e:	4296      	cmp	r6, r2
    9930:	d302      	bcc.n	9938 <sc_save+0x60>
    9932:	429d      	cmp	r5, r3
    9934:	d9ec      	bls.n	9910 <sc_save+0x38>
    9936:	e7f8      	b.n	992a <sc_save+0x52>
		*start = new_start;
    9938:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    993a:	e7fa      	b.n	9932 <sc_save+0x5a>
    993c:	00020084 	.word	0x00020084
    9940:	0001ff94 	.word	0x0001ff94
    9944:	00022d8c 	.word	0x00022d8c

00009948 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    9948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    994c:	4b23      	ldr	r3, [pc, #140]	; (99dc <disconnected_cb+0x94>)
{
    994e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9950:	6882      	ldr	r2, [r0, #8]
    9952:	429a      	cmp	r2, r3
{
    9954:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9956:	d102      	bne.n	995e <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9958:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    995a:	8963      	ldrh	r3, [r4, #10]
    995c:	bb03      	cbnz	r3, 99a0 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    995e:	2001      	movs	r0, #1
    9960:	b002      	add	sp, #8
    9962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9966:	f105 0888 	add.w	r8, r5, #136	; 0x88
    996a:	7a28      	ldrb	r0, [r5, #8]
    996c:	4641      	mov	r1, r8
    996e:	f014 f949 	bl	1dc04 <bt_addr_le_is_bonded>
    9972:	b980      	cbnz	r0, 9996 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    9974:	4b1a      	ldr	r3, [pc, #104]	; (99e0 <disconnected_cb+0x98>)
    9976:	429c      	cmp	r4, r3
    9978:	d102      	bne.n	9980 <disconnected_cb+0x38>
					sc_clear(conn);
    997a:	4628      	mov	r0, r5
    997c:	f015 f97e 	bl	1ec7c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9980:	2500      	movs	r5, #0
    9982:	4669      	mov	r1, sp
    9984:	4630      	mov	r0, r6
    9986:	9500      	str	r5, [sp, #0]
    9988:	f8cd 5003 	str.w	r5, [sp, #3]
    998c:	f015 f857 	bl	1ea3e <bt_addr_le_copy>
	cfg->id = 0U;
    9990:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    9992:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    9994:	e019      	b.n	99ca <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9996:	4641      	mov	r1, r8
    9998:	4630      	mov	r0, r6
    999a:	f015 f850 	bl	1ea3e <bt_addr_le_copy>
	if (!value_used) {
    999e:	e014      	b.n	99ca <disconnected_cb+0x82>
		if (!cfg->value) {
    99a0:	8923      	ldrh	r3, [r4, #8]
    99a2:	b193      	cbz	r3, 99ca <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    99a4:	4626      	mov	r6, r4
    99a6:	4628      	mov	r0, r5
    99a8:	f816 1b01 	ldrb.w	r1, [r6], #1
    99ac:	4632      	mov	r2, r6
    99ae:	f014 faf1 	bl	1df94 <bt_conn_is_peer_addr_le>
    99b2:	2800      	cmp	r0, #0
    99b4:	d1d7      	bne.n	9966 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    99b6:	7820      	ldrb	r0, [r4, #0]
    99b8:	4631      	mov	r1, r6
    99ba:	f7fe fb73 	bl	80a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    99be:	b120      	cbz	r0, 99ca <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    99c0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    99c2:	f014 fb22 	bl	1e00a <bt_conn_unref>
	if (!value_used) {
    99c6:	2d07      	cmp	r5, #7
    99c8:	d0c9      	beq.n	995e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    99ca:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    99cc:	2100      	movs	r1, #0
    99ce:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    99d0:	2b00      	cmp	r3, #0
    99d2:	d0c4      	beq.n	995e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    99d4:	4638      	mov	r0, r7
    99d6:	4798      	blx	r3
    99d8:	e7c1      	b.n	995e <disconnected_cb+0x16>
    99da:	bf00      	nop
    99dc:	000097ed 	.word	0x000097ed
    99e0:	20000208 	.word	0x20000208

000099e4 <sc_indicate_rsp>:
{
    99e4:	b510      	push	{r4, lr}
    99e6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    99e8:	4814      	ldr	r0, [pc, #80]	; (9a3c <sc_indicate_rsp+0x58>)
    99ea:	f3bf 8f5b 	dmb	ish
    99ee:	f100 0350 	add.w	r3, r0, #80	; 0x50
    99f2:	e853 2f00 	ldrex	r2, [r3]
    99f6:	f022 0202 	bic.w	r2, r2, #2
    99fa:	e843 2100 	strex	r1, r2, [r3]
    99fe:	2900      	cmp	r1, #0
    9a00:	d1f7      	bne.n	99f2 <sc_indicate_rsp+0xe>
    9a02:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9a06:	f3bf 8f5b 	dmb	ish
    9a0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    9a0c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9a10:	07da      	lsls	r2, r3, #31
    9a12:	d504      	bpl.n	9a1e <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    9a14:	2200      	movs	r2, #0
    9a16:	2300      	movs	r3, #0
    9a18:	3020      	adds	r0, #32
    9a1a:	f011 fde5 	bl	1b5e8 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    9a1e:	4620      	mov	r0, r4
    9a20:	f7ff fe70 	bl	9704 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9a24:	b140      	cbz	r0, 9a38 <sc_indicate_rsp+0x54>
    9a26:	7a03      	ldrb	r3, [r0, #8]
    9a28:	07db      	lsls	r3, r3, #31
    9a2a:	d505      	bpl.n	9a38 <sc_indicate_rsp+0x54>
}
    9a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9a30:	2100      	movs	r1, #0
    9a32:	300c      	adds	r0, #12
    9a34:	f015 b823 	b.w	1ea7e <atomic_set_bit>
}
    9a38:	bd10      	pop	{r4, pc}
    9a3a:	bf00      	nop
    9a3c:	20000b98 	.word	0x20000b98

00009a40 <bt_gatt_init>:
{
    9a40:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9a42:	4b1e      	ldr	r3, [pc, #120]	; (9abc <bt_gatt_init+0x7c>)
    9a44:	f3bf 8f5b 	dmb	ish
    9a48:	2201      	movs	r2, #1
    9a4a:	e853 1f00 	ldrex	r1, [r3]
    9a4e:	2900      	cmp	r1, #0
    9a50:	d103      	bne.n	9a5a <bt_gatt_init+0x1a>
    9a52:	e843 2000 	strex	r0, r2, [r3]
    9a56:	2800      	cmp	r0, #0
    9a58:	d1f7      	bne.n	9a4a <bt_gatt_init+0xa>
    9a5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    9a5e:	d12c      	bne.n	9aba <bt_gatt_init+0x7a>
    9a60:	f3bf 8f5b 	dmb	ish
    9a64:	4b16      	ldr	r3, [pc, #88]	; (9ac0 <bt_gatt_init+0x80>)
    9a66:	e853 1f00 	ldrex	r1, [r3]
    9a6a:	2900      	cmp	r1, #0
    9a6c:	d103      	bne.n	9a76 <bt_gatt_init+0x36>
    9a6e:	e843 2000 	strex	r0, r2, [r3]
    9a72:	2800      	cmp	r0, #0
    9a74:	d1f7      	bne.n	9a66 <bt_gatt_init+0x26>
    9a76:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    9a7a:	d108      	bne.n	9a8e <bt_gatt_init+0x4e>
    9a7c:	4911      	ldr	r1, [pc, #68]	; (9ac4 <bt_gatt_init+0x84>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9a7e:	4a12      	ldr	r2, [pc, #72]	; (9ac8 <bt_gatt_init+0x88>)
    9a80:	880b      	ldrh	r3, [r1, #0]
    9a82:	4c12      	ldr	r4, [pc, #72]	; (9acc <bt_gatt_init+0x8c>)
	if (!atomic_cas(&service_init, 0, 1)) {
    9a84:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9a86:	42a2      	cmp	r2, r4
    9a88:	d311      	bcc.n	9aae <bt_gatt_init+0x6e>
    9a8a:	b100      	cbz	r0, 9a8e <bt_gatt_init+0x4e>
    9a8c:	800b      	strh	r3, [r1, #0]
	k_work_init_delayable(&db_hash.work, db_hash_process);
    9a8e:	4910      	ldr	r1, [pc, #64]	; (9ad0 <bt_gatt_init+0x90>)
    9a90:	4810      	ldr	r0, [pc, #64]	; (9ad4 <bt_gatt_init+0x94>)
    9a92:	f015 fe13 	bl	1f6bc <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    9a96:	480f      	ldr	r0, [pc, #60]	; (9ad4 <bt_gatt_init+0x94>)
    9a98:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9a9c:	2300      	movs	r3, #0
    9a9e:	f011 fd6f 	bl	1b580 <k_work_schedule>
}
    9aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    9aa6:	490c      	ldr	r1, [pc, #48]	; (9ad8 <bt_gatt_init+0x98>)
    9aa8:	480c      	ldr	r0, [pc, #48]	; (9adc <bt_gatt_init+0x9c>)
    9aaa:	f015 be07 	b.w	1f6bc <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    9aae:	6850      	ldr	r0, [r2, #4]
    9ab0:	4403      	add	r3, r0
    9ab2:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9ab4:	3208      	adds	r2, #8
    9ab6:	2001      	movs	r0, #1
    9ab8:	e7e5      	b.n	9a86 <bt_gatt_init+0x46>
}
    9aba:	bd10      	pop	{r4, pc}
    9abc:	2000132c 	.word	0x2000132c
    9ac0:	20001348 	.word	0x20001348
    9ac4:	20002816 	.word	0x20002816
    9ac8:	0001ff84 	.word	0x0001ff84
    9acc:	0001ff94 	.word	0x0001ff94
    9ad0:	0001ed75 	.word	0x0001ed75
    9ad4:	20000b40 	.word	0x20000b40
    9ad8:	00009e61 	.word	0x00009e61
    9adc:	20000bb8 	.word	0x20000bb8

00009ae0 <bt_gatt_attr_get_handle>:
{
    9ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    9ae4:	4603      	mov	r3, r0
    9ae6:	b148      	cbz	r0, 9afc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    9ae8:	8a00      	ldrh	r0, [r0, #16]
    9aea:	b938      	cbnz	r0, 9afc <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9aec:	4912      	ldr	r1, [pc, #72]	; (9b38 <bt_gatt_attr_get_handle+0x58>)
    9aee:	f8df e04c 	ldr.w	lr, [pc, #76]	; 9b3c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    9af2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9af4:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9af8:	4571      	cmp	r1, lr
    9afa:	d301      	bcc.n	9b00 <bt_gatt_attr_get_handle+0x20>
}
    9afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9b00:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    9b04:	42bb      	cmp	r3, r7
    9b06:	d304      	bcc.n	9b12 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9b08:	fb0c 7206 	mla	r2, ip, r6, r7
    9b0c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9b0e:	4293      	cmp	r3, r2
    9b10:	d90e      	bls.n	9b30 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    9b12:	19a2      	adds	r2, r4, r6
    9b14:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9b16:	3108      	adds	r1, #8
    9b18:	4614      	mov	r4, r2
    9b1a:	e7ed      	b.n	9af8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9b1c:	fb0c 7805 	mla	r8, ip, r5, r7
    9b20:	4543      	cmp	r3, r8
    9b22:	d007      	beq.n	9b34 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9b24:	3501      	adds	r5, #1
    9b26:	1962      	adds	r2, r4, r5
    9b28:	42b5      	cmp	r5, r6
    9b2a:	b292      	uxth	r2, r2
    9b2c:	d1f6      	bne.n	9b1c <bt_gatt_attr_get_handle+0x3c>
    9b2e:	e7f2      	b.n	9b16 <bt_gatt_attr_get_handle+0x36>
    9b30:	2500      	movs	r5, #0
    9b32:	e7f8      	b.n	9b26 <bt_gatt_attr_get_handle+0x46>
    9b34:	4610      	mov	r0, r2
    9b36:	e7e1      	b.n	9afc <bt_gatt_attr_get_handle+0x1c>
    9b38:	0001ff84 	.word	0x0001ff84
    9b3c:	0001ff94 	.word	0x0001ff94

00009b40 <bt_gatt_foreach_attr_type>:
{
    9b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b44:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    9b48:	9100      	str	r1, [sp, #0]
    9b4a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    9b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9b50:	2d00      	cmp	r5, #0
    9b52:	bf08      	it	eq
    9b54:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    9b56:	4b24      	ldr	r3, [pc, #144]	; (9be8 <bt_gatt_foreach_attr_type+0xa8>)
    9b58:	881b      	ldrh	r3, [r3, #0]
    9b5a:	4283      	cmp	r3, r0
{
    9b5c:	4607      	mov	r7, r0
    9b5e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    9b60:	d23c      	bcs.n	9bdc <bt_gatt_foreach_attr_type+0x9c>
}
    9b62:	b003      	add	sp, #12
    9b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    9b68:	6873      	ldr	r3, [r6, #4]
    9b6a:	4423      	add	r3, r4
    9b6c:	42bb      	cmp	r3, r7
    9b6e:	d232      	bcs.n	9bd6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    9b70:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9b72:	3608      	adds	r6, #8
    9b74:	4b1d      	ldr	r3, [pc, #116]	; (9bec <bt_gatt_foreach_attr_type+0xac>)
    9b76:	429e      	cmp	r6, r3
    9b78:	d3f6      	bcc.n	9b68 <bt_gatt_foreach_attr_type+0x28>
    9b7a:	e7f2      	b.n	9b62 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9b7c:	5889      	ldr	r1, [r1, r2]
    9b7e:	9301      	str	r3, [sp, #4]
    9b80:	4640      	mov	r0, r8
    9b82:	f013 fef9 	bl	1d978 <bt_uuid_cmp>
    9b86:	9b01      	ldr	r3, [sp, #4]
    9b88:	b190      	cbz	r0, 9bb0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9b8a:	3401      	adds	r4, #1
    9b8c:	f10a 0a01 	add.w	sl, sl, #1
    9b90:	b2a4      	uxth	r4, r4
    9b92:	6873      	ldr	r3, [r6, #4]
    9b94:	4553      	cmp	r3, sl
    9b96:	d9ec      	bls.n	9b72 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    9b98:	9b00      	ldr	r3, [sp, #0]
    9b9a:	429c      	cmp	r4, r3
    9b9c:	d8e1      	bhi.n	9b62 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    9b9e:	42bc      	cmp	r4, r7
    9ba0:	d3f3      	bcc.n	9b8a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9ba2:	6831      	ldr	r1, [r6, #0]
    9ba4:	fb0b f20a 	mul.w	r2, fp, sl
    9ba8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9baa:	f1b8 0f00 	cmp.w	r8, #0
    9bae:	d1e5      	bne.n	9b7c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    9bb0:	f1b9 0f00 	cmp.w	r9, #0
    9bb4:	d10b      	bne.n	9bce <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    9bb6:	3d01      	subs	r5, #1
    9bb8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    9bba:	4618      	mov	r0, r3
    9bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bc0:	4621      	mov	r1, r4
    9bc2:	4798      	blx	r3
	if (!*num_matches) {
    9bc4:	2d00      	cmp	r5, #0
    9bc6:	d0cc      	beq.n	9b62 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9bc8:	2800      	cmp	r0, #0
    9bca:	d1de      	bne.n	9b8a <bt_gatt_foreach_attr_type+0x4a>
    9bcc:	e7c9      	b.n	9b62 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    9bce:	68da      	ldr	r2, [r3, #12]
    9bd0:	4591      	cmp	r9, r2
    9bd2:	d1da      	bne.n	9b8a <bt_gatt_foreach_attr_type+0x4a>
    9bd4:	e7ef      	b.n	9bb6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9bd6:	f04f 0a00 	mov.w	sl, #0
    9bda:	e7da      	b.n	9b92 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9bdc:	4e04      	ldr	r6, [pc, #16]	; (9bf0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    9bde:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9be0:	f04f 0b14 	mov.w	fp, #20
    9be4:	e7c6      	b.n	9b74 <bt_gatt_foreach_attr_type+0x34>
    9be6:	bf00      	nop
    9be8:	20002816 	.word	0x20002816
    9bec:	0001ff94 	.word	0x0001ff94
    9bf0:	0001ff84 	.word	0x0001ff84

00009bf4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    9bf4:	b510      	push	{r4, lr}
    9bf6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    9bf8:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9bfa:	aa1c      	add	r2, sp, #112	; 0x70
    9bfc:	4669      	mov	r1, sp
    9bfe:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    9c00:	e9cd 4400 	strd	r4, r4, [sp]
    9c04:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9c08:	f013 fcdb 	bl	1d5c2 <tc_cmac_setup>
    9c0c:	b958      	cbnz	r0, 9c26 <db_hash_gen.constprop.0+0x32>
    9c0e:	491d      	ldr	r1, [pc, #116]	; (9c84 <db_hash_gen.constprop.0+0x90>)
    9c10:	4b1d      	ldr	r3, [pc, #116]	; (9c88 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
    9c12:	481e      	ldr	r0, [pc, #120]	; (9c8c <db_hash_gen.constprop.0+0x98>)
    9c14:	1ac9      	subs	r1, r1, r3
    9c16:	08c9      	lsrs	r1, r1, #3
    9c18:	0189      	lsls	r1, r1, #6
    9c1a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    9c1e:	f012 ff7c 	bl	1cb1a <log_0>
}
    9c22:	b048      	add	sp, #288	; 0x120
    9c24:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    9c26:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c2a:	2001      	movs	r0, #1
    9c2c:	4a18      	ldr	r2, [pc, #96]	; (9c90 <db_hash_gen.constprop.0+0x9c>)
    9c2e:	ab04      	add	r3, sp, #16
    9c30:	f015 f895 	bl	1ed5e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    9c34:	4817      	ldr	r0, [pc, #92]	; (9c94 <db_hash_gen.constprop.0+0xa0>)
    9c36:	a904      	add	r1, sp, #16
    9c38:	f013 fd59 	bl	1d6ee <tc_cmac_final>
    9c3c:	b940      	cbnz	r0, 9c50 <db_hash_gen.constprop.0+0x5c>
    9c3e:	4911      	ldr	r1, [pc, #68]	; (9c84 <db_hash_gen.constprop.0+0x90>)
    9c40:	4b11      	ldr	r3, [pc, #68]	; (9c88 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to calculate hash");
    9c42:	4815      	ldr	r0, [pc, #84]	; (9c98 <db_hash_gen.constprop.0+0xa4>)
    9c44:	1ac9      	subs	r1, r1, r3
    9c46:	08c9      	lsrs	r1, r1, #3
    9c48:	0189      	lsls	r1, r1, #6
    9c4a:	f041 0101 	orr.w	r1, r1, #1
    9c4e:	e7e6      	b.n	9c1e <db_hash_gen.constprop.0+0x2a>
    9c50:	4b10      	ldr	r3, [pc, #64]	; (9c94 <db_hash_gen.constprop.0+0xa0>)
    9c52:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    9c56:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    9c58:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    9c5a:	7810      	ldrb	r0, [r2, #0]
    9c5c:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    9c60:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    9c62:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
    9c66:	d1f6      	bne.n	9c56 <db_hash_gen.constprop.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9c68:	f3bf 8f5b 	dmb	ish
    9c6c:	4b0b      	ldr	r3, [pc, #44]	; (9c9c <db_hash_gen.constprop.0+0xa8>)
    9c6e:	e853 2f00 	ldrex	r2, [r3]
    9c72:	f042 0204 	orr.w	r2, r2, #4
    9c76:	e843 2100 	strex	r1, r2, [r3]
    9c7a:	2900      	cmp	r1, #0
    9c7c:	d1f7      	bne.n	9c6e <db_hash_gen.constprop.0+0x7a>
    9c7e:	f3bf 8f5b 	dmb	ish
    9c82:	e7ce      	b.n	9c22 <db_hash_gen.constprop.0+0x2e>
    9c84:	00020084 	.word	0x00020084
    9c88:	0001ff94 	.word	0x0001ff94
    9c8c:	00022dab 	.word	0x00022dab
    9c90:	0001e993 	.word	0x0001e993
    9c94:	20000b30 	.word	0x20000b30
    9c98:	00022dc4 	.word	0x00022dc4
    9c9c:	20000be8 	.word	0x20000be8

00009ca0 <gatt_indicate>:
{
    9ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ca4:	4615      	mov	r5, r2
    9ca6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9ca8:	2214      	movs	r2, #20
    9caa:	6869      	ldr	r1, [r5, #4]
{
    9cac:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    9cae:	f015 f863 	bl	1ed78 <bt_gatt_check_perm>
    9cb2:	b170      	cbz	r0, 9cd2 <gatt_indicate+0x32>
    9cb4:	4b28      	ldr	r3, [pc, #160]	; (9d58 <gatt_indicate+0xb8>)
    9cb6:	4929      	ldr	r1, [pc, #164]	; (9d5c <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
    9cb8:	4829      	ldr	r0, [pc, #164]	; (9d60 <gatt_indicate+0xc0>)
    9cba:	1ac9      	subs	r1, r1, r3
    9cbc:	08c9      	lsrs	r1, r1, #3
    9cbe:	0189      	lsls	r1, r1, #6
    9cc0:	f041 0102 	orr.w	r1, r1, #2
    9cc4:	f012 ff29 	bl	1cb1a <log_0>
		return -EPERM;
    9cc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    9ccc:	4628      	mov	r0, r5
    9cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9cd2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9cd6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    9cd8:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9cda:	f7ff fc33 	bl	9544 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    9cde:	3602      	adds	r6, #2
	if (!req) {
    9ce0:	4604      	mov	r4, r0
    9ce2:	b910      	cbnz	r0, 9cea <gatt_indicate+0x4a>
		return -ENOMEM;
    9ce4:	f06f 050b 	mvn.w	r5, #11
    9ce8:	e7f0      	b.n	9ccc <gatt_indicate+0x2c>
	req->func = func;
    9cea:	4b1e      	ldr	r3, [pc, #120]	; (9d64 <gatt_indicate+0xc4>)
    9cec:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    9cee:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    9cf0:	4632      	mov	r2, r6
    9cf2:	211d      	movs	r1, #29
    9cf4:	4640      	mov	r0, r8
    9cf6:	f7ff f9df 	bl	90b8 <bt_att_create_pdu>
	if (!buf) {
    9cfa:	4606      	mov	r6, r0
    9cfc:	b968      	cbnz	r0, 9d1a <gatt_indicate+0x7a>
    9cfe:	4b16      	ldr	r3, [pc, #88]	; (9d58 <gatt_indicate+0xb8>)
    9d00:	4916      	ldr	r1, [pc, #88]	; (9d5c <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
    9d02:	4819      	ldr	r0, [pc, #100]	; (9d68 <gatt_indicate+0xc8>)
    9d04:	1ac9      	subs	r1, r1, r3
    9d06:	08c9      	lsrs	r1, r1, #3
    9d08:	0189      	lsls	r1, r1, #6
    9d0a:	f041 0102 	orr.w	r1, r1, #2
    9d0e:	f012 ff04 	bl	1cb1a <log_0>
		bt_att_req_free(req);
    9d12:	4620      	mov	r0, r4
    9d14:	f7ff fc2c 	bl	9570 <bt_att_req_free>
    9d18:	e7e4      	b.n	9ce4 <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
    9d1a:	f100 0a08 	add.w	sl, r0, #8
    9d1e:	2102      	movs	r1, #2
    9d20:	4650      	mov	r0, sl
    9d22:	f015 f90c 	bl	1ef3e <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9d26:	4607      	mov	r7, r0
    9d28:	8aa9      	ldrh	r1, [r5, #20]
    9d2a:	f827 9b02 	strh.w	r9, [r7], #2
    9d2e:	4650      	mov	r0, sl
    9d30:	f015 f905 	bl	1ef3e <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9d34:	8aaa      	ldrh	r2, [r5, #20]
    9d36:	6929      	ldr	r1, [r5, #16]
    9d38:	4638      	mov	r0, r7
    9d3a:	f013 fd65 	bl	1d808 <memcpy>
	req->buf = buf;
    9d3e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    9d40:	4621      	mov	r1, r4
    9d42:	4640      	mov	r0, r8
    9d44:	f014 fdef 	bl	1e926 <bt_att_req_send>
	if (err) {
    9d48:	4605      	mov	r5, r0
    9d4a:	2800      	cmp	r0, #0
    9d4c:	d0be      	beq.n	9ccc <gatt_indicate+0x2c>
		bt_att_req_free(req);
    9d4e:	4620      	mov	r0, r4
    9d50:	f7ff fc0e 	bl	9570 <bt_att_req_free>
    9d54:	e7ba      	b.n	9ccc <gatt_indicate+0x2c>
    9d56:	bf00      	nop
    9d58:	0001ff94 	.word	0x0001ff94
    9d5c:	00020084 	.word	0x00020084
    9d60:	00022ddd 	.word	0x00022ddd
    9d64:	0001e965 	.word	0x0001e965
    9d68:	00022df3 	.word	0x00022df3

00009d6c <bt_gatt_indicate>:
{
    9d6c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9d6e:	4b39      	ldr	r3, [pc, #228]	; (9e54 <bt_gatt_indicate+0xe8>)
    9d70:	f3bf 8f5b 	dmb	ish
    9d74:	681b      	ldr	r3, [r3, #0]
    9d76:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9d7a:	079a      	lsls	r2, r3, #30
{
    9d7c:	b08b      	sub	sp, #44	; 0x2c
    9d7e:	4604      	mov	r4, r0
    9d80:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9d82:	d561      	bpl.n	9e48 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    9d84:	6848      	ldr	r0, [r1, #4]
    9d86:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9d88:	b114      	cbz	r4, 9d90 <bt_gatt_indicate+0x24>
    9d8a:	7aa3      	ldrb	r3, [r4, #10]
    9d8c:	2b07      	cmp	r3, #7
    9d8e:	d15e      	bne.n	9e4e <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9d90:	f7ff fea6 	bl	9ae0 <bt_gatt_attr_get_handle>
    9d94:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    9d98:	b918      	cbnz	r0, 9da2 <bt_gatt_indicate+0x36>
		return -ENOENT;
    9d9a:	f06f 0001 	mvn.w	r0, #1
}
    9d9e:	b00b      	add	sp, #44	; 0x2c
    9da0:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    9da2:	682a      	ldr	r2, [r5, #0]
    9da4:	b9ba      	cbnz	r2, 9dd6 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9da6:	9b05      	ldr	r3, [sp, #20]
    9da8:	6818      	ldr	r0, [r3, #0]
    9daa:	2300      	movs	r3, #0
    9dac:	f88d 3010 	strb.w	r3, [sp, #16]
    9db0:	a904      	add	r1, sp, #16
    9db2:	f642 0303 	movw	r3, #10243	; 0x2803
    9db6:	f8ad 3012 	strh.w	r3, [sp, #18]
    9dba:	f013 fddd 	bl	1d978 <bt_uuid_cmp>
    9dbe:	b1d0      	cbz	r0, 9df6 <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    9dc0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9dc4:	b324      	cbz	r4, 9e10 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    9dc6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    9dc8:	4601      	mov	r1, r0
		params->_ref = 1;
    9dca:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    9dcc:	462a      	mov	r2, r5
    9dce:	4620      	mov	r0, r4
    9dd0:	f7ff ff66 	bl	9ca0 <gatt_indicate>
    9dd4:	e7e3      	b.n	9d9e <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9dd6:	a905      	add	r1, sp, #20
    9dd8:	9102      	str	r1, [sp, #8]
    9dda:	491f      	ldr	r1, [pc, #124]	; (9e58 <bt_gatt_indicate+0xec>)
    9ddc:	9101      	str	r1, [sp, #4]
    9dde:	2101      	movs	r1, #1
	found->attr = NULL;
    9de0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9de2:	9100      	str	r1, [sp, #0]
    9de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9de8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9dea:	f7ff fea9 	bl	9b40 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9dee:	9b05      	ldr	r3, [sp, #20]
    9df0:	2b00      	cmp	r3, #0
    9df2:	d1d8      	bne.n	9da6 <bt_gatt_indicate+0x3a>
    9df4:	e7d1      	b.n	9d9a <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9df6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9df8:	68c3      	ldr	r3, [r0, #12]
    9dfa:	799b      	ldrb	r3, [r3, #6]
    9dfc:	069b      	lsls	r3, r3, #26
    9dfe:	d402      	bmi.n	9e06 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    9e00:	f06f 0015 	mvn.w	r0, #21
    9e04:	e7cb      	b.n	9d9e <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9e06:	f014 ff5c 	bl	1ecc2 <bt_gatt_attr_value_handle>
    9e0a:	f8ad 0018 	strh.w	r0, [sp, #24]
    9e0e:	e7d7      	b.n	9dc0 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    9e10:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9e14:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9e16:	2302      	movs	r3, #2
    9e18:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9e1c:	f642 1302 	movw	r3, #10498	; 0x2902
    9e20:	f8ad 3012 	strh.w	r3, [sp, #18]
    9e24:	ab05      	add	r3, sp, #20
    9e26:	9302      	str	r3, [sp, #8]
    9e28:	4b0c      	ldr	r3, [pc, #48]	; (9e5c <bt_gatt_indicate+0xf0>)
    9e2a:	9301      	str	r3, [sp, #4]
    9e2c:	2301      	movs	r3, #1
    9e2e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    9e30:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9e32:	4623      	mov	r3, r4
    9e34:	aa04      	add	r2, sp, #16
    9e36:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    9e3a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9e3c:	f88d 4010 	strb.w	r4, [sp, #16]
    9e40:	f7ff fe7e 	bl	9b40 <bt_gatt_foreach_attr_type>
	return data.err;
    9e44:	9807      	ldr	r0, [sp, #28]
    9e46:	e7aa      	b.n	9d9e <bt_gatt_indicate+0x32>
		return -EAGAIN;
    9e48:	f06f 000a 	mvn.w	r0, #10
    9e4c:	e7a7      	b.n	9d9e <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    9e4e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9e52:	e7a4      	b.n	9d9e <bt_gatt_indicate+0x32>
    9e54:	20000098 	.word	0x20000098
    9e58:	0001e98b 	.word	0x0001e98b
    9e5c:	00009f71 	.word	0x00009f71

00009e60 <sc_process>:
{
    9e60:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9e62:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    9e66:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9e6a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    9e6e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    9e72:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9e74:	f1a0 0120 	sub.w	r1, r0, #32
    9e78:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9e7c:	f3bf 8f5b 	dmb	ish
    9e80:	e854 2f00 	ldrex	r2, [r4]
    9e84:	f022 0201 	bic.w	r2, r2, #1
    9e88:	e844 2000 	strex	r0, r2, [r4]
    9e8c:	2800      	cmp	r0, #0
    9e8e:	d1f7      	bne.n	9e80 <sc_process+0x20>
    9e90:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9e94:	4a0c      	ldr	r2, [pc, #48]	; (9ec8 <sc_process+0x68>)
    9e96:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    9e9a:	4a0c      	ldr	r2, [pc, #48]	; (9ecc <sc_process+0x6c>)
    9e9c:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    9ea0:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    9ea2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9ea4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    9ea8:	2204      	movs	r2, #4
	sc->start = 0U;
    9eaa:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    9eae:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    9eb2:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9eb6:	f7ff ff59 	bl	9d6c <bt_gatt_indicate>
    9eba:	b918      	cbnz	r0, 9ec4 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    9ebc:	2101      	movs	r1, #1
    9ebe:	4620      	mov	r0, r4
    9ec0:	f014 fddd 	bl	1ea7e <atomic_set_bit>
}
    9ec4:	b002      	add	sp, #8
    9ec6:	bd10      	pop	{r4, pc}
    9ec8:	000204a8 	.word	0x000204a8
    9ecc:	000099e5 	.word	0x000099e5

00009ed0 <gatt_notify>:
{
    9ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ed4:	4614      	mov	r4, r2
    9ed6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9ed8:	2214      	movs	r2, #20
    9eda:	6861      	ldr	r1, [r4, #4]
{
    9edc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    9ede:	f014 ff4b 	bl	1ed78 <bt_gatt_check_perm>
    9ee2:	b168      	cbz	r0, 9f00 <gatt_notify+0x30>
    9ee4:	4b1e      	ldr	r3, [pc, #120]	; (9f60 <gatt_notify+0x90>)
    9ee6:	491f      	ldr	r1, [pc, #124]	; (9f64 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
    9ee8:	481f      	ldr	r0, [pc, #124]	; (9f68 <gatt_notify+0x98>)
    9eea:	1ac9      	subs	r1, r1, r3
    9eec:	08c9      	lsrs	r1, r1, #3
    9eee:	0189      	lsls	r1, r1, #6
    9ef0:	f041 0102 	orr.w	r1, r1, #2
    9ef4:	f012 fe11 	bl	1cb1a <log_0>
		return -EPERM;
    9ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
    9f00:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9f02:	211b      	movs	r1, #27
    9f04:	3202      	adds	r2, #2
    9f06:	4638      	mov	r0, r7
    9f08:	f7ff f8d6 	bl	90b8 <bt_att_create_pdu>
	if (!buf) {
    9f0c:	4605      	mov	r5, r0
    9f0e:	b960      	cbnz	r0, 9f2a <gatt_notify+0x5a>
    9f10:	4b13      	ldr	r3, [pc, #76]	; (9f60 <gatt_notify+0x90>)
    9f12:	4914      	ldr	r1, [pc, #80]	; (9f64 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
    9f14:	4815      	ldr	r0, [pc, #84]	; (9f6c <gatt_notify+0x9c>)
    9f16:	1ac9      	subs	r1, r1, r3
    9f18:	08c9      	lsrs	r1, r1, #3
    9f1a:	0189      	lsls	r1, r1, #6
    9f1c:	f041 0102 	orr.w	r1, r1, #2
    9f20:	f012 fdfb 	bl	1cb1a <log_0>
		return -ENOMEM;
    9f24:	f06f 000b 	mvn.w	r0, #11
    9f28:	e7e8      	b.n	9efc <gatt_notify+0x2c>
    9f2a:	f100 0908 	add.w	r9, r0, #8
    9f2e:	2102      	movs	r1, #2
    9f30:	4648      	mov	r0, r9
    9f32:	f015 f804 	bl	1ef3e <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9f36:	4606      	mov	r6, r0
    9f38:	89a1      	ldrh	r1, [r4, #12]
    9f3a:	f826 8b02 	strh.w	r8, [r6], #2
    9f3e:	4648      	mov	r0, r9
    9f40:	f014 fffd 	bl	1ef3e <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    9f44:	89a2      	ldrh	r2, [r4, #12]
    9f46:	68a1      	ldr	r1, [r4, #8]
    9f48:	4630      	mov	r0, r6
    9f4a:	f013 fc5d 	bl	1d808 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    9f4e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9f52:	4629      	mov	r1, r5
    9f54:	4638      	mov	r0, r7
}
    9f56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    9f5a:	f014 bc99 	b.w	1e890 <bt_att_send>
    9f5e:	bf00      	nop
    9f60:	0001ff94 	.word	0x0001ff94
    9f64:	00020084 	.word	0x00020084
    9f68:	00022ddd 	.word	0x00022ddd
    9f6c:	00022e1a 	.word	0x00022e1a

00009f70 <notify_cb>:
{
    9f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9f72:	4b37      	ldr	r3, [pc, #220]	; (a050 <notify_cb+0xe0>)
{
    9f74:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9f76:	6882      	ldr	r2, [r0, #8]
    9f78:	429a      	cmp	r2, r3
{
    9f7a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9f7c:	d12e      	bne.n	9fdc <notify_cb+0x6c>
	ccc = attr->user_data;
    9f7e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9f80:	4b34      	ldr	r3, [pc, #208]	; (a054 <notify_cb+0xe4>)
    9f82:	429f      	cmp	r7, r3
    9f84:	d11a      	bne.n	9fbc <notify_cb+0x4c>
    9f86:	4d34      	ldr	r5, [pc, #208]	; (a058 <notify_cb+0xe8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9f88:	2300      	movs	r3, #0
    9f8a:	2207      	movs	r2, #7
    9f8c:	4669      	mov	r1, sp
    9f8e:	1c68      	adds	r0, r5, #1
    9f90:	9300      	str	r3, [sp, #0]
    9f92:	f8cd 3003 	str.w	r3, [sp, #3]
    9f96:	f013 fc26 	bl	1d7e6 <memcmp>
    9f9a:	b178      	cbz	r0, 9fbc <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9f9c:	4629      	mov	r1, r5
    9f9e:	2207      	movs	r2, #7
    9fa0:	f811 0b01 	ldrb.w	r0, [r1], #1
    9fa4:	f7fe f8c2 	bl	812c <bt_conn_lookup_state_le>
			if (!conn) {
    9fa8:	b9e0      	cbnz	r0, 9fe4 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    9faa:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    9fac:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    9fae:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9fb0:	f811 0b01 	ldrb.w	r0, [r1], #1
    9fb4:	8853      	ldrh	r3, [r2, #2]
    9fb6:	8812      	ldrh	r2, [r2, #0]
    9fb8:	f7ff fc8e 	bl	98d8 <sc_save>
		if (cfg->value != data->type) {
    9fbc:	893a      	ldrh	r2, [r7, #8]
    9fbe:	89a3      	ldrh	r3, [r4, #12]
    9fc0:	429a      	cmp	r2, r3
    9fc2:	d10b      	bne.n	9fdc <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9fc4:	4639      	mov	r1, r7
    9fc6:	f811 0b01 	ldrb.w	r0, [r1], #1
    9fca:	f7fe f86b 	bl	80a4 <bt_conn_lookup_addr_le>
		if (!conn) {
    9fce:	4605      	mov	r5, r0
    9fd0:	b120      	cbz	r0, 9fdc <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    9fd2:	7a83      	ldrb	r3, [r0, #10]
    9fd4:	2b07      	cmp	r3, #7
    9fd6:	d008      	beq.n	9fea <notify_cb+0x7a>
			bt_conn_unref(conn);
    9fd8:	f014 f817 	bl	1e00a <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9fdc:	2701      	movs	r7, #1
}
    9fde:	4638      	mov	r0, r7
    9fe0:	b003      	add	sp, #12
    9fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    9fe4:	f014 f811 	bl	1e00a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9fe8:	e7e8      	b.n	9fbc <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9fea:	697b      	ldr	r3, [r7, #20]
    9fec:	b123      	cbz	r3, 9ff8 <notify_cb+0x88>
    9fee:	4631      	mov	r1, r6
    9ff0:	4798      	blx	r3
    9ff2:	b908      	cbnz	r0, 9ff8 <notify_cb+0x88>
			bt_conn_unref(conn);
    9ff4:	4628      	mov	r0, r5
    9ff6:	e7ef      	b.n	9fd8 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    9ff8:	2214      	movs	r2, #20
    9ffa:	4631      	mov	r1, r6
    9ffc:	4628      	mov	r0, r5
    9ffe:	f014 febb 	bl	1ed78 <bt_gatt_check_perm>
    a002:	4607      	mov	r7, r0
    a004:	b150      	cbz	r0, a01c <notify_cb+0xac>
    a006:	4b15      	ldr	r3, [pc, #84]	; (a05c <notify_cb+0xec>)
    a008:	4915      	ldr	r1, [pc, #84]	; (a060 <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
    a00a:	4816      	ldr	r0, [pc, #88]	; (a064 <notify_cb+0xf4>)
    a00c:	1ac9      	subs	r1, r1, r3
    a00e:	08c9      	lsrs	r1, r1, #3
    a010:	0189      	lsls	r1, r1, #6
    a012:	f041 0102 	orr.w	r1, r1, #2
    a016:	f012 fd80 	bl	1cb1a <log_0>
			continue;
    a01a:	e7df      	b.n	9fdc <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a01c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    a01e:	88a1      	ldrh	r1, [r4, #4]
    a020:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    a022:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    a024:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    a026:	d10f      	bne.n	a048 <notify_cb+0xd8>
			err = gatt_indicate(conn, data->handle,
    a028:	f7ff fe3a 	bl	9ca0 <gatt_indicate>
			if (err == 0) {
    a02c:	4606      	mov	r6, r0
    a02e:	b918      	cbnz	r0, a038 <notify_cb+0xc8>
				data->ind_params->_ref++;
    a030:	6922      	ldr	r2, [r4, #16]
    a032:	7d93      	ldrb	r3, [r2, #22]
    a034:	3301      	adds	r3, #1
    a036:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    a038:	4628      	mov	r0, r5
    a03a:	f013 ffe6 	bl	1e00a <bt_conn_unref>
		if (err < 0) {
    a03e:	2e00      	cmp	r6, #0
    a040:	dbcd      	blt.n	9fde <notify_cb+0x6e>
		data->err = 0;
    a042:	2300      	movs	r3, #0
    a044:	60a3      	str	r3, [r4, #8]
    a046:	e7c9      	b.n	9fdc <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    a048:	f7ff ff42 	bl	9ed0 <gatt_notify>
    a04c:	4606      	mov	r6, r0
    a04e:	e7f3      	b.n	a038 <notify_cb+0xc8>
    a050:	000097ed 	.word	0x000097ed
    a054:	20000208 	.word	0x20000208
    a058:	20002818 	.word	0x20002818
    a05c:	0001ff94 	.word	0x0001ff94
    a060:	00020084 	.word	0x00020084
    a064:	00022ddd 	.word	0x00022ddd

0000a068 <update_ccc>:
{
    a068:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a06a:	4b33      	ldr	r3, [pc, #204]	; (a138 <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
    a06c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    a06e:	6882      	ldr	r2, [r0, #8]
    a070:	429a      	cmp	r2, r3
{
    a072:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a074:	d11b      	bne.n	a0ae <update_ccc+0x46>
	ccc = attr->user_data;
    a076:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    a078:	8933      	ldrh	r3, [r6, #8]
    a07a:	b1c3      	cbz	r3, a0ae <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a07c:	4632      	mov	r2, r6
    a07e:	4628      	mov	r0, r5
    a080:	f812 1b01 	ldrb.w	r1, [r2], #1
    a084:	f013 ff86 	bl	1df94 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a088:	b188      	cbz	r0, a0ae <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a08a:	222a      	movs	r2, #42	; 0x2a
    a08c:	4621      	mov	r1, r4
    a08e:	4628      	mov	r0, r5
    a090:	f014 fe72 	bl	1ed78 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a094:	2803      	cmp	r0, #3
    a096:	d10d      	bne.n	a0b4 <update_ccc+0x4c>
    a098:	4a28      	ldr	r2, [pc, #160]	; (a13c <update_ccc+0xd4>)
    a09a:	4b29      	ldr	r3, [pc, #164]	; (a140 <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
    a09c:	4829      	ldr	r0, [pc, #164]	; (a144 <update_ccc+0xdc>)
    a09e:	1ad2      	subs	r2, r2, r3
    a0a0:	08d2      	lsrs	r2, r2, #3
    a0a2:	0192      	lsls	r2, r2, #6
    a0a4:	f042 0202 	orr.w	r2, r2, #2
    a0a8:	4621      	mov	r1, r4
    a0aa:	f012 fd43 	bl	1cb34 <log_1>
}
    a0ae:	2001      	movs	r0, #1
    a0b0:	b002      	add	sp, #8
    a0b2:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    a0b4:	4631      	mov	r1, r6
    a0b6:	4620      	mov	r0, r4
    a0b8:	f014 fc4a 	bl	1e950 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a0bc:	4b22      	ldr	r3, [pc, #136]	; (a148 <update_ccc+0xe0>)
    a0be:	429e      	cmp	r6, r3
    a0c0:	d1f5      	bne.n	a0ae <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a0c2:	7a28      	ldrb	r0, [r5, #8]
    a0c4:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a0c8:	f7ff fbf6 	bl	98b8 <find_sc_cfg>
	if (!cfg) {
    a0cc:	4604      	mov	r4, r0
    a0ce:	2800      	cmp	r0, #0
    a0d0:	d0ed      	beq.n	a0ae <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    a0d2:	8902      	ldrh	r2, [r0, #8]
    a0d4:	8943      	ldrh	r3, [r0, #10]
    a0d6:	ea53 0102 	orrs.w	r1, r3, r2
    a0da:	d0e8      	beq.n	a0ae <update_ccc+0x46>
	index = bt_conn_index(conn);
    a0dc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a0de:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a0e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    a0e6:	f7fe f99b 	bl	8420 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a0ea:	4918      	ldr	r1, [pc, #96]	; (a14c <update_ccc+0xe4>)
    a0ec:	4a18      	ldr	r2, [pc, #96]	; (a150 <update_ccc+0xe8>)
    a0ee:	2318      	movs	r3, #24
    a0f0:	fb03 1300 	mla	r3, r3, r0, r1
    a0f4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a0f6:	4a17      	ldr	r2, [pc, #92]	; (a154 <update_ccc+0xec>)
    a0f8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a0fa:	aa01      	add	r2, sp, #4
    a0fc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    a0fe:	2204      	movs	r2, #4
    a100:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a102:	b203      	sxth	r3, r0
    a104:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a10c:	4628      	mov	r0, r5
    a10e:	f7ff fe2d 	bl	9d6c <bt_gatt_indicate>
    a112:	b148      	cbz	r0, a128 <update_ccc+0xc0>
    a114:	4909      	ldr	r1, [pc, #36]	; (a13c <update_ccc+0xd4>)
    a116:	4b0a      	ldr	r3, [pc, #40]	; (a140 <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
    a118:	480f      	ldr	r0, [pc, #60]	; (a158 <update_ccc+0xf0>)
    a11a:	1ac9      	subs	r1, r1, r3
    a11c:	08c9      	lsrs	r1, r1, #3
    a11e:	0189      	lsls	r1, r1, #6
    a120:	f041 0101 	orr.w	r1, r1, #1
    a124:	f012 fcf9 	bl	1cb1a <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    a128:	2204      	movs	r2, #4
    a12a:	2100      	movs	r1, #0
    a12c:	f104 0008 	add.w	r0, r4, #8
    a130:	f013 fb95 	bl	1d85e <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    a134:	e7bb      	b.n	a0ae <update_ccc+0x46>
    a136:	bf00      	nop
    a138:	000097ed 	.word	0x000097ed
    a13c:	00020084 	.word	0x00020084
    a140:	0001ff94 	.word	0x0001ff94
    a144:	00022e43 	.word	0x00022e43
    a148:	20000208 	.word	0x20000208
    a14c:	20001330 	.word	0x20001330
    a150:	000204a8 	.word	0x000204a8
    a154:	0001ea9b 	.word	0x0001ea9b
    a158:	00022e57 	.word	0x00022e57

0000a15c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    a15c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a15e:	4a06      	ldr	r2, [pc, #24]	; (a178 <bt_gatt_connected+0x1c>)
	data.conn = conn;
    a160:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a162:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    a164:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a166:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    a16a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a16e:	f014 fdf6 	bl	1ed5e <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    a172:	b003      	add	sp, #12
    a174:	f85d fb04 	ldr.w	pc, [sp], #4
    a178:	0000a069 	.word	0x0000a069

0000a17c <db_hash_read>:
{
    a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a17e:	4915      	ldr	r1, [pc, #84]	; (a1d4 <db_hash_read+0x58>)
{
    a180:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    a184:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a186:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    a18a:	461f      	mov	r7, r3
    a18c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a18e:	f015 fab5 	bl	1f6fc <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a192:	f3bf 8f5b 	dmb	ish
    a196:	4b10      	ldr	r3, [pc, #64]	; (a1d8 <db_hash_read+0x5c>)
    a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a19a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    a19e:	075b      	lsls	r3, r3, #29
    a1a0:	d401      	bmi.n	a1a6 <db_hash_read+0x2a>
		db_hash_gen(true);
    a1a2:	f7ff fd27 	bl	9bf4 <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
    a1a6:	2101      	movs	r1, #1
    a1a8:	4620      	mov	r0, r4
    a1aa:	f014 fe08 	bl	1edbe <bt_gatt_change_aware>
	if (offset > value_len) {
    a1ae:	2e10      	cmp	r6, #16
    a1b0:	d80c      	bhi.n	a1cc <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    a1b2:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    a1b6:	4909      	ldr	r1, [pc, #36]	; (a1dc <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    a1b8:	42bc      	cmp	r4, r7
    a1ba:	bfa8      	it	ge
    a1bc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    a1be:	4622      	mov	r2, r4
    a1c0:	4431      	add	r1, r6
    a1c2:	4628      	mov	r0, r5
    a1c4:	f013 fb20 	bl	1d808 <memcpy>
}
    a1c8:	4620      	mov	r0, r4
    a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a1cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    a1d0:	e7fa      	b.n	a1c8 <db_hash_read+0x4c>
    a1d2:	bf00      	nop
    a1d4:	20000b70 	.word	0x20000b70
    a1d8:	20000b98 	.word	0x20000b98
    a1dc:	20000b30 	.word	0x20000b30

0000a1e0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a1e0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a1e2:	4603      	mov	r3, r0
    a1e4:	4a14      	ldr	r2, [pc, #80]	; (a238 <bt_gatt_disconnected+0x58>)
{
    a1e6:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a1e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a1ec:	2001      	movs	r0, #1
    a1ee:	f014 fdb6 	bl	1ed5e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    a1f2:	4628      	mov	r0, r5
    a1f4:	f7ff fa86 	bl	9704 <find_cf_cfg>
	if (!cfg) {
    a1f8:	4604      	mov	r4, r0
    a1fa:	b1e0      	cbz	r0, a236 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a1fc:	f105 0688 	add.w	r6, r5, #136	; 0x88
    a200:	7a28      	ldrb	r0, [r5, #8]
    a202:	4631      	mov	r1, r6
    a204:	f013 fcfe 	bl	1dc04 <bt_addr_le_is_bonded>
    a208:	b920      	cbnz	r0, a214 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    a20a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    a20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    a210:	f014 bc18 	b.w	1ea44 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a214:	1c60      	adds	r0, r4, #1
    a216:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a218:	340c      	adds	r4, #12
    a21a:	f014 fc10 	bl	1ea3e <bt_addr_le_copy>
    a21e:	f3bf 8f5b 	dmb	ish
    a222:	e854 3f00 	ldrex	r3, [r4]
    a226:	f023 0302 	bic.w	r3, r3, #2
    a22a:	e844 3200 	strex	r2, r3, [r4]
    a22e:	2a00      	cmp	r2, #0
    a230:	d1f7      	bne.n	a222 <bt_gatt_disconnected+0x42>
    a232:	f3bf 8f5b 	dmb	ish
}
    a236:	bd70      	pop	{r4, r5, r6, pc}
    a238:	00009949 	.word	0x00009949

0000a23c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    a23c:	4a0b      	ldr	r2, [pc, #44]	; (a26c <bt_smp_accept+0x30>)
{
    a23e:	b508      	push	{r3, lr}
    a240:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    a242:	6810      	ldr	r0, [r2, #0]
    a244:	b918      	cbnz	r0, a24e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    a246:	4b0a      	ldr	r3, [pc, #40]	; (a270 <bt_smp_accept+0x34>)
    a248:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    a24a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    a24c:	bd08      	pop	{r3, pc}
    a24e:	4909      	ldr	r1, [pc, #36]	; (a274 <bt_smp_accept+0x38>)
    a250:	4a09      	ldr	r2, [pc, #36]	; (a278 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    a252:	480a      	ldr	r0, [pc, #40]	; (a27c <bt_smp_accept+0x40>)
    a254:	1a52      	subs	r2, r2, r1
    a256:	08d2      	lsrs	r2, r2, #3
    a258:	0192      	lsls	r2, r2, #6
    a25a:	f042 0201 	orr.w	r2, r2, #1
    a25e:	4619      	mov	r1, r3
    a260:	f012 fc68 	bl	1cb34 <log_1>
	return -ENOMEM;
    a264:	f06f 000b 	mvn.w	r0, #11
    a268:	e7f0      	b.n	a24c <bt_smp_accept+0x10>
    a26a:	bf00      	nop
    a26c:	20000bf0 	.word	0x20000bf0
    a270:	000205ac 	.word	0x000205ac
    a274:	0001ff94 	.word	0x0001ff94
    a278:	000200b4 	.word	0x000200b4
    a27c:	00022e83 	.word	0x00022e83

0000a280 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    a280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a284:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a286:	1dc2      	adds	r2, r0, #7
    a288:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a28c:	1e75      	subs	r5, r6, #1
{
    a28e:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a290:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    a292:	6018      	str	r0, [r3, #0]
{
    a294:	b082      	sub	sp, #8
    a296:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a298:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a29a:	2100      	movs	r1, #0
    a29c:	2204      	movs	r2, #4
    a29e:	fb07 0005 	mla	r0, r7, r5, r0
    a2a2:	f013 fadc 	bl	1d85e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    a2a6:	b1bd      	cbz	r5, a2d8 <mem_init+0x58>
    a2a8:	3e02      	subs	r6, #2
    a2aa:	b2b6      	uxth	r6, r6
    a2ac:	fb06 7307 	mla	r3, r6, r7, r7
    a2b0:	fb06 f807 	mul.w	r8, r6, r7
    a2b4:	441c      	add	r4, r3
    a2b6:	eba8 0803 	sub.w	r8, r8, r3
    a2ba:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a2bc:	2204      	movs	r2, #4
    a2be:	eb04 0008 	add.w	r0, r4, r8
    a2c2:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    a2c6:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a2c8:	f013 fa9e 	bl	1d808 <memcpy>
	while (mem_count--) {
    a2cc:	42b5      	cmp	r5, r6
    a2ce:	eba4 0407 	sub.w	r4, r4, r7
    a2d2:	f105 0501 	add.w	r5, r5, #1
    a2d6:	d1f1      	bne.n	a2bc <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    a2d8:	b002      	add	sp, #8
    a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2de:	bf00      	nop

0000a2e0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a2e0:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    a2e2:	6805      	ldr	r5, [r0, #0]
{
    a2e4:	b082      	sub	sp, #8
	if (*mem_head) {
    a2e6:	b195      	cbz	r5, a30e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a2e8:	1deb      	adds	r3, r5, #7
    a2ea:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a2ee:	2204      	movs	r2, #4
    a2f0:	4604      	mov	r4, r0
    a2f2:	4629      	mov	r1, r5
    a2f4:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a2f8:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    a2fa:	f013 fa85 	bl	1d808 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a2fe:	9b01      	ldr	r3, [sp, #4]
    a300:	b123      	cbz	r3, a30c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a302:	1dda      	adds	r2, r3, #7
    a304:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    a308:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a30a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a30c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    a30e:	4628      	mov	r0, r5
    a310:	b002      	add	sp, #8
    a312:	bd70      	pop	{r4, r5, r6, pc}

0000a314 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a314:	680b      	ldr	r3, [r1, #0]
{
    a316:	b570      	push	{r4, r5, r6, lr}
    a318:	460c      	mov	r4, r1
    a31a:	4605      	mov	r5, r0
	if (*mem_head) {
    a31c:	b183      	cbz	r3, a340 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a31e:	3307      	adds	r3, #7
    a320:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    a324:	881e      	ldrh	r6, [r3, #0]
    a326:	3601      	adds	r6, #1
    a328:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    a32a:	2204      	movs	r2, #4
    a32c:	4621      	mov	r1, r4
    a32e:	4628      	mov	r0, r5
    a330:	f013 fa6a 	bl	1d808 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    a334:	1deb      	adds	r3, r5, #7
    a336:	f023 0303 	bic.w	r3, r3, #3
    a33a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    a33c:	6025      	str	r5, [r4, #0]
}
    a33e:	bd70      	pop	{r4, r5, r6, pc}
    a340:	2601      	movs	r6, #1
    a342:	e7f2      	b.n	a32a <mem_release+0x16>

0000a344 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    a344:	fb02 0001 	mla	r0, r2, r1, r0
    a348:	4770      	bx	lr
    a34a:	bf00      	nop

0000a34c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    a34c:	1a40      	subs	r0, r0, r1
    a34e:	b280      	uxth	r0, r0
}
    a350:	fbb0 f0f2 	udiv	r0, r0, r2
    a354:	4770      	bx	lr
    a356:	bf00      	nop

0000a358 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    a358:	1e53      	subs	r3, r2, #1
	src += len;
    a35a:	4411      	add	r1, r2
	while (len--) {
    a35c:	b29b      	uxth	r3, r3
    a35e:	b142      	cbz	r2, a372 <mem_rcopy+0x1a>
    a360:	43db      	mvns	r3, r3
    a362:	3801      	subs	r0, #1
    a364:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    a366:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a36a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    a36e:	4291      	cmp	r1, r2
    a370:	d1f9      	bne.n	a366 <mem_rcopy+0xe>
	}
}
    a372:	4770      	bx	lr

0000a374 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    a374:	4401      	add	r1, r0
    a376:	e002      	b.n	a37e <mem_nz+0xa>
		if (*src++) {
    a378:	f810 3b01 	ldrb.w	r3, [r0], #1
    a37c:	b91b      	cbnz	r3, a386 <mem_nz+0x12>
	while (len--) {
    a37e:	4288      	cmp	r0, r1
    a380:	d1fa      	bne.n	a378 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    a382:	2000      	movs	r0, #0
    a384:	4770      	bx	lr
			return 1;
    a386:	2001      	movs	r0, #1
}
    a388:	4770      	bx	lr
    a38a:	bf00      	nop

0000a38c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    a38c:	6010      	str	r0, [r2, #0]
    a38e:	6008      	str	r0, [r1, #0]

	return link;
}
    a390:	4770      	bx	lr
    a392:	bf00      	nop

0000a394 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    a394:	680a      	ldr	r2, [r1, #0]
{
    a396:	4603      	mov	r3, r0
	if (*head != *tail) {
    a398:	6800      	ldr	r0, [r0, #0]
    a39a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    a39c:	bf05      	ittet	eq
    a39e:	2200      	moveq	r2, #0
    a3a0:	600a      	streq	r2, [r1, #0]
		return NULL;
    a3a2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    a3a4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    a3a6:	4770      	bx	lr

0000a3a8 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    a3a8:	f8d2 c000 	ldr.w	ip, [r2]
    a3ac:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    a3b0:	f8d2 c000 	ldr.w	ip, [r2]
    a3b4:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    a3b8:	6010      	str	r0, [r2, #0]

	return link;
}
    a3ba:	4770      	bx	lr

0000a3bc <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    a3bc:	4288      	cmp	r0, r1
    a3be:	d003      	beq.n	a3c8 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    a3c0:	b11a      	cbz	r2, a3ca <memq_peek+0xe>
		*mem = head->mem;
    a3c2:	6843      	ldr	r3, [r0, #4]
    a3c4:	6013      	str	r3, [r2, #0]
    a3c6:	4770      	bx	lr
		return NULL;
    a3c8:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    a3ca:	4770      	bx	lr

0000a3cc <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    a3cc:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    a3ce:	4283      	cmp	r3, r0
    a3d0:	d009      	beq.n	a3e6 <memq_dequeue+0x1a>
	if (mem) {
    a3d2:	b12a      	cbz	r2, a3e0 <memq_dequeue+0x14>
		*mem = head->mem;
    a3d4:	6858      	ldr	r0, [r3, #4]
    a3d6:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    a3d8:	681a      	ldr	r2, [r3, #0]
    a3da:	600a      	str	r2, [r1, #0]

	return old_head;
}
    a3dc:	4618      	mov	r0, r3
    a3de:	4770      	bx	lr
	if (old_head == NULL) {
    a3e0:	2b00      	cmp	r3, #0
    a3e2:	d1f9      	bne.n	a3d8 <memq_dequeue+0xc>
    a3e4:	e7fa      	b.n	a3dc <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    a3e6:	2300      	movs	r3, #0
    a3e8:	e7f8      	b.n	a3dc <memq_dequeue+0x10>
    a3ea:	bf00      	nop

0000a3ec <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3f0:	f8df 8030 	ldr.w	r8, [pc, #48]	; a424 <mayfly_init+0x38>
    a3f4:	4e0c      	ldr	r6, [pc, #48]	; (a428 <mayfly_init+0x3c>)
    a3f6:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    a3f8:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    a3fc:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    a3fe:	1d22      	adds	r2, r4, #4
    a400:	4621      	mov	r1, r4
    a402:	4628      	mov	r0, r5
		while (caller_id--) {
    a404:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    a406:	f7ff ffc1 	bl	a38c <memq_init>
		while (caller_id--) {
    a40a:	42b4      	cmp	r4, r6
    a40c:	f1a5 0508 	sub.w	r5, r5, #8
    a410:	d1f5      	bne.n	a3fe <mayfly_init+0x12>
	while (callee_id--) {
    a412:	3f04      	subs	r7, #4
    a414:	1d3b      	adds	r3, r7, #4
    a416:	f1a8 0820 	sub.w	r8, r8, #32
    a41a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    a41e:	d1eb      	bne.n	a3f8 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    a420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a424:	200013c4 	.word	0x200013c4
    a428:	20001454 	.word	0x20001454

0000a42c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    a42c:	b410      	push	{r4}
    a42e:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    a430:	4c15      	ldr	r4, [pc, #84]	; (a488 <mayfly_enable+0x5c>)
{
    a432:	468c      	mov	ip, r1
	if (enable) {
    a434:	b192      	cbz	r2, a45c <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    a436:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    a43a:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    a43e:	0100      	lsls	r0, r0, #4
    a440:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a444:	4421      	add	r1, r4
    a446:	7a48      	ldrb	r0, [r1, #9]
    a448:	7a0c      	ldrb	r4, [r1, #8]
    a44a:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    a44c:	bf04      	itt	eq
    a44e:	3001      	addeq	r0, #1
    a450:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    a452:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    a454:	4661      	mov	r1, ip
    a456:	4618      	mov	r0, r3
    a458:	f00f b8f6 	b.w	19648 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    a45c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    a460:	0112      	lsls	r2, r2, #4
    a462:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a46a:	4423      	add	r3, r4
    a46c:	7a9c      	ldrb	r4, [r3, #10]
    a46e:	7ada      	ldrb	r2, [r3, #11]
    a470:	42a2      	cmp	r2, r4
    a472:	d001      	beq.n	a478 <mayfly_enable+0x4c>
}
    a474:	bc10      	pop	{r4}
    a476:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    a478:	3201      	adds	r2, #1
    a47a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    a47c:	4b03      	ldr	r3, [pc, #12]	; (a48c <mayfly_enable+0x60>)
    a47e:	2201      	movs	r2, #1
    a480:	545a      	strb	r2, [r3, r1]
}
    a482:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    a484:	f00f b936 	b.w	196f4 <mayfly_pend>
    a488:	200013d0 	.word	0x200013d0
    a48c:	200013cc 	.word	0x200013cc

0000a490 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    a490:	b570      	push	{r4, r5, r6, lr}
    a492:	4606      	mov	r6, r0
    a494:	461c      	mov	r4, r3
    a496:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a498:	b322      	cbz	r2, a4e4 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a49a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    a49c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a49e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    a4a0:	f012 0203 	ands.w	r2, r2, #3
    a4a4:	d005      	beq.n	a4b2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    a4a6:	2a01      	cmp	r2, #1
    a4a8:	d040      	beq.n	a52c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    a4aa:	3301      	adds	r3, #1
    a4ac:	b2db      	uxtb	r3, r3
    a4ae:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    a4b0:	e00f      	b.n	a4d2 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    a4b2:	3301      	adds	r3, #1
    a4b4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a4b6:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    a4b8:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a4ba:	2304      	movs	r3, #4
    a4bc:	fb11 3105 	smlabb	r1, r1, r5, r3
    a4c0:	4a1b      	ldr	r2, [pc, #108]	; (a530 <mayfly_enqueue+0xa0>)
    a4c2:	6860      	ldr	r0, [r4, #4]
    a4c4:	230c      	movs	r3, #12
    a4c6:	fb13 1306 	smlabb	r3, r3, r6, r1
    a4ca:	441a      	add	r2, r3
    a4cc:	4621      	mov	r1, r4
    a4ce:	f7ff ff6b 	bl	a3a8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    a4d2:	4b18      	ldr	r3, [pc, #96]	; (a534 <mayfly_enqueue+0xa4>)
    a4d4:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    a4d6:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    a4d8:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    a4da:	4629      	mov	r1, r5
    a4dc:	f00f f90a 	bl	196f4 <mayfly_pend>

	return 0;
    a4e0:	2000      	movs	r0, #0
}
    a4e2:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a4e4:	f00f f8f0 	bl	196c8 <mayfly_prio_is_equal>
    a4e8:	2800      	cmp	r0, #0
    a4ea:	d0d6      	beq.n	a49a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    a4ec:	4629      	mov	r1, r5
    a4ee:	4630      	mov	r0, r6
    a4f0:	f00f f8ca 	bl	19688 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d0d0      	beq.n	a49a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    a4f8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    a4fc:	0112      	lsls	r2, r2, #4
    a4fe:	490c      	ldr	r1, [pc, #48]	; (a530 <mayfly_enqueue+0xa0>)
    a500:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a508:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    a50a:	7a9a      	ldrb	r2, [r3, #10]
    a50c:	7adb      	ldrb	r3, [r3, #11]
    a50e:	429a      	cmp	r2, r3
    a510:	d1c3      	bne.n	a49a <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
    a512:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    a514:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a516:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    a518:	0792      	lsls	r2, r2, #30
    a51a:	d002      	beq.n	a522 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    a51c:	3302      	adds	r3, #2
    a51e:	b2db      	uxtb	r3, r3
    a520:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    a522:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    a526:	4798      	blx	r3
		return 0;
    a528:	2000      	movs	r0, #0
}
    a52a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    a52c:	4610      	mov	r0, r2
}
    a52e:	bd70      	pop	{r4, r5, r6, pc}
    a530:	200013d0 	.word	0x200013d0
    a534:	200013cc 	.word	0x200013cc

0000a538 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    a538:	4a4f      	ldr	r2, [pc, #316]	; (a678 <mayfly_run+0x140>)
    a53a:	5c13      	ldrb	r3, [r2, r0]
    a53c:	2b00      	cmp	r3, #0
    a53e:	f000 8099 	beq.w	a674 <mayfly_run+0x13c>
{
    a542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    a546:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a548:	4f4c      	ldr	r7, [pc, #304]	; (a67c <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
    a54a:	5413      	strb	r3, [r2, r0]
{
    a54c:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    a54e:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a550:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    a554:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a558:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    a55c:	9303      	str	r3, [sp, #12]
    a55e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a562:	f10b 0804 	add.w	r8, fp, #4
    a566:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    a56a:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    a56e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    a570:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a574:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    a576:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    a578:	f7ff ff20 	bl	a3bc <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    a57c:	f107 0624 	add.w	r6, r7, #36	; 0x24
    a580:	4683      	mov	fp, r0
    a582:	b398      	cbz	r0, a5ec <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    a584:	9c05      	ldr	r4, [sp, #20]
    a586:	7863      	ldrb	r3, [r4, #1]
    a588:	7825      	ldrb	r5, [r4, #0]
    a58a:	1aed      	subs	r5, r5, r3
    a58c:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    a590:	2d01      	cmp	r5, #1
    a592:	d106      	bne.n	a5a2 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    a594:	3b01      	subs	r3, #1
    a596:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    a598:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    a59c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    a59e:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    a5a0:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    a5a2:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    a5a4:	1ac3      	subs	r3, r0, r3
    a5a6:	f003 0303 	and.w	r3, r3, #3
    a5aa:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    a5ac:	f04f 0200 	mov.w	r2, #0
    a5b0:	4631      	mov	r1, r6
	req = m->_req;
    a5b2:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    a5b6:	d00f      	beq.n	a5d8 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
    a5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a5ba:	f7ff ff07 	bl	a3cc <memq_dequeue>
		ack = m->_ack;
    a5be:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a5c2:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    a5c4:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    a5c8:	eba3 030c 	sub.w	r3, r3, ip
    a5cc:	f003 0303 	and.w	r3, r3, #3
    a5d0:	2b01      	cmp	r3, #1
		m->_ack = req;
    a5d2:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a5d6:	d045      	beq.n	a664 <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    a5d8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a5dc:	aa05      	add	r2, sp, #20
    a5de:	f7ff feed 	bl	a3bc <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    a5e2:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    a5e4:	4683      	mov	fp, r0
			if (state == 1U) {
    a5e6:	d02b      	beq.n	a640 <mayfly_run+0x108>
		while (link) {
    a5e8:	2800      	cmp	r0, #0
    a5ea:	d1cb      	bne.n	a584 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    a5ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    a5f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    a5f4:	429a      	cmp	r2, r3
    a5f6:	d003      	beq.n	a600 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    a5f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    a5fc:	2301      	movs	r3, #1
    a5fe:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    a600:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    a604:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    a608:	429a      	cmp	r2, r3
    a60a:	d003      	beq.n	a614 <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    a60c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    a610:	2301      	movs	r3, #1
    a612:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    a614:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a618:	fa5f f989 	uxtb.w	r9, r9
    a61c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a620:	f1a7 070c 	sub.w	r7, r7, #12
    a624:	d1a3      	bne.n	a56e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    a626:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    a62a:	b1c3      	cbz	r3, a65e <mayfly_run+0x126>
    a62c:	9b03      	ldr	r3, [sp, #12]
    a62e:	b9b3      	cbnz	r3, a65e <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    a630:	461a      	mov	r2, r3
    a632:	4651      	mov	r1, sl
    a634:	4650      	mov	r0, sl
	}
}
    a636:	b007      	add	sp, #28
    a638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    a63c:	f00f b804 	b.w	19648 <mayfly_enable_cb>
				if (caller_id || link) {
    a640:	f1b9 0f00 	cmp.w	r9, #0
    a644:	d101      	bne.n	a64a <mayfly_run+0x112>
    a646:	2800      	cmp	r0, #0
    a648:	d0d0      	beq.n	a5ec <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
    a64a:	f8dd a008 	ldr.w	sl, [sp, #8]
    a64e:	4a0a      	ldr	r2, [pc, #40]	; (a678 <mayfly_run+0x140>)
    a650:	2301      	movs	r3, #1
    a652:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    a656:	4651      	mov	r1, sl
    a658:	4650      	mov	r0, sl
    a65a:	f00f f84b 	bl	196f4 <mayfly_pend>
}
    a65e:	b007      	add	sp, #28
    a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a664:	4642      	mov	r2, r8
    a666:	4621      	mov	r1, r4
    a668:	4658      	mov	r0, fp
			m->_ack = ack;
    a66a:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a66e:	f7ff fe9b 	bl	a3a8 <memq_enqueue>
    a672:	e7b1      	b.n	a5d8 <mayfly_run+0xa0>
    a674:	4770      	bx	lr
    a676:	bf00      	nop
    a678:	200013cc 	.word	0x200013cc
    a67c:	200013d0 	.word	0x200013d0

0000a680 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    a680:	1e4b      	subs	r3, r1, #1
    a682:	b2db      	uxtb	r3, r3
    a684:	b189      	cbz	r1, a6aa <util_ones_count_get+0x2a>
    a686:	1e41      	subs	r1, r0, #1
    a688:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    a68c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    a68e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    a692:	b13b      	cbz	r3, a6a4 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    a694:	b25b      	sxtb	r3, r3
    a696:	1e5a      	subs	r2, r3, #1
    a698:	4013      	ands	r3, r2
			one_count++;
    a69a:	3001      	adds	r0, #1
		while (bite) {
    a69c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    a6a0:	b2c0      	uxtb	r0, r0
		while (bite) {
    a6a2:	d1f7      	bne.n	a694 <util_ones_count_get+0x14>
	while (octets_len--) {
    a6a4:	4561      	cmp	r1, ip
    a6a6:	d1f2      	bne.n	a68e <util_ones_count_get+0xe>
    a6a8:	4770      	bx	lr
	uint8_t one_count = 0U;
    a6aa:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    a6ac:	4770      	bx	lr
    a6ae:	bf00      	nop

0000a6b0 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    a6b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a6b4:	4d4b      	ldr	r5, [pc, #300]	; (a7e4 <util_aa_le32+0x134>)
{
    a6b6:	b083      	sub	sp, #12
    a6b8:	4607      	mov	r7, r0
    a6ba:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
    a6bc:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    a6be:	2104      	movs	r1, #4
    a6c0:	4638      	mov	r0, r7
    a6c2:	f00c f81f 	bl	16704 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    a6c6:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
    a6c8:	231e      	movs	r3, #30
    a6ca:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
    a6ce:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
    a6d2:	f04f 0901 	mov.w	r9, #1
    a6d6:	e00c      	b.n	a6f2 <util_aa_le32+0x42>
			transitions++;
    a6d8:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a6dc:	2b1b      	cmp	r3, #27
			transitions++;
    a6de:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a6e0:	d96c      	bls.n	a7bc <util_aa_le32+0x10c>
				consecutive_cnt = 1U;
    a6e2:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
    a6e6:	2919      	cmp	r1, #25
    a6e8:	d053      	beq.n	a792 <util_aa_le32+0xe2>
    a6ea:	468e      	mov	lr, r1
    a6ec:	4694      	mov	ip, r2
	while (bit_idx--) {
    a6ee:	3b01      	subs	r3, #1
    a6f0:	d31f      	bcc.n	a732 <util_aa_le32+0x82>
		bit = (aa >> bit_idx) & 0x01;
    a6f2:	fa20 f203 	lsr.w	r2, r0, r3
    a6f6:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    a6fa:	4594      	cmp	ip, r2
    a6fc:	d1ec      	bne.n	a6d8 <util_aa_le32+0x28>
			consecutive_cnt++;
    a6fe:	f109 0801 	add.w	r8, r9, #1
    a702:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
    a706:	f1b8 0f06 	cmp.w	r8, #6
    a70a:	d90e      	bls.n	a72a <util_aa_le32+0x7a>
    a70c:	4671      	mov	r1, lr
			if (consecutive_bit) {
    a70e:	2a00      	cmp	r2, #0
    a710:	d039      	beq.n	a786 <util_aa_le32+0xd6>
				aa &= ~BIT(bit_idx);
    a712:	fa04 f203 	lsl.w	r2, r4, r3
    a716:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
    a71a:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
    a71e:	4571      	cmp	r1, lr
    a720:	d1e5      	bne.n	a6ee <util_aa_le32+0x3e>
				transitions++;
    a722:	3101      	adds	r1, #1
    a724:	b2c9      	uxtb	r1, r1
    a726:	4662      	mov	r2, ip
    a728:	e7db      	b.n	a6e2 <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
    a72a:	d14d      	bne.n	a7c8 <util_aa_le32+0x118>
		     (((bit_idx < 29) && (transitions < 1)) ||
    a72c:	46c1      	mov	r9, r8
	while (bit_idx--) {
    a72e:	3b01      	subs	r3, #1
    a730:	d2df      	bcs.n	a6f2 <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a732:	ea80 0305 	eor.w	r3, r0, r5
    a736:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    a738:	f10d 0c04 	add.w	ip, sp, #4
    a73c:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    a740:	2200      	movs	r2, #0
		bite = *octets;
    a742:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    a746:	b13b      	cbz	r3, a758 <util_aa_le32+0xa8>
			bite &= (bite - 1);
    a748:	b25b      	sxtb	r3, r3
    a74a:	1e59      	subs	r1, r3, #1
    a74c:	400b      	ands	r3, r1
			one_count++;
    a74e:	3201      	adds	r2, #1
		while (bite) {
    a750:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    a754:	b2d2      	uxtb	r2, r2
		while (bite) {
    a756:	d1f7      	bne.n	a748 <util_aa_le32+0x98>
	while (octets_len--) {
    a758:	45e6      	cmp	lr, ip
    a75a:	d1f2      	bne.n	a742 <util_aa_le32+0x92>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    a75c:	2a01      	cmp	r2, #1
    a75e:	d909      	bls.n	a774 <util_aa_le32+0xc4>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a760:	b283      	uxth	r3, r0
    a762:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    a766:	ea4f 4210 	mov.w	r2, r0, lsr #16
    a76a:	d11c      	bne.n	a7a6 <util_aa_le32+0xf6>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    a76c:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a76e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    a772:	d118      	bne.n	a7a6 <util_aa_le32+0xf6>
	if (!retry) {
    a774:	3e01      	subs	r6, #1
    a776:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a77a:	d1a0      	bne.n	a6be <util_aa_le32+0xe>
		return -EFAULT;
    a77c:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    a780:	b003      	add	sp, #12
    a782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
    a786:	fa04 f203 	lsl.w	r2, r4, r3
    a78a:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
    a78c:	f04f 0c01 	mov.w	ip, #1
    a790:	e7c5      	b.n	a71e <util_aa_le32+0x6e>
				aa &= ~(BIT(bit_idx + 1) - 1);
    a792:	3301      	adds	r3, #1
    a794:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
    a798:	b112      	cbz	r2, a7a0 <util_aa_le32+0xf0>
				aa &= ~(BIT(bit_idx + 1) - 1);
    a79a:	425b      	negs	r3, r3
    a79c:	4018      	ands	r0, r3
    a79e:	e7c8      	b.n	a732 <util_aa_le32+0x82>
				aa |= (BIT(bit_idx + 1) - 1);
    a7a0:	3b01      	subs	r3, #1
    a7a2:	4318      	orrs	r0, r3
    a7a4:	e7c5      	b.n	a732 <util_aa_le32+0x82>
	dst[1] = val >> 8;
    a7a6:	f3c0 2107 	ubfx	r1, r0, #8, #8
    a7aa:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    a7ac:	7038      	strb	r0, [r7, #0]
	return 0;
    a7ae:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    a7b0:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
    a7b2:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
    a7b4:	70fb      	strb	r3, [r7, #3]
}
    a7b6:	b003      	add	sp, #12
    a7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
    a7bc:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    a7c0:	2901      	cmp	r1, #1
    a7c2:	d9a4      	bls.n	a70e <util_aa_le32+0x5e>
    a7c4:	46c1      	mov	r9, r8
    a7c6:	e78e      	b.n	a6e6 <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
    a7c8:	2b1c      	cmp	r3, #28
    a7ca:	d904      	bls.n	a7d6 <util_aa_le32+0x126>
		     (((bit_idx < 29) && (transitions < 1)) ||
    a7cc:	2b1b      	cmp	r3, #27
    a7ce:	d907      	bls.n	a7e0 <util_aa_le32+0x130>
    a7d0:	4694      	mov	ip, r2
    a7d2:	46c1      	mov	r9, r8
    a7d4:	e7ab      	b.n	a72e <util_aa_le32+0x7e>
    a7d6:	f1be 0f00 	cmp.w	lr, #0
    a7da:	d1f7      	bne.n	a7cc <util_aa_le32+0x11c>
    a7dc:	4671      	mov	r1, lr
    a7de:	e796      	b.n	a70e <util_aa_le32+0x5e>
    a7e0:	4671      	mov	r1, lr
    a7e2:	e7ed      	b.n	a7c0 <util_aa_le32+0x110>
    a7e4:	8e89bed6 	.word	0x8e89bed6

0000a7e8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a7e8:	eba2 0c01 	sub.w	ip, r2, r1
    a7ec:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    a7f0:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    a7f2:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a7f4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a7f6:	d10a      	bne.n	a80e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a7f8:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    a7fc:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    a7fe:	42a3      	cmp	r3, r4
    a800:	d914      	bls.n	a82c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    a802:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    a804:	2100      	movs	r1, #0
}
    a806:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    a808:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a80a:	6141      	str	r1, [r0, #20]
}
    a80c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a80e:	1a89      	subs	r1, r1, r2
    a810:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    a814:	428b      	cmp	r3, r1
    a816:	d806      	bhi.n	a826 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    a818:	4421      	add	r1, r4
    a81a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    a81c:	2300      	movs	r3, #0
}
    a81e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    a820:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a822:	6141      	str	r1, [r0, #20]
}
    a824:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    a826:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    a828:	42a3      	cmp	r3, r4
    a82a:	d8ea      	bhi.n	a802 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    a82c:	1ae1      	subs	r1, r4, r3
    a82e:	e7f5      	b.n	a81c <ticks_to_expire_prep+0x34>

0000a830 <ticker_job_list_insert>:
{
    a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a834:	b087      	sub	sp, #28
    a836:	4603      	mov	r3, r0
	count_user = instance->count_user;
    a838:	7a42      	ldrb	r2, [r0, #9]
{
    a83a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    a83c:	6800      	ldr	r0, [r0, #0]
    a83e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    a840:	6858      	ldr	r0, [r3, #4]
    a842:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    a844:	2a00      	cmp	r2, #0
    a846:	f000 80f6 	beq.w	aa36 <ticker_job_list_insert+0x206>
    a84a:	1e53      	subs	r3, r2, #1
    a84c:	b2db      	uxtb	r3, r3
    a84e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    a852:	460f      	mov	r7, r1
    a854:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    a856:	9b03      	ldr	r3, [sp, #12]
    a858:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    a85a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    a85c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    a85e:	2fff      	cmp	r7, #255	; 0xff
    a860:	d05e      	beq.n	a920 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    a862:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    a866:	9b02      	ldr	r3, [sp, #8]
    a868:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a86c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    a86e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    a872:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    a876:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    a878:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    a87a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    a87e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    a882:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    a886:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    a888:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a88c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    a88e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a892:	d10f      	bne.n	a8b4 <ticker_job_list_insert+0x84>
    a894:	e0ca      	b.n	aa2c <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    a896:	1a09      	subs	r1, r1, r0
    a898:	d106      	bne.n	a8a8 <ticker_job_list_insert+0x78>
    a89a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    a89e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    a8a2:	45e2      	cmp	sl, ip
    a8a4:	f200 8086 	bhi.w	a9b4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    a8a8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a8ac:	2bff      	cmp	r3, #255	; 0xff
    a8ae:	4691      	mov	r9, r2
    a8b0:	d072      	beq.n	a998 <ticker_job_list_insert+0x168>
    a8b2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    a8b4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    a8b8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    a8bc:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    a8be:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a8c2:	4288      	cmp	r0, r1
    a8c4:	d9e7      	bls.n	a896 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    a8c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    a8ca:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    a8ce:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    a8d2:	d166      	bne.n	a9a2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    a8d4:	9b01      	ldr	r3, [sp, #4]
    a8d6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    a8da:	2aff      	cmp	r2, #255	; 0xff
    a8dc:	d008      	beq.n	a8f0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    a8de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a8e2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    a8e6:	f8de 3008 	ldr.w	r3, [lr, #8]
    a8ea:	1a5b      	subs	r3, r3, r1
    a8ec:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    a8f0:	78a3      	ldrb	r3, [r4, #2]
    a8f2:	3301      	adds	r3, #1
    a8f4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    a8f6:	2d00      	cmp	r5, #0
    a8f8:	d0b1      	beq.n	a85e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a8fa:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    a8fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a900:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    a902:	2200      	movs	r2, #0
    a904:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    a906:	b113      	cbz	r3, a90e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a908:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a90a:	4610      	mov	r0, r2
    a90c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a90e:	6863      	ldr	r3, [r4, #4]
    a910:	2b00      	cmp	r3, #0
    a912:	d1a4      	bne.n	a85e <ticker_job_list_insert+0x2e>
					ticker->op_context =
    a914:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    a918:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    a91a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    a91e:	d1a0      	bne.n	a862 <ticker_job_list_insert+0x32>
    a920:	9b03      	ldr	r3, [sp, #12]
    a922:	7898      	ldrb	r0, [r3, #2]
    a924:	42b0      	cmp	r0, r6
    a926:	d02f      	beq.n	a988 <ticker_job_list_insert+0x158>
    a928:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    a92c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
    a934:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a938:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
    a93c:	3601      	adds	r6, #1
    a93e:	b2f6      	uxtb	r6, r6
					first = 0U;
    a940:	42b1      	cmp	r1, r6
    a942:	bf08      	it	eq
    a944:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a946:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
    a948:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a94c:	d11a      	bne.n	a984 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    a94e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    a952:	9902      	ldr	r1, [sp, #8]
    a954:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    a958:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    a95c:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    a960:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    a962:	7862      	ldrb	r2, [r4, #1]
    a964:	1a52      	subs	r2, r2, r1
    a966:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a96a:	d025      	beq.n	a9b8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a96c:	f04f 0200 	mov.w	r2, #0
    a970:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
    a974:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a976:	2001      	movs	r0, #1
	user_op->status = status;
    a978:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    a97a:	b10b      	cbz	r3, a980 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a97c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a97e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    a980:	f89b 0002 	ldrb.w	r0, [fp, #2]
    a984:	42b0      	cmp	r0, r6
    a986:	d1d1      	bne.n	a92c <ticker_job_list_insert+0xfc>
	while (count_user--) {
    a988:	9a03      	ldr	r2, [sp, #12]
    a98a:	9905      	ldr	r1, [sp, #20]
    a98c:	4291      	cmp	r1, r2
    a98e:	f1a2 0308 	sub.w	r3, r2, #8
    a992:	d050      	beq.n	aa36 <ticker_job_list_insert+0x206>
    a994:	9303      	str	r3, [sp, #12]
    a996:	e75e      	b.n	a856 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    a998:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    a99c:	f88b 3000 	strb.w	r3, [fp]
    a9a0:	461a      	mov	r2, r3
		node[previous].next = id;
    a9a2:	fa0f f989 	sxth.w	r9, r9
    a9a6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    a9aa:	ea4f 1909 	mov.w	r9, r9, lsl #4
    a9ae:	f80e 8009 	strb.w	r8, [lr, r9]
    a9b2:	e792      	b.n	a8da <ticker_job_list_insert+0xaa>
    a9b4:	4601      	mov	r1, r0
    a9b6:	e786      	b.n	a8c6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a9b8:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    a9ba:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a9bc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    a9c0:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
    a9c2:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a9c4:	d02a      	beq.n	aa1c <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
    a9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a9ca:	1a9a      	subs	r2, r3, r2
    a9cc:	fab2 f282 	clz	r2, r2
    a9d0:	0952      	lsrs	r2, r2, #5
    a9d2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    a9d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    a9d8:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    a9da:	68ea      	ldr	r2, [r5, #12]
    a9dc:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    a9de:	692a      	ldr	r2, [r5, #16]
    a9e0:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    a9e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    a9e6:	4293      	cmp	r3, r2
    a9e8:	bf88      	it	hi
    a9ea:	2300      	movhi	r3, #0
    a9ec:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    a9ee:	69ab      	ldr	r3, [r5, #24]
    a9f0:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    a9f2:	69eb      	ldr	r3, [r5, #28]
    a9f4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    a9f6:	6a2b      	ldr	r3, [r5, #32]
    a9f8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    a9fa:	68ab      	ldr	r3, [r5, #8]
    a9fc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    a9fe:	2300      	movs	r3, #0
    aa00:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    aa02:	686a      	ldr	r2, [r5, #4]
    aa04:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    aa06:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    aa08:	f7ff feee 	bl	a7e8 <ticks_to_expire_prep>
	ticker->force = 1U;
    aa0c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    aa10:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    aa14:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    aa18:	70e3      	strb	r3, [r4, #3]
}
    aa1a:	e72d      	b.n	a878 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    aa1c:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
    aa1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    aa20:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    aa22:	68ea      	ldr	r2, [r5, #12]
    aa24:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    aa26:	692a      	ldr	r2, [r5, #16]
    aa28:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    aa2a:	e7df      	b.n	a9ec <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
    aa2c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    aa30:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    aa34:	e75c      	b.n	a8f0 <ticker_job_list_insert+0xc0>
}
    aa36:	b007      	add	sp, #28
    aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000aa3c <ticker_worker>:
{
    aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    aa40:	7f82      	ldrb	r2, [r0, #30]
{
    aa42:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    aa44:	2301      	movs	r3, #1
	if (instance->job_guard) {
    aa46:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    aa48:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    aa4a:	2a00      	cmp	r2, #0
    aa4c:	d15b      	bne.n	ab06 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    aa4e:	7f43      	ldrb	r3, [r0, #29]
    aa50:	2bff      	cmp	r3, #255	; 0xff
    aa52:	4681      	mov	r9, r0
    aa54:	d056      	beq.n	ab04 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    aa56:	f00e f8f1 	bl	18c3c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aa5a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    aa5e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    aa62:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aa66:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    aa68:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aa6a:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    aa6e:	f000 813f 	beq.w	acf0 <ticker_worker+0x2b4>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    aa72:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    aa76:	42b3      	cmp	r3, r6
    aa78:	bf94      	ite	ls
    aa7a:	2300      	movls	r3, #0
    aa7c:	2301      	movhi	r3, #1
    aa7e:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    aa80:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    aa84:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    aa88:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    aa8c:	d046      	beq.n	ab1c <ticker_worker+0xe0>
			must_expire_skip = 1U;
    aa8e:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    aa92:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    aa96:	eb07 140b 	add.w	r4, r7, fp, lsl #4
    aa9a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    aa9e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    aaa0:	42b3      	cmp	r3, r6
    aaa2:	d839      	bhi.n	ab18 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    aaa4:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
    aaa8:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
    aaac:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
    aaae:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    aab0:	7863      	ldrb	r3, [r4, #1]
    aab2:	eba3 030a 	sub.w	r3, r3, sl
    aab6:	b2db      	uxtb	r3, r3
    aab8:	2b01      	cmp	r3, #1
    aaba:	d12a      	bne.n	ab12 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    aabc:	69a0      	ldr	r0, [r4, #24]
    aabe:	2800      	cmp	r0, #0
    aac0:	d054      	beq.n	ab6c <ticker_worker+0x130>
    aac2:	9b03      	ldr	r3, [sp, #12]
    aac4:	2b00      	cmp	r3, #0
    aac6:	d04c      	beq.n	ab62 <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
    aac8:	8be3      	ldrh	r3, [r4, #30]
    aaca:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    aacc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
    aace:	b13a      	cbz	r2, aae0 <ticker_worker+0xa4>
    aad0:	6813      	ldr	r3, [r2, #0]
    aad2:	b11b      	cbz	r3, aadc <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
    aad4:	7a13      	ldrb	r3, [r2, #8]
    aad6:	2b00      	cmp	r3, #0
    aad8:	f000 80f0 	beq.w	acbc <ticker_worker+0x280>
				ext_data->reschedule_state =
    aadc:	2300      	movs	r3, #0
    aade:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
    aae0:	9b05      	ldr	r3, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    aae2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    aae6:	3301      	adds	r3, #1
    aae8:	b29b      	uxth	r3, r3
    aaea:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    aaec:	b171      	cbz	r1, ab0c <ticker_worker+0xd0>
    aaee:	8ba1      	ldrh	r1, [r4, #28]
    aaf0:	4299      	cmp	r1, r3
    aaf2:	d20b      	bcs.n	ab0c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    aaf4:	2a00      	cmp	r2, #0
    aaf6:	f000 80fe 	beq.w	acf6 <ticker_worker+0x2ba>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    aafa:	7a13      	ldrb	r3, [r2, #8]
    aafc:	2b01      	cmp	r3, #1
    aafe:	d005      	beq.n	ab0c <ticker_worker+0xd0>
			must_expire_skip = 1U;
    ab00:	2301      	movs	r3, #1
    ab02:	e036      	b.n	ab72 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    ab04:	77c2      	strb	r2, [r0, #31]
}
    ab06:	b00f      	add	sp, #60	; 0x3c
    ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    ab0c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ab10:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    ab12:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ab16:	d1bc      	bne.n	aa92 <ticker_worker+0x56>
    ab18:	f8dd 9010 	ldr.w	r9, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    ab1c:	f899 300b 	ldrb.w	r3, [r9, #11]
    ab20:	f899 200a 	ldrb.w	r2, [r9, #10]
    ab24:	429a      	cmp	r2, r3
    ab26:	d10a      	bne.n	ab3e <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    ab28:	3201      	adds	r2, #1
    ab2a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    ab2c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ab2e:	bf1c      	itt	ne
    ab30:	4613      	movne	r3, r2
    ab32:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    ab34:	9a06      	ldr	r2, [sp, #24]
    ab36:	f889 200b 	strb.w	r2, [r9, #11]
    ab3a:	bf08      	it	eq
    ab3c:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ab3e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ab42:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ab46:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    ab4a:	2200      	movs	r2, #0
    ab4c:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ab50:	464b      	mov	r3, r9
    ab52:	2201      	movs	r2, #1
    ab54:	2104      	movs	r1, #4
    ab56:	2003      	movs	r0, #3
    ab58:	46a4      	mov	ip, r4
}
    ab5a:	b00f      	add	sp, #60	; 0x3c
    ab5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ab60:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    ab62:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    ab66:	9307      	str	r3, [sp, #28]
    ab68:	3380      	adds	r3, #128	; 0x80
    ab6a:	d13c      	bne.n	abe6 <ticker_worker+0x1aa>
		if (ticker->ext_data) {
    ab6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ab6e:	b1d2      	cbz	r2, aba6 <ticker_worker+0x16a>
    ab70:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
    ab72:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    ab74:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
    ab76:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    ab78:	6051      	str	r1, [r2, #4]
		ticker->ack--;
    ab7a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    ab7e:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    ab80:	2d00      	cmp	r5, #0
    ab82:	d0c6      	beq.n	ab12 <ticker_worker+0xd6>
					   ticks_expired -
    ab84:	9a04      	ldr	r2, [sp, #16]
    ab86:	6960      	ldr	r0, [r4, #20]
    ab88:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    ab8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    ab8c:	eba8 0000 	sub.w	r0, r8, r0
    ab90:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    ab92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ab96:	b1ab      	cbz	r3, abc4 <ticker_worker+0x188>
    ab98:	6922      	ldr	r2, [r4, #16]
    ab9a:	78e3      	ldrb	r3, [r4, #3]
    ab9c:	9200      	str	r2, [sp, #0]
    ab9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    aba2:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    aba4:	e7b5      	b.n	ab12 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    aba6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    aba8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    abac:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    abae:	2d00      	cmp	r5, #0
    abb0:	d0af      	beq.n	ab12 <ticker_worker+0xd6>
					   ticks_expired -
    abb2:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    abb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    abb6:	eba8 0003 	sub.w	r0, r8, r3
    abba:	9b04      	ldr	r3, [sp, #16]
    abbc:	695b      	ldr	r3, [r3, #20]
    abbe:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    abc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    abc4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    abc8:	78e3      	ldrb	r3, [r4, #3]
    abca:	8be2      	ldrh	r2, [r4, #30]
    abcc:	f8cd c000 	str.w	ip, [sp]
    abd0:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    abd2:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    abd4:	2b00      	cmp	r3, #0
    abd6:	9b03      	ldr	r3, [sp, #12]
    abd8:	bf18      	it	ne
    abda:	2301      	movne	r3, #1
    abdc:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    abde:	2300      	movs	r3, #0
    abe0:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    abe2:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    abe4:	e795      	b.n	ab12 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    abe6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    abea:	d0bf      	beq.n	ab6c <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    abec:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    abee:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    abf0:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    abf4:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    abf6:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    abf8:	bf28      	it	cs
    abfa:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    abfc:	fb02 c10c 	mla	r1, r2, ip, ip
    ac00:	9108      	str	r1, [sp, #32]
				(lazy_current - ticker->priority);
    ac02:	9907      	ldr	r1, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    ac04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    ac08:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    ac0c:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
    ac0e:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
    ac10:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
    ac12:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    ac14:	2500      	movs	r5, #0
    ac16:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ac1a:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
    ac1c:	b21b      	sxth	r3, r3
    ac1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ac22:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    ac26:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    ac28:	f8d2 8008 	ldr.w	r8, [r2, #8]
    ac2c:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    ac2e:	42a8      	cmp	r0, r5
    ac30:	d33c      	bcc.n	acac <ticker_worker+0x270>
			if (ticker_next->ticks_slot == 0U) {
    ac32:	6991      	ldr	r1, [r2, #24]
    ac34:	2900      	cmp	r1, #0
    ac36:	d036      	beq.n	aca6 <ticker_worker+0x26a>
			int32_t lazy_next = ticker_next->lazy_current;
    ac38:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    ac3a:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ac3c:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    ac40:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    ac44:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    ac46:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    ac48:	bf28      	it	cs
    ac4a:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    ac4e:	f1ba 0f00 	cmp.w	sl, #0
    ac52:	d040      	beq.n	acd6 <ticker_worker+0x29a>
    ac54:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    ac58:	2c00      	cmp	r4, #0
    ac5a:	d038      	beq.n	acce <ticker_worker+0x292>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ac5c:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    ac60:	f8dd a020 	ldr.w	sl, [sp, #32]
    ac64:	45c2      	cmp	sl, r8
    ac66:	bf8c      	ite	hi
    ac68:	f04f 0801 	movhi.w	r8, #1
    ac6c:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    ac70:	bf34      	ite	cc
    ac72:	f04f 0a01 	movcc.w	sl, #1
    ac76:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    ac7a:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    ac7c:	f892 b003 	ldrb.w	fp, [r2, #3]
    ac80:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    ac84:	d30f      	bcc.n	aca6 <ticker_worker+0x26a>
    ac86:	4593      	cmp	fp, r2
    ac88:	d82a      	bhi.n	ace0 <ticker_worker+0x2a4>
			    (next_force ||
    ac8a:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    ac8e:	d027      	beq.n	ace0 <ticker_worker+0x2a4>
			     next_is_critical ||
    ac90:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    ac92:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    ac96:	4594      	cmp	ip, r2
    ac98:	dd02      	ble.n	aca0 <ticker_worker+0x264>
			     (next_has_priority && !current_is_older) ||
    ac9a:	f1b8 0f00 	cmp.w	r8, #0
    ac9e:	d01f      	beq.n	ace0 <ticker_worker+0x2a4>
    aca0:	9a07      	ldr	r2, [sp, #28]
    aca2:	4572      	cmp	r2, lr
    aca4:	d019      	beq.n	acda <ticker_worker+0x29e>
			id_head = ticker_next->next;
    aca6:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    aca8:	2bff      	cmp	r3, #255	; 0xff
    acaa:	d1b7      	bne.n	ac1c <ticker_worker+0x1e0>
    acac:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
    acb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    acb4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    acb8:	464c      	mov	r4, r9
    acba:	e757      	b.n	ab6c <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
    acbc:	8ba3      	ldrh	r3, [r4, #28]
    acbe:	9905      	ldr	r1, [sp, #20]
    acc0:	428b      	cmp	r3, r1
    acc2:	f63f af0b 	bhi.w	aadc <ticker_worker+0xa0>
				ext_data->reschedule_state =
    acc6:	f04f 0301 	mov.w	r3, #1
    acca:	7213      	strb	r3, [r2, #8]
    accc:	e708      	b.n	aae0 <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
    acce:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
    acd2:	46a2      	mov	sl, r4
    acd4:	e7d1      	b.n	ac7a <ticker_worker+0x23e>
					  0U :
    acd6:	46d0      	mov	r8, sl
    acd8:	e7be      	b.n	ac58 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
    acda:	f1ba 0f00 	cmp.w	sl, #0
    acde:	d0e2      	beq.n	aca6 <ticker_worker+0x26a>
    ace0:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
    ace4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    ace8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    acec:	464c      	mov	r4, r9
    acee:	e6ed      	b.n	aacc <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
    acf0:	9b06      	ldr	r3, [sp, #24]
    acf2:	9303      	str	r3, [sp, #12]
    acf4:	e6c4      	b.n	aa80 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    acf6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    acf8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    acfc:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    acfe:	2d00      	cmp	r5, #0
    ad00:	f43f af07 	beq.w	ab12 <ticker_worker+0xd6>
					   ticks_expired -
    ad04:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    ad06:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    ad08:	eba8 0003 	sub.w	r0, r8, r3
    ad0c:	9b04      	ldr	r3, [sp, #16]
    ad0e:	695b      	ldr	r3, [r3, #20]
    ad10:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    ad12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ad16:	e73f      	b.n	ab98 <ticker_worker+0x15c>

0000ad18 <ticker_job>:
{
    ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad1c:	b08f      	sub	sp, #60	; 0x3c
	if (instance->worker_trigger) {
    ad1e:	7fc3      	ldrb	r3, [r0, #31]
{
    ad20:	9000      	str	r0, [sp, #0]
	if (instance->worker_trigger) {
    ad22:	2b00      	cmp	r3, #0
    ad24:	f040 80a8 	bne.w	ae78 <ticker_job+0x160>
	if (instance->job_guard) {
    ad28:	7f82      	ldrb	r2, [r0, #30]
    ad2a:	2a00      	cmp	r2, #0
    ad2c:	f040 80a7 	bne.w	ae7e <ticker_job+0x166>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ad30:	9c00      	ldr	r4, [sp, #0]
    ad32:	7aa3      	ldrb	r3, [r4, #10]
    ad34:	7ae1      	ldrb	r1, [r4, #11]
	instance->job_guard = 1U;
    ad36:	2001      	movs	r0, #1
    ad38:	77a0      	strb	r0, [r4, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ad3a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    ad3c:	6960      	ldr	r0, [r4, #20]
    ad3e:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ad40:	f000 8490 	beq.w	b664 <ticker_job+0x94c>
	uint8_t idx = *ticks_elapsed_index + 1;
    ad44:	3301      	adds	r3, #1
    ad46:	b2db      	uxtb	r3, r3
		ticks_elapsed =
    ad48:	9900      	ldr	r1, [sp, #0]
	if (idx == DOUBLE_BUFFER_SIZE) {
    ad4a:	2b02      	cmp	r3, #2
		idx = 0U;
    ad4c:	bf08      	it	eq
    ad4e:	4613      	moveq	r3, r2
		ticks_elapsed =
    ad50:	eb01 0283 	add.w	r2, r1, r3, lsl #2
	*ticks_elapsed_index = idx;
    ad54:	728b      	strb	r3, [r1, #10]
	ticker_id_old_head = instance->ticker_id_head;
    ad56:	7f4b      	ldrb	r3, [r1, #29]
		ticks_elapsed =
    ad58:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    ad5a:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
    ad5c:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    ad5e:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
    ad60:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ad62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    ad66:	7a4a      	ldrb	r2, [r1, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ad68:	614b      	str	r3, [r1, #20]
	node = &instance->nodes[0];
    ad6a:	680b      	ldr	r3, [r1, #0]
    ad6c:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
    ad6e:	684b      	ldr	r3, [r1, #4]
    ad70:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    ad72:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    ad74:	9209      	str	r2, [sp, #36]	; 0x24
	while (count_user--) {
    ad76:	b2db      	uxtb	r3, r3
    ad78:	2a00      	cmp	r2, #0
    ad7a:	f000 8229 	beq.w	b1d0 <ticker_job+0x4b8>
		flag_elapsed = 1U;
    ad7e:	2201      	movs	r2, #1
    ad80:	920d      	str	r2, [sp, #52]	; 0x34
    ad82:	9a05      	ldr	r2, [sp, #20]
    ad84:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
	pending = 0U;
    ad88:	2300      	movs	r3, #0
    ad8a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    ad8c:	23ff      	movs	r3, #255	; 0xff
    ad8e:	9303      	str	r3, [sp, #12]
    ad90:	46d3      	mov	fp, sl
		user_ops = &user->user_op[0];
    ad92:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
    ad96:	f89b c003 	ldrb.w	ip, [fp, #3]
    ad9a:	f89b 9002 	ldrb.w	r9, [fp, #2]
    ad9e:	45e1      	cmp	r9, ip
    ada0:	d062      	beq.n	ae68 <ticker_job+0x150>
			if (middle == user->count_user_op) {
    ada2:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
    ada6:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
    adaa:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
    adae:	b2db      	uxtb	r3, r3
				middle = 0U;
    adb0:	429a      	cmp	r2, r3
    adb2:	bf08      	it	eq
    adb4:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    adb6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    adba:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
    adbe:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    adc2:	f818 1027 	ldrb.w	r1, [r8, r7, lsl #2]
    adc6:	2904      	cmp	r1, #4
			user_op = &user_ops[user->middle];
    adc8:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    adcc:	d961      	bls.n	ae92 <ticker_job+0x17a>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    adce:	2907      	cmp	r1, #7
    add0:	d871      	bhi.n	aeb6 <ticker_job+0x19e>
			ticker = &node[user_op->id];
    add2:	7872      	ldrb	r2, [r6, #1]
    add4:	9802      	ldr	r0, [sp, #8]
    add6:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    adda:	eb00 1404 	add.w	r4, r0, r4, lsl #4
    adde:	b210      	sxth	r0, r2
			state = (ticker->req - ticker->ack) & 0xff;
    ade0:	f894 e002 	ldrb.w	lr, [r4, #2]
    ade4:	7865      	ldrb	r5, [r4, #1]
			ticker = &node[user_op->id];
    ade6:	9001      	str	r0, [sp, #4]
			state = (ticker->req - ticker->ack) & 0xff;
    ade8:	eba5 050e 	sub.w	r5, r5, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    adec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    adf0:	d061      	beq.n	aeb6 <ticker_job+0x19e>
			    (state == 0U) ||
    adf2:	2905      	cmp	r1, #5
    adf4:	d04f      	beq.n	ae96 <ticker_job+0x17e>
			if (state == 1U) {
    adf6:	2d01      	cmp	r5, #1
    adf8:	f040 8164 	bne.w	b0c4 <ticker_job+0x3ac>
	previous = instance->ticker_id_head;
    adfc:	9800      	ldr	r0, [sp, #0]
    adfe:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    ae00:	f8d0 a000 	ldr.w	sl, [r0]
	while (current != TICKER_NULL) {
    ae04:	2bff      	cmp	r3, #255	; 0xff
    ae06:	d015      	beq.n	ae34 <ticker_job+0x11c>
		ticker_current = &node[current];
    ae08:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		if (current == id) {
    ae0c:	429a      	cmp	r2, r3
		ticker_current = &node[current];
    ae0e:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
		if (current == id) {
    ae12:	f000 81cf 	beq.w	b1b4 <ticker_job+0x49c>
	total = 0U;
    ae16:	2500      	movs	r5, #0
    ae18:	e001      	b.n	ae1e <ticker_job+0x106>
		if (current == id) {
    ae1a:	429a      	cmp	r2, r3
    ae1c:	d05a      	beq.n	aed4 <ticker_job+0x1bc>
		total += ticker_current->ticks_to_expire;
    ae1e:	4699      	mov	r9, r3
		current = ticker_current->next;
    ae20:	7803      	ldrb	r3, [r0, #0]
		total += ticker_current->ticks_to_expire;
    ae22:	f8d0 c008 	ldr.w	ip, [r0, #8]
	while (current != TICKER_NULL) {
    ae26:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    ae28:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    ae2c:	4465      	add	r5, ip
		ticker_current = &node[current];
    ae2e:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
	while (current != TICKER_NULL) {
    ae32:	d1f2      	bne.n	ae1a <ticker_job+0x102>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ae34:	2500      	movs	r5, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    ae36:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ae38:	60a5      	str	r5, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    ae3a:	f000 8130 	beq.w	b09e <ticker_job+0x386>
		if (instance->ticker_id_slot_previous == user_op->id) {
    ae3e:	9b00      	ldr	r3, [sp, #0]
		ticker->req = ticker->ack;
    ae40:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    ae44:	7f1b      	ldrb	r3, [r3, #28]
    ae46:	4293      	cmp	r3, r2
    ae48:	f000 80fd 	beq.w	b046 <ticker_job+0x32e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ae4c:	2000      	movs	r0, #0
    ae4e:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
    ae52:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
    ae54:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
    ae56:	b10b      	cbz	r3, ae5c <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ae58:	6b31      	ldr	r1, [r6, #48]	; 0x30
    ae5a:	4798      	blx	r3
		while (user->middle != user->last) {
    ae5c:	f89b c003 	ldrb.w	ip, [fp, #3]
    ae60:	f89b 9002 	ldrb.w	r9, [fp, #2]
    ae64:	45e1      	cmp	r9, ip
    ae66:	d19c      	bne.n	ada2 <ticker_job+0x8a>
	while (count_user--) {
    ae68:	9a05      	ldr	r2, [sp, #20]
    ae6a:	455a      	cmp	r2, fp
    ae6c:	f1ab 0308 	sub.w	r3, fp, #8
    ae70:	f000 8138 	beq.w	b0e4 <ticker_job+0x3cc>
    ae74:	469b      	mov	fp, r3
    ae76:	e78c      	b.n	ad92 <ticker_job+0x7a>
}
    ae78:	b00f      	add	sp, #60	; 0x3c
    ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    ae7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ae80:	2104      	movs	r1, #4
    ae82:	4603      	mov	r3, r0
    ae84:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ae86:	2004      	movs	r0, #4
    ae88:	46a4      	mov	ip, r4
}
    ae8a:	b00f      	add	sp, #60	; 0x3c
    ae8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ae90:	4760      	bx	ip
    ae92:	4699      	mov	r9, r3
    ae94:	e783      	b.n	ad9e <ticker_job+0x86>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    ae96:	6870      	ldr	r0, [r6, #4]
    ae98:	2800      	cmp	r0, #0
    ae9a:	d1ac      	bne.n	adf6 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    ae9c:	68b0      	ldr	r0, [r6, #8]
    ae9e:	2800      	cmp	r0, #0
    aea0:	d1a9      	bne.n	adf6 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    aea2:	68f0      	ldr	r0, [r6, #12]
    aea4:	2800      	cmp	r0, #0
    aea6:	d1a6      	bne.n	adf6 <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    aea8:	6930      	ldr	r0, [r6, #16]
    aeaa:	2800      	cmp	r0, #0
    aeac:	d1a3      	bne.n	adf6 <ticker_job+0xde>
			     (user_op->params.update.lazy == 0U) &&
    aeae:	6970      	ldr	r0, [r6, #20]
    aeb0:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    aeb4:	d19f      	bne.n	adf6 <ticker_job+0xde>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    aeb6:	2200      	movs	r2, #0
    aeb8:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
    aebc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
    aebe:	2001      	movs	r0, #1
    aec0:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
    aec2:	2a00      	cmp	r2, #0
    aec4:	d0e5      	beq.n	ae92 <ticker_job+0x17a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    aec6:	6b31      	ldr	r1, [r6, #48]	; 0x30
    aec8:	4790      	blx	r2
		while (user->middle != user->last) {
    aeca:	f89b c003 	ldrb.w	ip, [fp, #3]
    aece:	f89b 9002 	ldrb.w	r9, [fp, #2]
    aed2:	e764      	b.n	ad9e <ticker_job+0x86>
	if (previous == current) {
    aed4:	454a      	cmp	r2, r9
    aed6:	f000 80cb 	beq.w	b070 <ticker_job+0x358>
	node[previous].next = ticker_current->next;
    aeda:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    aede:	7803      	ldrb	r3, [r0, #0]
    aee0:	eb0a 1909 	add.w	r9, sl, r9, lsl #4
	timeout = ticker_current->ticks_to_expire;
    aee4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    aee8:	f889 3000 	strb.w	r3, [r9]
	if (ticker_current->next != TICKER_NULL) {
    aeec:	7803      	ldrb	r3, [r0, #0]
    aeee:	2bff      	cmp	r3, #255	; 0xff
    aef0:	d008      	beq.n	af04 <ticker_job+0x1ec>
		node[ticker_current->next].ticks_to_expire += timeout;
    aef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aef6:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    aefa:	f8da 3008 	ldr.w	r3, [sl, #8]
    aefe:	4463      	add	r3, ip
    af00:	f8ca 3008 	str.w	r3, [sl, #8]
	return (total + timeout);
    af04:	4465      	add	r5, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    af06:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    af08:	60a5      	str	r5, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    af0a:	d198      	bne.n	ae3e <ticker_job+0x126>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    af0c:	9b00      	ldr	r3, [sp, #0]
    af0e:	f8d3 9014 	ldr.w	r9, [r3, #20]
	ticks_now = cntr_cnt_get();
    af12:	f00d fe93 	bl	18c3c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    af16:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    af18:	eba0 0209 	sub.w	r2, r0, r9
    af1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    af20:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    af22:	4295      	cmp	r5, r2
	ticks_now = cntr_cnt_get();
    af24:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
    af26:	f240 80c6 	bls.w	b0b6 <ticker_job+0x39e>
	ticker->ticks_to_expire_minus +=
    af2a:	6963      	ldr	r3, [r4, #20]
    af2c:	9301      	str	r3, [sp, #4]
		ticks_to_expire -= ticks_elapsed;
    af2e:	1aaa      	subs	r2, r5, r2
	if ((ticker->ticks_periodic != 0U) &&
    af30:	6865      	ldr	r5, [r4, #4]
    af32:	2d00      	cmp	r5, #0
    af34:	d05c      	beq.n	aff0 <ticker_job+0x2d8>
	    (user_op->params.update.lazy != 0U)) {
    af36:	8ab3      	ldrh	r3, [r6, #20]
    af38:	9309      	str	r3, [sp, #36]	; 0x24
	if ((ticker->ticks_periodic != 0U) &&
    af3a:	2b00      	cmp	r3, #0
    af3c:	d058      	beq.n	aff0 <ticker_job+0x2d8>
		user_op->params.update.lazy--;
    af3e:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    af42:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    af46:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    af48:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
    af4a:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    af4e:	d223      	bcs.n	af98 <ticker_job+0x280>
    af50:	1c69      	adds	r1, r5, #1
    af52:	f8cd 8018 	str.w	r8, [sp, #24]
    af56:	960b      	str	r6, [sp, #44]	; 0x2c
    af58:	468c      	mov	ip, r1
    af5a:	e018      	b.n	af8e <ticker_job+0x276>
	if ((ticker->remainder_current >= BIT(31)) ||
    af5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    af5e:	f8df 825c 	ldr.w	r8, [pc, #604]	; b1bc <ticker_job+0x4a4>
    af62:	4e97      	ldr	r6, [pc, #604]	; (b1c0 <ticker_job+0x4a8>)
    af64:	4488      	add	r8, r1
    af66:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    af68:	bf84      	itt	hi
    af6a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    af6e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    af72:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
    af74:	6a26      	ldr	r6, [r4, #32]
    af76:	bf94      	ite	ls
    af78:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    af7a:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    af7e:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    af80:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    af82:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
    af84:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    af86:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    af88:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
    af8a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    af8c:	d201      	bcs.n	af92 <ticker_job+0x27a>
    af8e:	459e      	cmp	lr, r3
    af90:	d3e4      	bcc.n	af5c <ticker_job+0x244>
    af92:	f8dd 8018 	ldr.w	r8, [sp, #24]
    af96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
    af98:	459e      	cmp	lr, r3
    af9a:	d927      	bls.n	afec <ticker_job+0x2d4>
    af9c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    af9e:	1c68      	adds	r0, r5, #1
    afa0:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
	ticker->remainder_current += ticker->remainder_periodic;
    afa4:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
    afa8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    afac:	9006      	str	r0, [sp, #24]
    afae:	b29b      	uxth	r3, r3
    afb0:	e005      	b.n	afbe <ticker_job+0x2a6>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afb2:	3301      	adds	r3, #1
    afb4:	b29b      	uxth	r3, r3
    afb6:	4628      	mov	r0, r5
    afb8:	4598      	cmp	r8, r3
			ticks_to_expire += ticker->ticks_periodic +
    afba:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afbc:	d011      	beq.n	afe2 <ticker_job+0x2ca>
	if ((ticker->remainder_current < BIT(31)) &&
    afbe:	487f      	ldr	r0, [pc, #508]	; (b1bc <ticker_job+0x4a4>)
    afc0:	4c7f      	ldr	r4, [pc, #508]	; (b1c0 <ticker_job+0x4a8>)
	ticker->remainder_current += ticker->remainder_periodic;
    afc2:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
    afc4:	1808      	adds	r0, r1, r0
    afc6:	42a0      	cmp	r0, r4
    afc8:	d8f3      	bhi.n	afb2 <ticker_job+0x29a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afca:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    afcc:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    afce:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afd2:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    afd4:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afd8:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    afda:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    afde:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    afe0:	d1ed      	bne.n	afbe <ticker_job+0x2a6>
    afe2:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
    afe6:	6261      	str	r1, [r4, #36]	; 0x24
    afe8:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    afec:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    aff0:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
    aff2:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire_minus +=
    aff4:	9d01      	ldr	r5, [sp, #4]
	ticker->ticks_to_expire = ticks_to_expire +
    aff6:	440a      	add	r2, r1
    aff8:	60a2      	str	r2, [r4, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    affa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    affc:	4405      	add	r5, r0
    affe:	6165      	str	r5, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    b000:	b11a      	cbz	r2, b00a <ticker_job+0x2f2>
    b002:	6813      	ldr	r3, [r2, #0]
    b004:	b10b      	cbz	r3, b00a <ticker_job+0x2f2>
			user_op->params.update.ticks_drift_plus -
    b006:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    b008:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b00a:	4652      	mov	r2, sl
    b00c:	4649      	mov	r1, r9
    b00e:	4620      	mov	r0, r4
    b010:	f7ff fbea 	bl	a7e8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b014:	68f2      	ldr	r2, [r6, #12]
    b016:	69a3      	ldr	r3, [r4, #24]
    b018:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b01a:	6932      	ldr	r2, [r6, #16]
    b01c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b01e:	bf8c      	ite	hi
    b020:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    b022:	2300      	movls	r3, #0
    b024:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    b026:	7db3      	ldrb	r3, [r6, #22]
    b028:	b103      	cbz	r3, b02c <ticker_job+0x314>
		ticker->force = user_op->params.update.force;
    b02a:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
    b02c:	7df3      	ldrb	r3, [r6, #23]
    b02e:	b113      	cbz	r3, b036 <ticker_job+0x31e>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    b030:	3b01      	subs	r3, #1
    b032:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    b036:	9b03      	ldr	r3, [sp, #12]
    b038:	7023      	strb	r3, [r4, #0]
		ticker->req++;
    b03a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    b03c:	7872      	ldrb	r2, [r6, #1]
    b03e:	9203      	str	r2, [sp, #12]
		ticker->req++;
    b040:	3301      	adds	r3, #1
    b042:	7063      	strb	r3, [r4, #1]
    b044:	e702      	b.n	ae4c <ticker_job+0x134>
			instance->ticker_id_slot_previous = TICKER_NULL;
    b046:	9a00      	ldr	r2, [sp, #0]
    b048:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    b04a:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    b04c:	7713      	strb	r3, [r2, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    b04e:	d123      	bne.n	b098 <ticker_job+0x380>
				ticks_at_stop =
    b050:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
    b052:	9b00      	ldr	r3, [sp, #0]
    b054:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
    b056:	1ac2      	subs	r2, r0, r3
    b058:	0214      	lsls	r4, r2, #8
    b05a:	d414      	bmi.n	b086 <ticker_job+0x36e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b05c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    b060:	9a04      	ldr	r2, [sp, #16]
    b062:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    b064:	9900      	ldr	r1, [sp, #0]
    b066:	698a      	ldr	r2, [r1, #24]
    b068:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    b06a:	bf88      	it	hi
    b06c:	618b      	strhi	r3, [r1, #24]
    b06e:	e6ed      	b.n	ae4c <ticker_job+0x134>
	node[previous].next = ticker_current->next;
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	eb03 0943 	add.w	r9, r3, r3, lsl #1
    b076:	eb0a 1909 	add.w	r9, sl, r9, lsl #4
		instance->ticker_id_head = ticker_current->next;
    b07a:	f8dd c000 	ldr.w	ip, [sp]
    b07e:	7803      	ldrb	r3, [r0, #0]
    b080:	f88c 301d 	strb.w	r3, [ip, #29]
    b084:	e72e      	b.n	aee4 <ticker_job+0x1cc>
				if (ticks_elapsed > ticks_used) {
    b086:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b088:	1a1b      	subs	r3, r3, r0
    b08a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    b08e:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    b090:	bf34      	ite	cc
    b092:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    b094:	2300      	movcs	r3, #0
    b096:	e7e5      	b.n	b064 <ticker_job+0x34c>
				ticks_at_stop = cntr_cnt_get();
    b098:	f00d fdd0 	bl	18c3c <cntr_cnt_get>
    b09c:	e7d9      	b.n	b052 <ticker_job+0x33a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b09e:	9b00      	ldr	r3, [sp, #0]
    b0a0:	f8d3 9014 	ldr.w	r9, [r3, #20]
	ticks_now = cntr_cnt_get();
    b0a4:	f00d fdca 	bl	18c3c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b0a8:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b0aa:	eba0 0209 	sub.w	r2, r0, r9
    b0ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    b0b2:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b0b4:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b0b6:	6963      	ldr	r3, [r4, #20]
    b0b8:	441a      	add	r2, r3
    b0ba:	1b53      	subs	r3, r2, r5
    b0bc:	9301      	str	r3, [sp, #4]
    b0be:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
    b0c0:	2200      	movs	r2, #0
    b0c2:	e735      	b.n	af30 <ticker_job+0x218>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b0c4:	9b00      	ldr	r3, [sp, #0]
    b0c6:	2104      	movs	r1, #4
    b0c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    b0ca:	2201      	movs	r2, #1
    b0cc:	4608      	mov	r0, r1
    b0ce:	47a0      	blx	r4
	while (count_user--) {
    b0d0:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    b0d2:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
    b0d6:	2301      	movs	r3, #1
	while (count_user--) {
    b0d8:	455a      	cmp	r2, fp
				pending = 1U;
    b0da:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    b0dc:	f1ab 0308 	sub.w	r3, fp, #8
    b0e0:	f47f aec8 	bne.w	ae74 <ticker_job+0x15c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b0e4:	9b00      	ldr	r3, [sp, #0]
		flag_compare_update = 1U;
    b0e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
    b0e8:	7f5b      	ldrb	r3, [r3, #29]
		flag_compare_update = 1U;
    b0ea:	1a9b      	subs	r3, r3, r2
    b0ec:	bf18      	it	ne
    b0ee:	2301      	movne	r3, #1
    b0f0:	9309      	str	r3, [sp, #36]	; 0x24
	if (flag_elapsed) {
    b0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d16f      	bne.n	b1d8 <ticker_job+0x4c0>
		ticker_job_list_insert(instance, insert_head);
    b0f8:	9c00      	ldr	r4, [sp, #0]
    b0fa:	9903      	ldr	r1, [sp, #12]
    b0fc:	4620      	mov	r0, r4
    b0fe:	f7ff fb97 	bl	a830 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b102:	7f63      	ldrb	r3, [r4, #29]
    b104:	9301      	str	r3, [sp, #4]
    b106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b108:	9a01      	ldr	r2, [sp, #4]
    b10a:	4293      	cmp	r3, r2
    b10c:	f000 826d 	beq.w	b5ea <ticker_job+0x8d2>
	if (!pending) {
    b110:	9b08      	ldr	r3, [sp, #32]
    b112:	2b00      	cmp	r3, #0
    b114:	f000 81d8 	beq.w	b4c8 <ticker_job+0x7b0>
	if (instance->ticker_id_head == TICKER_NULL) {
    b118:	9b00      	ldr	r3, [sp, #0]
    b11a:	7f5b      	ldrb	r3, [r3, #29]
    b11c:	9301      	str	r3, [sp, #4]
    b11e:	9b01      	ldr	r3, [sp, #4]
    b120:	2bff      	cmp	r3, #255	; 0xff
    b122:	f000 82c5 	beq.w	b6b0 <ticker_job+0x998>
	if (ticker_id_old_head == TICKER_NULL) {
    b126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b128:	2bff      	cmp	r3, #255	; 0xff
    b12a:	f000 82cb 	beq.w	b6c4 <ticker_job+0x9ac>
	ticks_to_expire = ticker->ticks_to_expire;
    b12e:	f8dd a000 	ldr.w	sl, [sp]
	ticker = &instance->nodes[instance->ticker_id_head];
    b132:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
    b134:	f8da 3000 	ldr.w	r3, [sl]
		LL_ASSERT(i);
    b138:	f8df 9088 	ldr.w	r9, [pc, #136]	; b1c4 <ticker_job+0x4ac>
    b13c:	f8df 8088 	ldr.w	r8, [pc, #136]	; b1c8 <ticker_job+0x4b0>
    b140:	4f22      	ldr	r7, [pc, #136]	; (b1cc <ticker_job+0x4b4>)
	ticker = &instance->nodes[instance->ticker_id_head];
    b142:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    b146:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    b14a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    b14c:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    b14e:	f00d fd75 	bl	18c3c <cntr_cnt_get>
		cc = instance->ticks_current;
    b152:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b156:	1b03      	subs	r3, r0, r4
    b158:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    b15c:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    b15e:	42b3      	cmp	r3, r6
    b160:	bf2c      	ite	cs
    b162:	18e4      	addcs	r4, r4, r3
    b164:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    b166:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    b16a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
    b16e:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    b170:	4620      	mov	r0, r4
    b172:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    b174:	f00d fd62 	bl	18c3c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b178:	eba0 020b 	sub.w	r2, r0, fp
    b17c:	eba4 030b 	sub.w	r3, r4, fp
    b180:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    b184:	3203      	adds	r2, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b186:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    b18a:	429a      	cmp	r2, r3
		i--;
    b18c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    b190:	f240 8232 	bls.w	b5f8 <ticker_job+0x8e0>
		LL_ASSERT(i);
    b194:	2d00      	cmp	r5, #0
    b196:	d1da      	bne.n	b14e <ticker_job+0x436>
    b198:	f640 03f3 	movw	r3, #2291	; 0x8f3
    b19c:	464a      	mov	r2, r9
    b19e:	4641      	mov	r1, r8
    b1a0:	4638      	mov	r0, r7
    b1a2:	f011 f87b 	bl	1c29c <printk>
    b1a6:	4040      	eors	r0, r0
    b1a8:	f380 8811 	msr	BASEPRI, r0
    b1ac:	f04f 0003 	mov.w	r0, #3
    b1b0:	df02      	svc	2
    b1b2:	e7cc      	b.n	b14e <ticker_job+0x436>
		if (current == id) {
    b1b4:	4681      	mov	r9, r0
	total = 0U;
    b1b6:	2500      	movs	r5, #0
    b1b8:	e75f      	b.n	b07a <ticker_job+0x362>
    b1ba:	bf00      	nop
    b1bc:	ff172b5a 	.word	0xff172b5a
    b1c0:	7f172b59 	.word	0x7f172b59
    b1c4:	000205cc 	.word	0x000205cc
    b1c8:	000206d0 	.word	0x000206d0
    b1cc:	0002060c 	.word	0x0002060c
	pending = 0U;
    b1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1d2:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    b1d4:	23ff      	movs	r3, #255	; 0xff
    b1d6:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
    b1d8:	f00d fd30 	bl	18c3c <cntr_cnt_get>
	while (instance->ticker_id_head != TICKER_NULL) {
    b1dc:	9d00      	ldr	r5, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1de:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    b1e0:	7f6e      	ldrb	r6, [r5, #29]
	node = &instance->nodes[0];
    b1e2:	f8d5 8000 	ldr.w	r8, [r5]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1e6:	1ac3      	subs	r3, r0, r3
    b1e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    b1ec:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b1ee:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    b1f0:	d04a      	beq.n	b288 <ticker_job+0x570>
	if ((ticker->remainder_current < BIT(31)) &&
    b1f2:	f8df b264 	ldr.w	fp, [pc, #612]	; b458 <ticker_job+0x740>
    b1f6:	f8df a264 	ldr.w	sl, [pc, #612]	; b45c <ticker_job+0x744>
	while (instance->ticker_id_head != TICKER_NULL) {
    b1fa:	9f04      	ldr	r7, [sp, #16]
	ticks_expired = 0U;
    b1fc:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    b200:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b204:	eb08 1403 	add.w	r4, r8, r3, lsl #4
    b208:	011b      	lsls	r3, r3, #4
    b20a:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
    b20c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b20e:	42bb      	cmp	r3, r7
    b210:	f200 8242 	bhi.w	b698 <ticker_job+0x980>
		ticks_latency -= ticks_to_expire;
    b214:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    b216:	8be1      	ldrh	r1, [r4, #30]
    b218:	9105      	str	r1, [sp, #20]
		ticks_latency -= ticks_to_expire;
    b21a:	1ad2      	subs	r2, r2, r3
    b21c:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b21e:	69aa      	ldr	r2, [r5, #24]
    b220:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    b222:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    b226:	4499      	add	r9, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b228:	bf25      	ittet	cs
    b22a:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    b22e:	772b      	strbcs	r3, [r5, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    b230:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    b232:	2300      	movcs	r3, #0
    b234:	61ab      	str	r3, [r5, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    b236:	78a2      	ldrb	r2, [r4, #2]
    b238:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b23a:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    b23c:	1a9b      	subs	r3, r3, r2
    b23e:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b240:	b111      	cbz	r1, b248 <ticker_job+0x530>
    b242:	2b02      	cmp	r3, #2
    b244:	f000 812d 	beq.w	b4a2 <ticker_job+0x78a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b248:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
    b24a:	2100      	movs	r1, #0
    b24c:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b24e:	9901      	ldr	r1, [sp, #4]
    b250:	f818 1001 	ldrb.w	r1, [r8, r1]
    b254:	7769      	strb	r1, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b256:	f8d4 c004 	ldr.w	ip, [r4, #4]
    b25a:	f1bc 0f00 	cmp.w	ip, #0
    b25e:	f040 80e9 	bne.w	b434 <ticker_job+0x71c>
    b262:	b110      	cbz	r0, b26a <ticker_job+0x552>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    b264:	7a01      	ldrb	r1, [r0, #8]
    b266:	2901      	cmp	r1, #1
    b268:	d04e      	beq.n	b308 <ticker_job+0x5f0>
			if (state && ((state == 1U) || skip_collision) &&
    b26a:	b14b      	cbz	r3, b280 <ticker_job+0x568>
    b26c:	2b01      	cmp	r3, #1
    b26e:	d001      	beq.n	b274 <ticker_job+0x55c>
    b270:	9b05      	ldr	r3, [sp, #20]
    b272:	b12b      	cbz	r3, b280 <ticker_job+0x568>
			    ticker->fp_op_func) {
    b274:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    b276:	b11b      	cbz	r3, b280 <ticker_job+0x568>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    b278:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b27a:	2001      	movs	r0, #1
    b27c:	4798      	blx	r3
			ticker->req = ticker->ack;
    b27e:	78a2      	ldrb	r2, [r4, #2]
    b280:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    b282:	7f6e      	ldrb	r6, [r5, #29]
    b284:	2eff      	cmp	r6, #255	; 0xff
    b286:	d1bb      	bne.n	b200 <ticker_job+0x4e8>
			flag_compare_update = 1U;
    b288:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    b28c:	9c00      	ldr	r4, [sp, #0]
    b28e:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
    b290:	4296      	cmp	r6, r2
    b292:	bf18      	it	ne
    b294:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    b296:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    b298:	9309      	str	r3, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    b29a:	f7ff fac9 	bl	a830 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    b29e:	7f63      	ldrb	r3, [r4, #29]
	nodes = &instance->nodes[0];
    b2a0:	6821      	ldr	r1, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
    b2a2:	9301      	str	r3, [sp, #4]
	uint8_t  rescheduled = 0U;
    b2a4:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    b2a6:	9b01      	ldr	r3, [sp, #4]
    b2a8:	2bff      	cmp	r3, #255	; 0xff
    b2aa:	d00e      	beq.n	b2ca <ticker_job+0x5b2>
    b2ac:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
    b2ae:	b23b      	sxth	r3, r7
    b2b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b2b4:	eb01 1603 	add.w	r6, r1, r3, lsl #4
    b2b8:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    b2ba:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    b2bc:	b110      	cbz	r0, b2c4 <ticker_job+0x5ac>
    b2be:	7a04      	ldrb	r4, [r0, #8]
    b2c0:	2c01      	cmp	r4, #1
    b2c2:	d037      	beq.n	b334 <ticker_job+0x61c>
			ticker_id_head = ticker->next;
    b2c4:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
    b2c6:	2fff      	cmp	r7, #255	; 0xff
    b2c8:	d1f1      	bne.n	b2ae <ticker_job+0x596>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    b2ca:	2a00      	cmp	r2, #0
    b2cc:	f43f af1b 	beq.w	b106 <ticker_job+0x3ee>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b2d0:	9b01      	ldr	r3, [sp, #4]
    b2d2:	990a      	ldr	r1, [sp, #40]	; 0x28
    b2d4:	428b      	cmp	r3, r1
    b2d6:	f47f af1b 	bne.w	b110 <ticker_job+0x3f8>
	if (!pending) {
    b2da:	9b08      	ldr	r3, [sp, #32]
    b2dc:	2b00      	cmp	r3, #0
    b2de:	f47f af1e 	bne.w	b11e <ticker_job+0x406>
	users = &instance->users[0];
    b2e2:	9b00      	ldr	r3, [sp, #0]
    b2e4:	685e      	ldr	r6, [r3, #4]
	count_user = instance->count_user;
    b2e6:	7a5b      	ldrb	r3, [r3, #9]
	while (count_user--) {
    b2e8:	1e5c      	subs	r4, r3, #1
    b2ea:	b2e4      	uxtb	r4, r4
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	f43f af16 	beq.w	b11e <ticker_job+0x406>
			flag_compare_update = 1U;
    b2f2:	9209      	str	r2, [sp, #36]	; 0x24
    b2f4:	e0f2      	b.n	b4dc <ticker_job+0x7c4>
		ticker->ticks_to_expire = 0U;
    b2f6:	9905      	ldr	r1, [sp, #20]
    b2f8:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b2fa:	9901      	ldr	r1, [sp, #4]
    b2fc:	f818 1001 	ldrb.w	r1, [r8, r1]
    b300:	7769      	strb	r1, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b302:	6861      	ldr	r1, [r4, #4]
    b304:	2900      	cmp	r1, #0
    b306:	d0ad      	beq.n	b264 <ticker_job+0x54c>
				ticker->req = ticker->ack;
    b308:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    b30a:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b30c:	9b07      	ldr	r3, [sp, #28]
    b30e:	6969      	ldr	r1, [r5, #20]
    b310:	eb03 0209 	add.w	r2, r3, r9
    b314:	4620      	mov	r0, r4
    b316:	f7ff fa67 	bl	a7e8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    b31a:	9a01      	ldr	r2, [sp, #4]
    b31c:	9b03      	ldr	r3, [sp, #12]
    b31e:	f808 3002 	strb.w	r3, [r8, r2]
			ticker->req++;
    b322:	7863      	ldrb	r3, [r4, #1]
    b324:	9603      	str	r6, [sp, #12]
    b326:	3301      	adds	r3, #1
    b328:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    b32a:	7f6e      	ldrb	r6, [r5, #29]
    b32c:	2eff      	cmp	r6, #255	; 0xff
    b32e:	f47f af67 	bne.w	b200 <ticker_job+0x4e8>
    b332:	e7a9      	b.n	b288 <ticker_job+0x570>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b334:	9b00      	ldr	r3, [sp, #0]
    b336:	7f1b      	ldrb	r3, [r3, #28]
    b338:	2bff      	cmp	r3, #255	; 0xff
    b33a:	4686      	mov	lr, r0
    b33c:	d044      	beq.n	b3c8 <ticker_job+0x6b0>
			instance->ticks_slot_previous > ticks_elapsed) {
    b33e:	9b00      	ldr	r3, [sp, #0]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b340:	9a04      	ldr	r2, [sp, #16]
			instance->ticks_slot_previous > ticks_elapsed) {
    b342:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b344:	4293      	cmp	r3, r2
    b346:	d93f      	bls.n	b3c8 <ticker_job+0x6b0>
			window_start_ticks = instance->ticks_slot_previous -
    b348:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b34c:	e9de 2300 	ldrd	r2, r3, [lr]
    b350:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    b352:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b356:	d23f      	bcs.n	b3d8 <ticker_job+0x6c0>
		while (ticker_id_iter != TICKER_NULL &&
    b358:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    b35c:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
    b360:	d03a      	beq.n	b3d8 <ticker_job+0x6c0>
		       ticks_start_offset + ticker->ticks_slot <=
    b362:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
    b366:	45c1      	cmp	r9, r8
    b368:	f04f 0300 	mov.w	r3, #0
    b36c:	d337      	bcc.n	b3de <ticker_job+0x6c6>
    b36e:	46c2      	mov	sl, r8
    b370:	465a      	mov	r2, fp
    b372:	461d      	mov	r5, r3
    b374:	e01b      	b.n	b3ae <ticker_job+0x696>
			if (node->ticks_to_expire >
    b376:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
    b378:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    b37a:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    b37c:	442b      	add	r3, r5
			if (node->ticks_to_expire >
    b37e:	d909      	bls.n	b394 <ticker_job+0x67c>
				window_end_ticks =
    b380:	454b      	cmp	r3, r9
    b382:	bf28      	it	cs
    b384:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
    b386:	4553      	cmp	r3, sl
    b388:	d904      	bls.n	b394 <ticker_job+0x67c>
			if (ticks_to_expire != 0U &&
    b38a:	ebb3 0308 	subs.w	r3, r3, r8
    b38e:	d001      	beq.n	b394 <ticker_job+0x67c>
    b390:	459c      	cmp	ip, r3
    b392:	d924      	bls.n	b3de <ticker_job+0x6c6>
			window_start_ticks  = node->ticks_to_expire +
    b394:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
    b396:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
    b398:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
    b39c:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
    b39e:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
    b3a2:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    b3a4:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
    b3a8:	d019      	beq.n	b3de <ticker_job+0x6c6>
    b3aa:	45d1      	cmp	r9, sl
    b3ac:	d317      	bcc.n	b3de <ticker_job+0x6c6>
			node = &nodes[ticker_id_iter];
    b3ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b3b2:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    b3b6:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    b3b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b3ba:	2800      	cmp	r0, #0
    b3bc:	d0db      	beq.n	b376 <ticker_job+0x65e>
    b3be:	7a00      	ldrb	r0, [r0, #8]
    b3c0:	2801      	cmp	r0, #1
    b3c2:	d1d8      	bne.n	b376 <ticker_job+0x65e>
				ticker_id_iter = node->next;
    b3c4:	5c8a      	ldrb	r2, [r1, r2]
				continue;
    b3c6:	e7ec      	b.n	b3a2 <ticker_job+0x68a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b3c8:	e9de 2300 	ldrd	r2, r3, [lr]
    b3cc:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    b3ce:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
    b3d2:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b3d6:	d3bf      	bcc.n	b358 <ticker_job+0x640>
		ticker->ticks_to_expire = ticks_to_expire;
    b3d8:	2300      	movs	r3, #0
    b3da:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
    b3dc:	e021      	b.n	b422 <ticker_job+0x70a>
		ticker->ticks_to_expire = ticks_to_expire;
    b3de:	60b3      	str	r3, [r6, #8]
    b3e0:	465d      	mov	r5, fp
    b3e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
    b3e6:	e000      	b.n	b3ea <ticker_job+0x6d2>
    b3e8:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
    b3ea:	b228      	sxth	r0, r5
    b3ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    b3f0:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
    b3f4:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    b3f6:	f8dc 4008 	ldr.w	r4, [ip, #8]
    b3fa:	429c      	cmp	r4, r3
    b3fc:	f080 8142 	bcs.w	b684 <ticker_job+0x96c>
				ticker->ticks_to_expire -=
    b400:	1b1b      	subs	r3, r3, r4
    b402:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
    b404:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
    b406:	2aff      	cmp	r2, #255	; 0xff
    b408:	46a8      	mov	r8, r5
    b40a:	d1ed      	bne.n	b3e8 <ticker_job+0x6d0>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b40c:	9a00      	ldr	r2, [sp, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    b40e:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b412:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    b416:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b418:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b41c:	5cca      	ldrb	r2, [r1, r3]
    b41e:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    b420:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
    b422:	8bf3      	ldrh	r3, [r6, #30]
    b424:	3b01      	subs	r3, #1
    b426:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
    b428:	f04f 0302 	mov.w	r3, #2
    b42c:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
    b430:	2201      	movs	r2, #1
    b432:	e738      	b.n	b2a6 <ticker_job+0x58e>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    b434:	b118      	cbz	r0, b43e <ticker_job+0x726>
    b436:	7a03      	ldrb	r3, [r0, #8]
    b438:	2b01      	cmp	r3, #1
    b43a:	f43f af65 	beq.w	b308 <ticker_job+0x5f0>
				if (!ticker->lazy_current) {
    b43e:	9b05      	ldr	r3, [sp, #20]
    b440:	2b00      	cmp	r3, #0
    b442:	d13d      	bne.n	b4c0 <ticker_job+0x7a8>
					lazy_periodic = ticker->lazy_periodic;
    b444:	8ba3      	ldrh	r3, [r4, #28]
    b446:	930b      	str	r3, [sp, #44]	; 0x2c
    b448:	461a      	mov	r2, r3
				while (count--) {
    b44a:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b44e:	e9d4 e308 	ldrd	lr, r3, [r4, #32]
				ticks_to_expire = 0U;
    b452:	2100      	movs	r1, #0
    b454:	9006      	str	r0, [sp, #24]
    b456:	e008      	b.n	b46a <ticker_job+0x752>
    b458:	ff172b5a 	.word	0xff172b5a
    b45c:	7f172b59 	.word	0x7f172b59
    b460:	4660      	mov	r0, ip
				while (count--) {
    b462:	3a01      	subs	r2, #1
					ticks_to_expire +=
    b464:	4401      	add	r1, r0
				while (count--) {
    b466:	1c50      	adds	r0, r2, #1
    b468:	d00f      	beq.n	b48a <ticker_job+0x772>
	ticker->remainder_current += ticker->remainder_periodic;
    b46a:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
    b46c:	eb03 000b 	add.w	r0, r3, fp
    b470:	4550      	cmp	r0, sl
    b472:	d8f5      	bhi.n	b460 <ticker_job+0x748>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b474:	9806      	ldr	r0, [sp, #24]
    b476:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    b47a:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b47c:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    b480:	4401      	add	r1, r0
				while (count--) {
    b482:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b484:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    b488:	d1ef      	bne.n	b46a <ticker_job+0x752>
				} else if (!ticker->must_expire) {
    b48a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    b48e:	6263      	str	r3, [r4, #36]	; 0x24
    b490:	2a00      	cmp	r2, #0
    b492:	f000 80bd 	beq.w	b610 <ticker_job+0x8f8>
				ticker->lazy_current += (lazy_periodic + lazy);
    b496:	9b05      	ldr	r3, [sp, #20]
    b498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				ticker->ticks_to_expire = ticks_to_expire;
    b49a:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    b49c:	4413      	add	r3, r2
    b49e:	83e3      	strh	r3, [r4, #30]
    b4a0:	e734      	b.n	b30c <ticker_job+0x5f4>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b4a2:	9805      	ldr	r0, [sp, #20]
    b4a4:	2800      	cmp	r0, #0
    b4a6:	f47f aecf 	bne.w	b248 <ticker_job+0x530>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b4aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b4ac:	b128      	cbz	r0, b4ba <ticker_job+0x7a2>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b4ae:	f890 c008 	ldrb.w	ip, [r0, #8]
    b4b2:	f1bc 0f01 	cmp.w	ip, #1
    b4b6:	f43f af1e 	beq.w	b2f6 <ticker_job+0x5de>
			instance->ticks_slot_previous = ticker->ticks_slot;
    b4ba:	61a9      	str	r1, [r5, #24]
			instance->ticker_id_slot_previous = id_expired;
    b4bc:	772e      	strb	r6, [r5, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b4be:	e6c4      	b.n	b24a <ticker_job+0x532>
					ticker->req = ticker->ack;
    b4c0:	7062      	strb	r2, [r4, #1]
    b4c2:	2200      	movs	r2, #0
					lazy_periodic = 0U;
    b4c4:	920b      	str	r2, [sp, #44]	; 0x2c
    b4c6:	e7c0      	b.n	b44a <ticker_job+0x732>
	count_user = instance->count_user;
    b4c8:	9a00      	ldr	r2, [sp, #0]
    b4ca:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
    b4cc:	6856      	ldr	r6, [r2, #4]
	while (count_user--) {
    b4ce:	1e5c      	subs	r4, r3, #1
    b4d0:	b2e4      	uxtb	r4, r4
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	f43f ae20 	beq.w	b118 <ticker_job+0x400>
		flag_compare_update = 1U;
    b4d8:	2301      	movs	r3, #1
    b4da:	9309      	str	r3, [sp, #36]	; 0x24
    b4dc:	f8dd 8000 	ldr.w	r8, [sp]
    b4e0:	9601      	str	r6, [sp, #4]
    b4e2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    b4e6:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
    b4e8:	f04f 0b01 	mov.w	fp, #1
		while (user->first != user->last) {
    b4ec:	7863      	ldrb	r3, [r4, #1]
    b4ee:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
    b4f0:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
    b4f2:	429a      	cmp	r2, r3
    b4f4:	d10c      	bne.n	b510 <ticker_job+0x7f8>
    b4f6:	e068      	b.n	b5ca <ticker_job+0x8b2>
	switch (uop->op) {
    b4f8:	2b01      	cmp	r3, #1
    b4fa:	d05e      	beq.n	b5ba <ticker_job+0x8a2>
			first = user->first + 1;
    b4fc:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    b4fe:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
    b500:	3301      	adds	r3, #1
    b502:	b2db      	uxtb	r3, r3
				first = 0U;
    b504:	4299      	cmp	r1, r3
    b506:	bf08      	it	eq
    b508:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    b50a:	429a      	cmp	r2, r3
			user->first = first;
    b50c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    b50e:	d05c      	beq.n	b5ca <ticker_job+0x8b2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b510:	b21b      	sxth	r3, r3
    b512:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b516:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b51a:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
    b51e:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
    b522:	2b02      	cmp	r3, #2
    b524:	d01d      	beq.n	b562 <ticker_job+0x84a>
    b526:	2b03      	cmp	r3, #3
    b528:	d1e6      	bne.n	b4f8 <ticker_job+0x7e0>
		if (uop->id < instance->count_node) {
    b52a:	f89c 3001 	ldrb.w	r3, [ip, #1]
    b52e:	f898 2008 	ldrb.w	r2, [r8, #8]
    b532:	429a      	cmp	r2, r3
    b534:	d946      	bls.n	b5c4 <ticker_job+0x8ac>
			node[uop->id].priority =
    b536:	f8d8 2000 	ldr.w	r2, [r8]
    b53a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b53e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    b542:	f89c 2004 	ldrb.w	r2, [ip, #4]
    b546:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    b54a:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    b54e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
    b552:	b123      	cbz	r3, b55e <ticker_job+0x846>
		fp_op_func(uop->status, uop->op_context);
    b554:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
    b558:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
    b55c:	4798      	blx	r3
    b55e:	78e2      	ldrb	r2, [r4, #3]
    b560:	e7cc      	b.n	b4fc <ticker_job+0x7e4>
		ticker_by_next_slot_get(instance,
    b562:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
    b566:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
    b56a:	f8dc 900c 	ldr.w	r9, [ip, #12]
	node = instance->nodes;
    b56e:	f8d8 0000 	ldr.w	r0, [r8]
	    (*ticks_current != instance->ticks_current)) {
    b572:	f8d8 6014 	ldr.w	r6, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    b576:	2aff      	cmp	r2, #255	; 0xff
    b578:	d002      	beq.n	b580 <ticker_job+0x868>
    b57a:	680b      	ldr	r3, [r1, #0]
    b57c:	42b3      	cmp	r3, r6
    b57e:	d02d      	beq.n	b5dc <ticker_job+0x8c4>
		_ticker_id_head = instance->ticker_id_head;
    b580:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
    b584:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
    b586:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    b588:	2aff      	cmp	r2, #255	; 0xff
    b58a:	bf18      	it	ne
    b58c:	46a2      	movne	sl, r4
    b58e:	d105      	bne.n	b59c <ticker_job+0x884>
    b590:	e00f      	b.n	b5b2 <ticker_job+0x89a>
		_ticker_id_head = ticker->next;
    b592:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
    b594:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    b596:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
    b598:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
    b59a:	d01d      	beq.n	b5d8 <ticker_job+0x8c0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    b59c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    b5a0:	eb00 1103 	add.w	r1, r0, r3, lsl #4
    b5a4:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
    b5a6:	698c      	ldr	r4, [r1, #24]
    b5a8:	2c00      	cmp	r4, #0
    b5aa:	d0f2      	beq.n	b592 <ticker_job+0x87a>
		_ticks_to_expire += ticker->ticks_to_expire;
    b5ac:	688b      	ldr	r3, [r1, #8]
    b5ae:	4654      	mov	r4, sl
    b5b0:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
    b5b2:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
    b5b6:	f8c9 6000 	str.w	r6, [r9]
		fp_op_func = uop->fp_op_func;
    b5ba:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    b5be:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
    b5c2:	e7c6      	b.n	b552 <ticker_job+0x83a>
			uop->status = TICKER_STATUS_FAILURE;
    b5c4:	f8cc b028 	str.w	fp, [ip, #40]	; 0x28
    b5c8:	e7c1      	b.n	b54e <ticker_job+0x836>
	while (count_user--) {
    b5ca:	9a01      	ldr	r2, [sp, #4]
    b5cc:	42a2      	cmp	r2, r4
    b5ce:	f1a4 0308 	sub.w	r3, r4, #8
    b5d2:	d00d      	beq.n	b5f0 <ticker_job+0x8d8>
    b5d4:	461c      	mov	r4, r3
    b5d6:	e789      	b.n	b4ec <ticker_job+0x7d4>
    b5d8:	4654      	mov	r4, sl
    b5da:	e7ea      	b.n	b5b2 <ticker_job+0x89a>
		ticker = &node[_ticker_id_head];
    b5dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b5e0:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    b5e2:	f8d9 6000 	ldr.w	r6, [r9]
		_ticker_id_head = ticker->next;
    b5e6:	5cc2      	ldrb	r2, [r0, r3]
    b5e8:	e7ce      	b.n	b588 <ticker_job+0x870>
	if (!pending) {
    b5ea:	9b08      	ldr	r3, [sp, #32]
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	d056      	beq.n	b69e <ticker_job+0x986>
	if (flag_compare_update) {
    b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	f47f ad90 	bne.w	b118 <ticker_job+0x400>
	if (instance->worker_trigger) {
    b5f8:	9900      	ldr	r1, [sp, #0]
    b5fa:	7fcb      	ldrb	r3, [r1, #31]
	instance->job_guard = 0U;
    b5fc:	2200      	movs	r2, #0
    b5fe:	778a      	strb	r2, [r1, #30]
	if (instance->worker_trigger) {
    b600:	2b00      	cmp	r3, #0
    b602:	f43f ac39 	beq.w	ae78 <ticker_job+0x160>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b606:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    b608:	460b      	mov	r3, r1
    b60a:	2201      	movs	r2, #1
    b60c:	2103      	movs	r1, #3
    b60e:	e43a      	b.n	ae86 <ticker_job+0x16e>
					while (ticks_to_expire <
    b610:	9802      	ldr	r0, [sp, #8]
    b612:	4288      	cmp	r0, r1
    b614:	f67f af3f 	bls.w	b496 <ticker_job+0x77e>
    b618:	f10c 0001 	add.w	r0, ip, #1
    b61c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    b620:	9006      	str	r0, [sp, #24]
    b622:	f8dd 8008 	ldr.w	r8, [sp, #8]
    b626:	e005      	b.n	b634 <ticker_job+0x91c>
    b628:	4660      	mov	r0, ip
						ticks_to_expire +=
    b62a:	4401      	add	r1, r0
						lazy++;
    b62c:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b62e:	4588      	cmp	r8, r1
						lazy++;
    b630:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b632:	d910      	bls.n	b656 <ticker_job+0x93e>
	ticker->remainder_current += ticker->remainder_periodic;
    b634:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
    b636:	eb03 000b 	add.w	r0, r3, fp
    b63a:	4550      	cmp	r0, sl
    b63c:	d8f4      	bhi.n	b628 <ticker_job+0x910>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b63e:	9806      	ldr	r0, [sp, #24]
    b640:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    b644:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b646:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    b64a:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b64c:	4588      	cmp	r8, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b64e:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    b652:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b654:	d8ee      	bhi.n	b634 <ticker_job+0x91c>
				ticker->lazy_current += (lazy_periodic + lazy);
    b656:	e9dd 080b 	ldrd	r0, r8, [sp, #44]	; 0x2c
    b65a:	4410      	add	r0, r2
    b65c:	6263      	str	r3, [r4, #36]	; 0x24
    b65e:	b283      	uxth	r3, r0
    b660:	930b      	str	r3, [sp, #44]	; 0x2c
    b662:	e718      	b.n	b496 <ticker_job+0x77e>
	ticker_id_old_head = instance->ticker_id_head;
    b664:	9b00      	ldr	r3, [sp, #0]
    b666:	7f59      	ldrb	r1, [r3, #29]
    b668:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    b66a:	6819      	ldr	r1, [r3, #0]
    b66c:	9102      	str	r1, [sp, #8]
	count_user = instance->count_user;
    b66e:	7a59      	ldrb	r1, [r3, #9]
	users = &instance->users[0];
    b670:	685b      	ldr	r3, [r3, #4]
    b672:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    b674:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    b676:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    b678:	b2db      	uxtb	r3, r3
    b67a:	b369      	cbz	r1, b6d8 <ticker_job+0x9c0>
		flag_elapsed = 0U;
    b67c:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    b67e:	9204      	str	r2, [sp, #16]
    b680:	f7ff bb7f 	b.w	ad82 <ticker_job+0x6a>
				node->ticks_to_expire -=
    b684:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
    b686:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
    b68a:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    b68e:	f43f aec8 	beq.w	b422 <ticker_job+0x70a>
    b692:	fa0f f088 	sxth.w	r0, r8
    b696:	e6b9      	b.n	b40c <ticker_job+0x6f4>
			ticker->ticks_to_expire -= ticks_elapsed;
    b698:	1bdb      	subs	r3, r3, r7
    b69a:	60a3      	str	r3, [r4, #8]
			break;
    b69c:	e5f4      	b.n	b288 <ticker_job+0x570>
	count_user = instance->count_user;
    b69e:	9a00      	ldr	r2, [sp, #0]
    b6a0:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
    b6a2:	6856      	ldr	r6, [r2, #4]
	while (count_user--) {
    b6a4:	1e5c      	subs	r4, r3, #1
    b6a6:	b2e4      	uxtb	r4, r4
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	f47f af17 	bne.w	b4dc <ticker_job+0x7c4>
    b6ae:	e79f      	b.n	b5f0 <ticker_job+0x8d8>
		if (cntr_stop() == 0) {
    b6b0:	f00d fa9e 	bl	18bf0 <cntr_stop>
    b6b4:	2800      	cmp	r0, #0
    b6b6:	d19f      	bne.n	b5f8 <ticker_job+0x8e0>
			instance->ticks_slot_previous = 0U;
    b6b8:	9c00      	ldr	r4, [sp, #0]
    b6ba:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    b6bc:	f00d fabe 	bl	18c3c <cntr_cnt_get>
    b6c0:	6160      	str	r0, [r4, #20]
    b6c2:	e799      	b.n	b5f8 <ticker_job+0x8e0>
		ticks_current = cntr_cnt_get();
    b6c4:	f00d faba 	bl	18c3c <cntr_cnt_get>
    b6c8:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    b6ca:	f00d fa81 	bl	18bd0 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    b6ce:	9b00      	ldr	r3, [sp, #0]
		if (cntr_start() == 0) {
    b6d0:	b130      	cbz	r0, b6e0 <ticker_job+0x9c8>
	ticker = &instance->nodes[instance->ticker_id_head];
    b6d2:	7f5b      	ldrb	r3, [r3, #29]
    b6d4:	9301      	str	r3, [sp, #4]
    b6d6:	e52a      	b.n	b12e <ticker_job+0x416>
	insert_head = TICKER_NULL;
    b6d8:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
    b6da:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
    b6dc:	9303      	str	r3, [sp, #12]
    b6de:	e50b      	b.n	b0f8 <ticker_job+0x3e0>
	ticker = &instance->nodes[instance->ticker_id_head];
    b6e0:	7f5a      	ldrb	r2, [r3, #29]
    b6e2:	9201      	str	r2, [sp, #4]
			instance->ticks_current = ticks_current;
    b6e4:	615c      	str	r4, [r3, #20]
    b6e6:	e522      	b.n	b12e <ticker_job+0x416>

0000b6e8 <ticker_init>:
{
    b6e8:	b4f0      	push	{r4, r5, r6, r7}
    b6ea:	9d04      	ldr	r5, [sp, #16]
    b6ec:	f89d 7014 	ldrb.w	r7, [sp, #20]
    b6f0:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    b6f2:	2800      	cmp	r0, #0
    b6f4:	d137      	bne.n	b766 <ticker_init+0x7e>
	instance->count_node = count_node;
    b6f6:	4e1d      	ldr	r6, [pc, #116]	; (b76c <ticker_init+0x84>)
	while (count_node--) {
    b6f8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    b6fc:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    b6fe:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    b700:	fa5f fc8c 	uxtb.w	ip, ip
    b704:	b149      	cbz	r1, b71a <ticker_init+0x32>
    b706:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    b70a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    b70e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    b710:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    b714:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    b718:	d1f9      	bne.n	b70e <ticker_init+0x26>
	while (count_user--) {
    b71a:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    b71c:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    b71e:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    b720:	b2d2      	uxtb	r2, r2
    b722:	b183      	cbz	r3, b746 <ticker_init+0x5e>
    b724:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    b728:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    b72a:	4610      	mov	r0, r2
    b72c:	f812 3908 	ldrb.w	r3, [r2], #-8
    b730:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b734:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    b738:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    b73a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    b73e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    b742:	b2df      	uxtb	r7, r3
	while (count_user--) {
    b744:	d1f0      	bne.n	b728 <ticker_init+0x40>
	if (count_op) {
    b746:	b977      	cbnz	r7, b766 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    b748:	9a07      	ldr	r2, [sp, #28]
    b74a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    b74c:	9a08      	ldr	r2, [sp, #32]
    b74e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    b750:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    b754:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b756:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    b758:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    b75a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b75e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    b760:	8177      	strh	r7, [r6, #10]
}
    b762:	bcf0      	pop	{r4, r5, r6, r7}
    b764:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    b766:	2001      	movs	r0, #1
}
    b768:	bcf0      	pop	{r4, r5, r6, r7}
    b76a:	4770      	bx	lr
    b76c:	20001490 	.word	0x20001490

0000b770 <ticker_trigger>:
	if (instance->sched_cb) {
    b770:	4b0a      	ldr	r3, [pc, #40]	; (b79c <ticker_trigger+0x2c>)
    b772:	222c      	movs	r2, #44	; 0x2c
    b774:	fb02 3200 	mla	r2, r2, r0, r3
{
    b778:	b410      	push	{r4}
	if (instance->sched_cb) {
    b77a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    b77c:	b15c      	cbz	r4, b796 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    b77e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    b782:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b786:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b78a:	46a4      	mov	ip, r4
    b78c:	2201      	movs	r2, #1
}
    b78e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b790:	2103      	movs	r1, #3
    b792:	2002      	movs	r0, #2
    b794:	4760      	bx	ip
}
    b796:	bc10      	pop	{r4}
    b798:	4770      	bx	lr
    b79a:	bf00      	nop
    b79c:	20001490 	.word	0x20001490

0000b7a0 <ticker_start_ext>:
{
    b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b7a4:	4e28      	ldr	r6, [pc, #160]	; (b848 <ticker_start_ext+0xa8>)
{
    b7a6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b7aa:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    b7ac:	252c      	movs	r5, #44	; 0x2c
    b7ae:	fb05 6504 	mla	r5, r5, r4, r6
{
    b7b2:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    b7b4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    b7b8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    b7bc:	6869      	ldr	r1, [r5, #4]
    b7be:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    b7c2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    b7c6:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    b7ca:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    b7ce:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    b7d0:	f10e 0c01 	add.w	ip, lr, #1
    b7d4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b7d8:	4564      	cmp	r4, ip
    b7da:	bf98      	it	ls
    b7dc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b7e0:	4561      	cmp	r1, ip
    b7e2:	d02e      	beq.n	b842 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    b7e4:	6879      	ldr	r1, [r7, #4]
    b7e6:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    b7ea:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    b7ee:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    b7f2:	f04f 0904 	mov.w	r9, #4
    b7f6:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    b7fa:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    b7fc:	9b08      	ldr	r3, [sp, #32]
    b7fe:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b800:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b802:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b806:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b80a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    b80c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b80e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    b810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b812:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    b814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b816:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    b818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b81a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    b81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b81e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b820:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b822:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b824:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    b826:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    b82a:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b82e:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    b832:	4798      	blx	r3
    b834:	4633      	mov	r3, r6
    b836:	4649      	mov	r1, r9
    b838:	2200      	movs	r2, #0
    b83a:	47a8      	blx	r5
	return user_op->status;
    b83c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    b83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    b842:	2001      	movs	r0, #1
}
    b844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b848:	20001490 	.word	0x20001490

0000b84c <ticker_start>:
{
    b84c:	b510      	push	{r4, lr}
    b84e:	b08a      	sub	sp, #40	; 0x28
    b850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b852:	9400      	str	r4, [sp, #0]
{
    b854:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b856:	9401      	str	r4, [sp, #4]
{
    b858:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b85a:	9402      	str	r4, [sp, #8]
{
    b85c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b860:	9403      	str	r4, [sp, #12]
{
    b862:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b864:	9404      	str	r4, [sp, #16]
{
    b866:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b868:	9405      	str	r4, [sp, #20]
{
    b86a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b86c:	9406      	str	r4, [sp, #24]
{
    b86e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b870:	9407      	str	r4, [sp, #28]
{
    b872:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b874:	9408      	str	r4, [sp, #32]
    b876:	2400      	movs	r4, #0
    b878:	9409      	str	r4, [sp, #36]	; 0x24
    b87a:	f7ff ff91 	bl	b7a0 <ticker_start_ext>
}
    b87e:	b00a      	add	sp, #40	; 0x28
    b880:	bd10      	pop	{r4, pc}
    b882:	bf00      	nop

0000b884 <ticker_update_ext>:
{
    b884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b888:	4d28      	ldr	r5, [pc, #160]	; (b92c <ticker_update_ext+0xa8>)
{
    b88a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    b88e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    b892:	4604      	mov	r4, r0
    b894:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b896:	212c      	movs	r1, #44	; 0x2c
    b898:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    b89c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    b8a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    b8a4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    b8a8:	684c      	ldr	r4, [r1, #4]
    b8aa:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    b8ae:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    b8b2:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    b8b6:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    b8b8:	f10e 0c01 	add.w	ip, lr, #1
    b8bc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b8c0:	45e1      	cmp	r9, ip
    b8c2:	bf98      	it	ls
    b8c4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b8c8:	4564      	cmp	r4, ip
{
    b8ca:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    b8ce:	d02a      	beq.n	b926 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    b8d0:	f8d6 a004 	ldr.w	sl, [r6, #4]
    b8d4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    b8d8:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    b8dc:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b8e0:	f04f 0b05 	mov.w	fp, #5
    b8e4:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b8e8:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b8ec:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b8f0:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b8f4:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    b8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b8f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    b8fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b8fc:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b8fe:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b900:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b902:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    b904:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    b906:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    b90a:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    b90e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b912:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    b916:	4798      	blx	r3
    b918:	462b      	mov	r3, r5
    b91a:	2200      	movs	r2, #0
    b91c:	2104      	movs	r1, #4
    b91e:	47b0      	blx	r6
	return user_op->status;
    b920:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    b922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    b926:	2001      	movs	r0, #1
}
    b928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b92c:	20001490 	.word	0x20001490

0000b930 <ticker_update>:
{
    b930:	b510      	push	{r4, lr}
    b932:	b088      	sub	sp, #32
    b934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b936:	9400      	str	r4, [sp, #0]
{
    b938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b93a:	9401      	str	r4, [sp, #4]
{
    b93c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b93e:	9402      	str	r4, [sp, #8]
{
    b940:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b944:	9403      	str	r4, [sp, #12]
{
    b946:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b94a:	9404      	str	r4, [sp, #16]
{
    b94c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b94e:	9405      	str	r4, [sp, #20]
{
    b950:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b952:	9406      	str	r4, [sp, #24]
    b954:	2400      	movs	r4, #0
    b956:	9407      	str	r4, [sp, #28]
    b958:	f7ff ff94 	bl	b884 <ticker_update_ext>
}
    b95c:	b008      	add	sp, #32
    b95e:	bd10      	pop	{r4, pc}

0000b960 <ticker_stop>:
{
    b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b964:	4c1e      	ldr	r4, [pc, #120]	; (b9e0 <ticker_stop+0x80>)
{
    b966:	4684      	mov	ip, r0
    b968:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b96a:	212c      	movs	r1, #44	; 0x2c
    b96c:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    b970:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    b974:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    b978:	684d      	ldr	r5, [r1, #4]
    b97a:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    b97e:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    b982:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    b986:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    b988:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    b98c:	f10e 0c01 	add.w	ip, lr, #1
    b990:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b994:	4567      	cmp	r7, ip
    b996:	bf98      	it	ls
    b998:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b99c:	4565      	cmp	r5, ip
    b99e:	d01c      	beq.n	b9da <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    b9a0:	6877      	ldr	r7, [r6, #4]
    b9a2:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    b9a6:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    b9aa:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b9ae:	f04f 0806 	mov.w	r8, #6
    b9b2:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    b9b6:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    b9b8:	9b06      	ldr	r3, [sp, #24]
    b9ba:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b9bc:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b9be:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b9c0:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    b9c2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b9c6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    b9ca:	4798      	blx	r3
    b9cc:	4623      	mov	r3, r4
    b9ce:	2200      	movs	r2, #0
    b9d0:	2104      	movs	r1, #4
    b9d2:	47b0      	blx	r6
	return user_op->status;
    b9d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    b9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    b9da:	2001      	movs	r0, #1
}
    b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9e0:	20001490 	.word	0x20001490

0000b9e4 <ticker_next_slot_get>:
{
    b9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b9e8:	4d20      	ldr	r5, [pc, #128]	; (ba6c <ticker_next_slot_get+0x88>)
{
    b9ea:	4684      	mov	ip, r0
    b9ec:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b9ee:	212c      	movs	r1, #44	; 0x2c
    b9f0:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
    b9f4:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    b9f8:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
    b9fc:	684c      	ldr	r4, [r1, #4]
    b9fe:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    ba02:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    ba06:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    ba0a:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    ba0c:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
    ba10:	f10e 0c01 	add.w	ip, lr, #1
    ba14:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    ba18:	4567      	cmp	r7, ip
    ba1a:	bf98      	it	ls
    ba1c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    ba20:	4564      	cmp	r4, ip
    ba22:	d020      	beq.n	ba66 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
    ba24:	6877      	ldr	r7, [r6, #4]
    ba26:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    ba2a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    ba2e:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    ba32:	f64f 7802 	movw	r8, #65282	; 0xff02
    ba36:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
    ba3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    ba3e:	9b06      	ldr	r3, [sp, #24]
    ba40:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    ba42:	9b07      	ldr	r3, [sp, #28]
    ba44:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    ba46:	9b08      	ldr	r3, [sp, #32]
    ba48:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    ba4a:	2302      	movs	r3, #2
    ba4c:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
    ba4e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba52:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    ba56:	4798      	blx	r3
    ba58:	462b      	mov	r3, r5
    ba5a:	2200      	movs	r2, #0
    ba5c:	2104      	movs	r1, #4
    ba5e:	47b0      	blx	r6
	return user_op->status;
    ba60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    ba62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    ba66:	2001      	movs	r0, #1
}
    ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba6c:	20001490 	.word	0x20001490

0000ba70 <ticker_job_sched>:
{
    ba70:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba72:	4d0a      	ldr	r5, [pc, #40]	; (ba9c <ticker_job_sched+0x2c>)
    ba74:	222c      	movs	r2, #44	; 0x2c
    ba76:	fb02 5200 	mla	r2, r2, r0, r5
    ba7a:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
    ba7e:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba80:	4608      	mov	r0, r1
    ba82:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
    ba84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    ba88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ba90:	46b4      	mov	ip, r6
    ba92:	2200      	movs	r2, #0
}
    ba94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba98:	2104      	movs	r1, #4
    ba9a:	4760      	bx	ip
    ba9c:	20001490 	.word	0x20001490

0000baa0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    baa0:	f00d b8cc 	b.w	18c3c <cntr_cnt_get>

0000baa4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    baa4:	1a40      	subs	r0, r0, r1
}
    baa6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    baaa:	4770      	bx	lr

0000baac <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    baac:	2801      	cmp	r0, #1
{
    baae:	b508      	push	{r3, lr}
    bab0:	4603      	mov	r3, r0
	if (addr_type > 1) {
    bab2:	d811      	bhi.n	bad8 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
    bab4:	4608      	mov	r0, r1
    bab6:	b943      	cbnz	r3, baca <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    bab8:	b129      	cbz	r1, bac6 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    baba:	4909      	ldr	r1, [pc, #36]	; (bae0 <ll_addr_get+0x34>)
    babc:	2206      	movs	r2, #6
    babe:	f011 fea3 	bl	1d808 <memcpy>
	}

	return pub_addr;
    bac2:	4807      	ldr	r0, [pc, #28]	; (bae0 <ll_addr_get+0x34>)
}
    bac4:	bd08      	pop	{r3, pc}
	return pub_addr;
    bac6:	4806      	ldr	r0, [pc, #24]	; (bae0 <ll_addr_get+0x34>)
}
    bac8:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    baca:	b139      	cbz	r1, badc <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    bacc:	4905      	ldr	r1, [pc, #20]	; (bae4 <ll_addr_get+0x38>)
    bace:	2206      	movs	r2, #6
    bad0:	f011 fe9a 	bl	1d808 <memcpy>
		return rnd_addr;
    bad4:	4803      	ldr	r0, [pc, #12]	; (bae4 <ll_addr_get+0x38>)
}
    bad6:	bd08      	pop	{r3, pc}
		return NULL;
    bad8:	2000      	movs	r0, #0
}
    bada:	bd08      	pop	{r3, pc}
		return rnd_addr;
    badc:	4801      	ldr	r0, [pc, #4]	; (bae4 <ll_addr_get+0x38>)
}
    bade:	bd08      	pop	{r3, pc}
    bae0:	200014bc 	.word	0x200014bc
    bae4:	200014c4 	.word	0x200014c4

0000bae8 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    bae8:	b570      	push	{r4, r5, r6, lr}
    baea:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    baec:	2000      	movs	r0, #0
{
    baee:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    baf0:	f003 fc12 	bl	f318 <ull_adv_is_enabled>
    baf4:	b998      	cbnz	r0, bb1e <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    baf6:	f003 fdaf 	bl	f658 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    bafa:	f010 0606 	ands.w	r6, r0, #6
    bafe:	d10e      	bne.n	bb1e <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    bb00:	b134      	cbz	r4, bb10 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bb02:	2206      	movs	r2, #6
    bb04:	4629      	mov	r1, r5
    bb06:	4807      	ldr	r0, [pc, #28]	; (bb24 <ll_addr_set+0x3c>)
    bb08:	f011 fe7e 	bl	1d808 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    bb0c:	4630      	mov	r0, r6
}
    bb0e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    bb10:	2206      	movs	r2, #6
    bb12:	4629      	mov	r1, r5
    bb14:	4804      	ldr	r0, [pc, #16]	; (bb28 <ll_addr_set+0x40>)
    bb16:	f011 fe77 	bl	1d808 <memcpy>
	return 0;
    bb1a:	4620      	mov	r0, r4
}
    bb1c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    bb1e:	200c      	movs	r0, #12
}
    bb20:	bd70      	pop	{r4, r5, r6, pc}
    bb22:	bf00      	nop
    bb24:	200014c4 	.word	0x200014c4
    bb28:	200014bc 	.word	0x200014bc

0000bb2c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    bb2c:	2802      	cmp	r0, #2
    bb2e:	d001      	beq.n	bb34 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    bb30:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    bb32:	4770      	bx	lr
{
    bb34:	b538      	push	{r3, r4, r5, lr}
    bb36:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    bb38:	4608      	mov	r0, r1
    bb3a:	461d      	mov	r5, r3
    bb3c:	f004 fc2c 	bl	10398 <ll_connected_get>
			if (!conn) {
    bb40:	b110      	cbz	r0, bb48 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    bb42:	2000      	movs	r0, #0
    bb44:	7028      	strb	r0, [r5, #0]
}
    bb46:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    bb48:	4620      	mov	r0, r4
}
    bb4a:	bd38      	pop	{r3, r4, r5, pc}

0000bb4c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    bb4c:	2300      	movs	r3, #0
    bb4e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    bb50:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    bb52:	4770      	bx	lr

0000bb54 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    bb54:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    bb56:	4802      	ldr	r0, [pc, #8]	; (bb60 <hci_driver_init+0xc>)
    bb58:	f7fa fbea 	bl	6330 <bt_hci_driver_register>

	return 0;
}
    bb5c:	2000      	movs	r0, #0
    bb5e:	bd08      	pop	{r3, pc}
    bb60:	000206fc 	.word	0x000206fc

0000bb64 <hci_driver_send>:
{
    bb64:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    bb66:	8983      	ldrh	r3, [r0, #12]
{
    bb68:	b083      	sub	sp, #12
	if (!buf->len) {
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d03a      	beq.n	bbe4 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    bb6e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    bb70:	4604      	mov	r4, r0
    bb72:	b31b      	cbz	r3, bbbc <hci_driver_send+0x58>
    bb74:	2b02      	cmp	r3, #2
    bb76:	d00f      	beq.n	bb98 <hci_driver_send+0x34>
    bb78:	4921      	ldr	r1, [pc, #132]	; (bc00 <hci_driver_send+0x9c>)
    bb7a:	4a22      	ldr	r2, [pc, #136]	; (bc04 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    bb7c:	4822      	ldr	r0, [pc, #136]	; (bc08 <hci_driver_send+0xa4>)
    bb7e:	1a52      	subs	r2, r2, r1
    bb80:	08d2      	lsrs	r2, r2, #3
    bb82:	0192      	lsls	r2, r2, #6
    bb84:	f042 0201 	orr.w	r2, r2, #1
    bb88:	4619      	mov	r1, r3
    bb8a:	f010 ffd3 	bl	1cb34 <log_1>
		return -EINVAL;
    bb8e:	f06f 0515 	mvn.w	r5, #21
}
    bb92:	4628      	mov	r0, r5
    bb94:	b003      	add	sp, #12
    bb96:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    bb98:	a901      	add	r1, sp, #4
    bb9a:	f001 f81d 	bl	cbd8 <hci_acl_handle>
	if (evt) {
    bb9e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    bba0:	4605      	mov	r5, r0
	if (evt) {
    bba2:	b113      	cbz	r3, bbaa <hci_driver_send+0x46>
		bt_recv_prio(evt);
    bba4:	4618      	mov	r0, r3
    bba6:	f7fa fba5 	bl	62f4 <bt_recv_prio>
	if (!err) {
    bbaa:	2d00      	cmp	r5, #0
    bbac:	d1f1      	bne.n	bb92 <hci_driver_send+0x2e>
		net_buf_unref(buf);
    bbae:	4620      	mov	r0, r4
    bbb0:	f00e f820 	bl	19bf4 <net_buf_unref>
    bbb4:	2500      	movs	r5, #0
}
    bbb6:	4628      	mov	r0, r5
    bbb8:	b003      	add	sp, #12
    bbba:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    bbbc:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    bbbe:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    bbc0:	f000 fac8 	bl	c154 <hci_cmd_handle>
	if (evt) {
    bbc4:	2800      	cmp	r0, #0
    bbc6:	d0f2      	beq.n	bbae <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    bbc8:	f7fa fb94 	bl	62f4 <bt_recv_prio>
		if (node_rx) {
    bbcc:	9d01      	ldr	r5, [sp, #4]
    bbce:	2d00      	cmp	r5, #0
    bbd0:	d0ed      	beq.n	bbae <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bbd2:	4628      	mov	r0, r5
    bbd4:	f001 fd28 	bl	d628 <hci_get_class>
    bbd8:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    bbda:	9901      	ldr	r1, [sp, #4]
    bbdc:	480b      	ldr	r0, [pc, #44]	; (bc0c <hci_driver_send+0xa8>)
    bbde:	f013 fc76 	bl	1f4ce <k_queue_append>
	if (!err) {
    bbe2:	e7e4      	b.n	bbae <hci_driver_send+0x4a>
    bbe4:	4b06      	ldr	r3, [pc, #24]	; (bc00 <hci_driver_send+0x9c>)
    bbe6:	4907      	ldr	r1, [pc, #28]	; (bc04 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    bbe8:	4809      	ldr	r0, [pc, #36]	; (bc10 <hci_driver_send+0xac>)
    bbea:	1ac9      	subs	r1, r1, r3
    bbec:	08c9      	lsrs	r1, r1, #3
    bbee:	0189      	lsls	r1, r1, #6
    bbf0:	f041 0101 	orr.w	r1, r1, #1
    bbf4:	f010 ff91 	bl	1cb1a <log_0>
		return -EINVAL;
    bbf8:	f06f 0515 	mvn.w	r5, #21
    bbfc:	e7c9      	b.n	bb92 <hci_driver_send+0x2e>
    bbfe:	bf00      	nop
    bc00:	0001ff94 	.word	0x0001ff94
    bc04:	0001ffe4 	.word	0x0001ffe4
    bc08:	00020650 	.word	0x00020650
    bc0c:	20000748 	.word	0x20000748
    bc10:	0002063c 	.word	0x0002063c

0000bc14 <recv_thread>:
{
    bc14:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    bc16:	4e41      	ldr	r6, [pc, #260]	; (bd1c <recv_thread+0x108>)
		LL_ASSERT(0);
    bc18:	4f41      	ldr	r7, [pc, #260]	; (bd20 <recv_thread+0x10c>)
{
    bc1a:	b083      	sub	sp, #12
    bc1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc24:	4630      	mov	r0, r6
    bc26:	f00f faa3 	bl	1b170 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    bc2a:	2800      	cmp	r0, #0
    bc2c:	d0f6      	beq.n	bc1c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    bc2e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    bc30:	9001      	str	r0, [sp, #4]
	switch (class) {
    bc32:	2b04      	cmp	r3, #4
    bc34:	d821      	bhi.n	bc7a <recv_thread+0x66>
    bc36:	2b00      	cmp	r3, #0
    bc38:	d14b      	bne.n	bcd2 <recv_thread+0xbe>
		LL_ASSERT(0);
    bc3a:	493a      	ldr	r1, [pc, #232]	; (bd24 <recv_thread+0x110>)
    bc3c:	483a      	ldr	r0, [pc, #232]	; (bd28 <recv_thread+0x114>)
    bc3e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    bc42:	463a      	mov	r2, r7
    bc44:	f010 fb2a 	bl	1c29c <printk>
    bc48:	4040      	eors	r0, r0
    bc4a:	f380 8811 	msr	BASEPRI, r0
    bc4e:	f04f 0003 	mov.w	r0, #3
    bc52:	df02      	svc	2
	node_rx->hdr.next = NULL;
    bc54:	9b01      	ldr	r3, [sp, #4]
    bc56:	2200      	movs	r2, #0
    bc58:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bc5a:	a801      	add	r0, sp, #4
    bc5c:	f002 fb94 	bl	e388 <ll_rx_mem_release>
    bc60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc68:	4630      	mov	r0, r6
    bc6a:	f00f fa81 	bl	1b170 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    bc6e:	2800      	cmp	r0, #0
    bc70:	d0d4      	beq.n	bc1c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    bc72:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    bc74:	9001      	str	r0, [sp, #4]
	switch (class) {
    bc76:	2b04      	cmp	r3, #4
    bc78:	d9dd      	bls.n	bc36 <recv_thread+0x22>
    bc7a:	2b05      	cmp	r3, #5
    bc7c:	d1dd      	bne.n	bc3a <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    bc7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc86:	2003      	movs	r0, #3
    bc88:	f7f9 f9e8 	bl	505c <bt_buf_get_rx>
    bc8c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    bc8e:	4621      	mov	r1, r4
    bc90:	9801      	ldr	r0, [sp, #4]
    bc92:	f001 f867 	bl	cd64 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    bc96:	9b01      	ldr	r3, [sp, #4]
    bc98:	2200      	movs	r2, #0
    bc9a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bc9c:	a801      	add	r0, sp, #4
    bc9e:	f002 fb73 	bl	e388 <ll_rx_mem_release>
		while (buf) {
    bca2:	2c00      	cmp	r4, #0
    bca4:	d0ba      	beq.n	bc1c <recv_thread+0x8>
			net_buf_ref(frag);
    bca6:	4620      	mov	r0, r4
    bca8:	f013 f917 	bl	1eeda <net_buf_ref>
			buf = net_buf_frag_del(NULL, frag);
    bcac:	4625      	mov	r5, r4
    bcae:	4621      	mov	r1, r4
    bcb0:	2000      	movs	r0, #0
    bcb2:	f013 f938 	bl	1ef26 <net_buf_frag_del>
			if (frag->len) {
    bcb6:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, frag);
    bcb8:	4604      	mov	r4, r0
				bt_recv(frag);
    bcba:	4628      	mov	r0, r5
			if (frag->len) {
    bcbc:	b133      	cbz	r3, bccc <recv_thread+0xb8>
				bt_recv(frag);
    bcbe:	f7fa fa75 	bl	61ac <bt_recv>
	z_impl_k_yield();
    bcc2:	f00f fee5 	bl	1ba90 <z_impl_k_yield>
		while (buf) {
    bcc6:	2c00      	cmp	r4, #0
    bcc8:	d1ed      	bne.n	bca6 <recv_thread+0x92>
    bcca:	e7a7      	b.n	bc1c <recv_thread+0x8>
				net_buf_unref(frag);
    bccc:	f00d ff92 	bl	19bf4 <net_buf_unref>
    bcd0:	e7f7      	b.n	bcc2 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    bcd2:	2b02      	cmp	r3, #2
    bcd4:	d013      	beq.n	bcfe <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bcd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bcda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bcde:	2001      	movs	r0, #1
    bce0:	f7f9 f9bc 	bl	505c <bt_buf_get_rx>
    bce4:	4604      	mov	r4, r0
		if (buf) {
    bce6:	b19c      	cbz	r4, bd10 <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
    bce8:	9801      	ldr	r0, [sp, #4]
    bcea:	4621      	mov	r1, r4
    bcec:	f001 f874 	bl	cdd8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    bcf0:	9b01      	ldr	r3, [sp, #4]
    bcf2:	2200      	movs	r2, #0
    bcf4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bcf6:	a801      	add	r0, sp, #4
    bcf8:	f002 fb46 	bl	e388 <ll_rx_mem_release>
		while (buf) {
    bcfc:	e7d3      	b.n	bca6 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    bcfe:	2200      	movs	r2, #0
    bd00:	2300      	movs	r3, #0
    bd02:	2101      	movs	r1, #1
    bd04:	2000      	movs	r0, #0
    bd06:	f7f9 f9df 	bl	50c8 <bt_buf_get_evt>
    bd0a:	4604      	mov	r4, r0
		if (buf) {
    bd0c:	2c00      	cmp	r4, #0
    bd0e:	d1eb      	bne.n	bce8 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
    bd10:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    bd12:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    bd14:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bd16:	f002 fb37 	bl	e388 <ll_rx_mem_release>
		while (buf) {
    bd1a:	e77f      	b.n	bc1c <recv_thread+0x8>
    bd1c:	20000748 	.word	0x20000748
    bd20:	00020664 	.word	0x00020664
    bd24:	000206a4 	.word	0x000206a4
    bd28:	0002060c 	.word	0x0002060c

0000bd2c <prio_recv_thread>:
{
    bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    bd30:	f8df 80b0 	ldr.w	r8, [pc, #176]	; bde4 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
    bd34:	4f2c      	ldr	r7, [pc, #176]	; (bde8 <prio_recv_thread+0xbc>)
{
    bd36:	b082      	sub	sp, #8
    bd38:	e00c      	b.n	bd54 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bd3a:	f7f9 f9c5 	bl	50c8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bd3e:	4622      	mov	r2, r4
    bd40:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bd44:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bd46:	f001 fc57 	bl	d5f8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    bd4a:	4620      	mov	r0, r4
    bd4c:	f7fa fad2 	bl	62f4 <bt_recv_prio>
	z_impl_k_yield();
    bd50:	f00f fe9e 	bl	1ba90 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bd54:	f10d 0102 	add.w	r1, sp, #2
    bd58:	a801      	add	r0, sp, #4
    bd5a:	f002 f95d 	bl	e018 <ll_rx_get>
    bd5e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bd60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd68:	2100      	movs	r1, #0
    bd6a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bd6c:	2c00      	cmp	r4, #0
    bd6e:	d1e4      	bne.n	bd3a <prio_recv_thread+0xe>
		if (node_rx) {
    bd70:	9b01      	ldr	r3, [sp, #4]
    bd72:	b193      	cbz	r3, bd9a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    bd74:	f002 fa36 	bl	e1e4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bd78:	9e01      	ldr	r6, [sp, #4]
    bd7a:	4630      	mov	r0, r6
    bd7c:	f001 fc54 	bl	d628 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    bd80:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bd82:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    bd84:	796b      	ldrb	r3, [r5, #5]
    bd86:	2b03      	cmp	r3, #3
    bd88:	d102      	bne.n	bd90 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    bd8a:	792b      	ldrb	r3, [r5, #4]
    bd8c:	2b15      	cmp	r3, #21
    bd8e:	d00c      	beq.n	bdaa <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    bd90:	4629      	mov	r1, r5
    bd92:	4638      	mov	r0, r7
    bd94:	f013 fb9b 	bl	1f4ce <k_queue_append>
			continue;
    bd98:	e7dc      	b.n	bd54 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    bd9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bda2:	4640      	mov	r0, r8
    bda4:	f00f fa3e 	bl	1b224 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bda8:	e7d4      	b.n	bd54 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bdaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bdae:	4621      	mov	r1, r4
    bdb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bdb4:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    bdb6:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bdb8:	f7f9 f986 	bl	50c8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    bdbc:	4631      	mov	r1, r6
    bdbe:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bdc0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    bdc2:	f105 001c 	add.w	r0, r5, #28
    bdc6:	f000 ffa5 	bl	cd14 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    bdca:	4630      	mov	r0, r6
    bdcc:	f000 ffc2 	bl	cd54 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    bdd0:	4620      	mov	r0, r4
			if (buf) {
    bdd2:	b124      	cbz	r4, bdde <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    bdd4:	f7fa fa8e 	bl	62f4 <bt_recv_prio>
					net_buf_unref(buf);
    bdd8:	4620      	mov	r0, r4
    bdda:	f00d ff0b 	bl	19bf4 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    bdde:	9d01      	ldr	r5, [sp, #4]
    bde0:	e7d6      	b.n	bd90 <prio_recv_thread+0x64>
    bde2:	bf00      	nop
    bde4:	20000718 	.word	0x20000718
    bde8:	20000748 	.word	0x20000748

0000bdec <hci_driver_open>:
{
    bdec:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    bdee:	4821      	ldr	r0, [pc, #132]	; (be74 <hci_driver_open+0x88>)
{
    bdf0:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    bdf2:	f001 ffc7 	bl	dd84 <ll_init>
	if (err) {
    bdf6:	4604      	mov	r4, r0
    bdf8:	bb70      	cbnz	r0, be58 <hci_driver_open+0x6c>
	hci_init(NULL);
    bdfa:	f001 fc2b 	bl	d654 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    bdfe:	2600      	movs	r6, #0
    be00:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    be02:	f06f 0209 	mvn.w	r2, #9
    be06:	e9cd 2403 	strd	r2, r4, [sp, #12]
    be0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    be0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    be12:	4b19      	ldr	r3, [pc, #100]	; (be78 <hci_driver_open+0x8c>)
    be14:	4919      	ldr	r1, [pc, #100]	; (be7c <hci_driver_open+0x90>)
    be16:	9400      	str	r4, [sp, #0]
    be18:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    be1c:	4818      	ldr	r0, [pc, #96]	; (be80 <hci_driver_open+0x94>)
    be1e:	f00f f84f 	bl	1aec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    be22:	4918      	ldr	r1, [pc, #96]	; (be84 <hci_driver_open+0x98>)
    be24:	4816      	ldr	r0, [pc, #88]	; (be80 <hci_driver_open+0x94>)
    be26:	f013 fac0 	bl	1f3aa <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    be2a:	f06f 0207 	mvn.w	r2, #7
    be2e:	e9cd 2403 	strd	r2, r4, [sp, #12]
    be32:	e9cd 6706 	strd	r6, r7, [sp, #24]
    be36:	e9cd 4401 	strd	r4, r4, [sp, #4]
    be3a:	4b13      	ldr	r3, [pc, #76]	; (be88 <hci_driver_open+0x9c>)
    be3c:	4913      	ldr	r1, [pc, #76]	; (be8c <hci_driver_open+0xa0>)
    be3e:	9400      	str	r4, [sp, #0]
    be40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    be44:	4812      	ldr	r0, [pc, #72]	; (be90 <hci_driver_open+0xa4>)
    be46:	f00f f83b 	bl	1aec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    be4a:	4912      	ldr	r1, [pc, #72]	; (be94 <hci_driver_open+0xa8>)
    be4c:	4810      	ldr	r0, [pc, #64]	; (be90 <hci_driver_open+0xa4>)
    be4e:	f013 faac 	bl	1f3aa <z_impl_k_thread_name_set>
}
    be52:	4620      	mov	r0, r4
    be54:	b008      	add	sp, #32
    be56:	bdd0      	pop	{r4, r6, r7, pc}
    be58:	4b0f      	ldr	r3, [pc, #60]	; (be98 <hci_driver_open+0xac>)
    be5a:	4a10      	ldr	r2, [pc, #64]	; (be9c <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
    be5c:	4810      	ldr	r0, [pc, #64]	; (bea0 <hci_driver_open+0xb4>)
    be5e:	1ad2      	subs	r2, r2, r3
    be60:	08d2      	lsrs	r2, r2, #3
    be62:	0192      	lsls	r2, r2, #6
    be64:	f042 0201 	orr.w	r2, r2, #1
    be68:	4621      	mov	r1, r4
    be6a:	f010 fe63 	bl	1cb34 <log_1>
}
    be6e:	4620      	mov	r0, r4
    be70:	b008      	add	sp, #32
    be72:	bdd0      	pop	{r4, r6, r7, pc}
    be74:	20000718 	.word	0x20000718
    be78:	0000bd2d 	.word	0x0000bd2d
    be7c:	20003568 	.word	0x20003568
    be80:	20000cd8 	.word	0x20000cd8
    be84:	000206c8 	.word	0x000206c8
    be88:	0000bc15 	.word	0x0000bc15
    be8c:	20003728 	.word	0x20003728
    be90:	20000d58 	.word	0x20000d58
    be94:	000206d4 	.word	0x000206d4
    be98:	0001ff94 	.word	0x0001ff94
    be9c:	0001ffe4 	.word	0x0001ffe4
    bea0:	000206a8 	.word	0x000206a8

0000bea4 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, uint8_t *addr,
    bea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* check for duplicate filtering */
	if (dup_count >= 0) {
		int i;

		/* find for existing entry and update if changed */
		for (i = 0; i < dup_count; i++) {
    bea8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; bf54 <dup_found.part.0+0xb0>
    beac:	f8d9 3000 	ldr.w	r3, [r9]
    beb0:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, uint8_t *addr,
    beb2:	4607      	mov	r7, r0
    beb4:	4688      	mov	r8, r1
    beb6:	4616      	mov	r6, r2
		for (i = 0; i < dup_count; i++) {
    beb8:	dd12      	ble.n	bee0 <dup_found.part.0+0x3c>
    beba:	4c27      	ldr	r4, [pc, #156]	; (bf58 <dup_found.part.0+0xb4>)
    bebc:	2500      	movs	r5, #0
			if (memcmp(addr, &dup_filter[i].addr.a.val[0],
    bebe:	4621      	mov	r1, r4
    bec0:	2206      	movs	r2, #6
    bec2:	4630      	mov	r0, r6
    bec4:	f011 fc8f 	bl	1d7e6 <memcmp>
    bec8:	b918      	cbnz	r0, bed2 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
    beca:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    bece:	4543      	cmp	r3, r8
    bed0:	d029      	beq.n	bf26 <dup_found.part.0+0x82>
		for (i = 0; i < dup_count; i++) {
    bed2:	f8d9 3000 	ldr.w	r3, [r9]
    bed6:	3501      	adds	r5, #1
    bed8:	429d      	cmp	r5, r3
    beda:	f104 0408 	add.w	r4, r4, #8
    bede:	dbee      	blt.n	bebe <dup_found.part.0+0x1a>
			return is_dup_or_update(i, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		memcpy(&dup_filter[dup_curr].addr.a.val[0], addr,
    bee0:	4d1e      	ldr	r5, [pc, #120]	; (bf5c <dup_found.part.0+0xb8>)
    bee2:	4c1f      	ldr	r4, [pc, #124]	; (bf60 <dup_found.part.0+0xbc>)
    bee4:	6828      	ldr	r0, [r5, #0]
    bee6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    beea:	2206      	movs	r2, #6
    beec:	4631      	mov	r1, r6
    beee:	3002      	adds	r0, #2
    bef0:	f011 fc8a 	bl	1d808 <memcpy>
		       sizeof(bt_addr_t));
		dup_filter[dup_curr].addr.type = addr_type;
    bef4:	682b      	ldr	r3, [r5, #0]
		dup_filter[dup_curr].mask = BIT(adv_type);
    bef6:	2201      	movs	r2, #1
    bef8:	fa02 f707 	lsl.w	r7, r2, r7
		dup_filter[dup_curr].adv_mode = adv_mode;
		dup_filter[i].data_cmplt = !data_status;
		store_adi(dup_curr, adi);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    befc:	f8d9 2000 	ldr.w	r2, [r9]
		dup_filter[dup_curr].mask = BIT(adv_type);
    bf00:	f804 7033 	strb.w	r7, [r4, r3, lsl #3]
		dup_filter[dup_curr].addr.type = addr_type;
    bf04:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bf08:	2a0f      	cmp	r2, #15
		dup_filter[dup_curr].addr.type = addr_type;
    bf0a:	f884 8001 	strb.w	r8, [r4, #1]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bf0e:	dc1e      	bgt.n	bf4e <dup_found.part.0+0xaa>
			dup_count++;
    bf10:	3201      	adds	r2, #1
			dup_curr = dup_count;
    bf12:	4613      	mov	r3, r2
			dup_count++;
    bf14:	f8c9 2000 	str.w	r2, [r9]
			dup_curr = dup_count;
    bf18:	602a      	str	r2, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bf1a:	2b10      	cmp	r3, #16
			dup_curr = 0U;
    bf1c:	f04f 0000 	mov.w	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bf20:	d10a      	bne.n	bf38 <dup_found.part.0+0x94>
			dup_curr = 0U;
    bf22:	6028      	str	r0, [r5, #0]
    bf24:	e008      	b.n	bf38 <dup_found.part.0+0x94>
	if (!(dup_filter[i].mask & BIT(adv_type))) {
    bf26:	490e      	ldr	r1, [pc, #56]	; (bf60 <dup_found.part.0+0xbc>)
    bf28:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
    bf2c:	fa22 f307 	lsr.w	r3, r2, r7
    bf30:	f013 0301 	ands.w	r3, r3, #1
    bf34:	d002      	beq.n	bf3c <dup_found.part.0+0x98>
	return true;
    bf36:	2001      	movs	r0, #1
		}
	}

	return false;
}
    bf38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
    bf3c:	4618      	mov	r0, r3
		dup_filter[i].mask |= BIT(adv_type);
    bf3e:	2301      	movs	r3, #1
    bf40:	fa03 f707 	lsl.w	r7, r3, r7
    bf44:	433a      	orrs	r2, r7
    bf46:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
}
    bf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dup_curr++;
    bf4e:	3301      	adds	r3, #1
    bf50:	602b      	str	r3, [r5, #0]
    bf52:	e7e2      	b.n	bf1a <dup_found.part.0+0x76>
    bf54:	200014d0 	.word	0x200014d0
    bf58:	200014da 	.word	0x200014da
    bf5c:	200014d4 	.word	0x200014d4
    bf60:	200014d8 	.word	0x200014d8

0000bf64 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bf66:	4c19      	ldr	r4, [pc, #100]	; (bfcc <le_remote_feat_complete+0x68>)
    bf68:	6864      	ldr	r4, [r4, #4]
    bf6a:	00a4      	lsls	r4, r4, #2
    bf6c:	d504      	bpl.n	bf78 <le_remote_feat_complete+0x14>
    bf6e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    bf70:	4a17      	ldr	r2, [pc, #92]	; (bfd0 <le_remote_feat_complete+0x6c>)
    bf72:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bf74:	0712      	lsls	r2, r2, #28
    bf76:	d400      	bmi.n	bf7a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf7a:	f103 0408 	add.w	r4, r3, #8
    bf7e:	4607      	mov	r7, r0
    bf80:	460e      	mov	r6, r1
    bf82:	4620      	mov	r0, r4
    bf84:	2102      	movs	r1, #2
    bf86:	f012 ffda 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    bf8a:	233e      	movs	r3, #62	; 0x3e
    bf8c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    bf8e:	230c      	movs	r3, #12
    bf90:	7043      	strb	r3, [r0, #1]
    bf92:	2101      	movs	r1, #1
    bf94:	4620      	mov	r0, r4
    bf96:	f012 ffd2 	bl	1ef3e <net_buf_simple_add>
    bf9a:	4603      	mov	r3, r0
	me->subevent = subevt;
    bf9c:	2204      	movs	r2, #4
    bf9e:	701a      	strb	r2, [r3, #0]
    bfa0:	4620      	mov	r0, r4
    bfa2:	210b      	movs	r1, #11
    bfa4:	f012 ffcb 	bl	1ef3e <net_buf_simple_add>
		memcpy(&sep->features[0],
    bfa8:	2208      	movs	r2, #8
	sep->status = status;
    bfaa:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bfac:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    bfb0:	b92f      	cbnz	r7, bfbe <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    bfb2:	1d31      	adds	r1, r6, #4
    bfb4:	3003      	adds	r0, #3
}
    bfb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    bfba:	f011 bc25 	b.w	1d808 <memcpy>
}
    bfbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    bfc2:	2100      	movs	r1, #0
    bfc4:	3003      	adds	r0, #3
    bfc6:	f011 bc4a 	b.w	1d85e <memset>
    bfca:	bf00      	nop
    bfcc:	20000120 	.word	0x20000120
    bfd0:	20000128 	.word	0x20000128

0000bfd4 <hci_vendor_cmd_handle_common>:
{
    bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfd6:	3801      	subs	r0, #1
    bfd8:	b087      	sub	sp, #28
    bfda:	4615      	mov	r5, r2
    bfdc:	2809      	cmp	r0, #9
    bfde:	d806      	bhi.n	bfee <hci_vendor_cmd_handle_common+0x1a>
    bfe0:	e8df f000 	tbb	[pc, r0]
    bfe4:	05432609 	.word	0x05432609
    bfe8:	6b055705 	.word	0x6b055705
    bfec:	9f8a      	.short	0x9f8a
	return 0;
    bfee:	f06f 0015 	mvn.w	r0, #21
}
    bff2:	b007      	add	sp, #28
    bff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bff6:	4b55      	ldr	r3, [pc, #340]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    bff8:	210d      	movs	r1, #13
    bffa:	8818      	ldrh	r0, [r3, #0]
    bffc:	f011 fe17 	bl	1dc2e <bt_hci_cmd_complete_create>
    c000:	210d      	movs	r1, #13
    c002:	6028      	str	r0, [r5, #0]
    c004:	3008      	adds	r0, #8
    c006:	f012 ff9a 	bl	1ef3e <net_buf_simple_add>
    c00a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    c00c:	2202      	movs	r2, #2
	rp->status = 0x00;
    c00e:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    c010:	2106      	movs	r1, #6
	rp->status = 0x00;
    c012:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    c014:	705a      	strb	r2, [r3, #1]
    c016:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    c018:	70da      	strb	r2, [r3, #3]
    c01a:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    c01c:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c01e:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    c020:	71d9      	strb	r1, [r3, #7]
    c022:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    c024:	7258      	strb	r0, [r3, #9]
    c026:	7298      	strb	r0, [r3, #10]
    c028:	72d8      	strb	r0, [r3, #11]
    c02a:	7318      	strb	r0, [r3, #12]
}
    c02c:	b007      	add	sp, #28
    c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c030:	4b46      	ldr	r3, [pc, #280]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    c032:	2141      	movs	r1, #65	; 0x41
    c034:	8818      	ldrh	r0, [r3, #0]
    c036:	f011 fdfa 	bl	1dc2e <bt_hci_cmd_complete_create>
    c03a:	2141      	movs	r1, #65	; 0x41
    c03c:	6028      	str	r0, [r5, #0]
    c03e:	3008      	adds	r0, #8
    c040:	f012 ff7d 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c044:	2400      	movs	r4, #0
    c046:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c048:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c04a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c04e:	4621      	mov	r1, r4
    c050:	f011 fc05 	bl	1d85e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    c054:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    c056:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    c058:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    c05c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    c060:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    c062:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    c064:	70ab      	strb	r3, [r5, #2]
}
    c066:	b007      	add	sp, #28
    c068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c06a:	4b38      	ldr	r3, [pc, #224]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    c06c:	2109      	movs	r1, #9
    c06e:	8818      	ldrh	r0, [r3, #0]
    c070:	f011 fddd 	bl	1dc2e <bt_hci_cmd_complete_create>
    c074:	2109      	movs	r1, #9
    c076:	6028      	str	r0, [r5, #0]
    c078:	3008      	adds	r0, #8
    c07a:	f012 ff60 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c07e:	2400      	movs	r4, #0
    c080:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c084:	2208      	movs	r2, #8
    c086:	4621      	mov	r1, r4
    c088:	f011 fbe9 	bl	1d85e <memset>
	return 0;
    c08c:	4620      	mov	r0, r4
}
    c08e:	b007      	add	sp, #28
    c090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    c092:	6889      	ldr	r1, [r1, #8]
    c094:	2000      	movs	r0, #0
    c096:	f7ff fd27 	bl	bae8 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c09a:	4b2c      	ldr	r3, [pc, #176]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    c09c:	2101      	movs	r1, #1
    c09e:	8818      	ldrh	r0, [r3, #0]
    c0a0:	f011 fdc5 	bl	1dc2e <bt_hci_cmd_complete_create>
    c0a4:	2101      	movs	r1, #1
    c0a6:	4604      	mov	r4, r0
    c0a8:	3008      	adds	r0, #8
    c0aa:	f012 ff48 	bl	1ef3e <net_buf_simple_add>
    c0ae:	4603      	mov	r3, r0
	ccst->status = status;
    c0b0:	2000      	movs	r0, #0
    c0b2:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    c0b4:	602c      	str	r4, [r5, #0]
}
    c0b6:	b007      	add	sp, #28
    c0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    c0ba:	4e25      	ldr	r6, [pc, #148]	; (c150 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c0bc:	4f23      	ldr	r7, [pc, #140]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    c0be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c0c0:	46ec      	mov	ip, sp
    c0c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c0c6:	e896 0003 	ldmia.w	r6, {r0, r1}
    c0ca:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c0ce:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    c0d0:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c0d4:	2116      	movs	r1, #22
    c0d6:	f011 fdaa 	bl	1dc2e <bt_hci_cmd_complete_create>
    c0da:	2116      	movs	r1, #22
    c0dc:	6028      	str	r0, [r5, #0]
    c0de:	3008      	adds	r0, #8
    c0e0:	f012 ff2d 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c0e4:	2400      	movs	r4, #0
    c0e6:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    c0ea:	2215      	movs	r2, #21
    c0ec:	4669      	mov	r1, sp
    c0ee:	f011 fb8b 	bl	1d808 <memcpy>
	return 0;
    c0f2:	4620      	mov	r0, r4
}
    c0f4:	b007      	add	sp, #28
    c0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c0f8:	4b14      	ldr	r3, [pc, #80]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    c0fa:	2118      	movs	r1, #24
    c0fc:	8818      	ldrh	r0, [r3, #0]
    c0fe:	f011 fd96 	bl	1dc2e <bt_hci_cmd_complete_create>
    c102:	2118      	movs	r1, #24
    c104:	6028      	str	r0, [r5, #0]
    c106:	3008      	adds	r0, #8
    c108:	f012 ff19 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c10c:	2400      	movs	r4, #0
    c10e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    c110:	2101      	movs	r1, #1
	rp->status = 0x00;
    c112:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    c116:	f00d fbf3 	bl	19900 <hci_vendor_read_static_addr>
    c11a:	7068      	strb	r0, [r5, #1]
	return 0;
    c11c:	4620      	mov	r0, r4
}
    c11e:	b007      	add	sp, #28
    c120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c122:	4b0a      	ldr	r3, [pc, #40]	; (c14c <hci_vendor_cmd_handle_common+0x178>)
    c124:	2121      	movs	r1, #33	; 0x21
    c126:	8818      	ldrh	r0, [r3, #0]
    c128:	f011 fd81 	bl	1dc2e <bt_hci_cmd_complete_create>
    c12c:	2121      	movs	r1, #33	; 0x21
    c12e:	6028      	str	r0, [r5, #0]
    c130:	3008      	adds	r0, #8
    c132:	f012 ff04 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c136:	4601      	mov	r1, r0
    c138:	2400      	movs	r4, #0
    c13a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    c13e:	3001      	adds	r0, #1
    c140:	f00d fc52 	bl	199e8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    c144:	4620      	mov	r0, r4
}
    c146:	b007      	add	sp, #28
    c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c14a:	bf00      	nop
    c14c:	20002824 	.word	0x20002824
    c150:	00020710 	.word	0x00020710

0000c154 <hci_cmd_handle>:
{
    c154:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    c156:	8983      	ldrh	r3, [r0, #12]
{
    c158:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    c15a:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
    c15c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    c15e:	9409      	str	r4, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    c160:	f240 811e 	bls.w	c3a0 <hci_cmd_handle+0x24c>
	return net_buf_simple_pull_mem(&buf->b, len);
    c164:	4605      	mov	r5, r0
    c166:	460e      	mov	r6, r1
    c168:	3008      	adds	r0, #8
    c16a:	2103      	movs	r1, #3
    c16c:	f012 ff0e 	bl	1ef8c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    c170:	89aa      	ldrh	r2, [r5, #12]
    c172:	7883      	ldrb	r3, [r0, #2]
    c174:	429a      	cmp	r2, r3
    c176:	f0c0 8151 	bcc.w	c41c <hci_cmd_handle+0x2c8>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c17a:	8802      	ldrh	r2, [r0, #0]
    c17c:	4fbc      	ldr	r7, [pc, #752]	; (c470 <hci_cmd_handle+0x31c>)
	switch (BT_OGF(_opcode)) {
    c17e:	f3c2 2385 	ubfx	r3, r2, #10, #6
    c182:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c184:	b290      	uxth	r0, r2
    c186:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
    c188:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    c18c:	d809      	bhi.n	c1a2 <hci_cmd_handle+0x4e>
    c18e:	b1a3      	cbz	r3, c1ba <hci_cmd_handle+0x66>
    c190:	3b01      	subs	r3, #1
    c192:	2b07      	cmp	r3, #7
    c194:	d811      	bhi.n	c1ba <hci_cmd_handle+0x66>
    c196:	e8df f003 	tbb	[pc, r3]
    c19a:	1017      	.short	0x1017
    c19c:	1010eac9 	.word	0x1010eac9
    c1a0:	2610      	.short	0x2610
    c1a2:	2b3f      	cmp	r3, #63	; 0x3f
    c1a4:	d109      	bne.n	c1ba <hci_cmd_handle+0x66>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    c1a6:	4629      	mov	r1, r5
    c1a8:	aa09      	add	r2, sp, #36	; 0x24
    c1aa:	4620      	mov	r0, r4
    c1ac:	f7ff ff12 	bl	bfd4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    c1b0:	3016      	adds	r0, #22
	return evt;
    c1b2:	bf18      	it	ne
    c1b4:	9d09      	ldrne	r5, [sp, #36]	; 0x24
	if (err == -EINVAL) {
    c1b6:	d104      	bne.n	c1c2 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
    c1b8:	8838      	ldrh	r0, [r7, #0]
    c1ba:	2101      	movs	r1, #1
    c1bc:	f011 fd49 	bl	1dc52 <bt_hci_cmd_status_create>
    c1c0:	4605      	mov	r5, r0
}
    c1c2:	4628      	mov	r0, r5
    c1c4:	b00f      	add	sp, #60	; 0x3c
    c1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    c1c8:	2c06      	cmp	r4, #6
    c1ca:	f000 8499 	beq.w	cb00 <hci_cmd_handle+0x9ac>
    c1ce:	2c1d      	cmp	r4, #29
    c1d0:	d1f3      	bne.n	c1ba <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    c1d2:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
    c1d4:	8818      	ldrh	r0, [r3, #0]
    c1d6:	f004 fa6d 	bl	106b4 <ll_version_ind_send>
    c1da:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c1dc:	8838      	ldrh	r0, [r7, #0]
    c1de:	f011 fd38 	bl	1dc52 <bt_hci_cmd_status_create>
    c1e2:	4605      	mov	r5, r0
}
    c1e4:	e7ed      	b.n	c1c2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    c1e6:	1e62      	subs	r2, r4, #1
    c1e8:	2a4d      	cmp	r2, #77	; 0x4d
    c1ea:	d8e6      	bhi.n	c1ba <hci_cmd_handle+0x66>
    c1ec:	a301      	add	r3, pc, #4	; (adr r3, c1f4 <hci_cmd_handle+0xa0>)
    c1ee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c1f2:	bf00      	nop
    c1f4:	0000c7d9 	.word	0x0000c7d9
    c1f8:	0000c853 	.word	0x0000c853
    c1fc:	0000c80b 	.word	0x0000c80b
    c200:	0000c1bb 	.word	0x0000c1bb
    c204:	0000c801 	.word	0x0000c801
    c208:	0000c7e5 	.word	0x0000c7e5
    c20c:	0000c91d 	.word	0x0000c91d
    c210:	0000c911 	.word	0x0000c911
    c214:	0000c905 	.word	0x0000c905
    c218:	0000c8fb 	.word	0x0000c8fb
    c21c:	0000c8e3 	.word	0x0000c8e3
    c220:	0000c8b3 	.word	0x0000c8b3
    c224:	0000c87f 	.word	0x0000c87f
    c228:	0000c877 	.word	0x0000c877
    c22c:	0000cadd 	.word	0x0000cadd
    c230:	0000cacb 	.word	0x0000cacb
    c234:	0000cac3 	.word	0x0000cac3
    c238:	0000cabb 	.word	0x0000cabb
    c23c:	0000ca93 	.word	0x0000ca93
    c240:	0000ca8b 	.word	0x0000ca8b
    c244:	0000ca5f 	.word	0x0000ca5f
    c248:	0000ca49 	.word	0x0000ca49
    c24c:	0000ca13 	.word	0x0000ca13
    c250:	0000c9ef 	.word	0x0000c9ef
    c254:	0000c9cf 	.word	0x0000c9cf
    c258:	0000c9c5 	.word	0x0000c9c5
    c25c:	0000c9b5 	.word	0x0000c9b5
    c260:	0000c985 	.word	0x0000c985
    c264:	0000c1bb 	.word	0x0000c1bb
    c268:	0000c1bb 	.word	0x0000c1bb
    c26c:	0000c1bb 	.word	0x0000c1bb
    c270:	0000c96f 	.word	0x0000c96f
    c274:	0000c939 	.word	0x0000c939
    c278:	0000c7c9 	.word	0x0000c7c9
    c27c:	0000c793 	.word	0x0000c793
    c280:	0000c787 	.word	0x0000c787
    c284:	0000c1bb 	.word	0x0000c1bb
    c288:	0000c1bb 	.word	0x0000c1bb
    c28c:	0000c779 	.word	0x0000c779
    c290:	0000c771 	.word	0x0000c771
    c294:	0000c76b 	.word	0x0000c76b
    c298:	0000c749 	.word	0x0000c749
    c29c:	0000c71b 	.word	0x0000c71b
    c2a0:	0000c6ed 	.word	0x0000c6ed
    c2a4:	0000c6e3 	.word	0x0000c6e3
    c2a8:	0000c6d5 	.word	0x0000c6d5
    c2ac:	0000c689 	.word	0x0000c689
    c2b0:	0000c62f 	.word	0x0000c62f
    c2b4:	0000c611 	.word	0x0000c611
    c2b8:	0000c5b5 	.word	0x0000c5b5
    c2bc:	0000c1bb 	.word	0x0000c1bb
    c2c0:	0000c1bb 	.word	0x0000c1bb
    c2c4:	0000c1bb 	.word	0x0000c1bb
    c2c8:	0000c1bb 	.word	0x0000c1bb
    c2cc:	0000c1bb 	.word	0x0000c1bb
    c2d0:	0000c1bb 	.word	0x0000c1bb
    c2d4:	0000c1bb 	.word	0x0000c1bb
    c2d8:	0000c1bb 	.word	0x0000c1bb
    c2dc:	0000c1bb 	.word	0x0000c1bb
    c2e0:	0000c1bb 	.word	0x0000c1bb
    c2e4:	0000c1bb 	.word	0x0000c1bb
    c2e8:	0000c1bb 	.word	0x0000c1bb
    c2ec:	0000c1bb 	.word	0x0000c1bb
    c2f0:	0000c1bb 	.word	0x0000c1bb
    c2f4:	0000c1bb 	.word	0x0000c1bb
    c2f8:	0000c1bb 	.word	0x0000c1bb
    c2fc:	0000c1bb 	.word	0x0000c1bb
    c300:	0000c1bb 	.word	0x0000c1bb
    c304:	0000c1bb 	.word	0x0000c1bb
    c308:	0000c1bb 	.word	0x0000c1bb
    c30c:	0000c1bb 	.word	0x0000c1bb
    c310:	0000c1bb 	.word	0x0000c1bb
    c314:	0000c1bb 	.word	0x0000c1bb
    c318:	0000c1bb 	.word	0x0000c1bb
    c31c:	0000c591 	.word	0x0000c591
    c320:	0000c1bb 	.word	0x0000c1bb
    c324:	0000c1bb 	.word	0x0000c1bb
    c328:	0000c571 	.word	0x0000c571
	switch (ocf) {
    c32c:	2c63      	cmp	r4, #99	; 0x63
    c32e:	f000 83f3 	beq.w	cb18 <hci_cmd_handle+0x9c4>
    c332:	d857      	bhi.n	c3e4 <hci_cmd_handle+0x290>
    c334:	2c03      	cmp	r4, #3
    c336:	f000 83f2 	beq.w	cb1e <hci_cmd_handle+0x9ca>
    c33a:	2c2d      	cmp	r4, #45	; 0x2d
    c33c:	d13e      	bne.n	c3bc <hci_cmd_handle+0x268>
		read_tx_power_level(cmd, evt);
    c33e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c340:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    c342:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    c344:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c346:	f011 fc72 	bl	1dc2e <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    c34a:	2104      	movs	r1, #4
    c34c:	9009      	str	r0, [sp, #36]	; 0x24
    c34e:	3008      	adds	r0, #8
    c350:	f012 fdf5 	bl	1ef3e <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    c354:	b2b5      	uxth	r5, r6
    c356:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    c358:	1cc3      	adds	r3, r0, #3
    c35a:	4629      	mov	r1, r5
    c35c:	463a      	mov	r2, r7
    c35e:	2002      	movs	r0, #2
    c360:	f7ff fbe4 	bl	bb2c <ll_tx_pwr_lvl_get>
	rp->status = status;
    c364:	7020      	strb	r0, [r4, #0]
	return evt;
    c366:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c368:	f8a4 6001 	strh.w	r6, [r4, #1]
}
    c36c:	e729      	b.n	c1c2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    c36e:	1e62      	subs	r2, r4, #1
    c370:	2a08      	cmp	r2, #8
    c372:	f63f af22 	bhi.w	c1ba <hci_cmd_handle+0x66>
    c376:	a301      	add	r3, pc, #4	; (adr r3, c37c <hci_cmd_handle+0x228>)
    c378:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c37c:	0000c53b 	.word	0x0000c53b
    c380:	0000c489 	.word	0x0000c489
    c384:	0000c447 	.word	0x0000c447
    c388:	0000c1bb 	.word	0x0000c1bb
    c38c:	0000c1bb 	.word	0x0000c1bb
    c390:	0000c1bb 	.word	0x0000c1bb
    c394:	0000c1bb 	.word	0x0000c1bb
    c398:	0000c1bb 	.word	0x0000c1bb
    c39c:	0000c425 	.word	0x0000c425
    c3a0:	4934      	ldr	r1, [pc, #208]	; (c474 <hci_cmd_handle+0x320>)
    c3a2:	4b35      	ldr	r3, [pc, #212]	; (c478 <hci_cmd_handle+0x324>)
		BT_ERR("No HCI Command header");
    c3a4:	4835      	ldr	r0, [pc, #212]	; (c47c <hci_cmd_handle+0x328>)
    c3a6:	1ac9      	subs	r1, r1, r3
    c3a8:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    c3aa:	0189      	lsls	r1, r1, #6
    c3ac:	f041 0101 	orr.w	r1, r1, #1
    c3b0:	f010 fbb3 	bl	1cb1a <log_0>
		return NULL;
    c3b4:	4625      	mov	r5, r4
}
    c3b6:	4628      	mov	r0, r5
    c3b8:	b00f      	add	sp, #60	; 0x3c
    c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    c3bc:	2c01      	cmp	r4, #1
    c3be:	f47f aefc 	bne.w	c1ba <hci_cmd_handle+0x66>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c3c2:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
    c3c4:	4b2e      	ldr	r3, [pc, #184]	; (c480 <hci_cmd_handle+0x32c>)
    c3c6:	6811      	ldr	r1, [r2, #0]
    c3c8:	6852      	ldr	r2, [r2, #4]
    c3ca:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c3cc:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c3ce:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c3d0:	f011 fc2d 	bl	1dc2e <bt_hci_cmd_complete_create>
    c3d4:	2101      	movs	r1, #1
    c3d6:	4605      	mov	r5, r0
    c3d8:	3008      	adds	r0, #8
    c3da:	f012 fdb0 	bl	1ef3e <net_buf_simple_add>
	ccst->status = status;
    c3de:	2300      	movs	r3, #0
    c3e0:	7003      	strb	r3, [r0, #0]
}
    c3e2:	e6ee      	b.n	c1c2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    c3e4:	2c7b      	cmp	r4, #123	; 0x7b
    c3e6:	f000 83c0 	beq.w	cb6a <hci_cmd_handle+0xa16>
    c3ea:	2c7c      	cmp	r4, #124	; 0x7c
    c3ec:	f47f aee5 	bne.w	c1ba <hci_cmd_handle+0x66>
		write_auth_payload_timeout(cmd, evt);
    c3f0:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c3f2:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c3f4:	8859      	ldrh	r1, [r3, #2]
    c3f6:	b2b0      	uxth	r0, r6
    c3f8:	f004 fa96 	bl	10928 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    c3fc:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c3fe:	2103      	movs	r1, #3
    c400:	8838      	ldrh	r0, [r7, #0]
    c402:	f011 fc14 	bl	1dc2e <bt_hci_cmd_complete_create>
    c406:	2103      	movs	r1, #3
    c408:	4603      	mov	r3, r0
    c40a:	3008      	adds	r0, #8
    c40c:	9309      	str	r3, [sp, #36]	; 0x24
    c40e:	f012 fd96 	bl	1ef3e <net_buf_simple_add>
	rp->status = status;
    c412:	7004      	strb	r4, [r0, #0]
	return evt;
    c414:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c416:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
    c41a:	e6d2      	b.n	c1c2 <hci_cmd_handle+0x6e>
    c41c:	4915      	ldr	r1, [pc, #84]	; (c474 <hci_cmd_handle+0x320>)
    c41e:	4b16      	ldr	r3, [pc, #88]	; (c478 <hci_cmd_handle+0x324>)
		BT_ERR("Invalid HCI CMD packet length");
    c420:	4818      	ldr	r0, [pc, #96]	; (c484 <hci_cmd_handle+0x330>)
    c422:	e7c0      	b.n	c3a6 <hci_cmd_handle+0x252>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c424:	2107      	movs	r1, #7
    c426:	f011 fc02 	bl	1dc2e <bt_hci_cmd_complete_create>
    c42a:	2107      	movs	r1, #7
    c42c:	4603      	mov	r3, r0
    c42e:	3008      	adds	r0, #8
    c430:	9309      	str	r3, [sp, #36]	; 0x24
    c432:	f012 fd84 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c436:	4601      	mov	r1, r0
    c438:	2000      	movs	r0, #0
    c43a:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    c43e:	f7ff fb35 	bl	baac <ll_addr_get>
	return evt;
    c442:	9d09      	ldr	r5, [sp, #36]	; 0x24
}
    c444:	e6bd      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c446:	2109      	movs	r1, #9
    c448:	f011 fbf1 	bl	1dc2e <bt_hci_cmd_complete_create>
    c44c:	2109      	movs	r1, #9
    c44e:	4603      	mov	r3, r0
    c450:	3008      	adds	r0, #8
    c452:	9309      	str	r3, [sp, #36]	; 0x24
    c454:	f012 fd73 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c458:	2100      	movs	r1, #0
    c45a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c45c:	2208      	movs	r2, #8
	rp->status = 0x00;
    c45e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c462:	f011 f9fc 	bl	1d85e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c466:	2360      	movs	r3, #96	; 0x60
	return evt;
    c468:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
    c46a:	7163      	strb	r3, [r4, #5]
}
    c46c:	e6a9      	b.n	c1c2 <hci_cmd_handle+0x6e>
    c46e:	bf00      	nop
    c470:	20002824 	.word	0x20002824
    c474:	0001ffdc 	.word	0x0001ffdc
    c478:	0001ff94 	.word	0x0001ff94
    c47c:	00020728 	.word	0x00020728
    c480:	20000120 	.word	0x20000120
    c484:	00020740 	.word	0x00020740
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c488:	2141      	movs	r1, #65	; 0x41
    c48a:	f011 fbd0 	bl	1dc2e <bt_hci_cmd_complete_create>
    c48e:	2141      	movs	r1, #65	; 0x41
    c490:	4603      	mov	r3, r0
    c492:	3008      	adds	r0, #8
    c494:	9309      	str	r3, [sp, #36]	; 0x24
    c496:	f012 fd52 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c49a:	2100      	movs	r1, #0
    c49c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c49e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c4a0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c4a4:	f011 f9db 	bl	1d85e <memset>
	rp->commands[0] |= BIT(5);
    c4a8:	7861      	ldrb	r1, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    c4aa:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[10] |= BIT(2);
    c4ac:	7ae2      	ldrb	r2, [r4, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    c4ae:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[0] |= BIT(5);
    c4b0:	f041 0120 	orr.w	r1, r1, #32
    c4b4:	7061      	strb	r1, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    c4b6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	return evt;
    c4ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->commands[14] |= BIT(3) | BIT(5);
    c4bc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    c4c0:	f061 010f 	orn	r1, r1, #15
    c4c4:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    c4c8:	73e3      	strb	r3, [r4, #15]
	rp->commands[35] |= BIT(3);
    c4ca:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[15] |= BIT(1);
    c4ce:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[10] |= BIT(2);
    c4d0:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c4d4:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[15] |= BIT(1);
    c4d8:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c4dc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[10] |= BIT(2);
    c4e0:	72e2      	strb	r2, [r4, #11]
	rp->commands[39] |= BIT(2);
    c4e2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c4e6:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[15] |= BIT(1);
    c4e8:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c4ea:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    c4ec:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[39] |= BIT(2);
    c4f0:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[22] |= BIT(2);
    c4f4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c4f8:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    c4fc:	71a0      	strb	r0, [r4, #6]
	rp->commands[38] |= BIT(7);
    c4fe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[39] |= BIT(2);
    c502:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c506:	75e2      	strb	r2, [r4, #23]
	rp->commands[28] |= BIT(3);
    c508:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c50a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c50e:	76a3      	strb	r3, [r4, #26]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c510:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    c514:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c518:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(1) | BIT(2);
    c51c:	f041 010f 	orr.w	r1, r1, #15
	rp->commands[26] |= BIT(4) | BIT(5);
    c520:	20ff      	movs	r0, #255	; 0xff
	rp->commands[32] |= BIT(4) | BIT(5);
    c522:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c526:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(1) | BIT(2);
    c52a:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c52c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
    c530:	76e0      	strb	r0, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c532:	7720      	strb	r0, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c534:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
    c538:	e643      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c53a:	2109      	movs	r1, #9
    c53c:	f011 fb77 	bl	1dc2e <bt_hci_cmd_complete_create>
    c540:	2109      	movs	r1, #9
    c542:	4603      	mov	r3, r0
    c544:	3008      	adds	r0, #8
    c546:	9309      	str	r3, [sp, #36]	; 0x24
    c548:	f012 fcf9 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c54c:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    c54e:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    c554:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    c556:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c558:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
    c55c:	7083      	strb	r3, [r0, #2]
    c55e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c560:	2305      	movs	r3, #5
	return evt;
    c562:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->lmp_version = LL_VERSION_NUMBER;
    c564:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c566:	7144      	strb	r4, [r0, #5]
    c568:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c56a:	71c2      	strb	r2, [r0, #7]
    c56c:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    c56e:	e628      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_set_privacy_mode(cmd, evt);
    c570:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c572:	79c1      	ldrb	r1, [r0, #7]
    c574:	f009 f9fa 	bl	1596c <ll_priv_mode_set>
    c578:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c57a:	8838      	ldrh	r0, [r7, #0]
    c57c:	2101      	movs	r1, #1
    c57e:	f011 fb56 	bl	1dc2e <bt_hci_cmd_complete_create>
    c582:	2101      	movs	r1, #1
    c584:	4605      	mov	r5, r0
    c586:	3008      	adds	r0, #8
    c588:	f012 fcd9 	bl	1ef3e <net_buf_simple_add>
	ccst->status = status;
    c58c:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
    c58e:	e618      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c590:	2103      	movs	r1, #3
    c592:	f011 fb4c 	bl	1dc2e <bt_hci_cmd_complete_create>
    c596:	2103      	movs	r1, #3
    c598:	4603      	mov	r3, r0
    c59a:	3008      	adds	r0, #8
    c59c:	9309      	str	r3, [sp, #36]	; 0x24
    c59e:	f012 fcce 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c5a2:	4601      	mov	r1, r0
    c5a4:	2300      	movs	r3, #0
    c5a6:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    c5aa:	3001      	adds	r0, #1
    c5ac:	f7ff face 	bl	bb4c <ll_tx_pwr_get>
	return evt;
    c5b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c5b2:	e606      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_set_phy(cmd, evt);
    c5b4:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c5b6:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
    c5b8:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    c5ba:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    c5bc:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c5c0:	07de      	lsls	r6, r3, #31
		cmd->tx_phys |= mask_phys;
    c5c2:	bf44      	itt	mi
    c5c4:	f041 0103 	orrmi.w	r1, r1, #3
    c5c8:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c5ca:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
    c5ce:	7913      	ldrb	r3, [r2, #4]
    c5d0:	bf1c      	itt	ne
    c5d2:	f043 0303 	orrne.w	r3, r3, #3
    c5d6:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    c5d8:	ea43 0201 	orr.w	r2, r3, r1
    c5dc:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    c5e0:	f040 82e9 	bne.w	cbb6 <hci_cmd_handle+0xa62>
	if (!(cmd->tx_phys & 0x07) ||
    c5e4:	074e      	lsls	r6, r1, #29
    c5e6:	f000 82e0 	beq.w	cbaa <hci_cmd_handle+0xa56>
    c5ea:	075a      	lsls	r2, r3, #29
    c5ec:	f000 82dd 	beq.w	cbaa <hci_cmd_handle+0xa56>
	if (phy_opts & 0x03) {
    c5f0:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    c5f4:	bf1c      	itt	ne
    c5f6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    c5fa:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    c5fe:	4628      	mov	r0, r5
    c600:	f004 f91c 	bl	1083c <ll_phy_req_send>
    c604:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c606:	8838      	ldrh	r0, [r7, #0]
    c608:	f011 fb23 	bl	1dc52 <bt_hci_cmd_status_create>
    c60c:	4605      	mov	r5, r0
    c60e:	e5d8      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_set_default_phy(cmd, evt);
    c610:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c612:	781a      	ldrb	r2, [r3, #0]
    c614:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    c616:	bf4a      	itet	mi
    c618:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c61a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    c61c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c61e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    c620:	bf4a      	itet	mi
    c622:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c624:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    c626:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c628:	f004 f8fe 	bl	10828 <ll_phy_default_set>
    c62c:	e7a4      	b.n	c578 <hci_cmd_handle+0x424>
	handle = sys_le16_to_cpu(cmd->handle);
    c62e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c630:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    c632:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c634:	f011 fafb 	bl	1dc2e <bt_hci_cmd_complete_create>
    c638:	2105      	movs	r1, #5
    c63a:	4603      	mov	r3, r0
    c63c:	3008      	adds	r0, #8
    c63e:	9309      	str	r3, [sp, #36]	; 0x24
    c640:	f012 fc7d 	bl	1ef3e <net_buf_simple_add>
    c644:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c646:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    c648:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c64a:	1ce1      	adds	r1, r4, #3
    c64c:	f004 f8ce 	bl	107ec <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    c650:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
    c652:	7020      	strb	r0, [r4, #0]
    c654:	2b00      	cmp	r3, #0
    c656:	fa93 f2a3 	rbit	r2, r3
    c65a:	7923      	ldrb	r3, [r4, #4]
    c65c:	fab2 f282 	clz	r2, r2
    c660:	bf08      	it	eq
    c662:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    c666:	2b00      	cmp	r3, #0
    c668:	fa93 f3a3 	rbit	r3, r3
    c66c:	fab3 f383 	clz	r3, r3
    c670:	f102 0201 	add.w	r2, r2, #1
    c674:	bf08      	it	eq
    c676:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    c67a:	70e2      	strb	r2, [r4, #3]
    c67c:	3301      	adds	r3, #1
	return evt;
    c67e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    c680:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
    c682:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
    c686:	e59c      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c688:	2109      	movs	r1, #9
    c68a:	f011 fad0 	bl	1dc2e <bt_hci_cmd_complete_create>
    c68e:	2109      	movs	r1, #9
    c690:	4603      	mov	r3, r0
    c692:	3008      	adds	r0, #8
    c694:	9309      	str	r3, [sp, #36]	; 0x24
    c696:	f012 fc52 	bl	1ef3e <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    c69a:	ab0a      	add	r3, sp, #40	; 0x28
    c69c:	4604      	mov	r4, r0
    c69e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    c6a2:	a908      	add	r1, sp, #32
    c6a4:	f10d 001e 	add.w	r0, sp, #30
    c6a8:	f004 f894 	bl	107d4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c6ac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c6b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    c6b4:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c6b8:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    c6bc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c6c0:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    c6c4:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c6c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c6ca:	7022      	strb	r2, [r4, #0]
	return evt;
    c6cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c6ce:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    c6d2:	e576      	b.n	c1c2 <hci_cmd_handle+0x6e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    c6d4:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
    c6d6:	8818      	ldrh	r0, [r3, #0]
    c6d8:	f009 f93e 	bl	15958 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c6dc:	8838      	ldrh	r0, [r7, #0]
    c6de:	2101      	movs	r1, #1
    c6e0:	e676      	b.n	c3d0 <hci_cmd_handle+0x27c>
	status = ll_rl_enable(cmd->enable);
    c6e2:	68ab      	ldr	r3, [r5, #8]
    c6e4:	7818      	ldrb	r0, [r3, #0]
    c6e6:	f009 f91d 	bl	15924 <ll_rl_enable>
    c6ea:	e745      	b.n	c578 <hci_cmd_handle+0x424>
	memcpy(dst, src, sizeof(*dst));
    c6ec:	2207      	movs	r2, #7
    c6ee:	68a9      	ldr	r1, [r5, #8]
    c6f0:	a80a      	add	r0, sp, #40	; 0x28
    c6f2:	f011 f889 	bl	1d808 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c6f6:	2107      	movs	r1, #7
    c6f8:	8838      	ldrh	r0, [r7, #0]
    c6fa:	f011 fa98 	bl	1dc2e <bt_hci_cmd_complete_create>
    c6fe:	2107      	movs	r1, #7
    c700:	4603      	mov	r3, r0
    c702:	3008      	adds	r0, #8
    c704:	9309      	str	r3, [sp, #36]	; 0x24
    c706:	f012 fc1a 	bl	1ef3e <net_buf_simple_add>
    c70a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    c70c:	1c41      	adds	r1, r0, #1
    c70e:	a80a      	add	r0, sp, #40	; 0x28
    c710:	f009 f8d6 	bl	158c0 <ll_rl_lrpa_get>
    c714:	7020      	strb	r0, [r4, #0]
	return evt;
    c716:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c718:	e553      	b.n	c1c2 <hci_cmd_handle+0x6e>
    c71a:	2207      	movs	r2, #7
    c71c:	68a9      	ldr	r1, [r5, #8]
    c71e:	a80a      	add	r0, sp, #40	; 0x28
    c720:	f011 f872 	bl	1d808 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c724:	2107      	movs	r1, #7
    c726:	8838      	ldrh	r0, [r7, #0]
    c728:	f011 fa81 	bl	1dc2e <bt_hci_cmd_complete_create>
    c72c:	2107      	movs	r1, #7
    c72e:	4603      	mov	r3, r0
    c730:	3008      	adds	r0, #8
    c732:	9309      	str	r3, [sp, #36]	; 0x24
    c734:	f012 fc03 	bl	1ef3e <net_buf_simple_add>
    c738:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    c73a:	1c41      	adds	r1, r0, #1
    c73c:	a80a      	add	r0, sp, #40	; 0x28
    c73e:	f009 f885 	bl	1584c <ll_rl_crpa_get>
    c742:	7020      	strb	r0, [r4, #0]
	return evt;
    c744:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c746:	e53c      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c748:	2102      	movs	r1, #2
    c74a:	f011 fa70 	bl	1dc2e <bt_hci_cmd_complete_create>
    c74e:	2102      	movs	r1, #2
    c750:	4603      	mov	r3, r0
    c752:	3008      	adds	r0, #8
    c754:	9309      	str	r3, [sp, #36]	; 0x24
    c756:	f012 fbf2 	bl	1ef3e <net_buf_simple_add>
    c75a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    c75c:	f008 ff36 	bl	155cc <ll_rl_size_get>
	rp->status = 0x00;
    c760:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    c762:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    c764:	7023      	strb	r3, [r4, #0]
	return evt;
    c766:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c768:	e52b      	b.n	c1c2 <hci_cmd_handle+0x6e>
	status = ll_rl_clear();
    c76a:	f008 ff31 	bl	155d0 <ll_rl_clear>
    c76e:	e703      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_rl_remove(&cmd->peer_id_addr);
    c770:	68a8      	ldr	r0, [r5, #8]
    c772:	f008 ff6f 	bl	15654 <ll_rl_remove>
    c776:	e6ff      	b.n	c578 <hci_cmd_handle+0x424>
		le_add_dev_to_rl(cmd, evt);
    c778:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    c77a:	f100 0217 	add.w	r2, r0, #23
    c77e:	1dc1      	adds	r1, r0, #7
    c780:	f009 fb30 	bl	15de4 <ll_rl_add>
    c784:	e6f8      	b.n	c578 <hci_cmd_handle+0x424>
		le_write_default_data_len(cmd, evt);
    c786:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    c788:	8859      	ldrh	r1, [r3, #2]
    c78a:	8818      	ldrh	r0, [r3, #0]
    c78c:	f004 f818 	bl	107c0 <ll_length_default_set>
    c790:	e6f2      	b.n	c578 <hci_cmd_handle+0x424>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c792:	2105      	movs	r1, #5
    c794:	f011 fa4b 	bl	1dc2e <bt_hci_cmd_complete_create>
    c798:	2105      	movs	r1, #5
    c79a:	4603      	mov	r3, r0
    c79c:	3008      	adds	r0, #8
    c79e:	9309      	str	r3, [sp, #36]	; 0x24
    c7a0:	f012 fbcd 	bl	1ef3e <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    c7a4:	a90a      	add	r1, sp, #40	; 0x28
    c7a6:	4604      	mov	r4, r0
    c7a8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    c7ac:	f003 fffc 	bl	107a8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c7b0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c7b4:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    c7b8:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c7ba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c7be:	7022      	strb	r2, [r4, #0]
	return evt;
    c7c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c7c2:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    c7c6:	e4fc      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_set_data_len(cmd, evt);
    c7c8:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c7ca:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c7cc:	889a      	ldrh	r2, [r3, #4]
    c7ce:	8859      	ldrh	r1, [r3, #2]
    c7d0:	b2b0      	uxth	r0, r6
    c7d2:	f003 ff95 	bl	10700 <ll_length_req_send>
    c7d6:	e611      	b.n	c3fc <hci_cmd_handle+0x2a8>
    c7d8:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
    c7da:	4bbd      	ldr	r3, [pc, #756]	; (cad0 <hci_cmd_handle+0x97c>)
    c7dc:	6811      	ldr	r1, [r2, #0]
    c7de:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c7e0:	6019      	str	r1, [r3, #0]
    c7e2:	e5f3      	b.n	c3cc <hci_cmd_handle+0x278>
		le_set_adv_param(cmd, evt);
    c7e4:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    c7e6:	7ba5      	ldrb	r5, [r4, #14]
    c7e8:	79a3      	ldrb	r3, [r4, #6]
    c7ea:	7962      	ldrb	r2, [r4, #5]
    c7ec:	7921      	ldrb	r1, [r4, #4]
    c7ee:	8820      	ldrh	r0, [r4, #0]
    c7f0:	9502      	str	r5, [sp, #8]
    c7f2:	7b65      	ldrb	r5, [r4, #13]
    c7f4:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    c7f6:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    c7f8:	9400      	str	r4, [sp, #0]
    c7fa:	f002 fc39 	bl	f070 <ll_adv_params_set>
    c7fe:	e6bb      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    c800:	68a9      	ldr	r1, [r5, #8]
    c802:	2001      	movs	r0, #1
    c804:	f7ff f970 	bl	bae8 <ll_addr_set>
    c808:	e6b6      	b.n	c578 <hci_cmd_handle+0x424>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c80a:	2109      	movs	r1, #9
    c80c:	f011 fa0f 	bl	1dc2e <bt_hci_cmd_complete_create>
    c810:	2109      	movs	r1, #9
    c812:	4603      	mov	r3, r0
    c814:	3008      	adds	r0, #8
    c816:	9309      	str	r3, [sp, #36]	; 0x24
    c818:	f012 fb91 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c81c:	2100      	movs	r1, #0
    c81e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c820:	2208      	movs	r2, #8
	rp->status = 0x00;
    c822:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c826:	f011 f81a 	bl	1d85e <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    c82a:	f000 ff41 	bl	d6b0 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    c82e:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    c830:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    c834:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    c836:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
    c838:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    c83a:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
    c83c:	70a5      	strb	r5, [r4, #2]
    c83e:	f3c1 2007 	ubfx	r0, r1, #8, #8
    c842:	7123      	strb	r3, [r4, #4]
    c844:	0a13      	lsrs	r3, r2, #8
	return evt;
    c846:	9d09      	ldr	r5, [sp, #36]	; 0x24
	dst[0] = val;
    c848:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
    c84a:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
    c84c:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
    c84e:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
    c850:	e4b7      	b.n	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c852:	2104      	movs	r1, #4
    c854:	f011 f9eb 	bl	1dc2e <bt_hci_cmd_complete_create>
    c858:	2104      	movs	r1, #4
    c85a:	4603      	mov	r3, r0
    c85c:	3008      	adds	r0, #8
    c85e:	9309      	str	r3, [sp, #36]	; 0x24
    c860:	f012 fb6d 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c864:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c866:	2103      	movs	r1, #3
	rp->status = 0x00;
    c868:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    c86a:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c86c:	70c1      	strb	r1, [r0, #3]
	return evt;
    c86e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    c870:	7042      	strb	r2, [r0, #1]
    c872:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    c874:	e4a5      	b.n	c1c2 <hci_cmd_handle+0x6e>
	status = ll_connect_disable(node_rx);
    c876:	4630      	mov	r0, r6
    c878:	f008 f914 	bl	14aa4 <ll_connect_disable>
    c87c:	e67c      	b.n	c578 <hci_cmd_handle+0x424>
		le_create_connection(cmd, evt);
    c87e:	68ac      	ldr	r4, [r5, #8]
	status = ll_create_connection(scan_interval, scan_window,
    c880:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    c884:	7963      	ldrb	r3, [r4, #5]
    c886:	7922      	ldrb	r2, [r4, #4]
    c888:	8861      	ldrh	r1, [r4, #2]
    c88a:	8820      	ldrh	r0, [r4, #0]
    c88c:	9504      	str	r5, [sp, #16]
    c88e:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    c892:	9503      	str	r5, [sp, #12]
    c894:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    c898:	9502      	str	r5, [sp, #8]
    c89a:	7b25      	ldrb	r5, [r4, #12]
    c89c:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
    c89e:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
    c8a0:	9400      	str	r4, [sp, #0]
    c8a2:	f7f4 ff4d 	bl	1740 <ll_create_connection>
    c8a6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c8a8:	8838      	ldrh	r0, [r7, #0]
    c8aa:	f011 f9d2 	bl	1dc52 <bt_hci_cmd_status_create>
    c8ae:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    c8b0:	e487      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_set_scan_enable(cmd, evt);
    c8b2:	68ab      	ldr	r3, [r5, #8]
	if (cmd->enable && cmd->filter_dup) {
    c8b4:	7818      	ldrb	r0, [r3, #0]
    c8b6:	2800      	cmp	r0, #0
    c8b8:	f000 8172 	beq.w	cba0 <hci_cmd_handle+0xa4c>
    c8bc:	785b      	ldrb	r3, [r3, #1]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	f000 816e 	beq.w	cba0 <hci_cmd_handle+0xa4c>
		dup_count = 0;
    c8c4:	4983      	ldr	r1, [pc, #524]	; (cad4 <hci_cmd_handle+0x980>)
		dup_curr = 0U;
    c8c6:	4a84      	ldr	r2, [pc, #528]	; (cad8 <hci_cmd_handle+0x984>)
		dup_count = 0;
    c8c8:	2300      	movs	r3, #0
    c8ca:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
    c8cc:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    c8ce:	f002 fe11 	bl	f4f4 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    c8d2:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
    c8d4:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c8d6:	f04f 0101 	mov.w	r1, #1
    c8da:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
    c8dc:	bf08      	it	eq
    c8de:	2600      	moveq	r6, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c8e0:	e64d      	b.n	c57e <hci_cmd_handle+0x42a>
		le_set_scan_param(cmd, evt);
    c8e2:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    c8e4:	7963      	ldrb	r3, [r4, #5]
    c8e6:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c8ea:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c8ee:	7820      	ldrb	r0, [r4, #0]
    c8f0:	79a4      	ldrb	r4, [r4, #6]
    c8f2:	9400      	str	r4, [sp, #0]
    c8f4:	f7f4 f838 	bl	968 <ll_scan_params_set>
    c8f8:	e63e      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_adv_enable(cmd->enable);
    c8fa:	68ab      	ldr	r3, [r5, #8]
    c8fc:	7818      	ldrb	r0, [r3, #0]
    c8fe:	f7f3 fdcb 	bl	498 <ll_adv_enable>
    c902:	e639      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    c904:	68a9      	ldr	r1, [r5, #8]
    c906:	f811 0b01 	ldrb.w	r0, [r1], #1
    c90a:	f002 fd4d 	bl	f3a8 <ll_adv_scan_rsp_set>
    c90e:	e633      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    c910:	68a9      	ldr	r1, [r5, #8]
    c912:	f811 0b01 	ldrb.w	r0, [r1], #1
    c916:	f002 fc4d 	bl	f1b4 <ll_adv_data_set>
    c91a:	e62d      	b.n	c578 <hci_cmd_handle+0x424>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c91c:	2102      	movs	r1, #2
    c91e:	f011 f986 	bl	1dc2e <bt_hci_cmd_complete_create>
    c922:	2102      	movs	r1, #2
    c924:	4603      	mov	r3, r0
    c926:	3008      	adds	r0, #8
    c928:	9309      	str	r3, [sp, #36]	; 0x24
    c92a:	f012 fb08 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    c92e:	2300      	movs	r3, #0
    c930:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c932:	7043      	strb	r3, [r0, #1]
	return evt;
    c934:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c936:	e444      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_conn_param_req_neg_reply(cmd, evt);
    c938:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c93a:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
    c93c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c93e:	7892      	ldrb	r2, [r2, #2]
    c940:	9300      	str	r3, [sp, #0]
    c942:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c946:	2102      	movs	r1, #2
    c948:	b2a0      	uxth	r0, r4
    c94a:	f003 fd8f 	bl	1046c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c94e:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c950:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c952:	8838      	ldrh	r0, [r7, #0]
    c954:	f011 f96b 	bl	1dc2e <bt_hci_cmd_complete_create>
    c958:	2103      	movs	r1, #3
    c95a:	4603      	mov	r3, r0
    c95c:	3008      	adds	r0, #8
    c95e:	9309      	str	r3, [sp, #36]	; 0x24
    c960:	f012 faed 	bl	1ef3e <net_buf_simple_add>
	rp->status = status;
    c964:	7005      	strb	r5, [r0, #0]
	return evt;
    c966:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c968:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
    c96c:	e429      	b.n	c1c2 <hci_cmd_handle+0x6e>
		le_conn_param_req_reply(cmd, evt);
    c96e:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c970:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c972:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c974:	8853      	ldrh	r3, [r2, #2]
    c976:	9102      	str	r1, [sp, #8]
    c978:	88d1      	ldrh	r1, [r2, #6]
    c97a:	9101      	str	r1, [sp, #4]
    c97c:	8891      	ldrh	r1, [r2, #4]
    c97e:	9100      	str	r1, [sp, #0]
    c980:	2200      	movs	r2, #0
    c982:	e7e0      	b.n	c946 <hci_cmd_handle+0x7f2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c984:	2109      	movs	r1, #9
    c986:	f011 f952 	bl	1dc2e <bt_hci_cmd_complete_create>
    c98a:	2109      	movs	r1, #9
    c98c:	4603      	mov	r3, r0
    c98e:	3008      	adds	r0, #8
    c990:	9309      	str	r3, [sp, #36]	; 0x24
    c992:	f012 fad4 	bl	1ef3e <net_buf_simple_add>
	dst[0] = val;
    c996:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    c998:	2200      	movs	r2, #0
    c99a:	213f      	movs	r1, #63	; 0x3f
    c99c:	70c1      	strb	r1, [r0, #3]
    c99e:	7002      	strb	r2, [r0, #0]
    c9a0:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    c9a2:	7083      	strb	r3, [r0, #2]
    c9a4:	2103      	movs	r1, #3
	return evt;
    c9a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c9a8:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    c9aa:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    c9ac:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
    c9ae:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    c9b0:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    c9b2:	e406      	b.n	c1c2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    c9b4:	68ab      	ldr	r3, [r5, #8]
    c9b6:	881e      	ldrh	r6, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    c9b8:	2200      	movs	r2, #0
    c9ba:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    c9bc:	b2b0      	uxth	r0, r6
    c9be:	f007 ffad 	bl	1491c <ll_start_enc_req_send>
    c9c2:	e51b      	b.n	c3fc <hci_cmd_handle+0x2a8>
	handle = sys_le16_to_cpu(cmd->handle);
    c9c4:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    c9c6:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    c9c8:	f832 6b02 	ldrh.w	r6, [r2], #2
    c9cc:	e7f6      	b.n	c9bc <hci_cmd_handle+0x868>
		le_start_encryption(cmd, evt);
    c9ce:	68aa      	ldr	r2, [r5, #8]
				 (uint8_t *)&cmd->rand,
    c9d0:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    c9d2:	f102 030c 	add.w	r3, r2, #12
    c9d6:	f831 0b02 	ldrh.w	r0, [r1], #2
    c9da:	320a      	adds	r2, #10
    c9dc:	f008 f8da 	bl	14b94 <ll_enc_req_send>
    c9e0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c9e2:	8838      	ldrh	r0, [r7, #0]
    c9e4:	f011 f935 	bl	1dc52 <bt_hci_cmd_status_create>
    c9e8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    c9ea:	f7ff bbea 	b.w	c1c2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c9ee:	2109      	movs	r1, #9
    c9f0:	f011 f91d 	bl	1dc2e <bt_hci_cmd_complete_create>
    c9f4:	2109      	movs	r1, #9
    c9f6:	4603      	mov	r3, r0
    c9f8:	3008      	adds	r0, #8
    c9fa:	9309      	str	r3, [sp, #36]	; 0x24
    c9fc:	f012 fa9f 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    ca00:	2300      	movs	r3, #0
    ca02:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    ca06:	2108      	movs	r1, #8
    ca08:	f009 fe7c 	bl	16704 <lll_csrand_get>
	return evt;
    ca0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ca0e:	f7ff bbd8 	b.w	c1c2 <hci_cmd_handle+0x6e>
		le_encrypt(cmd, evt);
    ca12:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    ca14:	aa0a      	add	r2, sp, #40	; 0x28
    ca16:	2300      	movs	r3, #0
    ca18:	f100 0110 	add.w	r1, r0, #16
    ca1c:	f00c f944 	bl	18ca8 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ca20:	2111      	movs	r1, #17
    ca22:	8838      	ldrh	r0, [r7, #0]
    ca24:	f011 f903 	bl	1dc2e <bt_hci_cmd_complete_create>
    ca28:	2111      	movs	r1, #17
    ca2a:	4603      	mov	r3, r0
    ca2c:	3008      	adds	r0, #8
    ca2e:	9309      	str	r3, [sp, #36]	; 0x24
    ca30:	f012 fa85 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    ca34:	2300      	movs	r3, #0
    ca36:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    ca3a:	2210      	movs	r2, #16
    ca3c:	a90a      	add	r1, sp, #40	; 0x28
    ca3e:	f010 fee3 	bl	1d808 <memcpy>
	return evt;
    ca42:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ca44:	f7ff bbbd 	b.w	c1c2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    ca48:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
    ca4a:	8818      	ldrh	r0, [r3, #0]
    ca4c:	f003 fe0c 	bl	10668 <ll_feature_req_send>
    ca50:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ca52:	8838      	ldrh	r0, [r7, #0]
    ca54:	f011 f8fd 	bl	1dc52 <bt_hci_cmd_status_create>
    ca58:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    ca5a:	f7ff bbb2 	b.w	c1c2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    ca5e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ca60:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    ca62:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ca64:	f011 f8e3 	bl	1dc2e <bt_hci_cmd_complete_create>
    ca68:	2108      	movs	r1, #8
    ca6a:	4603      	mov	r3, r0
    ca6c:	4408      	add	r0, r1
    ca6e:	9309      	str	r3, [sp, #36]	; 0x24
    ca70:	f012 fa65 	bl	1ef3e <net_buf_simple_add>
    ca74:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    ca76:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    ca78:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    ca7a:	f003 fd8b 	bl	10594 <ll_chm_get>
	rp->status = status;
    ca7e:	7020      	strb	r0, [r4, #0]
	return evt;
    ca80:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
    ca82:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
    ca86:	f7ff bb9c 	b.w	c1c2 <hci_cmd_handle+0x6e>
	status = ll_chm_update(&cmd->ch_map[0]);
    ca8a:	68a8      	ldr	r0, [r5, #8]
    ca8c:	f008 f858 	bl	14b40 <ll_chm_update>
    ca90:	e572      	b.n	c578 <hci_cmd_handle+0x424>
		le_conn_update(cmd, evt);
    ca92:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    ca94:	890a      	ldrh	r2, [r1, #8]
    ca96:	884b      	ldrh	r3, [r1, #2]
    ca98:	8808      	ldrh	r0, [r1, #0]
    ca9a:	9202      	str	r2, [sp, #8]
    ca9c:	88ca      	ldrh	r2, [r1, #6]
    ca9e:	9201      	str	r2, [sp, #4]
    caa0:	8889      	ldrh	r1, [r1, #4]
    caa2:	9100      	str	r1, [sp, #0]
    caa4:	2200      	movs	r2, #0
    caa6:	4611      	mov	r1, r2
    caa8:	f003 fce0 	bl	1046c <ll_conn_update>
    caac:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    caae:	8838      	ldrh	r0, [r7, #0]
    cab0:	f011 f8cf 	bl	1dc52 <bt_hci_cmd_status_create>
    cab4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    cab6:	f7ff bb84 	b.w	c1c2 <hci_cmd_handle+0x6e>
	status = ll_wl_remove(&cmd->addr);
    caba:	68a8      	ldr	r0, [r5, #8]
    cabc:	f008 fcf0 	bl	154a0 <ll_wl_remove>
    cac0:	e55a      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_wl_add(&cmd->addr);
    cac2:	68a8      	ldr	r0, [r5, #8]
    cac4:	f008 fc4e 	bl	15364 <ll_wl_add>
    cac8:	e556      	b.n	c578 <hci_cmd_handle+0x424>
	status = ll_wl_clear();
    caca:	f008 fc1d 	bl	15308 <ll_wl_clear>
    cace:	e553      	b.n	c578 <hci_cmd_handle+0x424>
    cad0:	20000128 	.word	0x20000128
    cad4:	200014d0 	.word	0x200014d0
    cad8:	200014d4 	.word	0x200014d4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cadc:	2102      	movs	r1, #2
    cade:	f011 f8a6 	bl	1dc2e <bt_hci_cmd_complete_create>
    cae2:	2102      	movs	r1, #2
    cae4:	4603      	mov	r3, r0
    cae6:	3008      	adds	r0, #8
    cae8:	9309      	str	r3, [sp, #36]	; 0x24
    caea:	f012 fa28 	bl	1ef3e <net_buf_simple_add>
	rp->status = 0x00;
    caee:	2300      	movs	r3, #0
    caf0:	7003      	strb	r3, [r0, #0]
    caf2:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    caf4:	f008 fc06 	bl	15304 <ll_wl_size_get>
    caf8:	7060      	strb	r0, [r4, #1]
	return evt;
    cafa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cafc:	f7ff bb61 	b.w	c1c2 <hci_cmd_handle+0x6e>
		disconnect(cmd, evt);
    cb00:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    cb02:	7899      	ldrb	r1, [r3, #2]
    cb04:	8818      	ldrh	r0, [r3, #0]
    cb06:	f003 fd65 	bl	105d4 <ll_terminate_ind_send>
    cb0a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    cb0c:	8838      	ldrh	r0, [r7, #0]
    cb0e:	f011 f8a0 	bl	1dc52 <bt_hci_cmd_status_create>
    cb12:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    cb14:	f7ff bb55 	b.w	c1c2 <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    cb18:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    cb1a:	4b2a      	ldr	r3, [pc, #168]	; (cbc4 <hci_cmd_handle+0xa70>)
    cb1c:	e65e      	b.n	c7dc <hci_cmd_handle+0x688>
	dup_count = -1;
    cb1e:	482a      	ldr	r0, [pc, #168]	; (cbc8 <hci_cmd_handle+0xa74>)
	event_mask = DEFAULT_EVENT_MASK;
    cb20:	492a      	ldr	r1, [pc, #168]	; (cbcc <hci_cmd_handle+0xa78>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cb22:	4a28      	ldr	r2, [pc, #160]	; (cbc4 <hci_cmd_handle+0xa70>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cb24:	4b2a      	ldr	r3, [pc, #168]	; (cbd0 <hci_cmd_handle+0xa7c>)
	dup_count = -1;
    cb26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cb2a:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    cb2c:	f641 75ff 	movw	r5, #8191	; 0x1fff
    cb30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cb34:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cb38:	2000      	movs	r0, #0
    cb3a:	2100      	movs	r1, #0
    cb3c:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cb40:	201f      	movs	r0, #31
    cb42:	2100      	movs	r1, #0
    cb44:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    cb48:	f001 f994 	bl	de74 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    cb4c:	2101      	movs	r1, #1
    cb4e:	8838      	ldrh	r0, [r7, #0]
    cb50:	f011 f86d 	bl	1dc2e <bt_hci_cmd_complete_create>
    cb54:	2101      	movs	r1, #1
    cb56:	4605      	mov	r5, r0
    cb58:	3008      	adds	r0, #8
    cb5a:	f012 f9f0 	bl	1ef3e <net_buf_simple_add>
	conn_count = 0U;
    cb5e:	4a1d      	ldr	r2, [pc, #116]	; (cbd4 <hci_cmd_handle+0xa80>)
	ccst->status = status;
    cb60:	2300      	movs	r3, #0
    cb62:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    cb64:	6013      	str	r3, [r2, #0]
}
    cb66:	f7ff bb2c 	b.w	c1c2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    cb6a:	68ab      	ldr	r3, [r5, #8]
    cb6c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cb6e:	a90a      	add	r1, sp, #40	; 0x28
    cb70:	b2a8      	uxth	r0, r5
    cb72:	f003 feb5 	bl	108e0 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cb76:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    cb78:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cb7a:	8838      	ldrh	r0, [r7, #0]
    cb7c:	f011 f857 	bl	1dc2e <bt_hci_cmd_complete_create>
    cb80:	2105      	movs	r1, #5
    cb82:	4603      	mov	r3, r0
    cb84:	3008      	adds	r0, #8
    cb86:	9309      	str	r3, [sp, #36]	; 0x24
    cb88:	f012 f9d9 	bl	1ef3e <net_buf_simple_add>
	rp->status = status;
    cb8c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb8e:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cb92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
    cb96:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cb98:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cb9c:	f7ff bb11 	b.w	c1c2 <hci_cmd_handle+0x6e>
		dup_count = -1;
    cba0:	4b09      	ldr	r3, [pc, #36]	; (cbc8 <hci_cmd_handle+0xa74>)
    cba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cba6:	601a      	str	r2, [r3, #0]
    cba8:	e691      	b.n	c8ce <hci_cmd_handle+0x77a>
	return bt_hci_cmd_status_create(_opcode, status);
    cbaa:	2112      	movs	r1, #18
    cbac:	f011 f851 	bl	1dc52 <bt_hci_cmd_status_create>
    cbb0:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    cbb2:	f7ff bb06 	b.w	c1c2 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
    cbb6:	2111      	movs	r1, #17
    cbb8:	f011 f84b 	bl	1dc52 <bt_hci_cmd_status_create>
    cbbc:	4605      	mov	r5, r0
		return;
    cbbe:	f7ff bb00 	b.w	c1c2 <hci_cmd_handle+0x6e>
    cbc2:	bf00      	nop
    cbc4:	20000dd8 	.word	0x20000dd8
    cbc8:	200014d0 	.word	0x200014d0
    cbcc:	20000120 	.word	0x20000120
    cbd0:	20000128 	.word	0x20000128
    cbd4:	200014cc 	.word	0x200014cc

0000cbd8 <hci_acl_handle>:
{
    cbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    cbdc:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    cbde:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    cbe0:	2b03      	cmp	r3, #3
	*evt = NULL;
    cbe2:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    cbe4:	d944      	bls.n	cc70 <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
    cbe6:	4605      	mov	r5, r0
    cbe8:	4688      	mov	r8, r1
    cbea:	3008      	adds	r0, #8
    cbec:	2104      	movs	r1, #4
    cbee:	f012 f9cd 	bl	1ef8c <net_buf_simple_pull_mem>
	if (buf->len < len) {
    cbf2:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    cbf4:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    cbf6:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    cbfa:	42b3      	cmp	r3, r6
    cbfc:	d349      	bcc.n	cc92 <hci_acl_handle+0xba>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
    cbfe:	2e1b      	cmp	r6, #27
    cc00:	d843      	bhi.n	cc8a <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
    cc02:	f003 fbdb 	bl	103bc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    cc06:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    cc0a:	4604      	mov	r4, r0
    cc0c:	2800      	cmp	r0, #0
    cc0e:	d044      	beq.n	cc9a <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    cc10:	08bb      	lsrs	r3, r7, #2
    cc12:	d102      	bne.n	cc1a <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
    cc14:	b337      	cbz	r7, cc64 <hci_acl_handle+0x8c>
    cc16:	2f01      	cmp	r7, #1
    cc18:	d003      	beq.n	cc22 <hci_acl_handle+0x4a>
		return -EINVAL;
    cc1a:	f06f 0015 	mvn.w	r0, #21
}
    cc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cc22:	7903      	ldrb	r3, [r0, #4]
    cc24:	f367 0301 	bfi	r3, r7, #0, #2
    cc28:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    cc2a:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    cc2c:	68a9      	ldr	r1, [r5, #8]
    cc2e:	4632      	mov	r2, r6
    cc30:	1de0      	adds	r0, r4, #7
    cc32:	f010 fde9 	bl	1d808 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    cc36:	4621      	mov	r1, r4
    cc38:	f3c9 000b 	ubfx	r0, r9, #0, #12
    cc3c:	f003 fbca 	bl	103d4 <ll_tx_mem_enqueue>
    cc40:	2800      	cmp	r0, #0
    cc42:	d0ec      	beq.n	cc1e <hci_acl_handle+0x46>
    cc44:	4b2b      	ldr	r3, [pc, #172]	; (ccf4 <hci_acl_handle+0x11c>)
    cc46:	492c      	ldr	r1, [pc, #176]	; (ccf8 <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
    cc48:	482c      	ldr	r0, [pc, #176]	; (ccfc <hci_acl_handle+0x124>)
    cc4a:	1ac9      	subs	r1, r1, r3
    cc4c:	08c9      	lsrs	r1, r1, #3
    cc4e:	0189      	lsls	r1, r1, #6
    cc50:	f041 0101 	orr.w	r1, r1, #1
    cc54:	f00f ff61 	bl	1cb1a <log_0>
		ll_tx_mem_release(node_tx);
    cc58:	4620      	mov	r0, r4
    cc5a:	f003 fbb5 	bl	103c8 <ll_tx_mem_release>
		return -EINVAL;
    cc5e:	f06f 0015 	mvn.w	r0, #21
    cc62:	e7dc      	b.n	cc1e <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    cc64:	7903      	ldrb	r3, [r0, #4]
    cc66:	2202      	movs	r2, #2
    cc68:	f362 0301 	bfi	r3, r2, #0, #2
    cc6c:	7103      	strb	r3, [r0, #4]
		break;
    cc6e:	e7dc      	b.n	cc2a <hci_acl_handle+0x52>
    cc70:	4921      	ldr	r1, [pc, #132]	; (ccf8 <hci_acl_handle+0x120>)
    cc72:	4b20      	ldr	r3, [pc, #128]	; (ccf4 <hci_acl_handle+0x11c>)
		BT_ERR("No HCI ACL header");
    cc74:	4822      	ldr	r0, [pc, #136]	; (cd00 <hci_acl_handle+0x128>)
    cc76:	1ac9      	subs	r1, r1, r3
    cc78:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    cc7a:	0189      	lsls	r1, r1, #6
    cc7c:	f041 0101 	orr.w	r1, r1, #1
    cc80:	f00f ff4b 	bl	1cb1a <log_0>
		return -EINVAL;
    cc84:	f06f 0015 	mvn.w	r0, #21
    cc88:	e7c9      	b.n	cc1e <hci_acl_handle+0x46>
    cc8a:	491b      	ldr	r1, [pc, #108]	; (ccf8 <hci_acl_handle+0x120>)
    cc8c:	4b19      	ldr	r3, [pc, #100]	; (ccf4 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL Data length");
    cc8e:	481d      	ldr	r0, [pc, #116]	; (cd04 <hci_acl_handle+0x12c>)
    cc90:	e7f1      	b.n	cc76 <hci_acl_handle+0x9e>
    cc92:	4919      	ldr	r1, [pc, #100]	; (ccf8 <hci_acl_handle+0x120>)
    cc94:	4b17      	ldr	r3, [pc, #92]	; (ccf4 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    cc96:	481c      	ldr	r0, [pc, #112]	; (cd08 <hci_acl_handle+0x130>)
    cc98:	e7ed      	b.n	cc76 <hci_acl_handle+0x9e>
    cc9a:	4b16      	ldr	r3, [pc, #88]	; (ccf4 <hci_acl_handle+0x11c>)
    cc9c:	4916      	ldr	r1, [pc, #88]	; (ccf8 <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
    cc9e:	481b      	ldr	r0, [pc, #108]	; (cd0c <hci_acl_handle+0x134>)
    cca0:	1ac9      	subs	r1, r1, r3
    cca2:	08c9      	lsrs	r1, r1, #3
    cca4:	0189      	lsls	r1, r1, #6
    cca6:	f041 0101 	orr.w	r1, r1, #1
    ccaa:	f00f ff36 	bl	1cb1a <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    ccae:	4b18      	ldr	r3, [pc, #96]	; (cd10 <hci_acl_handle+0x138>)
    ccb0:	681b      	ldr	r3, [r3, #0]
    ccb2:	019b      	lsls	r3, r3, #6
    ccb4:	d402      	bmi.n	ccbc <hci_acl_handle+0xe4>
		return -ENOBUFS;
    ccb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ccba:	e7b0      	b.n	cc1e <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ccbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ccc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ccc4:	2001      	movs	r0, #1
    ccc6:	f7f8 f9c9 	bl	505c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    ccca:	2102      	movs	r1, #2
    cccc:	f8c8 0000 	str.w	r0, [r8]
    ccd0:	3008      	adds	r0, #8
    ccd2:	f012 f934 	bl	1ef3e <net_buf_simple_add>
	hdr->len = len;
    ccd6:	2401      	movs	r4, #1
	hdr->evt = evt;
    ccd8:	221a      	movs	r2, #26
    ccda:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    ccdc:	7044      	strb	r4, [r0, #1]
    ccde:	f8d8 0000 	ldr.w	r0, [r8]
    cce2:	4621      	mov	r1, r4
    cce4:	3008      	adds	r0, #8
    cce6:	f012 f92a 	bl	1ef3e <net_buf_simple_add>
    ccea:	4603      	mov	r3, r0
		return -ENOBUFS;
    ccec:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    ccf0:	701c      	strb	r4, [r3, #0]
    ccf2:	e794      	b.n	cc1e <hci_acl_handle+0x46>
    ccf4:	0001ff94 	.word	0x0001ff94
    ccf8:	0001ffdc 	.word	0x0001ffdc
    ccfc:	000207c4 	.word	0x000207c4
    cd00:	00020760 	.word	0x00020760
    cd04:	00020794 	.word	0x00020794
    cd08:	00020774 	.word	0x00020774
    cd0c:	000207b0 	.word	0x000207b0
    cd10:	20000120 	.word	0x20000120

0000cd14 <hci_disconn_complete_encode>:
{
    cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    cd16:	4b0e      	ldr	r3, [pc, #56]	; (cd50 <hci_disconn_complete_encode+0x3c>)
    cd18:	681b      	ldr	r3, [r3, #0]
    cd1a:	06db      	lsls	r3, r3, #27
    cd1c:	d400      	bmi.n	cd20 <hci_disconn_complete_encode+0xc>
}
    cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd20:	f102 0408 	add.w	r4, r2, #8
    cd24:	4605      	mov	r5, r0
    cd26:	460e      	mov	r6, r1
    cd28:	4620      	mov	r0, r4
    cd2a:	2102      	movs	r1, #2
    cd2c:	f012 f907 	bl	1ef3e <net_buf_simple_add>
    cd30:	4603      	mov	r3, r0
	hdr->len = len;
    cd32:	2104      	movs	r1, #4
	hdr->evt = evt;
    cd34:	2205      	movs	r2, #5
	hdr->len = len;
    cd36:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    cd38:	701a      	strb	r2, [r3, #0]
    cd3a:	4620      	mov	r0, r4
    cd3c:	f012 f8ff 	bl	1ef3e <net_buf_simple_add>
    cd40:	2700      	movs	r7, #0
	ep->status = 0x00;
    cd42:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cd44:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    cd48:	782b      	ldrb	r3, [r5, #0]
    cd4a:	70c3      	strb	r3, [r0, #3]
}
    cd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd4e:	bf00      	nop
    cd50:	20000120 	.word	0x20000120

0000cd54 <hci_disconn_complete_process>:
	conn_count--;
    cd54:	4a02      	ldr	r2, [pc, #8]	; (cd60 <hci_disconn_complete_process+0xc>)
    cd56:	6813      	ldr	r3, [r2, #0]
    cd58:	3b01      	subs	r3, #1
    cd5a:	6013      	str	r3, [r2, #0]
}
    cd5c:	4770      	bx	lr
    cd5e:	bf00      	nop
    cd60:	200014cc 	.word	0x200014cc

0000cd64 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    cd64:	7f03      	ldrb	r3, [r0, #28]
    cd66:	f003 0303 	and.w	r3, r3, #3
    cd6a:	3b01      	subs	r3, #1
    cd6c:	2b01      	cmp	r3, #1
{
    cd6e:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    cd70:	d90d      	bls.n	cd8e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    cd72:	4a16      	ldr	r2, [pc, #88]	; (cdcc <hci_acl_encode+0x68>)
    cd74:	4916      	ldr	r1, [pc, #88]	; (cdd0 <hci_acl_encode+0x6c>)
    cd76:	4817      	ldr	r0, [pc, #92]	; (cdd4 <hci_acl_encode+0x70>)
    cd78:	f641 03bd 	movw	r3, #6333	; 0x18bd
    cd7c:	f00f fa8e 	bl	1c29c <printk>
    cd80:	4040      	eors	r0, r0
    cd82:	f380 8811 	msr	BASEPRI, r0
    cd86:	f04f 0003 	mov.w	r0, #3
    cd8a:	df02      	svc	2
		break;
	}
}
    cd8c:	bd70      	pop	{r4, r5, r6, pc}
    cd8e:	4604      	mov	r4, r0
    cd90:	f101 0508 	add.w	r5, r1, #8
    cd94:	4628      	mov	r0, r5
    cd96:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    cd98:	88e6      	ldrh	r6, [r4, #6]
    cd9a:	f012 f8d0 	bl	1ef3e <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    cd9e:	7f23      	ldrb	r3, [r4, #28]
    cda0:	f003 0303 	and.w	r3, r3, #3
    cda4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    cda6:	bf0c      	ite	eq
    cda8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    cdac:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    cdb0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    cdb2:	7f61      	ldrb	r1, [r4, #29]
    cdb4:	8041      	strh	r1, [r0, #2]
    cdb6:	4628      	mov	r0, r5
    cdb8:	f012 f8c1 	bl	1ef3e <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cdbc:	7f62      	ldrb	r2, [r4, #29]
    cdbe:	f104 011f 	add.w	r1, r4, #31
}
    cdc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cdc6:	f010 bd1f 	b.w	1d808 <memcpy>
    cdca:	bf00      	nop
    cdcc:	000207d8 	.word	0x000207d8
    cdd0:	000206a4 	.word	0x000206a4
    cdd4:	0002060c 	.word	0x0002060c

0000cdd8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cddc:	f890 c004 	ldrb.w	ip, [r0, #4]
    cde0:	f1bc 0f03 	cmp.w	ip, #3
{
    cde4:	4604      	mov	r4, r0
    cde6:	b08b      	sub	sp, #44	; 0x2c
    cde8:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    cdea:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cdee:	d01d      	beq.n	ce2c <hci_evt_encode+0x54>
	handle = node_rx->hdr.handle;
    cdf0:	f1ac 0c05 	sub.w	ip, ip, #5
    cdf4:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
    cdf6:	f1bc 0f15 	cmp.w	ip, #21
    cdfa:	d832      	bhi.n	ce62 <hci_evt_encode+0x8a>
    cdfc:	e8df f01c 	tbh	[pc, ip, lsl #1]
    ce00:	00310041 	.word	0x00310041
    ce04:	00310031 	.word	0x00310031
    ce08:	00310031 	.word	0x00310031
    ce0c:	00310031 	.word	0x00310031
    ce10:	00310031 	.word	0x00310031
    ce14:	00310031 	.word	0x00310031
    ce18:	00310031 	.word	0x00310031
    ce1c:	00bc0031 	.word	0x00bc0031
    ce20:	011d0116 	.word	0x011d0116
    ce24:	015f0148 	.word	0x015f0148
    ce28:	01a60172 	.word	0x01a60172
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
    ce2c:	7fe3      	ldrb	r3, [r4, #31]
    ce2e:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
    ce30:	3b03      	subs	r3, #3
    ce32:	2b12      	cmp	r3, #18
    ce34:	f200 81ba 	bhi.w	d1ac <hci_evt_encode+0x3d4>
    ce38:	e8df f013 	tbh	[pc, r3, lsl #1]
    ce3c:	01b80266 	.word	0x01b80266
    ce40:	029501b8 	.word	0x029501b8
    ce44:	01b802ae 	.word	0x01b802ae
    ce48:	01b8021b 	.word	0x01b8021b
    ce4c:	01b801b8 	.word	0x01b801b8
    ce50:	01b80224 	.word	0x01b80224
    ce54:	01b8023f 	.word	0x01b8023f
    ce58:	01b801b8 	.word	0x01b801b8
    ce5c:	01c601b8 	.word	0x01c601b8
    ce60:	01c6      	.short	0x01c6
		LL_ASSERT(0);
    ce62:	4ab1      	ldr	r2, [pc, #708]	; (d128 <hci_evt_encode+0x350>)
    ce64:	49b1      	ldr	r1, [pc, #708]	; (d12c <hci_evt_encode+0x354>)
    ce66:	48b2      	ldr	r0, [pc, #712]	; (d130 <hci_evt_encode+0x358>)
    ce68:	f241 73c8 	movw	r3, #6088	; 0x17c8
    ce6c:	f00f fa16 	bl	1c29c <printk>
    ce70:	4040      	eors	r0, r0
    ce72:	f380 8811 	msr	BASEPRI, r0
    ce76:	f04f 0003 	mov.w	r0, #3
    ce7a:	df02      	svc	2
	}
}
    ce7c:	b00b      	add	sp, #44	; 0x2c
    ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		le_advertising_report(pdu_data, node_rx, buf);
    ce82:	7e23      	ldrb	r3, [r4, #24]
	if (adv->tx_addr) {
    ce84:	7f22      	ldrb	r2, [r4, #28]
    ce86:	7ea7      	ldrb	r7, [r4, #26]
    ce88:	f894 801b 	ldrb.w	r8, [r4, #27]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    ce8c:	425b      	negs	r3, r3
    ce8e:	b25e      	sxtb	r6, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    ce90:	4ba8      	ldr	r3, [pc, #672]	; (d134 <hci_evt_encode+0x35c>)
    ce92:	e893 0003 	ldmia.w	r3, {r0, r1}
    ce96:	f8ad 101c 	strh.w	r1, [sp, #28]
    ce9a:	0c09      	lsrs	r1, r1, #16
    ce9c:	f88d 101e 	strb.w	r1, [sp, #30]
	if (adv->tx_addr) {
    cea0:	0651      	lsls	r1, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cea2:	9006      	str	r0, [sp, #24]
	if (adv->tx_addr) {
    cea4:	f100 828a 	bmi.w	d3bc <hci_evt_encode+0x5e4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cea8:	4ba3      	ldr	r3, [pc, #652]	; (d138 <hci_evt_encode+0x360>)
    ceaa:	685b      	ldr	r3, [r3, #4]
	if (direct) {
    ceac:	f1b8 0f00 	cmp.w	r8, #0
    ceb0:	f040 82d0 	bne.w	d454 <hci_evt_encode+0x67c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ceb4:	0098      	lsls	r0, r3, #2
    ceb6:	d5e1      	bpl.n	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    ceb8:	4ba0      	ldr	r3, [pc, #640]	; (d13c <hci_evt_encode+0x364>)
    ceba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cebc:	0799      	lsls	r1, r3, #30
    cebe:	d5dd      	bpl.n	ce7c <hci_evt_encode+0xa4>
	if (dup_count >= 0) {
    cec0:	4b9f      	ldr	r3, [pc, #636]	; (d140 <hci_evt_encode+0x368>)
    cec2:	681b      	ldr	r3, [r3, #0]
    cec4:	2b00      	cmp	r3, #0
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    cec6:	f104 0a1e 	add.w	sl, r4, #30
	if (dup_count >= 0) {
    ceca:	db09      	blt.n	cee0 <hci_evt_encode+0x108>
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    cecc:	7f20      	ldrb	r0, [r4, #28]
    cece:	4652      	mov	r2, sl
    ced0:	f3c0 1180 	ubfx	r1, r0, #6, #1
    ced4:	f000 000f 	and.w	r0, r0, #15
    ced8:	f7fe ffe4 	bl	bea4 <dup_found.part.0>
    cedc:	2800      	cmp	r0, #0
    cede:	d1cd      	bne.n	ce7c <hci_evt_encode+0xa4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    cee0:	7f23      	ldrb	r3, [r4, #28]
    cee2:	f003 030f 	and.w	r3, r3, #15
    cee6:	2b01      	cmp	r3, #1
    cee8:	f000 836a 	beq.w	d5c0 <hci_evt_encode+0x7e8>
		data_len = (adv->len - BDADDR_SIZE);
    ceec:	7f63      	ldrb	r3, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    ceee:	f103 0b06 	add.w	fp, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
    cef2:	f1a3 0806 	sub.w	r8, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cef6:	fa5f f28b 	uxtb.w	r2, fp
		data_len = (adv->len - BDADDR_SIZE);
    cefa:	fa5f f888 	uxtb.w	r8, r8
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    cefe:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cf00:	9205      	str	r2, [sp, #20]
	return net_buf_add(buf, melen);
    cf02:	fa5f fb83 	uxtb.w	fp, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    cf06:	46c1      	mov	r9, r8
    cf08:	3508      	adds	r5, #8
    cf0a:	2102      	movs	r1, #2
    cf0c:	4628      	mov	r0, r5
    cf0e:	f012 f816 	bl	1ef3e <net_buf_simple_add>
	hdr->len = len;
    cf12:	9b05      	ldr	r3, [sp, #20]
    cf14:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
    cf16:	223e      	movs	r2, #62	; 0x3e
    cf18:	7002      	strb	r2, [r0, #0]
    cf1a:	2101      	movs	r1, #1
    cf1c:	4628      	mov	r0, r5
    cf1e:	f012 f80e 	bl	1ef3e <net_buf_simple_add>
    cf22:	4602      	mov	r2, r0
	me->subevent = subevt;
    cf24:	2302      	movs	r3, #2
    cf26:	7013      	strb	r3, [r2, #0]
    cf28:	4659      	mov	r1, fp
    cf2a:	4628      	mov	r0, r5
    cf2c:	f012 f807 	bl	1ef3e <net_buf_simple_add>
	sep->num_reports = 1U;
    cf30:	2301      	movs	r3, #1
    cf32:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    cf34:	7f23      	ldrb	r3, [r4, #28]
    cf36:	aa0a      	add	r2, sp, #40	; 0x28
    cf38:	f003 030f 	and.w	r3, r3, #15
    cf3c:	4413      	add	r3, r2
    cf3e:	4605      	mov	r5, r0
    cf40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    cf44:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    cf46:	f008 fb41 	bl	155cc <ll_rl_size_get>
    cf4a:	4287      	cmp	r7, r0
    cf4c:	f080 8314 	bcs.w	d578 <hci_evt_encode+0x7a0>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    cf50:	4638      	mov	r0, r7
    cf52:	1cea      	adds	r2, r5, #3
    cf54:	1ca9      	adds	r1, r5, #2
    cf56:	f008 faf5 	bl	15544 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    cf5a:	78ab      	ldrb	r3, [r5, #2]
    cf5c:	3302      	adds	r3, #2
    cf5e:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    cf60:	f885 8009 	strb.w	r8, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    cf64:	350a      	adds	r5, #10
    cf66:	f104 0124 	add.w	r1, r4, #36	; 0x24
    cf6a:	464a      	mov	r2, r9
    cf6c:	4628      	mov	r0, r5
    cf6e:	f010 fc4b 	bl	1d808 <memcpy>
	*prssi = rssi;
    cf72:	f805 6009 	strb.w	r6, [r5, r9]
    cf76:	e781      	b.n	ce7c <hci_evt_encode+0xa4>
	uint8_t status = cc->status;
    cf78:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    cf7a:	2f00      	cmp	r7, #0
    cf7c:	f000 8226 	beq.w	d3cc <hci_evt_encode+0x5f4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf80:	4b6d      	ldr	r3, [pc, #436]	; (d138 <hci_evt_encode+0x360>)
    cf82:	685b      	ldr	r3, [r3, #4]
    cf84:	009a      	lsls	r2, r3, #2
    cf86:	f57f af79 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cf8a:	4b6c      	ldr	r3, [pc, #432]	; (d13c <hci_evt_encode+0x364>)
    cf8c:	681b      	ldr	r3, [r3, #0]
    cf8e:	f240 2201 	movw	r2, #513	; 0x201
    cf92:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cf94:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cf98:	f43f af70 	beq.w	ce7c <hci_evt_encode+0xa4>
	if (!status) {
    cf9c:	2f00      	cmp	r7, #0
    cf9e:	f040 8228 	bne.w	d3f2 <hci_evt_encode+0x61a>
		conn_count++;
    cfa2:	4a68      	ldr	r2, [pc, #416]	; (d144 <hci_evt_encode+0x36c>)
    cfa4:	6813      	ldr	r3, [r2, #0]
    cfa6:	3301      	adds	r3, #1
    cfa8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    cfaa:	f1b8 0f00 	cmp.w	r8, #0
    cfae:	f000 82b2 	beq.w	d516 <hci_evt_encode+0x73e>
    cfb2:	3508      	adds	r5, #8
    cfb4:	2102      	movs	r1, #2
    cfb6:	4628      	mov	r0, r5
    cfb8:	f011 ffc1 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    cfbc:	233e      	movs	r3, #62	; 0x3e
    cfbe:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cfc0:	231f      	movs	r3, #31
    cfc2:	7043      	strb	r3, [r0, #1]
    cfc4:	2101      	movs	r1, #1
    cfc6:	4628      	mov	r0, r5
    cfc8:	f011 ffb9 	bl	1ef3e <net_buf_simple_add>
    cfcc:	4603      	mov	r3, r0
	me->subevent = subevt;
    cfce:	220a      	movs	r2, #10
    cfd0:	701a      	strb	r2, [r3, #0]
    cfd2:	4628      	mov	r0, r5
    cfd4:	211e      	movs	r1, #30
    cfd6:	f011 ffb2 	bl	1ef3e <net_buf_simple_add>
		leecc->status = 0x00;
    cfda:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    cfdc:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
    cfe0:	7f63      	ldrb	r3, [r4, #29]
    cfe2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    cfe4:	7fa3      	ldrb	r3, [r4, #30]
    cfe6:	7103      	strb	r3, [r0, #4]
    cfe8:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    cfea:	2206      	movs	r2, #6
    cfec:	f104 011f 	add.w	r1, r4, #31
    cff0:	3005      	adds	r0, #5
    cff2:	f010 fc09 	bl	1d808 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    cff6:	2206      	movs	r2, #6
    cff8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    cffc:	f105 000b 	add.w	r0, r5, #11
    d000:	f010 fc02 	bl	1d808 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    d004:	2206      	movs	r2, #6
    d006:	f104 0125 	add.w	r1, r4, #37	; 0x25
    d00a:	f105 0011 	add.w	r0, r5, #17
    d00e:	f010 fbfb 	bl	1d808 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    d014:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    d016:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d018:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    d01c:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d020:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    d024:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d028:	776b      	strb	r3, [r5, #29]
		return;
    d02a:	e727      	b.n	ce7c <hci_evt_encode+0xa4>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    d02c:	460a      	mov	r2, r1
    d02e:	4631      	mov	r1, r6
}
    d030:	b00b      	add	sp, #44	; 0x2c
    d032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    d036:	f7ff be6d 	b.w	cd14 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d03a:	4b3f      	ldr	r3, [pc, #252]	; (d138 <hci_evt_encode+0x360>)
    d03c:	685b      	ldr	r3, [r3, #4]
    d03e:	009b      	lsls	r3, r3, #2
    d040:	f57f af1c 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    d044:	4b3d      	ldr	r3, [pc, #244]	; (d13c <hci_evt_encode+0x364>)
    d046:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d048:	075f      	lsls	r7, r3, #29
    d04a:	f57f af17 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d04e:	3508      	adds	r5, #8
    d050:	2102      	movs	r1, #2
    d052:	4628      	mov	r0, r5
    d054:	f011 ff73 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d058:	233e      	movs	r3, #62	; 0x3e
    d05a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d05c:	230a      	movs	r3, #10
    d05e:	7043      	strb	r3, [r0, #1]
    d060:	2101      	movs	r1, #1
    d062:	4628      	mov	r0, r5
    d064:	f011 ff6b 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d068:	2303      	movs	r3, #3
    d06a:	7003      	strb	r3, [r0, #0]
    d06c:	2109      	movs	r1, #9
    d06e:	4628      	mov	r0, r5
    d070:	f011 ff65 	bl	1ef3e <net_buf_simple_add>
	sep->status = cu->status;
    d074:	7f23      	ldrb	r3, [r4, #28]
    d076:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    d078:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    d07a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    d07c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d07e:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    d082:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    d086:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    d08a:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    d08e:	e6f5      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d090:	4b29      	ldr	r3, [pc, #164]	; (d138 <hci_evt_encode+0x360>)
    d092:	685b      	ldr	r3, [r3, #4]
    d094:	0418      	lsls	r0, r3, #16
    d096:	f04f 0400 	mov.w	r4, #0
    d09a:	f57f aeef 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d09e:	3508      	adds	r5, #8
    d0a0:	2102      	movs	r1, #2
    d0a2:	4628      	mov	r0, r5
    d0a4:	f011 ff4b 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d0a8:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    d0aa:	2103      	movs	r1, #3
	hdr->evt = evt;
    d0ac:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d0ae:	7041      	strb	r1, [r0, #1]
    d0b0:	4628      	mov	r0, r5
    d0b2:	f011 ff44 	bl	1ef3e <net_buf_simple_add>
	ep->status = 0x00;
    d0b6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d0b8:	f8a0 6001 	strh.w	r6, [r0, #1]
    d0bc:	e6de      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d0be:	4b22      	ldr	r3, [pc, #136]	; (d148 <hci_evt_encode+0x370>)
    d0c0:	681b      	ldr	r3, [r3, #0]
    d0c2:	0219      	lsls	r1, r3, #8
    d0c4:	f57f aeda 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d0c8:	3508      	adds	r5, #8
    d0ca:	2102      	movs	r1, #2
    d0cc:	4628      	mov	r0, r5
    d0ce:	f011 ff36 	bl	1ef3e <net_buf_simple_add>
	hdr->len = len;
    d0d2:	2102      	movs	r1, #2
	hdr->evt = evt;
    d0d4:	2357      	movs	r3, #87	; 0x57
    d0d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d0d8:	7041      	strb	r1, [r0, #1]
    d0da:	4628      	mov	r0, r5
    d0dc:	f011 ff2f 	bl	1ef3e <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d0e0:	8006      	strh	r6, [r0, #0]
    d0e2:	e6cb      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0e4:	4b14      	ldr	r3, [pc, #80]	; (d138 <hci_evt_encode+0x360>)
    d0e6:	685b      	ldr	r3, [r3, #4]
    d0e8:	009a      	lsls	r2, r3, #2
    d0ea:	f57f aec7 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d0ee:	4b13      	ldr	r3, [pc, #76]	; (d13c <hci_evt_encode+0x364>)
    d0f0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0f2:	031b      	lsls	r3, r3, #12
    d0f4:	f57f aec2 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d0f8:	3508      	adds	r5, #8
    d0fa:	2102      	movs	r1, #2
    d0fc:	4628      	mov	r0, r5
    d0fe:	f011 ff1e 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d102:	233e      	movs	r3, #62	; 0x3e
    d104:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d106:	2304      	movs	r3, #4
    d108:	7043      	strb	r3, [r0, #1]
    d10a:	2101      	movs	r1, #1
    d10c:	4628      	mov	r0, r5
    d10e:	f011 ff16 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d112:	2314      	movs	r3, #20
    d114:	7003      	strb	r3, [r0, #0]
    d116:	2103      	movs	r1, #3
    d118:	4628      	mov	r0, r5
    d11a:	f011 ff10 	bl	1ef3e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d11e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    d120:	7f23      	ldrb	r3, [r4, #28]
    d122:	7083      	strb	r3, [r0, #2]
    d124:	e6aa      	b.n	ce7c <hci_evt_encode+0xa4>
    d126:	bf00      	nop
    d128:	000207d8 	.word	0x000207d8
    d12c:	000206a4 	.word	0x000206a4
    d130:	0002060c 	.word	0x0002060c
    d134:	000201b8 	.word	0x000201b8
    d138:	20000120 	.word	0x20000120
    d13c:	20000128 	.word	0x20000128
    d140:	200014d0 	.word	0x200014d0
    d144:	200014cc 	.word	0x200014cc
    d148:	20000dd8 	.word	0x20000dd8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d14c:	4bb8      	ldr	r3, [pc, #736]	; (d430 <hci_evt_encode+0x658>)
    d14e:	685b      	ldr	r3, [r3, #4]
    d150:	009f      	lsls	r7, r3, #2
    d152:	d503      	bpl.n	d15c <hci_evt_encode+0x384>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d154:	4bb7      	ldr	r3, [pc, #732]	; (d434 <hci_evt_encode+0x65c>)
    d156:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d158:	0518      	lsls	r0, r3, #20
    d15a:	d45c      	bmi.n	d216 <hci_evt_encode+0x43e>
    d15c:	7f62      	ldrb	r2, [r4, #29]
    d15e:	7fa0      	ldrb	r0, [r4, #30]
    d160:	49b5      	ldr	r1, [pc, #724]	; (d438 <hci_evt_encode+0x660>)
    d162:	4bb6      	ldr	r3, [pc, #728]	; (d43c <hci_evt_encode+0x664>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    d164:	7f24      	ldrb	r4, [r4, #28]
    d166:	2a00      	cmp	r2, #0
    d168:	fa92 f2a2 	rbit	r2, r2
    d16c:	fab2 f282 	clz	r2, r2
    d170:	eba3 0301 	sub.w	r3, r3, r1
    d174:	bf08      	it	eq
    d176:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    d17a:	2800      	cmp	r0, #0
    d17c:	fa90 f0a0 	rbit	r0, r0
    d180:	fab0 f080 	clz	r0, r0
    d184:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    d188:	bf08      	it	eq
    d18a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
    d18e:	1c51      	adds	r1, r2, #1
    d190:	3001      	adds	r0, #1
    d192:	019b      	lsls	r3, r3, #6
    d194:	9009      	str	r0, [sp, #36]	; 0x24
    d196:	9108      	str	r1, [sp, #32]
    d198:	48a9      	ldr	r0, [pc, #676]	; (d440 <hci_evt_encode+0x668>)
    d19a:	f043 0302 	orr.w	r3, r3, #2
    d19e:	2204      	movs	r2, #4
    d1a0:	a906      	add	r1, sp, #24
    d1a2:	e9cd 6406 	strd	r6, r4, [sp, #24]
    d1a6:	f00f fd0e 	bl	1cbc6 <log_n>
		return;
    d1aa:	e667      	b.n	ce7c <hci_evt_encode+0xa4>
		LL_ASSERT(0);
    d1ac:	4aa5      	ldr	r2, [pc, #660]	; (d444 <hci_evt_encode+0x66c>)
    d1ae:	49a6      	ldr	r1, [pc, #664]	; (d448 <hci_evt_encode+0x670>)
    d1b0:	48a6      	ldr	r0, [pc, #664]	; (d44c <hci_evt_encode+0x674>)
    d1b2:	f641 0391 	movw	r3, #6289	; 0x1891
    d1b6:	f00f f871 	bl	1c29c <printk>
    d1ba:	4040      	eors	r0, r0
    d1bc:	f380 8811 	msr	BASEPRI, r0
    d1c0:	f04f 0003 	mov.w	r0, #3
    d1c4:	df02      	svc	2
}
    d1c6:	e659      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d1c8:	4b99      	ldr	r3, [pc, #612]	; (d430 <hci_evt_encode+0x658>)
    d1ca:	685b      	ldr	r3, [r3, #4]
    d1cc:	009a      	lsls	r2, r3, #2
    d1ce:	f57f ae55 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    d1d2:	4b98      	ldr	r3, [pc, #608]	; (d434 <hci_evt_encode+0x65c>)
    d1d4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d1d6:	065b      	lsls	r3, r3, #25
    d1d8:	f57f ae50 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d1dc:	3508      	adds	r5, #8
    d1de:	2102      	movs	r1, #2
    d1e0:	4628      	mov	r0, r5
    d1e2:	f011 feac 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d1e6:	233e      	movs	r3, #62	; 0x3e
    d1e8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d1ea:	230b      	movs	r3, #11
    d1ec:	7043      	strb	r3, [r0, #1]
    d1ee:	2101      	movs	r1, #1
    d1f0:	4628      	mov	r0, r5
    d1f2:	f011 fea4 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d1f6:	2307      	movs	r3, #7
    d1f8:	7003      	strb	r3, [r0, #0]
    d1fa:	210a      	movs	r1, #10
    d1fc:	4628      	mov	r0, r5
    d1fe:	f011 fe9e 	bl	1ef3e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d202:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    d204:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d206:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    d208:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d20a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    d20c:	8c23      	ldrh	r3, [r4, #32]
    d20e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d210:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d212:	8103      	strh	r3, [r0, #8]
    d214:	e632      	b.n	ce7c <hci_evt_encode+0xa4>
    d216:	3508      	adds	r5, #8
    d218:	2102      	movs	r1, #2
    d21a:	4628      	mov	r0, r5
    d21c:	f011 fe8f 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d220:	233e      	movs	r3, #62	; 0x3e
    d222:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d224:	2306      	movs	r3, #6
    d226:	7043      	strb	r3, [r0, #1]
    d228:	2101      	movs	r1, #1
    d22a:	4628      	mov	r0, r5
    d22c:	f011 fe87 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d230:	230c      	movs	r3, #12
    d232:	7003      	strb	r3, [r0, #0]
    d234:	2105      	movs	r1, #5
    d236:	4628      	mov	r0, r5
    d238:	f011 fe81 	bl	1ef3e <net_buf_simple_add>
	sep->status = pu->status;
    d23c:	7f23      	ldrb	r3, [r4, #28]
    d23e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d240:	f8a0 6001 	strh.w	r6, [r0, #1]
    d244:	7f62      	ldrb	r2, [r4, #29]
    d246:	2a00      	cmp	r2, #0
    d248:	fa92 f3a2 	rbit	r3, r2
    d24c:	fab3 f383 	clz	r3, r3
    d250:	bf08      	it	eq
    d252:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d256:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    d258:	70c3      	strb	r3, [r0, #3]
    d25a:	7fa2      	ldrb	r2, [r4, #30]
    d25c:	fa92 f3a2 	rbit	r3, r2
    d260:	2a00      	cmp	r2, #0
    d262:	fab3 f383 	clz	r3, r3
    d266:	bf08      	it	eq
    d268:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d26c:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    d26e:	7103      	strb	r3, [r0, #4]
    d270:	e604      	b.n	ce7c <hci_evt_encode+0xa4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    d272:	460b      	mov	r3, r1
    d274:	4632      	mov	r2, r6
    d276:	4601      	mov	r1, r0
    d278:	2000      	movs	r0, #0
}
    d27a:	b00b      	add	sp, #44	; 0x2c
    d27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d280:	f7fe be70 	b.w	bf64 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d284:	4b6a      	ldr	r3, [pc, #424]	; (d430 <hci_evt_encode+0x658>)
    d286:	681b      	ldr	r3, [r3, #0]
    d288:	061f      	lsls	r7, r3, #24
    d28a:	f57f adf7 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d28e:	3508      	adds	r5, #8
    d290:	2102      	movs	r1, #2
    d292:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d294:	f894 4020 	ldrb.w	r4, [r4, #32]
    d298:	f011 fe51 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d29c:	2308      	movs	r3, #8
	hdr->len = len;
    d29e:	2104      	movs	r1, #4
	hdr->evt = evt;
    d2a0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d2a2:	7041      	strb	r1, [r0, #1]
    d2a4:	4628      	mov	r0, r5
    d2a6:	f011 fe4a 	bl	1ef3e <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    d2aa:	fab4 f384 	clz	r3, r4
    d2ae:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    d2b0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d2b2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d2b6:	70c3      	strb	r3, [r0, #3]
    d2b8:	e5e0      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2ba:	4b5d      	ldr	r3, [pc, #372]	; (d430 <hci_evt_encode+0x658>)
    d2bc:	685b      	ldr	r3, [r3, #4]
    d2be:	0098      	lsls	r0, r3, #2
    d2c0:	f140 808d 	bpl.w	d3de <hci_evt_encode+0x606>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    d2c4:	4b5b      	ldr	r3, [pc, #364]	; (d434 <hci_evt_encode+0x65c>)
    d2c6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2c8:	0699      	lsls	r1, r3, #26
    d2ca:	f140 8088 	bpl.w	d3de <hci_evt_encode+0x606>
    d2ce:	3508      	adds	r5, #8
    d2d0:	2102      	movs	r1, #2
    d2d2:	4628      	mov	r0, r5
    d2d4:	f011 fe33 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d2d8:	233e      	movs	r3, #62	; 0x3e
    d2da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d2dc:	230b      	movs	r3, #11
    d2de:	7043      	strb	r3, [r0, #1]
    d2e0:	2101      	movs	r1, #1
    d2e2:	4628      	mov	r0, r5
    d2e4:	f011 fe2b 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d2e8:	2306      	movs	r3, #6
    d2ea:	7003      	strb	r3, [r0, #0]
    d2ec:	210a      	movs	r1, #10
    d2ee:	4628      	mov	r0, r5
    d2f0:	f011 fe25 	bl	1ef3e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d2f4:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    d2f6:	8c23      	ldrh	r3, [r4, #32]
    d2f8:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    d2fa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d2fc:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    d2fe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d300:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    d302:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d304:	8103      	strh	r3, [r0, #8]
    d306:	e5b9      	b.n	ce7c <hci_evt_encode+0xa4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d308:	4b49      	ldr	r3, [pc, #292]	; (d430 <hci_evt_encode+0x658>)
    d30a:	685b      	ldr	r3, [r3, #4]
    d30c:	0099      	lsls	r1, r3, #2
    d30e:	f57f adb5 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    d312:	4b48      	ldr	r3, [pc, #288]	; (d434 <hci_evt_encode+0x65c>)
    d314:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d316:	06da      	lsls	r2, r3, #27
    d318:	f57f adb0 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d31c:	3508      	adds	r5, #8
    d31e:	2102      	movs	r1, #2
    d320:	4628      	mov	r0, r5
    d322:	f011 fe0c 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d326:	233e      	movs	r3, #62	; 0x3e
    d328:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d32a:	230d      	movs	r3, #13
    d32c:	7043      	strb	r3, [r0, #1]
    d32e:	2101      	movs	r1, #1
    d330:	4628      	mov	r0, r5
    d332:	f011 fe04 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d336:	2305      	movs	r3, #5
    d338:	7003      	strb	r3, [r0, #0]
    d33a:	210c      	movs	r1, #12
    d33c:	4628      	mov	r0, r5
    d33e:	f011 fdfe 	bl	1ef3e <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    d342:	f104 0120 	add.w	r1, r4, #32
    d346:	4605      	mov	r5, r0
    d348:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    d34a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    d34e:	f010 fa5b 	bl	1d808 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    d352:	2202      	movs	r2, #2
    d354:	f104 0128 	add.w	r1, r4, #40	; 0x28
    d358:	f105 000a 	add.w	r0, r5, #10
}
    d35c:	b00b      	add	sp, #44	; 0x2c
    d35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    d362:	f010 ba51 	b.w	1d808 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d366:	4b32      	ldr	r3, [pc, #200]	; (d430 <hci_evt_encode+0x658>)
    d368:	681b      	ldr	r3, [r3, #0]
    d36a:	061b      	lsls	r3, r3, #24
    d36c:	f04f 0400 	mov.w	r4, #0
    d370:	f57f ad84 	bpl.w	ce7c <hci_evt_encode+0xa4>
    d374:	3508      	adds	r5, #8
    d376:	2102      	movs	r1, #2
    d378:	4628      	mov	r0, r5
    d37a:	f011 fde0 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d37e:	2308      	movs	r3, #8
	hdr->len = len;
    d380:	2104      	movs	r1, #4
	hdr->evt = evt;
    d382:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d384:	7041      	strb	r1, [r0, #1]
    d386:	4628      	mov	r0, r5
    d388:	f011 fdd9 	bl	1ef3e <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    d38c:	2301      	movs	r3, #1
	ep->status = err;
    d38e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d390:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d394:	70c3      	strb	r3, [r0, #3]
    d396:	e571      	b.n	ce7c <hci_evt_encode+0xa4>
		le_unknown_rsp(pdu_data, handle, buf);
    d398:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    d39c:	290e      	cmp	r1, #14
    d39e:	f000 80b5 	beq.w	d50c <hci_evt_encode+0x734>
    d3a2:	4b25      	ldr	r3, [pc, #148]	; (d438 <hci_evt_encode+0x660>)
    d3a4:	4a25      	ldr	r2, [pc, #148]	; (d43c <hci_evt_encode+0x664>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    d3a6:	482a      	ldr	r0, [pc, #168]	; (d450 <hci_evt_encode+0x678>)
    d3a8:	1ad2      	subs	r2, r2, r3
    d3aa:	08d2      	lsrs	r2, r2, #3
    d3ac:	0192      	lsls	r2, r2, #6
    d3ae:	f042 0202 	orr.w	r2, r2, #2
}
    d3b2:	b00b      	add	sp, #44	; 0x2c
    d3b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    d3b8:	f00f bbbc 	b.w	1cb34 <log_1>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    d3bc:	2100      	movs	r1, #0
    d3be:	f104 031e 	add.w	r3, r4, #30
    d3c2:	463a      	mov	r2, r7
    d3c4:	4608      	mov	r0, r1
    d3c6:	f008 f9fb 	bl	157c0 <ll_rl_crpa_set>
    d3ca:	e56d      	b.n	cea8 <hci_evt_encode+0xd0>
		ll_rl_crpa_set(cc->peer_addr_type,
    d3cc:	7fa0      	ldrb	r0, [r4, #30]
    d3ce:	f104 0325 	add.w	r3, r4, #37	; 0x25
    d3d2:	22ff      	movs	r2, #255	; 0xff
    d3d4:	f104 011f 	add.w	r1, r4, #31
    d3d8:	f008 f9f2 	bl	157c0 <ll_rl_crpa_set>
    d3dc:	e5d0      	b.n	cf80 <hci_evt_encode+0x1a8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    d3de:	2300      	movs	r3, #0
    d3e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d3e4:	9300      	str	r3, [sp, #0]
    d3e6:	221a      	movs	r2, #26
    d3e8:	2102      	movs	r1, #2
    d3ea:	4630      	mov	r0, r6
    d3ec:	f003 f83e 	bl	1046c <ll_conn_update>
		return;
    d3f0:	e544      	b.n	ce7c <hci_evt_encode+0xa4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    d3f2:	f1b8 0f00 	cmp.w	r8, #0
    d3f6:	f040 80c9 	bne.w	d58c <hci_evt_encode+0x7b4>
    d3fa:	3508      	adds	r5, #8
    d3fc:	2102      	movs	r1, #2
    d3fe:	4628      	mov	r0, r5
    d400:	f011 fd9d 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d404:	233e      	movs	r3, #62	; 0x3e
    d406:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d408:	2313      	movs	r3, #19
    d40a:	7043      	strb	r3, [r0, #1]
    d40c:	2101      	movs	r1, #1
    d40e:	4628      	mov	r0, r5
    d410:	f011 fd95 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d414:	2301      	movs	r3, #1
    d416:	7003      	strb	r3, [r0, #0]
    d418:	2112      	movs	r1, #18
    d41a:	4628      	mov	r0, r5
    d41c:	f011 fd8f 	bl	1ef3e <net_buf_simple_add>
    d420:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    d422:	2212      	movs	r2, #18
    d424:	4641      	mov	r1, r8
    d426:	f010 fa1a 	bl	1d85e <memset>
		lecc->status = status;
    d42a:	7027      	strb	r7, [r4, #0]
		return;
    d42c:	e526      	b.n	ce7c <hci_evt_encode+0xa4>
    d42e:	bf00      	nop
    d430:	20000120 	.word	0x20000120
    d434:	20000128 	.word	0x20000128
    d438:	0001ff94 	.word	0x0001ff94
    d43c:	0001ffdc 	.word	0x0001ffdc
    d440:	0002083c 	.word	0x0002083c
    d444:	000207d8 	.word	0x000207d8
    d448:	000206a4 	.word	0x000206a4
    d44c:	0002060c 	.word	0x0002060c
    d450:	00020868 	.word	0x00020868
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d454:	009a      	lsls	r2, r3, #2
    d456:	f57f ad11 	bpl.w	ce7c <hci_evt_encode+0xa4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    d45a:	4b62      	ldr	r3, [pc, #392]	; (d5e4 <hci_evt_encode+0x80c>)
    d45c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d45e:	055b      	lsls	r3, r3, #21
    d460:	f57f ad0c 	bpl.w	ce7c <hci_evt_encode+0xa4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    d464:	7f23      	ldrb	r3, [r4, #28]
    d466:	f003 030f 	and.w	r3, r3, #15
    d46a:	2b01      	cmp	r3, #1
    d46c:	d00c      	beq.n	d488 <hci_evt_encode+0x6b0>
    d46e:	4a5e      	ldr	r2, [pc, #376]	; (d5e8 <hci_evt_encode+0x810>)
    d470:	495e      	ldr	r1, [pc, #376]	; (d5ec <hci_evt_encode+0x814>)
    d472:	485f      	ldr	r0, [pc, #380]	; (d5f0 <hci_evt_encode+0x818>)
    d474:	f241 13b6 	movw	r3, #4534	; 0x11b6
    d478:	f00e ff10 	bl	1c29c <printk>
    d47c:	4040      	eors	r0, r0
    d47e:	f380 8811 	msr	BASEPRI, r0
    d482:	f04f 0003 	mov.w	r0, #3
    d486:	df02      	svc	2
	if (dup_count >= 0) {
    d488:	4b5a      	ldr	r3, [pc, #360]	; (d5f4 <hci_evt_encode+0x81c>)
    d48a:	681b      	ldr	r3, [r3, #0]
    d48c:	2b00      	cmp	r3, #0
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d48e:	f104 081e 	add.w	r8, r4, #30
	if (dup_count >= 0) {
    d492:	db0a      	blt.n	d4aa <hci_evt_encode+0x6d2>
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d494:	7f20      	ldrb	r0, [r4, #28]
    d496:	4642      	mov	r2, r8
    d498:	f3c0 1180 	ubfx	r1, r0, #6, #1
    d49c:	f000 000f 	and.w	r0, r0, #15
    d4a0:	f7fe fd00 	bl	bea4 <dup_found.part.0>
    d4a4:	2800      	cmp	r0, #0
    d4a6:	f47f ace9 	bne.w	ce7c <hci_evt_encode+0xa4>
    d4aa:	3508      	adds	r5, #8
    d4ac:	2102      	movs	r1, #2
    d4ae:	4628      	mov	r0, r5
    d4b0:	f011 fd45 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d4b4:	233e      	movs	r3, #62	; 0x3e
    d4b6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d4b8:	2312      	movs	r3, #18
    d4ba:	7043      	strb	r3, [r0, #1]
    d4bc:	2101      	movs	r1, #1
    d4be:	4628      	mov	r0, r5
    d4c0:	f011 fd3d 	bl	1ef3e <net_buf_simple_add>
    d4c4:	4603      	mov	r3, r0
	me->subevent = subevt;
    d4c6:	220b      	movs	r2, #11
    d4c8:	701a      	strb	r2, [r3, #0]
    d4ca:	4628      	mov	r0, r5
    d4cc:	2111      	movs	r1, #17
    d4ce:	f011 fd36 	bl	1ef3e <net_buf_simple_add>
	drp->num_reports = 1U;
    d4d2:	2301      	movs	r3, #1
    d4d4:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    d4d6:	7043      	strb	r3, [r0, #1]
    d4d8:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
    d4da:	f008 f877 	bl	155cc <ll_rl_size_get>
    d4de:	4287      	cmp	r7, r0
    d4e0:	d275      	bcs.n	d5ce <hci_evt_encode+0x7f6>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    d4e2:	1cea      	adds	r2, r5, #3
    d4e4:	4638      	mov	r0, r7
    d4e6:	1ca9      	adds	r1, r5, #2
    d4e8:	f008 f82c 	bl	15544 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    d4ec:	78ab      	ldrb	r3, [r5, #2]
    d4ee:	3302      	adds	r3, #2
    d4f0:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
    d4f2:	7f23      	ldrb	r3, [r4, #28]
    d4f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
    d4f8:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
    d4fa:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    d4fc:	f104 0124 	add.w	r1, r4, #36	; 0x24
    d500:	f105 000a 	add.w	r0, r5, #10
    d504:	f010 f980 	bl	1d808 <memcpy>
	dir_info->rssi = rssi;
    d508:	742e      	strb	r6, [r5, #16]
    d50a:	e4b7      	b.n	ce7c <hci_evt_encode+0xa4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d50c:	462b      	mov	r3, r5
    d50e:	4632      	mov	r2, r6
    d510:	2100      	movs	r1, #0
    d512:	201a      	movs	r0, #26
    d514:	e6b1      	b.n	d27a <hci_evt_encode+0x4a2>
    d516:	3508      	adds	r5, #8
    d518:	2102      	movs	r1, #2
    d51a:	4628      	mov	r0, r5
    d51c:	f011 fd0f 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d520:	233e      	movs	r3, #62	; 0x3e
    d522:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d524:	2313      	movs	r3, #19
    d526:	7043      	strb	r3, [r0, #1]
    d528:	2101      	movs	r1, #1
    d52a:	4628      	mov	r0, r5
    d52c:	f011 fd07 	bl	1ef3e <net_buf_simple_add>
    d530:	4603      	mov	r3, r0
	me->subevent = subevt;
    d532:	2201      	movs	r2, #1
    d534:	701a      	strb	r2, [r3, #0]
    d536:	4628      	mov	r0, r5
    d538:	2112      	movs	r1, #18
    d53a:	f011 fd00 	bl	1ef3e <net_buf_simple_add>
	lecc->status = 0x00;
    d53e:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    d540:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    d544:	7f63      	ldrb	r3, [r4, #29]
    d546:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    d548:	7fa3      	ldrb	r3, [r4, #30]
    d54a:	f003 0301 	and.w	r3, r3, #1
    d54e:	4605      	mov	r5, r0
    d550:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    d552:	2206      	movs	r2, #6
    d554:	f104 011f 	add.w	r1, r4, #31
    d558:	3005      	adds	r0, #5
    d55a:	f010 f955 	bl	1d808 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d55e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d560:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    d562:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d564:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d568:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d56c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    d570:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d574:	746b      	strb	r3, [r5, #17]
    d576:	e481      	b.n	ce7c <hci_evt_encode+0xa4>
		adv_info->addr.type = adv->tx_addr;
    d578:	7f23      	ldrb	r3, [r4, #28]
    d57a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d57e:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
    d580:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d582:	2206      	movs	r2, #6
    d584:	1ce8      	adds	r0, r5, #3
    d586:	f010 f93f 	bl	1d808 <memcpy>
    d58a:	e4e9      	b.n	cf60 <hci_evt_encode+0x188>
    d58c:	3508      	adds	r5, #8
    d58e:	2102      	movs	r1, #2
    d590:	4628      	mov	r0, r5
    d592:	f011 fcd4 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d596:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    d598:	231f      	movs	r3, #31
	hdr->evt = evt;
    d59a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d59c:	7043      	strb	r3, [r0, #1]
    d59e:	2101      	movs	r1, #1
    d5a0:	4628      	mov	r0, r5
    d5a2:	f011 fccc 	bl	1ef3e <net_buf_simple_add>
	me->subevent = subevt;
    d5a6:	230a      	movs	r3, #10
    d5a8:	7003      	strb	r3, [r0, #0]
    d5aa:	211e      	movs	r1, #30
    d5ac:	4628      	mov	r0, r5
    d5ae:	f011 fcc6 	bl	1ef3e <net_buf_simple_add>
    d5b2:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    d5b4:	221e      	movs	r2, #30
    d5b6:	2100      	movs	r1, #0
    d5b8:	f010 f951 	bl	1d85e <memset>
			leecc->status = status;
    d5bc:	7027      	strb	r7, [r4, #0]
			return;
    d5be:	e45d      	b.n	ce7c <hci_evt_encode+0xa4>
    d5c0:	230c      	movs	r3, #12
    d5c2:	f04f 0b0b 	mov.w	fp, #11
    d5c6:	9305      	str	r3, [sp, #20]
    d5c8:	f04f 0900 	mov.w	r9, #0
    d5cc:	e49c      	b.n	cf08 <hci_evt_encode+0x130>
		dir_info->addr.type = adv->tx_addr;
    d5ce:	7f23      	ldrb	r3, [r4, #28]
    d5d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d5d4:	4641      	mov	r1, r8
		dir_info->addr.type = adv->tx_addr;
    d5d6:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d5d8:	2206      	movs	r2, #6
    d5da:	1ce8      	adds	r0, r5, #3
    d5dc:	f010 f914 	bl	1d808 <memcpy>
    d5e0:	e787      	b.n	d4f2 <hci_evt_encode+0x71a>
    d5e2:	bf00      	nop
    d5e4:	20000128 	.word	0x20000128
    d5e8:	000207d8 	.word	0x000207d8
    d5ec:	00020814 	.word	0x00020814
    d5f0:	0002060c 	.word	0x0002060c
    d5f4:	200014d0 	.word	0x200014d0

0000d5f8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    d5f8:	b570      	push	{r4, r5, r6, lr}
    d5fa:	f100 0408 	add.w	r4, r0, #8
    d5fe:	460e      	mov	r6, r1
    d600:	4620      	mov	r0, r4
    d602:	2102      	movs	r1, #2
    d604:	4615      	mov	r5, r2
    d606:	f011 fc9a 	bl	1ef3e <net_buf_simple_add>
	hdr->evt = evt;
    d60a:	2313      	movs	r3, #19
	hdr->len = len;
    d60c:	2105      	movs	r1, #5
	hdr->evt = evt;
    d60e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d610:	7041      	strb	r1, [r0, #1]
    d612:	4620      	mov	r0, r4
    d614:	f011 fc93 	bl	1ef3e <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    d618:	2301      	movs	r3, #1
    d61a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d61c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d620:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    d624:	bd70      	pop	{r4, r5, r6, pc}
    d626:	bf00      	nop

0000d628 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d628:	7903      	ldrb	r3, [r0, #4]
    d62a:	2b03      	cmp	r3, #3
    d62c:	d008      	beq.n	d640 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    d62e:	3b05      	subs	r3, #5
    d630:	b2db      	uxtb	r3, r3
    d632:	2b15      	cmp	r3, #21
    d634:	d901      	bls.n	d63a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d636:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    d638:	4770      	bx	lr
    d63a:	4a05      	ldr	r2, [pc, #20]	; (d650 <hci_get_class+0x28>)
    d63c:	5cd0      	ldrb	r0, [r2, r3]
    d63e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d640:	7f03      	ldrb	r3, [r0, #28]
    d642:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    d646:	2b03      	cmp	r3, #3
    d648:	bf0c      	ite	eq
    d64a:	2004      	moveq	r0, #4
    d64c:	2005      	movne	r0, #5
    d64e:	4770      	bx	lr
    d650:	00020884 	.word	0x00020884

0000d654 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    d654:	480d      	ldr	r0, [pc, #52]	; (d68c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d656:	4a0e      	ldr	r2, [pc, #56]	; (d690 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d658:	490e      	ldr	r1, [pc, #56]	; (d694 <hci_init+0x40>)
	dup_count = -1;
    d65a:	4b0f      	ldr	r3, [pc, #60]	; (d698 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    d65c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    d65e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d662:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d666:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d66a:	2400      	movs	r4, #0
    d66c:	2500      	movs	r5, #0
    d66e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
    d672:	4a0a      	ldr	r2, [pc, #40]	; (d69c <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d674:	241f      	movs	r4, #31
    d676:	2500      	movs	r5, #0
    d678:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    d67c:	2100      	movs	r1, #0
    d67e:	6011      	str	r1, [r2, #0]
	dup_count = -1;
    d680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    d684:	bc30      	pop	{r4, r5}
	dup_count = -1;
    d686:	601a      	str	r2, [r3, #0]
}
    d688:	4770      	bx	lr
    d68a:	bf00      	nop
    d68c:	20000120 	.word	0x20000120
    d690:	20000dd8 	.word	0x20000dd8
    d694:	20000128 	.word	0x20000128
    d698:	200014d0 	.word	0x200014d0
    d69c:	200014cc 	.word	0x200014cc

0000d6a0 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    d6a0:	f009 b830 	b.w	16704 <lll_csrand_get>

0000d6a4 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    d6a4:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    d6a6:	2300      	movs	r3, #0
    d6a8:	f00b fafe 	bl	18ca8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    d6ac:	2000      	movs	r0, #0
    d6ae:	bd08      	pop	{r3, pc}

0000d6b0 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    d6b0:	4801      	ldr	r0, [pc, #4]	; (d6b8 <ll_feat_get+0x8>)
    d6b2:	2100      	movs	r1, #0
    d6b4:	4770      	bx	lr
    d6b6:	bf00      	nop
    d6b8:	000141ff 	.word	0x000141ff

0000d6bc <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    d6bc:	b510      	push	{r4, lr}
    d6be:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    d6c0:	f009 f856 	bl	16770 <lll_reset>
	LL_ASSERT(!err);
    d6c4:	b970      	cbnz	r0, d6e4 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    d6c6:	f009 fc47 	bl	16f58 <lll_adv_reset>
	LL_ASSERT(!err);
    d6ca:	b9e0      	cbnz	r0, d706 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    d6cc:	f00a fb36 	bl	17d3c <lll_scan_reset>
	LL_ASSERT(!err);
    d6d0:	bb50      	cbnz	r0, d728 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    d6d2:	f00a fc95 	bl	18000 <lll_conn_reset>
	LL_ASSERT(!err);
    d6d6:	2800      	cmp	r0, #0
    d6d8:	d137      	bne.n	d74a <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
    d6da:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    d6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6e0:	f00d bd7a 	b.w	1b1d8 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    d6e4:	4a22      	ldr	r2, [pc, #136]	; (d770 <perform_lll_reset+0xb4>)
    d6e6:	4923      	ldr	r1, [pc, #140]	; (d774 <perform_lll_reset+0xb8>)
    d6e8:	4823      	ldr	r0, [pc, #140]	; (d778 <perform_lll_reset+0xbc>)
    d6ea:	f240 7364 	movw	r3, #1892	; 0x764
    d6ee:	f00e fdd5 	bl	1c29c <printk>
    d6f2:	4040      	eors	r0, r0
    d6f4:	f380 8811 	msr	BASEPRI, r0
    d6f8:	f04f 0003 	mov.w	r0, #3
    d6fc:	df02      	svc	2
	err = lll_adv_reset();
    d6fe:	f009 fc2b 	bl	16f58 <lll_adv_reset>
	LL_ASSERT(!err);
    d702:	2800      	cmp	r0, #0
    d704:	d0e2      	beq.n	d6cc <perform_lll_reset+0x10>
    d706:	4a1a      	ldr	r2, [pc, #104]	; (d770 <perform_lll_reset+0xb4>)
    d708:	491a      	ldr	r1, [pc, #104]	; (d774 <perform_lll_reset+0xb8>)
    d70a:	481b      	ldr	r0, [pc, #108]	; (d778 <perform_lll_reset+0xbc>)
    d70c:	f240 7369 	movw	r3, #1897	; 0x769
    d710:	f00e fdc4 	bl	1c29c <printk>
    d714:	4040      	eors	r0, r0
    d716:	f380 8811 	msr	BASEPRI, r0
    d71a:	f04f 0003 	mov.w	r0, #3
    d71e:	df02      	svc	2
	err = lll_scan_reset();
    d720:	f00a fb0c 	bl	17d3c <lll_scan_reset>
	LL_ASSERT(!err);
    d724:	2800      	cmp	r0, #0
    d726:	d0d4      	beq.n	d6d2 <perform_lll_reset+0x16>
    d728:	4a11      	ldr	r2, [pc, #68]	; (d770 <perform_lll_reset+0xb4>)
    d72a:	4912      	ldr	r1, [pc, #72]	; (d774 <perform_lll_reset+0xb8>)
    d72c:	4812      	ldr	r0, [pc, #72]	; (d778 <perform_lll_reset+0xbc>)
    d72e:	f240 736f 	movw	r3, #1903	; 0x76f
    d732:	f00e fdb3 	bl	1c29c <printk>
    d736:	4040      	eors	r0, r0
    d738:	f380 8811 	msr	BASEPRI, r0
    d73c:	f04f 0003 	mov.w	r0, #3
    d740:	df02      	svc	2
	err = lll_conn_reset();
    d742:	f00a fc5d 	bl	18000 <lll_conn_reset>
	LL_ASSERT(!err);
    d746:	2800      	cmp	r0, #0
    d748:	d0c7      	beq.n	d6da <perform_lll_reset+0x1e>
    d74a:	4a09      	ldr	r2, [pc, #36]	; (d770 <perform_lll_reset+0xb4>)
    d74c:	4909      	ldr	r1, [pc, #36]	; (d774 <perform_lll_reset+0xb8>)
    d74e:	480a      	ldr	r0, [pc, #40]	; (d778 <perform_lll_reset+0xbc>)
    d750:	f240 7375 	movw	r3, #1909	; 0x775
    d754:	f00e fda2 	bl	1c29c <printk>
    d758:	4040      	eors	r0, r0
    d75a:	f380 8811 	msr	BASEPRI, r0
    d75e:	f04f 0003 	mov.w	r0, #3
    d762:	df02      	svc	2
    d764:	4620      	mov	r0, r4
}
    d766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d76a:	f00d bd35 	b.w	1b1d8 <z_impl_k_sem_give>
    d76e:	bf00      	nop
    d770:	000208bc 	.word	0x000208bc
    d774:	000208f8 	.word	0x000208f8
    d778:	0002060c 	.word	0x0002060c

0000d77c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    d77c:	6008      	str	r0, [r1, #0]
    d77e:	4801      	ldr	r0, [pc, #4]	; (d784 <ull_ticker_status_give+0x8>)
    d780:	f00d bd2a 	b.w	1b1d8 <z_impl_k_sem_give>
    d784:	2000199c 	.word	0x2000199c

0000d788 <disabled_cb>:
    d788:	f00d bd26 	b.w	1b1d8 <z_impl_k_sem_give>

0000d78c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    d78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d790:	4e2f      	ldr	r6, [pc, #188]	; (d850 <tx_cmplt_get+0xc4>)
{
    d792:	460c      	mov	r4, r1
    d794:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    d796:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d798:	7872      	ldrb	r2, [r6, #1]
    d79a:	7831      	ldrb	r1, [r6, #0]
    d79c:	429a      	cmp	r2, r3
    d79e:	bf9c      	itt	ls
    d7a0:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
    d7a2:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
    d7a4:	4599      	cmp	r9, r3
{
    d7a6:	4682      	mov	sl, r0
    d7a8:	d049      	beq.n	d83e <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    d7aa:	fb13 f101 	smulbb	r1, r3, r1
    d7ae:	4d29      	ldr	r5, [pc, #164]	; (d854 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    d7b0:	3301      	adds	r3, #1
    d7b2:	b2db      	uxtb	r3, r3
		i = 0U;
    d7b4:	429a      	cmp	r2, r3
    d7b6:	bf08      	it	eq
    d7b8:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    d7ba:	186a      	adds	r2, r5, r1

	*idx = i;
    d7bc:	7023      	strb	r3, [r4, #0]
    d7be:	d03e      	beq.n	d83e <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
    d7c0:	5a6b      	ldrh	r3, [r5, r1]
    d7c2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    d7c4:	2700      	movs	r7, #0
    d7c6:	f04f 0802 	mov.w	r8, #2
    d7ca:	f04f 0b01 	mov.w	fp, #1
    d7ce:	e022      	b.n	d816 <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    d7d0:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
    d7d2:	f030 0303 	bics.w	r3, r0, #3
    d7d6:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
    d7da:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
    d7dc:	d129      	bne.n	d832 <tx_cmplt_get+0xa6>
	if (*idx >= count) {
    d7de:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d7e0:	7872      	ldrb	r2, [r6, #1]
    d7e2:	7831      	ldrb	r1, [r6, #0]
    d7e4:	429a      	cmp	r2, r3
    d7e6:	bf9c      	itt	ls
    d7e8:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
    d7ea:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    d7ec:	454b      	cmp	r3, r9
    d7ee:	d027      	beq.n	d840 <tx_cmplt_get+0xb4>
	i = *idx + 1;
    d7f0:	f103 0c01 	add.w	ip, r3, #1
    d7f4:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
    d7f8:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
    d7fc:	4562      	cmp	r2, ip
    d7fe:	bf08      	it	eq
    d800:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    d804:	18ea      	adds	r2, r5, r3
	*idx = i;
    d806:	f884 c000 	strb.w	ip, [r4]
    d80a:	d019      	beq.n	d840 <tx_cmplt_get+0xb4>
    d80c:	5ae9      	ldrh	r1, [r5, r3]
    d80e:	f8ba 3000 	ldrh.w	r3, [sl]
    d812:	4299      	cmp	r1, r3
    d814:	d114      	bne.n	d840 <tx_cmplt_get+0xb4>
		node_tx = tx->node;
    d816:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    d818:	2801      	cmp	r0, #1
    d81a:	d9d9      	bls.n	d7d0 <tx_cmplt_get+0x44>
    d81c:	f030 0303 	bics.w	r3, r0, #3
    d820:	d00a      	beq.n	d838 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    d822:	7903      	ldrb	r3, [r0, #4]
    d824:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    d828:	3b01      	subs	r3, #1
    d82a:	2b01      	cmp	r3, #1
    d82c:	d90b      	bls.n	d846 <tx_cmplt_get+0xba>
    d82e:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
    d832:	f002 fdc9 	bl	103c8 <ll_tx_mem_release>
    d836:	e7d2      	b.n	d7de <tx_cmplt_get+0x52>
    d838:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
    d83c:	e7cf      	b.n	d7de <tx_cmplt_get+0x52>
		return 0;
    d83e:	2700      	movs	r7, #0

	return cmplt;
}
    d840:	4638      	mov	r0, r7
    d842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    d846:	3701      	adds	r7, #1
    d848:	f8c2 b004 	str.w	fp, [r2, #4]
    d84c:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
    d84e:	e7f0      	b.n	d832 <tx_cmplt_get+0xa6>
    d850:	20000364 	.word	0x20000364
    d854:	20000368 	.word	0x20000368

0000d858 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    d858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d85c:	4f3c      	ldr	r7, [pc, #240]	; (d950 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    d85e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d954 <ull_done+0xfc>
    d862:	f8df 90f4 	ldr.w	r9, [pc, #244]	; d958 <ull_done+0x100>
{
    d866:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d868:	e9d7 0100 	ldrd	r0, r1, [r7]
    d86c:	aa01      	add	r2, sp, #4
    d86e:	f7fc fda5 	bl	a3bc <memq_peek>
		if (link) {
    d872:	4604      	mov	r4, r0
    d874:	2800      	cmp	r0, #0
    d876:	d03e      	beq.n	d8f6 <ull_done+0x9e>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    d878:	6878      	ldr	r0, [r7, #4]
    d87a:	2200      	movs	r2, #0
    d87c:	4639      	mov	r1, r7
    d87e:	f7fc fda5 	bl	a3cc <memq_dequeue>
			rx_demux_event_done(link, done);
    d882:	9e01      	ldr	r6, [sp, #4]
	ull_hdr = done->param;
    d884:	69f5      	ldr	r5, [r6, #28]
	if (ull_hdr) {
    d886:	b135      	cbz	r5, d896 <ull_done+0x3e>
	return hdr->ref;
    d888:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    d88a:	2b00      	cmp	r3, #0
    d88c:	d052      	beq.n	d934 <ull_done+0xdc>
	return hdr->ref--;
    d88e:	782b      	ldrb	r3, [r5, #0]
    d890:	3b01      	subs	r3, #1
    d892:	b2db      	uxtb	r3, r3
    d894:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    d896:	f896 3020 	ldrb.w	r3, [r6, #32]
    d89a:	b123      	cbz	r3, d8a6 <ull_done+0x4e>
    d89c:	2b01      	cmp	r3, #1
    d89e:	d13b      	bne.n	d918 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    d8a0:	4630      	mov	r0, r6
    d8a2:	f006 fa01 	bl	13ca8 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    d8a6:	4a2d      	ldr	r2, [pc, #180]	; (d95c <ull_done+0x104>)
	last = last + 1;
    d8a8:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    d8aa:	f892 c001 	ldrb.w	ip, [r2, #1]
    d8ae:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    d8b0:	3301      	adds	r3, #1
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
    d8b2:	2000      	movs	r0, #0
    d8b4:	b2db      	uxtb	r3, r3
		last = 0U;
    d8b6:	459c      	cmp	ip, r3
    d8b8:	bf08      	it	eq
    d8ba:	4603      	moveq	r3, r0
	if (last == first) {
    d8bc:	4299      	cmp	r1, r3
    d8be:	f886 0020 	strb.w	r0, [r6, #32]
    d8c2:	d01b      	beq.n	d8fc <ull_done+0xa4>
	done->hdr.link = link;
    d8c4:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d8c6:	78d0      	ldrb	r0, [r2, #3]
    d8c8:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d8ca:	fb00 2101 	mla	r1, r0, r1, r2
    d8ce:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
    d8d0:	70d3      	strb	r3, [r2, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    d8d2:	2d00      	cmp	r5, #0
    d8d4:	d0c8      	beq.n	d868 <ull_done+0x10>
	return hdr->ref;
    d8d6:	782b      	ldrb	r3, [r5, #0]
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d1c5      	bne.n	d868 <ull_done+0x10>
    d8dc:	696b      	ldr	r3, [r5, #20]
    d8de:	2b00      	cmp	r3, #0
    d8e0:	d0c2      	beq.n	d868 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    d8e2:	69a8      	ldr	r0, [r5, #24]
    d8e4:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d8e6:	e9d7 0100 	ldrd	r0, r1, [r7]
    d8ea:	aa01      	add	r2, sp, #4
    d8ec:	f7fc fd66 	bl	a3bc <memq_peek>
		if (link) {
    d8f0:	4604      	mov	r4, r0
    d8f2:	2800      	cmp	r0, #0
    d8f4:	d1c0      	bne.n	d878 <ull_done+0x20>
}
    d8f6:	b003      	add	sp, #12
    d8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    d8fc:	4918      	ldr	r1, [pc, #96]	; (d960 <ull_done+0x108>)
    d8fe:	4819      	ldr	r0, [pc, #100]	; (d964 <ull_done+0x10c>)
    d900:	f640 13bc 	movw	r3, #2492	; 0x9bc
    d904:	4642      	mov	r2, r8
    d906:	f00e fcc9 	bl	1c29c <printk>
    d90a:	4040      	eors	r0, r0
    d90c:	f380 8811 	msr	BASEPRI, r0
    d910:	f04f 0003 	mov.w	r0, #3
    d914:	df02      	svc	2
    d916:	e7dc      	b.n	d8d2 <ull_done+0x7a>
		LL_ASSERT(0);
    d918:	4913      	ldr	r1, [pc, #76]	; (d968 <ull_done+0x110>)
    d91a:	4812      	ldr	r0, [pc, #72]	; (d964 <ull_done+0x10c>)
    d91c:	f640 13b5 	movw	r3, #2485	; 0x9b5
    d920:	4642      	mov	r2, r8
    d922:	f00e fcbb 	bl	1c29c <printk>
    d926:	4040      	eors	r0, r0
    d928:	f380 8811 	msr	BASEPRI, r0
    d92c:	f04f 0003 	mov.w	r0, #3
    d930:	df02      	svc	2
		break;
    d932:	e7b8      	b.n	d8a6 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    d934:	480b      	ldr	r0, [pc, #44]	; (d964 <ull_done+0x10c>)
    d936:	f640 137f 	movw	r3, #2431	; 0x97f
    d93a:	4642      	mov	r2, r8
    d93c:	4649      	mov	r1, r9
    d93e:	f00e fcad 	bl	1c29c <printk>
    d942:	4040      	eors	r0, r0
    d944:	f380 8811 	msr	BASEPRI, r0
    d948:	f04f 0003 	mov.w	r0, #3
    d94c:	df02      	svc	2
    d94e:	e79e      	b.n	d88e <ull_done+0x36>
    d950:	20001988 	.word	0x20001988
    d954:	000208bc 	.word	0x000208bc
    d958:	00020900 	.word	0x00020900
    d95c:	20000220 	.word	0x20000220
    d960:	00020918 	.word	0x00020918
    d964:	0002060c 	.word	0x0002060c
    d968:	000206a4 	.word	0x000206a4

0000d96c <rx_alloc>:
{
    d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    d970:	4e37      	ldr	r6, [pc, #220]	; (da50 <rx_alloc+0xe4>)
    d972:	7833      	ldrb	r3, [r6, #0]
    d974:	4298      	cmp	r0, r3
    d976:	bf28      	it	cs
    d978:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d97a:	b380      	cbz	r0, d9de <rx_alloc+0x72>
    d97c:	4d35      	ldr	r5, [pc, #212]	; (da54 <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    d97e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; da58 <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d982:	78ec      	ldrb	r4, [r5, #3]
    d984:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
    d988:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
    d98c:	1d37      	adds	r7, r6, #4
	if (last == count) {
    d98e:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d990:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    d992:	3401      	adds	r4, #1
    d994:	b2e4      	uxtb	r4, r4
		last = 0U;
    d996:	42a2      	cmp	r2, r4
    d998:	bf08      	it	eq
    d99a:	2400      	moveq	r4, #0
	if (last == first) {
    d99c:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    d99e:	4638      	mov	r0, r7
    d9a0:	d04b      	beq.n	da3a <rx_alloc+0xce>
    d9a2:	f7fc fc9d 	bl	a2e0 <mem_acquire>
    d9a6:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    d9a8:	4640      	mov	r0, r8
		if (!link) {
    d9aa:	f1ba 0f00 	cmp.w	sl, #0
    d9ae:	d042      	beq.n	da36 <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
    d9b0:	f7fc fc96 	bl	a2e0 <mem_acquire>
		if (!rx) {
    d9b4:	2800      	cmp	r0, #0
    d9b6:	d045      	beq.n	da44 <rx_alloc+0xd8>
		rx->link = link;
    d9b8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d9bc:	78ea      	ldrb	r2, [r5, #3]
    d9be:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d9c0:	fb02 5303 	mla	r3, r2, r3, r5
    d9c4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    d9c6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    d9c8:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d9ca:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
    d9ce:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d9d0:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
    d9d4:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d9d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    d9da:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d9dc:	d1d7      	bne.n	d98e <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
    d9de:	b353      	cbz	r3, da36 <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d9e0:	4d1e      	ldr	r5, [pc, #120]	; (da5c <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
    d9e2:	4f1f      	ldr	r7, [pc, #124]	; (da60 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d9e4:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    d9e6:	f8df 8070 	ldr.w	r8, [pc, #112]	; da58 <rx_alloc+0xec>
		link->mem = NULL;
    d9ea:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    d9ee:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d9f0:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    d9f2:	3401      	adds	r4, #1
    d9f4:	b2e4      	uxtb	r4, r4
		last = 0U;
    d9f6:	42a2      	cmp	r2, r4
    d9f8:	bf08      	it	eq
    d9fa:	2400      	moveq	r4, #0
	if (last == first) {
    d9fc:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    d9fe:	4638      	mov	r0, r7
    da00:	d019      	beq.n	da36 <rx_alloc+0xca>
    da02:	f7fc fc6d 	bl	a2e0 <mem_acquire>
    da06:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    da08:	4640      	mov	r0, r8
		if (!link) {
    da0a:	f1ba 0f00 	cmp.w	sl, #0
    da0e:	d012      	beq.n	da36 <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
    da10:	f7fc fc66 	bl	a2e0 <mem_acquire>
		if (!rx) {
    da14:	b1b0      	cbz	r0, da44 <rx_alloc+0xd8>
		link->mem = NULL;
    da16:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    da1a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    da1e:	78ea      	ldrb	r2, [r5, #3]
    da20:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    da22:	fb02 5303 	mla	r3, r2, r3, r5
    da26:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    da28:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    da2a:	70ec      	strb	r4, [r5, #3]
    da2c:	3b01      	subs	r3, #1
    da2e:	b2db      	uxtb	r3, r3
    da30:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    da32:	2b00      	cmp	r3, #0
    da34:	d1db      	bne.n	d9ee <rx_alloc+0x82>
}
    da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
    da3a:	f1b9 0f00 	cmp.w	r9, #0
    da3e:	d0fa      	beq.n	da36 <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
    da40:	7833      	ldrb	r3, [r6, #0]
    da42:	e7cc      	b.n	d9de <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
    da44:	4650      	mov	r0, sl
    da46:	4906      	ldr	r1, [pc, #24]	; (da60 <rx_alloc+0xf4>)
}
    da48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    da4c:	f7fc bc62 	b.w	a314 <mem_release>
    da50:	2000164c 	.word	0x2000164c
    da54:	20000248 	.word	0x20000248
    da58:	200016ac 	.word	0x200016ac
    da5c:	20000234 	.word	0x20000234
    da60:	20001650 	.word	0x20001650

0000da64 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    da64:	4b46      	ldr	r3, [pc, #280]	; (db80 <init_reset+0x11c>)
{
    da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    da6a:	1d18      	adds	r0, r3, #4
    da6c:	2203      	movs	r2, #3
    da6e:	2134      	movs	r1, #52	; 0x34
    da70:	f7fc fc06 	bl	a280 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    da74:	4b43      	ldr	r3, [pc, #268]	; (db84 <init_reset+0x120>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    da76:	4d44      	ldr	r5, [pc, #272]	; (db88 <init_reset+0x124>)
		link = mem_acquire(&mem_link_done.free);
    da78:	4f42      	ldr	r7, [pc, #264]	; (db84 <init_reset+0x120>)
		rx = mem_acquire(&mem_done.free);
    da7a:	f8df 8104 	ldr.w	r8, [pc, #260]	; db80 <init_reset+0x11c>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    da7e:	2204      	movs	r2, #4
    da80:	2108      	movs	r1, #8
    da82:	1898      	adds	r0, r3, r2
    da84:	f7fc fbfc 	bl	a280 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    da88:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    da8a:	786a      	ldrb	r2, [r5, #1]
    da8c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    da8e:	3401      	adds	r4, #1
    da90:	b2e4      	uxtb	r4, r4
		last = 0U;
    da92:	42a2      	cmp	r2, r4
    da94:	bf08      	it	eq
    da96:	2400      	moveq	r4, #0
	if (last == first) {
    da98:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    da9a:	4638      	mov	r0, r7
    da9c:	d013      	beq.n	dac6 <init_reset+0x62>
    da9e:	f7fc fc1f 	bl	a2e0 <mem_acquire>
    daa2:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    daa4:	4640      	mov	r0, r8
		if (!link) {
    daa6:	b176      	cbz	r6, dac6 <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
    daa8:	f7fc fc1a 	bl	a2e0 <mem_acquire>
		if (!rx) {
    daac:	b138      	cbz	r0, dabe <init_reset+0x5a>
		rx->link = link;
    daae:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    dab0:	78ea      	ldrb	r2, [r5, #3]
    dab2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    dab4:	fb02 5303 	mla	r3, r2, r3, r5
    dab8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    daba:	70ec      	strb	r4, [r5, #3]
}
    dabc:	e7e5      	b.n	da8a <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
    dabe:	4931      	ldr	r1, [pc, #196]	; (db84 <init_reset+0x120>)
    dac0:	4630      	mov	r0, r6
    dac2:	f7fc fc27 	bl	a314 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    dac6:	4b31      	ldr	r3, [pc, #196]	; (db8c <init_reset+0x128>)
    dac8:	220a      	movs	r2, #10
    daca:	1d18      	adds	r0, r3, #4
    dacc:	2148      	movs	r1, #72	; 0x48
    dace:	f7fc fbd7 	bl	a280 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    dad2:	4b2f      	ldr	r3, [pc, #188]	; (db90 <init_reset+0x12c>)
    dad4:	220b      	movs	r2, #11
    dad6:	1d18      	adds	r0, r3, #4
    dad8:	2108      	movs	r1, #8
    dada:	f7fc fbd1 	bl	a280 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    dade:	482c      	ldr	r0, [pc, #176]	; (db90 <init_reset+0x12c>)
    dae0:	f7fc fbfe 	bl	a2e0 <mem_acquire>
	LL_ASSERT(link);
    dae4:	4604      	mov	r4, r0
    dae6:	b308      	cbz	r0, db2c <init_reset+0xc8>
	MEMQ_INIT(ull_rx, link);
    dae8:	4a2a      	ldr	r2, [pc, #168]	; (db94 <init_reset+0x130>)
    daea:	4620      	mov	r0, r4
    daec:	1f11      	subs	r1, r2, #4
    daee:	f7fc fc4d 	bl	a38c <memq_init>
	link = mem_acquire(&mem_link_done.free);
    daf2:	4824      	ldr	r0, [pc, #144]	; (db84 <init_reset+0x120>)
    daf4:	f7fc fbf4 	bl	a2e0 <mem_acquire>
	LL_ASSERT(link);
    daf8:	4604      	mov	r4, r0
    dafa:	b328      	cbz	r0, db48 <init_reset+0xe4>
	MEMQ_INIT(ull_done, link);
    dafc:	4a26      	ldr	r2, [pc, #152]	; (db98 <init_reset+0x134>)
    dafe:	4620      	mov	r0, r4
    db00:	1f11      	subs	r1, r2, #4
    db02:	f7fc fc43 	bl	a38c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    db06:	4822      	ldr	r0, [pc, #136]	; (db90 <init_reset+0x12c>)
    db08:	f7fc fbea 	bl	a2e0 <mem_acquire>
	LL_ASSERT(link);
    db0c:	4604      	mov	r4, r0
    db0e:	b348      	cbz	r0, db64 <init_reset+0x100>
	MEMQ_INIT(ll_rx, link);
    db10:	4a22      	ldr	r2, [pc, #136]	; (db9c <init_reset+0x138>)
    db12:	4620      	mov	r0, r4
    db14:	1f11      	subs	r1, r2, #4
    db16:	f7fc fc39 	bl	a38c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    db1a:	4b21      	ldr	r3, [pc, #132]	; (dba0 <init_reset+0x13c>)
    db1c:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
    db1e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    db20:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    db22:	f7ff ff23 	bl	d96c <rx_alloc>
}
    db26:	2000      	movs	r0, #0
    db28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
    db2c:	4a1d      	ldr	r2, [pc, #116]	; (dba4 <init_reset+0x140>)
    db2e:	491e      	ldr	r1, [pc, #120]	; (dba8 <init_reset+0x144>)
    db30:	481e      	ldr	r0, [pc, #120]	; (dbac <init_reset+0x148>)
    db32:	f240 7342 	movw	r3, #1858	; 0x742
    db36:	f00e fbb1 	bl	1c29c <printk>
    db3a:	4040      	eors	r0, r0
    db3c:	f380 8811 	msr	BASEPRI, r0
    db40:	f04f 0003 	mov.w	r0, #3
    db44:	df02      	svc	2
    db46:	e7cf      	b.n	dae8 <init_reset+0x84>
	LL_ASSERT(link);
    db48:	4a16      	ldr	r2, [pc, #88]	; (dba4 <init_reset+0x140>)
    db4a:	4917      	ldr	r1, [pc, #92]	; (dba8 <init_reset+0x144>)
    db4c:	4817      	ldr	r0, [pc, #92]	; (dbac <init_reset+0x148>)
    db4e:	f240 734a 	movw	r3, #1866	; 0x74a
    db52:	f00e fba3 	bl	1c29c <printk>
    db56:	4040      	eors	r0, r0
    db58:	f380 8811 	msr	BASEPRI, r0
    db5c:	f04f 0003 	mov.w	r0, #3
    db60:	df02      	svc	2
    db62:	e7cb      	b.n	dafc <init_reset+0x98>
	LL_ASSERT(link);
    db64:	4a0f      	ldr	r2, [pc, #60]	; (dba4 <init_reset+0x140>)
    db66:	4910      	ldr	r1, [pc, #64]	; (dba8 <init_reset+0x144>)
    db68:	4810      	ldr	r0, [pc, #64]	; (dbac <init_reset+0x148>)
    db6a:	f240 7352 	movw	r3, #1874	; 0x752
    db6e:	f00e fb95 	bl	1c29c <printk>
    db72:	4040      	eors	r0, r0
    db74:	f380 8811 	msr	BASEPRI, r0
    db78:	f04f 0003 	mov.w	r0, #3
    db7c:	df02      	svc	2
    db7e:	e7c7      	b.n	db10 <init_reset+0xac>
    db80:	20001588 	.word	0x20001588
    db84:	20001628 	.word	0x20001628
    db88:	20000220 	.word	0x20000220
    db8c:	200016ac 	.word	0x200016ac
    db90:	20001650 	.word	0x20001650
    db94:	20001994 	.word	0x20001994
    db98:	2000198c 	.word	0x2000198c
    db9c:	20001984 	.word	0x20001984
    dba0:	2000164c 	.word	0x2000164c
    dba4:	000208bc 	.word	0x000208bc
    dba8:	00020c74 	.word	0x00020c74
    dbac:	0002060c 	.word	0x0002060c

0000dbb0 <rx_demux>:
{
    dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; dd64 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    dbb8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; dd68 <rx_demux+0x1b8>
		LL_ASSERT(0);
    dbbc:	f8df a1ac 	ldr.w	sl, [pc, #428]	; dd6c <rx_demux+0x1bc>
    dbc0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; dd70 <rx_demux+0x1c0>
{
    dbc4:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    dbc6:	e9d8 0100 	ldrd	r0, r1, [r8]
    dbca:	aa03      	add	r2, sp, #12
    dbcc:	f7fc fbf6 	bl	a3bc <memq_peek>
		if (link) {
    dbd0:	4605      	mov	r5, r0
    dbd2:	2800      	cmp	r0, #0
    dbd4:	d035      	beq.n	dc42 <rx_demux+0x92>
			LL_ASSERT(rx);
    dbd6:	9b03      	ldr	r3, [sp, #12]
    dbd8:	2b00      	cmp	r3, #0
    dbda:	f000 80a5 	beq.w	dd28 <rx_demux+0x178>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    dbde:	7818      	ldrb	r0, [r3, #0]
    dbe0:	aa04      	add	r2, sp, #16
    dbe2:	a902      	add	r1, sp, #8
    dbe4:	f006 fb30 	bl	14248 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    dbe8:	4604      	mov	r4, r0
    dbea:	2800      	cmp	r0, #0
    dbec:	d055      	beq.n	dc9a <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    dbee:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    dbf2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    dbf6:	780f      	ldrb	r7, [r1, #0]
    dbf8:	f8ad 200a 	strh.w	r2, [sp, #10]
    dbfc:	ae05      	add	r6, sp, #20
    dbfe:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    dc00:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    dc04:	f006 fb3c 	bl	14280 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    dc08:	4621      	mov	r1, r4
    dc0a:	9a05      	ldr	r2, [sp, #20]
    dc0c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    dc10:	f006 fb80 	bl	14314 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    dc14:	4620      	mov	r0, r4
    dc16:	f006 faef 	bl	141f8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    dc1a:	4632      	mov	r2, r6
    dc1c:	4629      	mov	r1, r5
    dc1e:	4638      	mov	r0, r7
    dc20:	f006 fb12 	bl	14248 <ull_conn_ack_by_last_peek>
	} while (link);
    dc24:	4604      	mov	r4, r0
    dc26:	2800      	cmp	r0, #0
    dc28:	d1ec      	bne.n	dc04 <rx_demux+0x54>
	k_sem_give(sem_recv);
    dc2a:	f8d9 0000 	ldr.w	r0, [r9]
    dc2e:	f00d fad3 	bl	1b1d8 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    dc32:	e9d8 0100 	ldrd	r0, r1, [r8]
    dc36:	aa03      	add	r2, sp, #12
    dc38:	f7fc fbc0 	bl	a3bc <memq_peek>
		if (link) {
    dc3c:	4605      	mov	r5, r0
    dc3e:	2800      	cmp	r0, #0
    dc40:	d1c9      	bne.n	dbd6 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    dc42:	aa04      	add	r2, sp, #16
    dc44:	a902      	add	r1, sp, #8
    dc46:	f10d 0007 	add.w	r0, sp, #7
    dc4a:	f006 fae1 	bl	14210 <ull_conn_ack_peek>
			if (link) {
    dc4e:	4604      	mov	r4, r0
    dc50:	2800      	cmp	r0, #0
    dc52:	d066      	beq.n	dd22 <rx_demux+0x172>
				rx_demux_conn_tx_ack(ack_last, handle,
    dc54:	9b04      	ldr	r3, [sp, #16]
    dc56:	9305      	str	r3, [sp, #20]
    dc58:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    dc5c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    dc60:	f8ad 300a 	strh.w	r3, [sp, #10]
    dc64:	ae05      	add	r6, sp, #20
    dc66:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    dc6a:	f006 fb09 	bl	14280 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    dc6e:	4621      	mov	r1, r4
    dc70:	9a05      	ldr	r2, [sp, #20]
    dc72:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    dc76:	f006 fb4d 	bl	14314 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    dc7a:	4620      	mov	r0, r4
    dc7c:	f006 fabc 	bl	141f8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    dc80:	4632      	mov	r2, r6
    dc82:	4629      	mov	r1, r5
    dc84:	4638      	mov	r0, r7
    dc86:	f006 fadf 	bl	14248 <ull_conn_ack_by_last_peek>
	} while (link);
    dc8a:	4604      	mov	r4, r0
    dc8c:	2800      	cmp	r0, #0
    dc8e:	d1ec      	bne.n	dc6a <rx_demux+0xba>
	k_sem_give(sem_recv);
    dc90:	f8d9 0000 	ldr.w	r0, [r9]
    dc94:	f00d faa0 	bl	1b1d8 <z_impl_k_sem_give>
			if (nack) {
    dc98:	e7cb      	b.n	dc32 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    dc9a:	9b03      	ldr	r3, [sp, #12]
    dc9c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    dc9e:	791b      	ldrb	r3, [r3, #4]
    dca0:	3b01      	subs	r3, #1
    dca2:	2b14      	cmp	r3, #20
    dca4:	d80c      	bhi.n	dcc0 <rx_demux+0x110>
    dca6:	e8df f003 	tbb	[pc, r3]
    dcaa:	0b19      	.short	0x0b19
    dcac:	0b190b37 	.word	0x0b190b37
    dcb0:	0b0b0b0b 	.word	0x0b0b0b0b
    dcb4:	0b0b0b0b 	.word	0x0b0b0b0b
    dcb8:	0b0b0b0b 	.word	0x0b0b0b0b
    dcbc:	2c0b      	.short	0x2c0b
    dcbe:	19          	.byte	0x19
    dcbf:	00          	.byte	0x00
		LL_ASSERT(0);
    dcc0:	482c      	ldr	r0, [pc, #176]	; (dd74 <rx_demux+0x1c4>)
    dcc2:	f640 136c 	movw	r3, #2412	; 0x96c
    dcc6:	4652      	mov	r2, sl
    dcc8:	4659      	mov	r1, fp
    dcca:	f00e fae7 	bl	1c29c <printk>
    dcce:	4040      	eors	r0, r0
    dcd0:	f380 8811 	msr	BASEPRI, r0
    dcd4:	f04f 0003 	mov.w	r0, #3
    dcd8:	df02      	svc	2
			if (nack) {
    dcda:	e774      	b.n	dbc6 <rx_demux+0x16>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dcdc:	4921      	ldr	r1, [pc, #132]	; (dd64 <rx_demux+0x1b4>)
    dcde:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dce2:	2200      	movs	r2, #0
    dce4:	f7fc fb72 	bl	a3cc <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dce8:	4b23      	ldr	r3, [pc, #140]	; (dd78 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    dcea:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dcec:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dcee:	4628      	mov	r0, r5
    dcf0:	4a22      	ldr	r2, [pc, #136]	; (dd7c <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dcf2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dcf4:	f7fc fb58 	bl	a3a8 <memq_enqueue>
	k_sem_give(sem_recv);
    dcf8:	f8d9 0000 	ldr.w	r0, [r9]
    dcfc:	f00d fa6c 	bl	1b1d8 <z_impl_k_sem_give>
			if (nack) {
    dd00:	e797      	b.n	dc32 <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dd02:	4918      	ldr	r1, [pc, #96]	; (dd64 <rx_demux+0x1b4>)
    dd04:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dd08:	2200      	movs	r2, #0
    dd0a:	f7fc fb5f 	bl	a3cc <memq_dequeue>
		ull_conn_setup(link, rx);
    dd0e:	9905      	ldr	r1, [sp, #20]
    dd10:	4628      	mov	r0, r5
    dd12:	f002 fe7f 	bl	10a14 <ull_conn_setup>
			if (nack) {
    dd16:	e756      	b.n	dbc6 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    dd18:	a905      	add	r1, sp, #20
    dd1a:	4628      	mov	r0, r5
    dd1c:	f002 fed6 	bl	10acc <ull_conn_rx>
		if (nack) {
    dd20:	b188      	cbz	r0, dd46 <rx_demux+0x196>
}
    dd22:	b007      	add	sp, #28
    dd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    dd28:	4915      	ldr	r1, [pc, #84]	; (dd80 <rx_demux+0x1d0>)
    dd2a:	4812      	ldr	r0, [pc, #72]	; (dd74 <rx_demux+0x1c4>)
    dd2c:	f640 031b 	movw	r3, #2075	; 0x81b
    dd30:	4652      	mov	r2, sl
    dd32:	f00e fab3 	bl	1c29c <printk>
    dd36:	4040      	eors	r0, r0
    dd38:	f380 8811 	msr	BASEPRI, r0
    dd3c:	f04f 0003 	mov.w	r0, #3
    dd40:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    dd42:	9b03      	ldr	r3, [sp, #12]
    dd44:	e74b      	b.n	dbde <rx_demux+0x2e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dd46:	4907      	ldr	r1, [pc, #28]	; (dd64 <rx_demux+0x1b4>)
    dd48:	4602      	mov	r2, r0
    dd4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dd4e:	f7fc fb3d 	bl	a3cc <memq_dequeue>
		if (rx) {
    dd52:	9905      	ldr	r1, [sp, #20]
    dd54:	2900      	cmp	r1, #0
    dd56:	f43f af36 	beq.w	dbc6 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dd5a:	4b07      	ldr	r3, [pc, #28]	; (dd78 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dd5c:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dd5e:	78db      	ldrb	r3, [r3, #3]
    dd60:	e7c6      	b.n	dcf0 <rx_demux+0x140>
    dd62:	bf00      	nop
    dd64:	20001990 	.word	0x20001990
    dd68:	20001998 	.word	0x20001998
    dd6c:	000208bc 	.word	0x000208bc
    dd70:	000206a4 	.word	0x000206a4
    dd74:	0002060c 	.word	0x0002060c
    dd78:	20000364 	.word	0x20000364
    dd7c:	20001984 	.word	0x20001984
    dd80:	00020928 	.word	0x00020928

0000dd84 <ll_init>:
{
    dd84:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    dd86:	4b30      	ldr	r3, [pc, #192]	; (de48 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    dd88:	4d30      	ldr	r5, [pc, #192]	; (de4c <ll_init+0xc8>)
	sem_recv = sem_rx;
    dd8a:	6018      	str	r0, [r3, #0]
{
    dd8c:	b087      	sub	sp, #28
	cntr_init();
    dd8e:	f00a ff11 	bl	18bb4 <cntr_init>
	mayfly_init();
    dd92:	f7fc fb2b 	bl	a3ec <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    dd96:	4a2e      	ldr	r2, [pc, #184]	; (de50 <ll_init+0xcc>)
    dd98:	4c2e      	ldr	r4, [pc, #184]	; (de54 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    dd9a:	492f      	ldr	r1, [pc, #188]	; (de58 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    dd9c:	e9cd 2504 	strd	r2, r5, [sp, #16]
    dda0:	4a2e      	ldr	r2, [pc, #184]	; (de5c <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    dda2:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    dda4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    dda8:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ddaa:	240c      	movs	r4, #12
    ddac:	e9cd 1400 	strd	r1, r4, [sp]
    ddb0:	4a2b      	ldr	r2, [pc, #172]	; (de60 <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    ddb2:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    ddb4:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    ddb6:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    ddb8:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ddba:	2000      	movs	r0, #0
    ddbc:	2106      	movs	r1, #6
    ddbe:	f7fd fc93 	bl	b6e8 <ticker_init>
	LL_ASSERT(!err);
    ddc2:	2800      	cmp	r0, #0
    ddc4:	d132      	bne.n	de2c <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ddc6:	2201      	movs	r2, #1
    ddc8:	2100      	movs	r1, #0
    ddca:	4826      	ldr	r0, [pc, #152]	; (de64 <ll_init+0xe0>)
    ddcc:	f011 fbd0 	bl	1f570 <z_impl_k_sem_init>
	err = lll_init();
    ddd0:	f008 fc64 	bl	1669c <lll_init>
	if (err) {
    ddd4:	4604      	mov	r4, r0
    ddd6:	b110      	cbz	r0, ddde <ll_init+0x5a>
}
    ddd8:	4620      	mov	r0, r4
    ddda:	b007      	add	sp, #28
    dddc:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    ddde:	f7ff fe41 	bl	da64 <init_reset>
	if (err) {
    dde2:	4604      	mov	r4, r0
    dde4:	2800      	cmp	r0, #0
    dde6:	d1f7      	bne.n	ddd8 <ll_init+0x54>
	err = lll_adv_init();
    dde8:	f009 f89e 	bl	16f28 <lll_adv_init>
	if (err) {
    ddec:	4604      	mov	r4, r0
    ddee:	2800      	cmp	r0, #0
    ddf0:	d1f2      	bne.n	ddd8 <ll_init+0x54>
	err = ull_adv_init();
    ddf2:	f001 fa25 	bl	f240 <ull_adv_init>
	if (err) {
    ddf6:	4604      	mov	r4, r0
    ddf8:	2800      	cmp	r0, #0
    ddfa:	d1ed      	bne.n	ddd8 <ll_init+0x54>
	err = lll_scan_init();
    ddfc:	f009 ff9c 	bl	17d38 <lll_scan_init>
	if (err) {
    de00:	4604      	mov	r4, r0
    de02:	2800      	cmp	r0, #0
    de04:	d1e8      	bne.n	ddd8 <ll_init+0x54>
	err = ull_scan_init();
    de06:	f001 fb51 	bl	f4ac <ull_scan_init>
	if (err) {
    de0a:	4604      	mov	r4, r0
    de0c:	2800      	cmp	r0, #0
    de0e:	d1e3      	bne.n	ddd8 <ll_init+0x54>
	err = lll_conn_init();
    de10:	f00a f8ea 	bl	17fe8 <lll_conn_init>
	if (err) {
    de14:	4604      	mov	r4, r0
    de16:	2800      	cmp	r0, #0
    de18:	d1de      	bne.n	ddd8 <ll_init+0x54>
	err = ull_conn_init();
    de1a:	f002 fda7 	bl	1096c <ull_conn_init>
	if (err) {
    de1e:	4604      	mov	r4, r0
    de20:	2800      	cmp	r0, #0
    de22:	d1d9      	bne.n	ddd8 <ll_init+0x54>
		ull_filter_reset(true);
    de24:	2001      	movs	r0, #1
    de26:	f008 f8bb 	bl	15fa0 <ull_filter_reset>
	return  0;
    de2a:	e7d5      	b.n	ddd8 <ll_init+0x54>
	LL_ASSERT(!err);
    de2c:	4a0e      	ldr	r2, [pc, #56]	; (de68 <ll_init+0xe4>)
    de2e:	490f      	ldr	r1, [pc, #60]	; (de6c <ll_init+0xe8>)
    de30:	480f      	ldr	r0, [pc, #60]	; (de70 <ll_init+0xec>)
    de32:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    de36:	f00e fa31 	bl	1c29c <printk>
    de3a:	4040      	eors	r0, r0
    de3c:	f380 8811 	msr	BASEPRI, r0
    de40:	f04f 0003 	mov.w	r0, #3
    de44:	df02      	svc	2
    de46:	e7be      	b.n	ddc6 <ll_init+0x42>
    de48:	20001998 	.word	0x20001998
    de4c:	000198f9 	.word	0x000198f9
    de50:	000197a9 	.word	0x000197a9
    de54:	00019745 	.word	0x00019745
    de58:	20001d44 	.word	0x20001d44
    de5c:	20001ad4 	.word	0x20001ad4
    de60:	200019b4 	.word	0x200019b4
    de64:	2000199c 	.word	0x2000199c
    de68:	000208bc 	.word	0x000208bc
    de6c:	000208f8 	.word	0x000208f8
    de70:	0002060c 	.word	0x0002060c

0000de74 <ll_reset>:
{
    de74:	b510      	push	{r4, lr}
    de76:	b086      	sub	sp, #24
	err = ull_adv_reset();
    de78:	f001 f9f2 	bl	f260 <ull_adv_reset>
	LL_ASSERT(!err);
    de7c:	2800      	cmp	r0, #0
    de7e:	d13a      	bne.n	def6 <ll_reset+0x82>
	err = ull_scan_reset();
    de80:	f001 fb98 	bl	f5b4 <ull_scan_reset>
	LL_ASSERT(!err);
    de84:	2800      	cmp	r0, #0
    de86:	d147      	bne.n	df18 <ll_reset+0xa4>
		err = ll_connect_disable(&rx);
    de88:	4668      	mov	r0, sp
    de8a:	f006 fe0b 	bl	14aa4 <ll_connect_disable>
		if (!err) {
    de8e:	2800      	cmp	r0, #0
    de90:	d054      	beq.n	df3c <ll_reset+0xc8>
	err = ull_conn_reset();
    de92:	f002 fd6d 	bl	10970 <ull_conn_reset>
	LL_ASSERT(!err);
    de96:	2800      	cmp	r0, #0
    de98:	d161      	bne.n	df5e <ll_reset+0xea>
	MFIFO_INIT(tx_ack);
    de9a:	4b54      	ldr	r3, [pc, #336]	; (dfec <ll_reset+0x178>)
    de9c:	2400      	movs	r4, #0
    de9e:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    dea0:	4620      	mov	r0, r4
    dea2:	f008 f87d 	bl	15fa0 <ull_filter_reset>
	MFIFO_INIT(done);
    dea6:	4b52      	ldr	r3, [pc, #328]	; (dff0 <ll_reset+0x17c>)
	MFIFO_INIT(prep);
    dea8:	4952      	ldr	r1, [pc, #328]	; (dff4 <ll_reset+0x180>)
	MFIFO_INIT(done);
    deaa:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    deac:	4a52      	ldr	r2, [pc, #328]	; (dff8 <ll_reset+0x184>)
	MFIFO_INIT(ll_pdu_rx_free);
    deae:	4b53      	ldr	r3, [pc, #332]	; (dffc <ll_reset+0x188>)
	MFIFO_INIT(prep);
    deb0:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    deb2:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    deb4:	805c      	strh	r4, [r3, #2]
    deb6:	2201      	movs	r2, #1
    deb8:	4621      	mov	r1, r4
    deba:	4668      	mov	r0, sp
    debc:	f011 fb58 	bl	1f570 <z_impl_k_sem_init>
		mfy.param = &sem;
    dec0:	4b4f      	ldr	r3, [pc, #316]	; (e000 <ll_reset+0x18c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    dec2:	4622      	mov	r2, r4
    dec4:	4621      	mov	r1, r4
    dec6:	2003      	movs	r0, #3
		mfy.param = &sem;
    dec8:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    decc:	f7fc fae0 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ded0:	2800      	cmp	r0, #0
    ded2:	d16f      	bne.n	dfb4 <ll_reset+0x140>
	return z_impl_k_sem_take(sem, timeout);
    ded4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ded8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dedc:	4668      	mov	r0, sp
    dede:	f00d f9a1 	bl	1b224 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    dee2:	f001 f9d7 	bl	f294 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    dee6:	2800      	cmp	r0, #0
    dee8:	d156      	bne.n	df98 <ll_reset+0x124>
	err = init_reset();
    deea:	f7ff fdbb 	bl	da64 <init_reset>
	LL_ASSERT(!err);
    deee:	2800      	cmp	r0, #0
    def0:	d143      	bne.n	df7a <ll_reset+0x106>
}
    def2:	b006      	add	sp, #24
    def4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    def6:	4a43      	ldr	r2, [pc, #268]	; (e004 <ll_reset+0x190>)
    def8:	4943      	ldr	r1, [pc, #268]	; (e008 <ll_reset+0x194>)
    defa:	4844      	ldr	r0, [pc, #272]	; (e00c <ll_reset+0x198>)
    defc:	f240 236e 	movw	r3, #622	; 0x26e
    df00:	f00e f9cc 	bl	1c29c <printk>
    df04:	4040      	eors	r0, r0
    df06:	f380 8811 	msr	BASEPRI, r0
    df0a:	f04f 0003 	mov.w	r0, #3
    df0e:	df02      	svc	2
	err = ull_scan_reset();
    df10:	f001 fb50 	bl	f5b4 <ull_scan_reset>
	LL_ASSERT(!err);
    df14:	2800      	cmp	r0, #0
    df16:	d0b7      	beq.n	de88 <ll_reset+0x14>
    df18:	4a3a      	ldr	r2, [pc, #232]	; (e004 <ll_reset+0x190>)
    df1a:	493b      	ldr	r1, [pc, #236]	; (e008 <ll_reset+0x194>)
    df1c:	483b      	ldr	r0, [pc, #236]	; (e00c <ll_reset+0x198>)
    df1e:	f44f 731d 	mov.w	r3, #628	; 0x274
    df22:	f00e f9bb 	bl	1c29c <printk>
    df26:	4040      	eors	r0, r0
    df28:	f380 8811 	msr	BASEPRI, r0
    df2c:	f04f 0003 	mov.w	r0, #3
    df30:	df02      	svc	2
		err = ll_connect_disable(&rx);
    df32:	4668      	mov	r0, sp
    df34:	f006 fdb6 	bl	14aa4 <ll_connect_disable>
		if (!err) {
    df38:	2800      	cmp	r0, #0
    df3a:	d1aa      	bne.n	de92 <ll_reset+0x1e>
			scan = ull_scan_is_enabled_get(0);
    df3c:	f001 fb72 	bl	f624 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
    df40:	4604      	mov	r4, r0
    df42:	2800      	cmp	r0, #0
    df44:	d044      	beq.n	dfd0 <ll_reset+0x15c>
			scan->is_enabled = 0U;
    df46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
    df4a:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
    df4c:	f36f 0300 	bfc	r3, #0, #1
    df50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
    df54:	6222      	str	r2, [r4, #32]
	err = ull_conn_reset();
    df56:	f002 fd0b 	bl	10970 <ull_conn_reset>
	LL_ASSERT(!err);
    df5a:	2800      	cmp	r0, #0
    df5c:	d09d      	beq.n	de9a <ll_reset+0x26>
    df5e:	4a29      	ldr	r2, [pc, #164]	; (e004 <ll_reset+0x190>)
    df60:	4929      	ldr	r1, [pc, #164]	; (e008 <ll_reset+0x194>)
    df62:	482a      	ldr	r0, [pc, #168]	; (e00c <ll_reset+0x198>)
    df64:	f44f 732e 	mov.w	r3, #696	; 0x2b8
    df68:	f00e f998 	bl	1c29c <printk>
    df6c:	4040      	eors	r0, r0
    df6e:	f380 8811 	msr	BASEPRI, r0
    df72:	f04f 0003 	mov.w	r0, #3
    df76:	df02      	svc	2
    df78:	e78f      	b.n	de9a <ll_reset+0x26>
	LL_ASSERT(!err);
    df7a:	4a22      	ldr	r2, [pc, #136]	; (e004 <ll_reset+0x190>)
    df7c:	4922      	ldr	r1, [pc, #136]	; (e008 <ll_reset+0x194>)
    df7e:	4823      	ldr	r0, [pc, #140]	; (e00c <ll_reset+0x198>)
    df80:	f44f 733f 	mov.w	r3, #764	; 0x2fc
    df84:	f00e f98a 	bl	1c29c <printk>
    df88:	4040      	eors	r0, r0
    df8a:	f380 8811 	msr	BASEPRI, r0
    df8e:	f04f 0003 	mov.w	r0, #3
    df92:	df02      	svc	2
}
    df94:	b006      	add	sp, #24
    df96:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    df98:	4a1a      	ldr	r2, [pc, #104]	; (e004 <ll_reset+0x190>)
    df9a:	491b      	ldr	r1, [pc, #108]	; (e008 <ll_reset+0x194>)
    df9c:	481b      	ldr	r0, [pc, #108]	; (e00c <ll_reset+0x198>)
    df9e:	f240 23f7 	movw	r3, #759	; 0x2f7
    dfa2:	f00e f97b 	bl	1c29c <printk>
    dfa6:	4040      	eors	r0, r0
    dfa8:	f380 8811 	msr	BASEPRI, r0
    dfac:	f04f 0003 	mov.w	r0, #3
    dfb0:	df02      	svc	2
    dfb2:	e79a      	b.n	deea <ll_reset+0x76>
		LL_ASSERT(!retval);
    dfb4:	4a13      	ldr	r2, [pc, #76]	; (e004 <ll_reset+0x190>)
    dfb6:	4916      	ldr	r1, [pc, #88]	; (e010 <ll_reset+0x19c>)
    dfb8:	4814      	ldr	r0, [pc, #80]	; (e00c <ll_reset+0x198>)
    dfba:	f240 23ea 	movw	r3, #746	; 0x2ea
    dfbe:	f00e f96d 	bl	1c29c <printk>
    dfc2:	4040      	eors	r0, r0
    dfc4:	f380 8811 	msr	BASEPRI, r0
    dfc8:	f04f 0003 	mov.w	r0, #3
    dfcc:	df02      	svc	2
    dfce:	e781      	b.n	ded4 <ll_reset+0x60>
			LL_ASSERT(scan);
    dfd0:	4a0c      	ldr	r2, [pc, #48]	; (e004 <ll_reset+0x190>)
    dfd2:	4910      	ldr	r1, [pc, #64]	; (e014 <ll_reset+0x1a0>)
    dfd4:	480d      	ldr	r0, [pc, #52]	; (e00c <ll_reset+0x198>)
    dfd6:	f44f 732b 	mov.w	r3, #684	; 0x2ac
    dfda:	f00e f95f 	bl	1c29c <printk>
    dfde:	4040      	eors	r0, r0
    dfe0:	f380 8811 	msr	BASEPRI, r0
    dfe4:	f04f 0003 	mov.w	r0, #3
    dfe8:	df02      	svc	2
    dfea:	e7ac      	b.n	df46 <ll_reset+0xd2>
    dfec:	20000364 	.word	0x20000364
    dff0:	20000220 	.word	0x20000220
    dff4:	20000260 	.word	0x20000260
    dff8:	20000248 	.word	0x20000248
    dffc:	20000234 	.word	0x20000234
    e000:	20000398 	.word	0x20000398
    e004:	000208bc 	.word	0x000208bc
    e008:	000208f8 	.word	0x000208f8
    e00c:	0002060c 	.word	0x0002060c
    e010:	0002092c 	.word	0x0002092c
    e014:	000213f8 	.word	0x000213f8

0000e018 <ll_rx_get>:
{
    e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e01c:	b085      	sub	sp, #20
    e01e:	e9cd 0100 	strd	r0, r1, [sp]
    e022:	4c65      	ldr	r4, [pc, #404]	; (e1b8 <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
    e024:	4d65      	ldr	r5, [pc, #404]	; (e1bc <ll_rx_get+0x1a4>)
    e026:	4e66      	ldr	r6, [pc, #408]	; (e1c0 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
    e028:	9a00      	ldr	r2, [sp, #0]
    e02a:	2300      	movs	r3, #0
    e02c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    e02e:	e9d6 0100 	ldrd	r0, r1, [r6]
    e032:	aa03      	add	r2, sp, #12
    e034:	f7fc f9c2 	bl	a3bc <memq_peek>
	if (link) {
    e038:	4680      	mov	r8, r0
    e03a:	2800      	cmp	r0, #0
    e03c:	f000 80a8 	beq.w	e190 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    e040:	9b03      	ldr	r3, [sp, #12]
    e042:	4960      	ldr	r1, [pc, #384]	; (e1c4 <ll_rx_get+0x1ac>)
    e044:	781a      	ldrb	r2, [r3, #0]
    e046:	9801      	ldr	r0, [sp, #4]
    e048:	f7ff fba0 	bl	d78c <tx_cmplt_get>
		if (!cmplt) {
    e04c:	2800      	cmp	r0, #0
    e04e:	f040 80a4 	bne.w	e19a <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
    e052:	78a3      	ldrb	r3, [r4, #2]
    e054:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    e058:	78e2      	ldrb	r2, [r4, #3]
    e05a:	4607      	mov	r7, r0
    e05c:	f10d 0109 	add.w	r1, sp, #9
    e060:	f10d 000a 	add.w	r0, sp, #10
    e064:	f7ff fb92 	bl	d78c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    e068:	ea47 0200 	orr.w	r2, r7, r0
    e06c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    e070:	d1f2      	bne.n	e058 <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
    e072:	9b03      	ldr	r3, [sp, #12]
    e074:	7919      	ldrb	r1, [r3, #4]
    e076:	2901      	cmp	r1, #1
    e078:	f040 8097 	bne.w	e1aa <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
    e07c:	4950      	ldr	r1, [pc, #320]	; (e1c0 <ll_rx_get+0x1a8>)
    e07e:	6870      	ldr	r0, [r6, #4]
    e080:	f7fc f9a4 	bl	a3cc <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    e084:	4950      	ldr	r1, [pc, #320]	; (e1c8 <ll_rx_get+0x1b0>)
    e086:	4640      	mov	r0, r8
    e088:	f7fc f944 	bl	a314 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e08c:	782b      	ldrb	r3, [r5, #0]
    e08e:	2b06      	cmp	r3, #6
    e090:	d86f      	bhi.n	e172 <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
    e092:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    e094:	494d      	ldr	r1, [pc, #308]	; (e1cc <ll_rx_get+0x1b4>)
    e096:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    e098:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    e09a:	f7fc f93b 	bl	a314 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e09e:	782b      	ldrb	r3, [r5, #0]
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	d0c1      	beq.n	e028 <ll_rx_get+0x10>
    e0a4:	f8df 8128 	ldr.w	r8, [pc, #296]	; e1d0 <ll_rx_get+0x1b8>
	last = last + 1;
    e0a8:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    e0ac:	f898 2001 	ldrb.w	r2, [r8, #1]
    e0b0:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    e0b4:	3701      	adds	r7, #1
    e0b6:	b2ff      	uxtb	r7, r7
		last = 0U;
    e0b8:	42ba      	cmp	r2, r7
    e0ba:	bf08      	it	eq
    e0bc:	2700      	moveq	r7, #0
	if (last == first) {
    e0be:	429f      	cmp	r7, r3
    e0c0:	d0b2      	beq.n	e028 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
    e0c2:	4841      	ldr	r0, [pc, #260]	; (e1c8 <ll_rx_get+0x1b0>)
    e0c4:	f7fc f90c 	bl	a2e0 <mem_acquire>
		if (!link) {
    e0c8:	4682      	mov	sl, r0
    e0ca:	2800      	cmp	r0, #0
    e0cc:	d0ac      	beq.n	e028 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    e0ce:	483f      	ldr	r0, [pc, #252]	; (e1cc <ll_rx_get+0x1b4>)
    e0d0:	f7fc f906 	bl	a2e0 <mem_acquire>
		if (!rx) {
    e0d4:	2800      	cmp	r0, #0
    e0d6:	d063      	beq.n	e1a0 <ll_rx_get+0x188>
		rx->link = link;
    e0d8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e0dc:	f898 2003 	ldrb.w	r2, [r8, #3]
    e0e0:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e0e4:	fb02 8303 	mla	r3, r2, r3, r8
    e0e8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e0ea:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    e0ec:	f888 7003 	strb.w	r7, [r8, #3]
    e0f0:	3b01      	subs	r3, #1
    e0f2:	b2db      	uxtb	r3, r3
    e0f4:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d096      	beq.n	e028 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e0fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; e1d4 <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
    e0fe:	f8df 80c8 	ldr.w	r8, [pc, #200]	; e1c8 <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e102:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e106:	f8df b0c4 	ldr.w	fp, [pc, #196]	; e1cc <ll_rx_get+0x1b4>
    e10a:	e014      	b.n	e136 <ll_rx_get+0x11e>
		link->mem = NULL;
    e10c:	2300      	movs	r3, #0
    e10e:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
    e112:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e116:	f89a 2003 	ldrb.w	r2, [sl, #3]
    e11a:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e11e:	fb02 a303 	mla	r3, r2, r3, sl
    e122:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e124:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    e126:	f88a 7003 	strb.w	r7, [sl, #3]
    e12a:	3b01      	subs	r3, #1
    e12c:	b2db      	uxtb	r3, r3
    e12e:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    e130:	2b00      	cmp	r3, #0
    e132:	f43f af79 	beq.w	e028 <ll_rx_get+0x10>
	if (last == count) {
    e136:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e13a:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
    e13e:	3701      	adds	r7, #1
    e140:	b2ff      	uxtb	r7, r7
		last = 0U;
    e142:	42ba      	cmp	r2, r7
    e144:	bf08      	it	eq
    e146:	2700      	moveq	r7, #0
	if (last == first) {
    e148:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    e14a:	4640      	mov	r0, r8
    e14c:	f43f af6c 	beq.w	e028 <ll_rx_get+0x10>
    e150:	f7fc f8c6 	bl	a2e0 <mem_acquire>
    e154:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e156:	4658      	mov	r0, fp
		if (!link) {
    e158:	f1b9 0f00 	cmp.w	r9, #0
    e15c:	f43f af64 	beq.w	e028 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    e160:	f7fc f8be 	bl	a2e0 <mem_acquire>
		if (!rx) {
    e164:	2800      	cmp	r0, #0
    e166:	d1d1      	bne.n	e10c <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
    e168:	4917      	ldr	r1, [pc, #92]	; (e1c8 <ll_rx_get+0x1b0>)
    e16a:	4648      	mov	r0, r9
    e16c:	f7fc f8d2 	bl	a314 <mem_release>
			return;
    e170:	e75a      	b.n	e028 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e172:	4a19      	ldr	r2, [pc, #100]	; (e1d8 <ll_rx_get+0x1c0>)
    e174:	4919      	ldr	r1, [pc, #100]	; (e1dc <ll_rx_get+0x1c4>)
    e176:	481a      	ldr	r0, [pc, #104]	; (e1e0 <ll_rx_get+0x1c8>)
    e178:	f240 535b 	movw	r3, #1371	; 0x55b
    e17c:	f00e f88e 	bl	1c29c <printk>
    e180:	4040      	eors	r0, r0
    e182:	f380 8811 	msr	BASEPRI, r0
    e186:	f04f 0003 	mov.w	r0, #3
    e18a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    e18c:	782b      	ldrb	r3, [r5, #0]
    e18e:	e780      	b.n	e092 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    e190:	78e2      	ldrb	r2, [r4, #3]
    e192:	490c      	ldr	r1, [pc, #48]	; (e1c4 <ll_rx_get+0x1ac>)
    e194:	9801      	ldr	r0, [sp, #4]
    e196:	f7ff faf9 	bl	d78c <tx_cmplt_get>
}
    e19a:	b005      	add	sp, #20
    e19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    e1a0:	4909      	ldr	r1, [pc, #36]	; (e1c8 <ll_rx_get+0x1b0>)
    e1a2:	4650      	mov	r0, sl
    e1a4:	f7fc f8b6 	bl	a314 <mem_release>
			return;
    e1a8:	e73e      	b.n	e028 <ll_rx_get+0x10>
			*node_rx = rx;
    e1aa:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    e1ac:	4610      	mov	r0, r2
			*node_rx = rx;
    e1ae:	600b      	str	r3, [r1, #0]
}
    e1b0:	b005      	add	sp, #20
    e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1b6:	bf00      	nop
    e1b8:	20000364 	.word	0x20000364
    e1bc:	2000164c 	.word	0x2000164c
    e1c0:	20001980 	.word	0x20001980
    e1c4:	20000366 	.word	0x20000366
    e1c8:	20001650 	.word	0x20001650
    e1cc:	200016ac 	.word	0x200016ac
    e1d0:	20000248 	.word	0x20000248
    e1d4:	20000234 	.word	0x20000234
    e1d8:	000208bc 	.word	0x000208bc
    e1dc:	00020934 	.word	0x00020934
    e1e0:	0002060c 	.word	0x0002060c

0000e1e4 <ll_rx_dequeue>:
{
    e1e4:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    e1e6:	495e      	ldr	r1, [pc, #376]	; (e360 <ll_rx_dequeue+0x17c>)
{
    e1e8:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    e1ea:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    e1ec:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    e1ee:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    e1f0:	aa01      	add	r2, sp, #4
    e1f2:	f7fc f8eb 	bl	a3cc <memq_dequeue>
	LL_ASSERT(link);
    e1f6:	4604      	mov	r4, r0
    e1f8:	2800      	cmp	r0, #0
    e1fa:	d056      	beq.n	e2aa <ll_rx_dequeue+0xc6>
	mem_release(link, &mem_link_rx.free);
    e1fc:	4959      	ldr	r1, [pc, #356]	; (e364 <ll_rx_dequeue+0x180>)
    e1fe:	4620      	mov	r0, r4
    e200:	f7fc f888 	bl	a314 <mem_release>
	switch (rx->type) {
    e204:	9a01      	ldr	r2, [sp, #4]
    e206:	7913      	ldrb	r3, [r2, #4]
    e208:	2b1a      	cmp	r3, #26
    e20a:	d813      	bhi.n	e234 <ll_rx_dequeue+0x50>
    e20c:	e8df f003 	tbb	[pc, r3]
    e210:	0e12120e 	.word	0x0e12120e
    e214:	12120e12 	.word	0x12120e12
    e218:	12121212 	.word	0x12121212
    e21c:	12121212 	.word	0x12121212
    e220:	12121212 	.word	0x12121212
    e224:	0e0e0e21 	.word	0x0e0e0e21
    e228:	0e0e      	.short	0x0e0e
    e22a:	0e          	.byte	0x0e
    e22b:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    e22c:	2b00      	cmp	r3, #0
    e22e:	d04a      	beq.n	e2c6 <ll_rx_dequeue+0xe2>
}
    e230:	b002      	add	sp, #8
    e232:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    e234:	4a4c      	ldr	r2, [pc, #304]	; (e368 <ll_rx_dequeue+0x184>)
    e236:	494d      	ldr	r1, [pc, #308]	; (e36c <ll_rx_dequeue+0x188>)
    e238:	484d      	ldr	r0, [pc, #308]	; (e370 <ll_rx_dequeue+0x18c>)
    e23a:	f240 436a 	movw	r3, #1130	; 0x46a
    e23e:	f00e f82d 	bl	1c29c <printk>
    e242:	4040      	eors	r0, r0
    e244:	f380 8811 	msr	BASEPRI, r0
    e248:	f04f 0003 	mov.w	r0, #3
    e24c:	df02      	svc	2
}
    e24e:	b002      	add	sp, #8
    e250:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    e252:	7f13      	ldrb	r3, [r2, #28]
    e254:	2b3c      	cmp	r3, #60	; 0x3c
    e256:	d045      	beq.n	e2e4 <ll_rx_dequeue+0x100>
    e258:	7f53      	ldrb	r3, [r2, #29]
    e25a:	b1e3      	cbz	r3, e296 <ll_rx_dequeue+0xb2>
			adv = HDR_LLL2ULL(lll);
    e25c:	6893      	ldr	r3, [r2, #8]
    e25e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    e260:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e262:	b120      	cbz	r0, e26e <ll_rx_dequeue+0x8a>
					adv->node_rx_cc_free = NULL;
    e264:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    e266:	4943      	ldr	r1, [pc, #268]	; (e374 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
    e268:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
    e26a:	f7fc f853 	bl	a314 <mem_release>
			adv->is_enabled = 0U;
    e26e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    e272:	f36f 0300 	bfc	r3, #0, #1
    e276:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      (ull_scan_is_enabled(0) << 1)) |
    e27a:	2000      	movs	r0, #0
    e27c:	f001 f9ec 	bl	f658 <ull_scan_is_enabled>
    e280:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
    e282:	2000      	movs	r0, #0
    e284:	f001 f848 	bl	f318 <ull_adv_is_enabled>
			if (!bm) {
    e288:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
    e28c:	d1d0      	bne.n	e230 <ll_rx_dequeue+0x4c>
				ull_filter_adv_scan_state_cb(0);
    e28e:	f007 fbb5 	bl	159fc <ull_filter_adv_scan_state_cb>
}
    e292:	b002      	add	sp, #8
    e294:	bd70      	pop	{r4, r5, r6, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
    e296:	6892      	ldr	r2, [r2, #8]
    e298:	6812      	ldr	r2, [r2, #0]
			scan->is_enabled = 0U;
    e29a:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
			scan->lll.conn = NULL;
    e29e:	6213      	str	r3, [r2, #32]
			scan->is_enabled = 0U;
    e2a0:	f363 0100 	bfi	r1, r3, #0, #1
    e2a4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    e2a8:	e7e7      	b.n	e27a <ll_rx_dequeue+0x96>
	LL_ASSERT(link);
    e2aa:	4a2f      	ldr	r2, [pc, #188]	; (e368 <ll_rx_dequeue+0x184>)
    e2ac:	4932      	ldr	r1, [pc, #200]	; (e378 <ll_rx_dequeue+0x194>)
    e2ae:	4830      	ldr	r0, [pc, #192]	; (e370 <ll_rx_dequeue+0x18c>)
    e2b0:	f240 334e 	movw	r3, #846	; 0x34e
    e2b4:	f00d fff2 	bl	1c29c <printk>
    e2b8:	4040      	eors	r0, r0
    e2ba:	f380 8811 	msr	BASEPRI, r0
    e2be:	f04f 0003 	mov.w	r0, #3
    e2c2:	df02      	svc	2
    e2c4:	e79a      	b.n	e1fc <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    e2c6:	4a28      	ldr	r2, [pc, #160]	; (e368 <ll_rx_dequeue+0x184>)
    e2c8:	492c      	ldr	r1, [pc, #176]	; (e37c <ll_rx_dequeue+0x198>)
    e2ca:	4829      	ldr	r0, [pc, #164]	; (e370 <ll_rx_dequeue+0x18c>)
    e2cc:	f240 4366 	movw	r3, #1126	; 0x466
    e2d0:	f00d ffe4 	bl	1c29c <printk>
    e2d4:	4040      	eors	r0, r0
    e2d6:	f380 8811 	msr	BASEPRI, r0
    e2da:	f04f 0003 	mov.w	r0, #3
    e2de:	df02      	svc	2
}
    e2e0:	b002      	add	sp, #8
    e2e2:	bd70      	pop	{r4, r5, r6, pc}
			lll = ftr->param;
    e2e4:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    e2e6:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    e2ea:	b1ed      	cbz	r5, e328 <ll_rx_dequeue+0x144>
				LL_ASSERT(!conn_lll->link_tx_free);
    e2ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    e2ee:	2200      	movs	r2, #0
    e2f0:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    e2f2:	b163      	cbz	r3, e30e <ll_rx_dequeue+0x12a>
    e2f4:	4a1c      	ldr	r2, [pc, #112]	; (e368 <ll_rx_dequeue+0x184>)
    e2f6:	4922      	ldr	r1, [pc, #136]	; (e380 <ll_rx_dequeue+0x19c>)
    e2f8:	481d      	ldr	r0, [pc, #116]	; (e370 <ll_rx_dequeue+0x18c>)
    e2fa:	f240 33c7 	movw	r3, #967	; 0x3c7
    e2fe:	f00d ffcd 	bl	1c29c <printk>
    e302:	4040      	eors	r0, r0
    e304:	f380 8811 	msr	BASEPRI, r0
    e308:	f04f 0003 	mov.w	r0, #3
    e30c:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    e30e:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    e312:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e316:	f7fc f83d 	bl	a394 <memq_deinit>
				LL_ASSERT(link);
    e31a:	4606      	mov	r6, r0
    e31c:	b190      	cbz	r0, e344 <ll_rx_dequeue+0x160>
				ll_conn_release(conn);
    e31e:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    e320:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    e322:	f002 f823 	bl	1036c <ll_conn_release>
    e326:	e7a2      	b.n	e26e <ll_rx_dequeue+0x8a>
				LL_ASSERT(conn_lll);
    e328:	4a0f      	ldr	r2, [pc, #60]	; (e368 <ll_rx_dequeue+0x184>)
    e32a:	4916      	ldr	r1, [pc, #88]	; (e384 <ll_rx_dequeue+0x1a0>)
    e32c:	4810      	ldr	r0, [pc, #64]	; (e370 <ll_rx_dequeue+0x18c>)
    e32e:	f44f 7371 	mov.w	r3, #964	; 0x3c4
    e332:	f00d ffb3 	bl	1c29c <printk>
    e336:	4040      	eors	r0, r0
    e338:	f380 8811 	msr	BASEPRI, r0
    e33c:	f04f 0003 	mov.w	r0, #3
    e340:	df02      	svc	2
    e342:	e7d3      	b.n	e2ec <ll_rx_dequeue+0x108>
				LL_ASSERT(link);
    e344:	4a08      	ldr	r2, [pc, #32]	; (e368 <ll_rx_dequeue+0x184>)
    e346:	490c      	ldr	r1, [pc, #48]	; (e378 <ll_rx_dequeue+0x194>)
    e348:	4809      	ldr	r0, [pc, #36]	; (e370 <ll_rx_dequeue+0x18c>)
    e34a:	f240 33ca 	movw	r3, #970	; 0x3ca
    e34e:	f00d ffa5 	bl	1c29c <printk>
    e352:	4040      	eors	r0, r0
    e354:	f380 8811 	msr	BASEPRI, r0
    e358:	f04f 0003 	mov.w	r0, #3
    e35c:	df02      	svc	2
    e35e:	e7de      	b.n	e31e <ll_rx_dequeue+0x13a>
    e360:	20001980 	.word	0x20001980
    e364:	20001650 	.word	0x20001650
    e368:	000208bc 	.word	0x000208bc
    e36c:	000206a4 	.word	0x000206a4
    e370:	0002060c 	.word	0x0002060c
    e374:	200016ac 	.word	0x200016ac
    e378:	00020c74 	.word	0x00020c74
    e37c:	00020990 	.word	0x00020990
    e380:	00020978 	.word	0x00020978
    e384:	0002096c 	.word	0x0002096c

0000e388 <ll_rx_mem_release>:
{
    e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    e38c:	6804      	ldr	r4, [r0, #0]
{
    e38e:	4680      	mov	r8, r0
	while (rx) {
    e390:	b33c      	cbz	r4, e3e2 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
    e392:	4f5d      	ldr	r7, [pc, #372]	; (e508 <ll_rx_mem_release+0x180>)
    e394:	f8df 9174 	ldr.w	r9, [pc, #372]	; e50c <ll_rx_mem_release+0x184>
    e398:	4e5d      	ldr	r6, [pc, #372]	; (e510 <ll_rx_mem_release+0x188>)
		rx = rx->next;
    e39a:	4625      	mov	r5, r4
    e39c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    e39e:	792b      	ldrb	r3, [r5, #4]
    e3a0:	2b1a      	cmp	r3, #26
    e3a2:	d80f      	bhi.n	e3c4 <ll_rx_mem_release+0x3c>
    e3a4:	e8df f003 	tbb	[pc, r3]
    e3a8:	390e0e39 	.word	0x390e0e39
    e3ac:	0e0e390e 	.word	0x0e0e390e
    e3b0:	0e0e0e0e 	.word	0x0e0e0e0e
    e3b4:	0e0e0e0e 	.word	0x0e0e0e0e
    e3b8:	0e0e0e0e 	.word	0x0e0e0e0e
    e3bc:	39395725 	.word	0x39395725
    e3c0:	3939      	.short	0x3939
    e3c2:	39          	.byte	0x39
    e3c3:	00          	.byte	0x00
			LL_ASSERT(0);
    e3c4:	f240 534f 	movw	r3, #1359	; 0x54f
    e3c8:	463a      	mov	r2, r7
    e3ca:	4649      	mov	r1, r9
    e3cc:	4630      	mov	r0, r6
    e3ce:	f00d ff65 	bl	1c29c <printk>
    e3d2:	4040      	eors	r0, r0
    e3d4:	f380 8811 	msr	BASEPRI, r0
    e3d8:	f04f 0003 	mov.w	r0, #3
    e3dc:	df02      	svc	2
	while (rx) {
    e3de:	2c00      	cmp	r4, #0
    e3e0:	d1db      	bne.n	e39a <ll_rx_mem_release+0x12>
	*node_rx = rx;
    e3e2:	2300      	movs	r3, #0
    e3e4:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    e3e8:	20ff      	movs	r0, #255	; 0xff
}
    e3ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    e3ee:	f7ff babd 	b.w	d96c <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    e3f2:	7f2b      	ldrb	r3, [r5, #28]
    e3f4:	2b3c      	cmp	r3, #60	; 0x3c
    e3f6:	d062      	beq.n	e4be <ll_rx_mem_release+0x136>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    e3f8:	2b02      	cmp	r3, #2
    e3fa:	d076      	beq.n	e4ea <ll_rx_mem_release+0x162>
				LL_ASSERT(!cc->status);
    e3fc:	b1db      	cbz	r3, e436 <ll_rx_mem_release+0xae>
    e3fe:	4945      	ldr	r1, [pc, #276]	; (e514 <ll_rx_mem_release+0x18c>)
    e400:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    e404:	463a      	mov	r2, r7
    e406:	4630      	mov	r0, r6
    e408:	f00d ff48 	bl	1c29c <printk>
    e40c:	4040      	eors	r0, r0
    e40e:	f380 8811 	msr	BASEPRI, r0
    e412:	f04f 0003 	mov.w	r0, #3
    e416:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    e418:	792b      	ldrb	r3, [r5, #4]
    e41a:	b963      	cbnz	r3, e436 <ll_rx_mem_release+0xae>
    e41c:	493e      	ldr	r1, [pc, #248]	; (e518 <ll_rx_mem_release+0x190>)
    e41e:	f240 5312 	movw	r3, #1298	; 0x512
    e422:	463a      	mov	r2, r7
    e424:	4630      	mov	r0, r6
    e426:	f00d ff39 	bl	1c29c <printk>
    e42a:	4040      	eors	r0, r0
    e42c:	f380 8811 	msr	BASEPRI, r0
    e430:	f04f 0003 	mov.w	r0, #3
    e434:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e436:	f8df a0e4 	ldr.w	sl, [pc, #228]	; e51c <ll_rx_mem_release+0x194>
    e43a:	f89a 3000 	ldrb.w	r3, [sl]
    e43e:	2b06      	cmp	r3, #6
    e440:	d82d      	bhi.n	e49e <ll_rx_mem_release+0x116>
	mem_link_rx.quota_pdu += delta;
    e442:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    e444:	4936      	ldr	r1, [pc, #216]	; (e520 <ll_rx_mem_release+0x198>)
	mem_link_rx.quota_pdu += delta;
    e446:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    e44a:	4628      	mov	r0, r5
    e44c:	f7fb ff62 	bl	a314 <mem_release>
	while (rx) {
    e450:	2c00      	cmp	r4, #0
    e452:	d1a2      	bne.n	e39a <ll_rx_mem_release+0x12>
    e454:	e7c5      	b.n	e3e2 <ll_rx_mem_release+0x5a>
			conn = ll_conn_get(rx_free->handle);
    e456:	88e8      	ldrh	r0, [r5, #6]
    e458:	f001 ff96 	bl	10388 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    e45c:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
    e45e:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    e460:	b163      	cbz	r3, e47c <ll_rx_mem_release+0xf4>
    e462:	4930      	ldr	r1, [pc, #192]	; (e524 <ll_rx_mem_release+0x19c>)
    e464:	f240 5342 	movw	r3, #1346	; 0x542
    e468:	463a      	mov	r2, r7
    e46a:	4630      	mov	r0, r6
    e46c:	f00d ff16 	bl	1c29c <printk>
    e470:	4040      	eors	r0, r0
    e472:	f380 8811 	msr	BASEPRI, r0
    e476:	f04f 0003 	mov.w	r0, #3
    e47a:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    e47c:	f105 0168 	add.w	r1, r5, #104	; 0x68
    e480:	f105 0064 	add.w	r0, r5, #100	; 0x64
    e484:	f7fb ff86 	bl	a394 <memq_deinit>
			LL_ASSERT(link);
    e488:	4682      	mov	sl, r0
    e48a:	b300      	cbz	r0, e4ce <ll_rx_mem_release+0x146>
			conn->lll.link_tx_free = link;
    e48c:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
			ll_conn_release(conn);
    e490:	4628      	mov	r0, r5
    e492:	f001 ff6b 	bl	1036c <ll_conn_release>
	while (rx) {
    e496:	2c00      	cmp	r4, #0
    e498:	f47f af7f 	bne.w	e39a <ll_rx_mem_release+0x12>
    e49c:	e7a1      	b.n	e3e2 <ll_rx_mem_release+0x5a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e49e:	4922      	ldr	r1, [pc, #136]	; (e528 <ll_rx_mem_release+0x1a0>)
    e4a0:	f240 535b 	movw	r3, #1371	; 0x55b
    e4a4:	463a      	mov	r2, r7
    e4a6:	4630      	mov	r0, r6
    e4a8:	f00d fef8 	bl	1c29c <printk>
    e4ac:	4040      	eors	r0, r0
    e4ae:	f380 8811 	msr	BASEPRI, r0
    e4b2:	f04f 0003 	mov.w	r0, #3
    e4b6:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    e4b8:	f89a 3000 	ldrb.w	r3, [sl]
    e4bc:	e7c1      	b.n	e442 <ll_rx_mem_release+0xba>
				mem_release(rx_free, &mem_pdu_rx.free);
    e4be:	4918      	ldr	r1, [pc, #96]	; (e520 <ll_rx_mem_release+0x198>)
    e4c0:	4628      	mov	r0, r5
    e4c2:	f7fb ff27 	bl	a314 <mem_release>
	while (rx) {
    e4c6:	2c00      	cmp	r4, #0
    e4c8:	f47f af67 	bne.w	e39a <ll_rx_mem_release+0x12>
    e4cc:	e789      	b.n	e3e2 <ll_rx_mem_release+0x5a>
			LL_ASSERT(link);
    e4ce:	4917      	ldr	r1, [pc, #92]	; (e52c <ll_rx_mem_release+0x1a4>)
    e4d0:	f240 5345 	movw	r3, #1349	; 0x545
    e4d4:	463a      	mov	r2, r7
    e4d6:	4630      	mov	r0, r6
    e4d8:	f00d fee0 	bl	1c29c <printk>
    e4dc:	4040      	eors	r0, r0
    e4de:	f380 8811 	msr	BASEPRI, r0
    e4e2:	f04f 0003 	mov.w	r0, #3
    e4e6:	df02      	svc	2
    e4e8:	e7d0      	b.n	e48c <ll_rx_mem_release+0x104>
				ull_master_cleanup(rx_free);
    e4ea:	4628      	mov	r0, r5
    e4ec:	f006 fbc8 	bl	14c80 <ull_master_cleanup>
				if (!ull_adv_is_enabled_get(0))
    e4f0:	2000      	movs	r0, #0
    e4f2:	f000 ff03 	bl	f2fc <ull_adv_is_enabled_get>
    e4f6:	2800      	cmp	r0, #0
    e4f8:	f47f af71 	bne.w	e3de <ll_rx_mem_release+0x56>
					ull_filter_adv_scan_state_cb(0);
    e4fc:	f007 fa7e 	bl	159fc <ull_filter_adv_scan_state_cb>
	while (rx) {
    e500:	2c00      	cmp	r4, #0
    e502:	f47f af4a 	bne.w	e39a <ll_rx_mem_release+0x12>
    e506:	e76c      	b.n	e3e2 <ll_rx_mem_release+0x5a>
    e508:	000208bc 	.word	0x000208bc
    e50c:	000206a4 	.word	0x000206a4
    e510:	0002060c 	.word	0x0002060c
    e514:	000209b0 	.word	0x000209b0
    e518:	000209bc 	.word	0x000209bc
    e51c:	2000164c 	.word	0x2000164c
    e520:	200016ac 	.word	0x200016ac
    e524:	000209e0 	.word	0x000209e0
    e528:	00020934 	.word	0x00020934
    e52c:	00020c74 	.word	0x00020c74

0000e530 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    e530:	4801      	ldr	r0, [pc, #4]	; (e538 <ll_rx_link_alloc+0x8>)
    e532:	f7fb bed5 	b.w	a2e0 <mem_acquire>
    e536:	bf00      	nop
    e538:	20001650 	.word	0x20001650

0000e53c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    e53c:	4901      	ldr	r1, [pc, #4]	; (e544 <ll_rx_link_release+0x8>)
    e53e:	f7fb bee9 	b.w	a314 <mem_release>
    e542:	bf00      	nop
    e544:	20001650 	.word	0x20001650

0000e548 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    e548:	4801      	ldr	r0, [pc, #4]	; (e550 <ll_rx_alloc+0x8>)
    e54a:	f7fb bec9 	b.w	a2e0 <mem_acquire>
    e54e:	bf00      	nop
    e550:	200016ac 	.word	0x200016ac

0000e554 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    e554:	4901      	ldr	r1, [pc, #4]	; (e55c <ll_rx_release+0x8>)
    e556:	f7fb bedd 	b.w	a314 <mem_release>
    e55a:	bf00      	nop
    e55c:	200016ac 	.word	0x200016ac

0000e560 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e560:	4b02      	ldr	r3, [pc, #8]	; (e56c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e562:	4a03      	ldr	r2, [pc, #12]	; (e570 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e564:	78db      	ldrb	r3, [r3, #3]
    e566:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e568:	f7fb bf1e 	b.w	a3a8 <memq_enqueue>
    e56c:	20000364 	.word	0x20000364
    e570:	20001984 	.word	0x20001984

0000e574 <ll_rx_sched>:
	k_sem_give(sem_recv);
    e574:	4b01      	ldr	r3, [pc, #4]	; (e57c <ll_rx_sched+0x8>)
    e576:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    e578:	f00c be2e 	b.w	1b1d8 <z_impl_k_sem_give>
    e57c:	20001998 	.word	0x20001998

0000e580 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    e580:	4b0d      	ldr	r3, [pc, #52]	; (e5b8 <ll_pdu_rx_alloc_peek+0x38>)
    e582:	789a      	ldrb	r2, [r3, #2]
    e584:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
    e588:	4562      	cmp	r2, ip
    e58a:	d809      	bhi.n	e5a0 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    e58c:	ebac 0102 	sub.w	r1, ip, r2
    e590:	b2c9      	uxtb	r1, r1
    e592:	4288      	cmp	r0, r1
    e594:	d802      	bhi.n	e59c <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    e596:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    e598:	7819      	ldrb	r1, [r3, #0]
    e59a:	d108      	bne.n	e5ae <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    e59c:	2000      	movs	r0, #0
}
    e59e:	4770      	bx	lr
		return count - first + last;
    e5a0:	7859      	ldrb	r1, [r3, #1]
    e5a2:	1a89      	subs	r1, r1, r2
    e5a4:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    e5a6:	b2c9      	uxtb	r1, r1
    e5a8:	4288      	cmp	r0, r1
    e5aa:	d8f7      	bhi.n	e59c <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    e5ac:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
    e5ae:	fb02 3301 	mla	r3, r2, r1, r3
    e5b2:	6858      	ldr	r0, [r3, #4]
    e5b4:	4770      	bx	lr
    e5b6:	bf00      	nop
    e5b8:	20000234 	.word	0x20000234

0000e5bc <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    e5bc:	4b09      	ldr	r3, [pc, #36]	; (e5e4 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    e5be:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    e5c0:	78da      	ldrb	r2, [r3, #3]
    e5c2:	7818      	ldrb	r0, [r3, #0]
    e5c4:	f893 c001 	ldrb.w	ip, [r3, #1]
    e5c8:	428a      	cmp	r2, r1
    e5ca:	d009      	beq.n	e5e0 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    e5cc:	1c4a      	adds	r2, r1, #1
    e5ce:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    e5d0:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    e5d4:	4594      	cmp	ip, r2
    e5d6:	bf08      	it	eq
    e5d8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    e5da:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    e5dc:	709a      	strb	r2, [r3, #2]

	return mem;
    e5de:	4770      	bx	lr
		return NULL;
    e5e0:	2000      	movs	r0, #0
}
    e5e2:	4770      	bx	lr
    e5e4:	20000234 	.word	0x20000234

0000e5e8 <ll_tx_ack_put>:
{
    e5e8:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    e5ea:	4a15      	ldr	r2, [pc, #84]	; (e640 <ll_tx_ack_put+0x58>)
    e5ec:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
    e5ee:	f892 e001 	ldrb.w	lr, [r2, #1]
    e5f2:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
    e5f6:	1c63      	adds	r3, r4, #1
    e5f8:	b2db      	uxtb	r3, r3
		last = 0U;
    e5fa:	459e      	cmp	lr, r3
    e5fc:	bf08      	it	eq
    e5fe:	2300      	moveq	r3, #0
	if (last == first) {
    e600:	459c      	cmp	ip, r3
    e602:	d00c      	beq.n	e61e <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e604:	4696      	mov	lr, r2
    e606:	f81e cb04 	ldrb.w	ip, [lr], #4
    e60a:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
    e60e:	eb1e 040c 	adds.w	r4, lr, ip
    e612:	d004      	beq.n	e61e <ll_tx_ack_put+0x36>
	tx->handle = handle;
    e614:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
    e618:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
    e61a:	70d3      	strb	r3, [r2, #3]
}
    e61c:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
    e61e:	4a09      	ldr	r2, [pc, #36]	; (e644 <ll_tx_ack_put+0x5c>)
    e620:	4909      	ldr	r1, [pc, #36]	; (e648 <ll_tx_ack_put+0x60>)
    e622:	480a      	ldr	r0, [pc, #40]	; (e64c <ll_tx_ack_put+0x64>)
    e624:	f240 53a3 	movw	r3, #1443	; 0x5a3
    e628:	f00d fe38 	bl	1c29c <printk>
    e62c:	4040      	eors	r0, r0
    e62e:	f380 8811 	msr	BASEPRI, r0
    e632:	f04f 0003 	mov.w	r0, #3
    e636:	df02      	svc	2
	tx->handle = handle;
    e638:	2300      	movs	r3, #0
    e63a:	801b      	strh	r3, [r3, #0]
    e63c:	deff      	udf	#255	; 0xff
    e63e:	bf00      	nop
    e640:	20000364 	.word	0x20000364
    e644:	000208bc 	.word	0x000208bc
    e648:	00020c68 	.word	0x00020c68
    e64c:	0002060c 	.word	0x0002060c

0000e650 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e650:	f030 0302 	bics.w	r3, r0, #2
{
    e654:	b510      	push	{r4, lr}
    e656:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e658:	d002      	beq.n	e660 <ull_ticker_status_take+0x10>
    e65a:	680b      	ldr	r3, [r1, #0]
    e65c:	2b02      	cmp	r3, #2
    e65e:	d008      	beq.n	e672 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    e660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e668:	4809      	ldr	r0, [pc, #36]	; (e690 <ull_ticker_status_take+0x40>)
    e66a:	f00c fddb 	bl	1b224 <z_impl_k_sem_take>
	return *ret_cb;
    e66e:	6820      	ldr	r0, [r4, #0]
}
    e670:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e672:	4a08      	ldr	r2, [pc, #32]	; (e694 <ull_ticker_status_take+0x44>)
    e674:	4908      	ldr	r1, [pc, #32]	; (e698 <ull_ticker_status_take+0x48>)
    e676:	4809      	ldr	r0, [pc, #36]	; (e69c <ull_ticker_status_take+0x4c>)
    e678:	f240 53d7 	movw	r3, #1495	; 0x5d7
    e67c:	f00d fe0e 	bl	1c29c <printk>
    e680:	4040      	eors	r0, r0
    e682:	f380 8811 	msr	BASEPRI, r0
    e686:	f04f 0003 	mov.w	r0, #3
    e68a:	df02      	svc	2
    e68c:	e7e8      	b.n	e660 <ull_ticker_status_take+0x10>
    e68e:	bf00      	nop
    e690:	2000199c 	.word	0x2000199c
    e694:	000208bc 	.word	0x000208bc
    e698:	00020a00 	.word	0x00020a00
    e69c:	0002060c 	.word	0x0002060c

0000e6a0 <ull_disable_mark>:
	if (!*m) {
    e6a0:	4a03      	ldr	r2, [pc, #12]	; (e6b0 <ull_disable_mark+0x10>)
{
    e6a2:	4603      	mov	r3, r0
	if (!*m) {
    e6a4:	6810      	ldr	r0, [r2, #0]
    e6a6:	b100      	cbz	r0, e6aa <ull_disable_mark+0xa>
}
    e6a8:	4770      	bx	lr
		*m = param;
    e6aa:	6013      	str	r3, [r2, #0]
    e6ac:	4618      	mov	r0, r3
}
    e6ae:	4770      	bx	lr
    e6b0:	20001580 	.word	0x20001580

0000e6b4 <ull_disable_unmark>:
	if (*m && *m == param) {
    e6b4:	4a04      	ldr	r2, [pc, #16]	; (e6c8 <ull_disable_unmark+0x14>)
    e6b6:	6813      	ldr	r3, [r2, #0]
    e6b8:	b123      	cbz	r3, e6c4 <ull_disable_unmark+0x10>
    e6ba:	4298      	cmp	r0, r3
		*m = NULL;
    e6bc:	bf06      	itte	eq
    e6be:	2100      	moveq	r1, #0
    e6c0:	6011      	streq	r1, [r2, #0]
	return NULL;
    e6c2:	2300      	movne	r3, #0
}
    e6c4:	4618      	mov	r0, r3
    e6c6:	4770      	bx	lr
    e6c8:	20001580 	.word	0x20001580

0000e6cc <ull_disable_mark_get>:
	return mark_get(mark_disable);
    e6cc:	4b01      	ldr	r3, [pc, #4]	; (e6d4 <ull_disable_mark_get+0x8>)
}
    e6ce:	6818      	ldr	r0, [r3, #0]
    e6d0:	4770      	bx	lr
    e6d2:	bf00      	nop
    e6d4:	20001580 	.word	0x20001580

0000e6d8 <ull_update_mark>:
	if (!*m) {
    e6d8:	4a03      	ldr	r2, [pc, #12]	; (e6e8 <ull_update_mark+0x10>)
{
    e6da:	4603      	mov	r3, r0
	if (!*m) {
    e6dc:	6810      	ldr	r0, [r2, #0]
    e6de:	b100      	cbz	r0, e6e2 <ull_update_mark+0xa>
}
    e6e0:	4770      	bx	lr
		*m = param;
    e6e2:	6013      	str	r3, [r2, #0]
    e6e4:	4618      	mov	r0, r3
}
    e6e6:	4770      	bx	lr
    e6e8:	20001584 	.word	0x20001584

0000e6ec <ull_update_unmark>:
	if (*m && *m == param) {
    e6ec:	4a04      	ldr	r2, [pc, #16]	; (e700 <ull_update_unmark+0x14>)
    e6ee:	6813      	ldr	r3, [r2, #0]
    e6f0:	b123      	cbz	r3, e6fc <ull_update_unmark+0x10>
    e6f2:	4298      	cmp	r0, r3
		*m = NULL;
    e6f4:	bf06      	itte	eq
    e6f6:	2100      	moveq	r1, #0
    e6f8:	6011      	streq	r1, [r2, #0]
	return NULL;
    e6fa:	2300      	movne	r3, #0
}
    e6fc:	4618      	mov	r0, r3
    e6fe:	4770      	bx	lr
    e700:	20001584 	.word	0x20001584

0000e704 <ull_update_mark_get>:
	return mark_get(mark_update);
    e704:	4b01      	ldr	r3, [pc, #4]	; (e70c <ull_update_mark_get+0x8>)
}
    e706:	6818      	ldr	r0, [r3, #0]
    e708:	4770      	bx	lr
    e70a:	bf00      	nop
    e70c:	20001584 	.word	0x20001584

0000e710 <ull_disable>:
{
    e710:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    e712:	6805      	ldr	r5, [r0, #0]
{
    e714:	b087      	sub	sp, #28
	if (!hdr || !ull_ref_get(hdr)) {
    e716:	b305      	cbz	r5, e75a <ull_disable+0x4a>
    e718:	782b      	ldrb	r3, [r5, #0]
    e71a:	4604      	mov	r4, r0
    e71c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e720:	b90b      	cbnz	r3, e726 <ull_disable+0x16>
}
    e722:	b007      	add	sp, #28
    e724:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e726:	2201      	movs	r2, #1
    e728:	2100      	movs	r1, #0
    e72a:	4668      	mov	r0, sp
    e72c:	f010 ff20 	bl	1f570 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    e730:	4912      	ldr	r1, [pc, #72]	; (e77c <ull_disable+0x6c>)
	mfy.param = lll;
    e732:	4b13      	ldr	r3, [pc, #76]	; (e780 <ull_disable+0x70>)
	hdr->disabled_cb = disabled_cb;
    e734:	6169      	str	r1, [r5, #20]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    e736:	2200      	movs	r2, #0
	hdr->disabled_param = &sem;
    e738:	f8c5 d018 	str.w	sp, [r5, #24]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    e73c:	4611      	mov	r1, r2
    e73e:	2003      	movs	r0, #3
	mfy.param = lll;
    e740:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    e742:	f7fb fea5 	bl	a490 <mayfly_enqueue>
	LL_ASSERT(!ret);
    e746:	b958      	cbnz	r0, e760 <ull_disable+0x50>
	return z_impl_k_sem_take(sem, timeout);
    e748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e750:	4668      	mov	r0, sp
    e752:	f00c fd67 	bl	1b224 <z_impl_k_sem_take>
}
    e756:	b007      	add	sp, #28
    e758:	bd30      	pop	{r4, r5, pc}
		return 0;
    e75a:	4628      	mov	r0, r5
}
    e75c:	b007      	add	sp, #28
    e75e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    e760:	4a08      	ldr	r2, [pc, #32]	; (e784 <ull_disable+0x74>)
    e762:	4909      	ldr	r1, [pc, #36]	; (e788 <ull_disable+0x78>)
    e764:	4809      	ldr	r0, [pc, #36]	; (e78c <ull_disable+0x7c>)
    e766:	f240 6345 	movw	r3, #1605	; 0x645
    e76a:	f00d fd97 	bl	1c29c <printk>
    e76e:	4040      	eors	r0, r0
    e770:	f380 8811 	msr	BASEPRI, r0
    e774:	f04f 0003 	mov.w	r0, #3
    e778:	df02      	svc	2
    e77a:	e7e5      	b.n	e748 <ull_disable+0x38>
    e77c:	0000d789 	.word	0x0000d789
    e780:	200003c8 	.word	0x200003c8
    e784:	000208bc 	.word	0x000208bc
    e788:	000209f8 	.word	0x000209f8
    e78c:	0002060c 	.word	0x0002060c

0000e790 <ull_ticker_stop_with_mark>:
{
    e790:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    e792:	4d1d      	ldr	r5, [pc, #116]	; (e808 <ull_ticker_stop_with_mark+0x78>)
    e794:	682b      	ldr	r3, [r5, #0]
{
    e796:	b085      	sub	sp, #20
    e798:	460c      	mov	r4, r1
    e79a:	4616      	mov	r6, r2
	if (!*m) {
    e79c:	b323      	cbz	r3, e7e8 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    e79e:	4299      	cmp	r1, r3
    e7a0:	d112      	bne.n	e7c8 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
    e7a2:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e7a4:	af03      	add	r7, sp, #12
    e7a6:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    e7a8:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e7aa:	2103      	movs	r1, #3
    e7ac:	4b17      	ldr	r3, [pc, #92]	; (e80c <ull_ticker_stop_with_mark+0x7c>)
    e7ae:	9700      	str	r7, [sp, #0]
    e7b0:	2000      	movs	r0, #0
    e7b2:	f7fd f8d5 	bl	b960 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    e7b6:	4639      	mov	r1, r7
    e7b8:	f7ff ff4a 	bl	e650 <ull_ticker_status_take>
	if (ret) {
    e7bc:	b140      	cbz	r0, e7d0 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    e7be:	682b      	ldr	r3, [r5, #0]
    e7c0:	b10b      	cbz	r3, e7c6 <ull_ticker_stop_with_mark+0x36>
    e7c2:	429c      	cmp	r4, r3
    e7c4:	d012      	beq.n	e7ec <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    e7c6:	b1cc      	cbz	r4, e7fc <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    e7c8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    e7cc:	b005      	add	sp, #20
    e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    e7d0:	4630      	mov	r0, r6
    e7d2:	f7ff ff9d 	bl	e710 <ull_disable>
	if (ret) {
    e7d6:	b9a0      	cbnz	r0, e802 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    e7d8:	682b      	ldr	r3, [r5, #0]
    e7da:	b10b      	cbz	r3, e7e0 <ull_ticker_stop_with_mark+0x50>
    e7dc:	429c      	cmp	r4, r3
    e7de:	d00b      	beq.n	e7f8 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    e7e0:	2c00      	cmp	r4, #0
    e7e2:	d1f1      	bne.n	e7c8 <ull_ticker_stop_with_mark+0x38>
}
    e7e4:	b005      	add	sp, #20
    e7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    e7e8:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    e7ea:	e7da      	b.n	e7a2 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    e7ec:	2300      	movs	r3, #0
		return -EALREADY;
    e7ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    e7f2:	602b      	str	r3, [r5, #0]
}
    e7f4:	b005      	add	sp, #20
    e7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    e7f8:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    e7fa:	e7e7      	b.n	e7cc <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    e7fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e800:	e7e4      	b.n	e7cc <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    e802:	f06f 000f 	mvn.w	r0, #15
    e806:	e7e1      	b.n	e7cc <ull_ticker_stop_with_mark+0x3c>
    e808:	20001580 	.word	0x20001580
    e80c:	0000d77d 	.word	0x0000d77d

0000e810 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    e810:	4b0d      	ldr	r3, [pc, #52]	; (e848 <ull_pdu_rx_alloc_peek+0x38>)
    e812:	789a      	ldrb	r2, [r3, #2]
    e814:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
    e818:	4562      	cmp	r2, ip
    e81a:	d809      	bhi.n	e830 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    e81c:	ebac 0102 	sub.w	r1, ip, r2
    e820:	b2c9      	uxtb	r1, r1
    e822:	4288      	cmp	r0, r1
    e824:	d802      	bhi.n	e82c <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    e826:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    e828:	7819      	ldrb	r1, [r3, #0]
    e82a:	d108      	bne.n	e83e <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    e82c:	2000      	movs	r0, #0
}
    e82e:	4770      	bx	lr
		return count - first + last;
    e830:	7859      	ldrb	r1, [r3, #1]
    e832:	1a89      	subs	r1, r1, r2
    e834:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    e836:	b2c9      	uxtb	r1, r1
    e838:	4288      	cmp	r0, r1
    e83a:	d8f7      	bhi.n	e82c <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    e83c:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
    e83e:	fb02 3301 	mla	r3, r2, r1, r3
    e842:	6858      	ldr	r0, [r3, #4]
    e844:	4770      	bx	lr
    e846:	bf00      	nop
    e848:	20000248 	.word	0x20000248

0000e84c <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    e84c:	4b09      	ldr	r3, [pc, #36]	; (e874 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    e84e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    e850:	78da      	ldrb	r2, [r3, #3]
    e852:	7818      	ldrb	r0, [r3, #0]
    e854:	f893 c001 	ldrb.w	ip, [r3, #1]
    e858:	428a      	cmp	r2, r1
    e85a:	d009      	beq.n	e870 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    e85c:	1c4a      	adds	r2, r1, #1
    e85e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    e860:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    e864:	4594      	cmp	ip, r2
    e866:	bf08      	it	eq
    e868:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    e86a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    e86c:	709a      	strb	r2, [r3, #2]
	return mem;
    e86e:	4770      	bx	lr
		return NULL;
    e870:	2000      	movs	r0, #0
}
    e872:	4770      	bx	lr
    e874:	20000248 	.word	0x20000248

0000e878 <ull_rx_put>:
{
    e878:	b538      	push	{r3, r4, r5, lr}
    e87a:	460c      	mov	r4, r1
    e87c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    e87e:	f005 fcc1 	bl	14204 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e882:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    e884:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e886:	4a03      	ldr	r2, [pc, #12]	; (e894 <ull_rx_put+0x1c>)
    e888:	4628      	mov	r0, r5
}
    e88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e88e:	f7fb bd8b 	b.w	a3a8 <memq_enqueue>
    e892:	bf00      	nop
    e894:	20001994 	.word	0x20001994

0000e898 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    e898:	2201      	movs	r2, #1
    e89a:	4b02      	ldr	r3, [pc, #8]	; (e8a4 <ull_rx_sched+0xc>)
    e89c:	4611      	mov	r1, r2
    e89e:	2000      	movs	r0, #0
    e8a0:	f7fb bdf6 	b.w	a490 <mayfly_enqueue>
    e8a4:	200003b8 	.word	0x200003b8

0000e8a8 <ull_prepare_enqueue>:
{
    e8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e8ac:	4e16      	ldr	r6, [pc, #88]	; (e908 <ull_prepare_enqueue+0x60>)
{
    e8ae:	f89d a020 	ldrb.w	sl, [sp, #32]
    e8b2:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e8b4:	78f3      	ldrb	r3, [r6, #3]
{
    e8b6:	4680      	mov	r8, r0
	last = last + 1;
    e8b8:	1c5d      	adds	r5, r3, #1
	if (last == count) {
    e8ba:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
    e8bc:	b2ed      	uxtb	r5, r5
		last = 0U;
    e8be:	42a8      	cmp	r0, r5
    e8c0:	bf08      	it	eq
    e8c2:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e8c4:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
    e8c6:	42a8      	cmp	r0, r5
    e8c8:	d01a      	beq.n	e900 <ull_prepare_enqueue+0x58>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e8ca:	4634      	mov	r4, r6
    e8cc:	460f      	mov	r7, r1
    e8ce:	4611      	mov	r1, r2
    e8d0:	f814 2b04 	ldrb.w	r2, [r4], #4
    e8d4:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
    e8d8:	b17c      	cbz	r4, e8fa <ull_prepare_enqueue+0x52>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    e8da:	2210      	movs	r2, #16
    e8dc:	4620      	mov	r0, r4
    e8de:	f00e ff93 	bl	1d808 <memcpy>
	e->is_resume = is_resume;
    e8e2:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    e8e4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    e8e6:	f00a 0a01 	and.w	sl, sl, #1
    e8ea:	f023 0303 	bic.w	r3, r3, #3
    e8ee:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    e8f2:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    e8f6:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    e8f8:	70f5      	strb	r5, [r6, #3]
}
    e8fa:	4620      	mov	r0, r4
    e8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    e900:	2400      	movs	r4, #0
}
    e902:	4620      	mov	r0, r4
    e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e908:	20000260 	.word	0x20000260

0000e90c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    e90c:	4b05      	ldr	r3, [pc, #20]	; (e924 <ull_prepare_dequeue_get+0x18>)
    e90e:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    e910:	78da      	ldrb	r2, [r3, #3]
    e912:	7819      	ldrb	r1, [r3, #0]
    e914:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    e916:	bf1a      	itte	ne
    e918:	3304      	addne	r3, #4
    e91a:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    e91e:	2000      	moveq	r0, #0
}
    e920:	4770      	bx	lr
    e922:	bf00      	nop
    e924:	20000260 	.word	0x20000260

0000e928 <ull_prepare_dequeue_iter>:
{
    e928:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e92a:	4b0d      	ldr	r3, [pc, #52]	; (e960 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    e92c:	7802      	ldrb	r2, [r0, #0]
    e92e:	7859      	ldrb	r1, [r3, #1]
    e930:	f893 c003 	ldrb.w	ip, [r3, #3]
    e934:	f893 e000 	ldrb.w	lr, [r3]
    e938:	4291      	cmp	r1, r2
    e93a:	bf9c      	itt	ls
    e93c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    e93e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    e940:	4594      	cmp	ip, r2
    e942:	d00a      	beq.n	e95a <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    e944:	1c53      	adds	r3, r2, #1
    e946:	b2db      	uxtb	r3, r3
		i = 0U;
    e948:	4299      	cmp	r1, r3
    e94a:	bf08      	it	eq
    e94c:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    e94e:	4905      	ldr	r1, [pc, #20]	; (e964 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    e950:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    e952:	fb02 100e 	mla	r0, r2, lr, r1
}
    e956:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    e95a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e95c:	e7fb      	b.n	e956 <ull_prepare_dequeue_iter+0x2e>
    e95e:	bf00      	nop
    e960:	20000260 	.word	0x20000260
    e964:	20000264 	.word	0x20000264

0000e968 <ull_prepare_dequeue>:
{
    e968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    e96c:	4c26      	ldr	r4, [pc, #152]	; (ea08 <ull_prepare_dequeue+0xa0>)
    e96e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    e970:	78e1      	ldrb	r1, [r4, #3]
    e972:	7823      	ldrb	r3, [r4, #0]
    e974:	4291      	cmp	r1, r2
    e976:	d027      	beq.n	e9c8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e978:	1d27      	adds	r7, r4, #4
    e97a:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
    e97e:	b31a      	cbz	r2, e9c8 <ull_prepare_dequeue+0x60>
			mfy.param = next;
    e980:	f8df 9088 	ldr.w	r9, [pc, #136]	; ea0c <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
    e984:	f8df b088 	ldr.w	fp, [pc, #136]	; ea10 <ull_prepare_dequeue+0xa8>
    e988:	f8df a088 	ldr.w	sl, [pc, #136]	; ea14 <ull_prepare_dequeue+0xac>
    e98c:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
    e98e:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
    e990:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e992:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e996:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    e99a:	d517      	bpl.n	e9cc <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
    e99c:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
    e99e:	78a3      	ldrb	r3, [r4, #2]
    e9a0:	7822      	ldrb	r2, [r4, #0]
    e9a2:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
    e9a4:	4299      	cmp	r1, r3
    e9a6:	d00f      	beq.n	e9c8 <ull_prepare_dequeue+0x60>
	_first += 1U;
    e9a8:	3301      	adds	r3, #1
    e9aa:	b2db      	uxtb	r3, r3
	if (_first == count) {
    e9ac:	4298      	cmp	r0, r3
    e9ae:	d025      	beq.n	e9fc <ull_prepare_dequeue+0x94>
	if (first == last) {
    e9b0:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    e9b2:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    e9b4:	d008      	beq.n	e9c8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e9b6:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e9ba:	b12a      	cbz	r2, e9c8 <ull_prepare_dequeue+0x60>
    e9bc:	2d00      	cmp	r5, #0
    e9be:	d1e6      	bne.n	e98e <ull_prepare_dequeue+0x26>
    e9c0:	b116      	cbz	r6, e9c8 <ull_prepare_dequeue+0x60>
    e9c2:	7f13      	ldrb	r3, [r2, #28]
    e9c4:	07db      	lsls	r3, r3, #31
    e9c6:	d5e2      	bpl.n	e98e <ull_prepare_dequeue+0x26>
}
    e9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    e9cc:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    e9d0:	4b0e      	ldr	r3, [pc, #56]	; (ea0c <ull_prepare_dequeue+0xa4>)
    e9d2:	462a      	mov	r2, r5
    e9d4:	4629      	mov	r1, r5
    e9d6:	4640      	mov	r0, r8
    e9d8:	f7fb fd5a 	bl	a490 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e9dc:	2800      	cmp	r0, #0
    e9de:	d0dd      	beq.n	e99c <ull_prepare_dequeue+0x34>
    e9e0:	480d      	ldr	r0, [pc, #52]	; (ea18 <ull_prepare_dequeue+0xb0>)
    e9e2:	f240 63bc 	movw	r3, #1724	; 0x6bc
    e9e6:	465a      	mov	r2, fp
    e9e8:	4651      	mov	r1, sl
    e9ea:	f00d fc57 	bl	1c29c <printk>
    e9ee:	4040      	eors	r0, r0
    e9f0:	f380 8811 	msr	BASEPRI, r0
    e9f4:	f04f 0003 	mov.w	r0, #3
    e9f8:	df02      	svc	2
    e9fa:	e7cf      	b.n	e99c <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
    e9fc:	2300      	movs	r3, #0
    e9fe:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    ea00:	2900      	cmp	r1, #0
    ea02:	d0e1      	beq.n	e9c8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    ea04:	4a05      	ldr	r2, [pc, #20]	; (ea1c <ull_prepare_dequeue+0xb4>)
    ea06:	e7d9      	b.n	e9bc <ull_prepare_dequeue+0x54>
    ea08:	20000260 	.word	0x20000260
    ea0c:	20000388 	.word	0x20000388
    ea10:	000208bc 	.word	0x000208bc
    ea14:	000209f8 	.word	0x000209f8
    ea18:	0002060c 	.word	0x0002060c
    ea1c:	20000264 	.word	0x20000264

0000ea20 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    ea20:	4b06      	ldr	r3, [pc, #24]	; (ea3c <ull_event_done_extra_get+0x1c>)
    ea22:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    ea24:	78d9      	ldrb	r1, [r3, #3]
    ea26:	7818      	ldrb	r0, [r3, #0]
    ea28:	4291      	cmp	r1, r2
    ea2a:	d005      	beq.n	ea38 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    ea2c:	fb02 3300 	mla	r3, r2, r0, r3
    ea30:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    ea32:	b110      	cbz	r0, ea3a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    ea34:	3020      	adds	r0, #32
    ea36:	4770      	bx	lr
		return NULL;
    ea38:	2000      	movs	r0, #0
}
    ea3a:	4770      	bx	lr
    ea3c:	20000220 	.word	0x20000220

0000ea40 <ull_event_done>:
{
    ea40:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    ea42:	4a13      	ldr	r2, [pc, #76]	; (ea90 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    ea44:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    ea46:	78d4      	ldrb	r4, [r2, #3]
    ea48:	7811      	ldrb	r1, [r2, #0]
    ea4a:	429c      	cmp	r4, r3
{
    ea4c:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    ea4e:	7850      	ldrb	r0, [r2, #1]
    ea50:	d01b      	beq.n	ea8a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    ea52:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    ea56:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    ea58:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    ea5a:	b2db      	uxtb	r3, r3
		_first = 0U;
    ea5c:	4298      	cmp	r0, r3
    ea5e:	bf08      	it	eq
    ea60:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    ea62:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    ea64:	b17c      	cbz	r4, ea86 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    ea66:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    ea68:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    ea6a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    ea6c:	4a09      	ldr	r2, [pc, #36]	; (ea94 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    ea6e:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    ea70:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    ea72:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    ea74:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    ea76:	f7fb fc97 	bl	a3a8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    ea7a:	2201      	movs	r2, #1
    ea7c:	4b06      	ldr	r3, [pc, #24]	; (ea98 <ull_event_done+0x58>)
    ea7e:	4611      	mov	r1, r2
    ea80:	4628      	mov	r0, r5
    ea82:	f7fb fd05 	bl	a490 <mayfly_enqueue>
}
    ea86:	4620      	mov	r0, r4
    ea88:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    ea8a:	2400      	movs	r4, #0
    ea8c:	e7fb      	b.n	ea86 <ull_event_done+0x46>
    ea8e:	bf00      	nop
    ea90:	20000220 	.word	0x20000220
    ea94:	2000198c 	.word	0x2000198c
    ea98:	200003a8 	.word	0x200003a8

0000ea9c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    ea9c:	b510      	push	{r4, lr}
    ea9e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    eaa0:	2400      	movs	r4, #0
    eaa2:	e9cd 4400 	strd	r4, r4, [sp]
    eaa6:	9b04      	ldr	r3, [sp, #16]
    eaa8:	f008 f816 	bl	16ad8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    eaac:	b002      	add	sp, #8
    eaae:	bd10      	pop	{r4, pc}

0000eab0 <lll_resume>:

void lll_resume(void *param)
{
    eab0:	b510      	push	{r4, lr}
    eab2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    eab4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    eab6:	691a      	ldr	r2, [r3, #16]
    eab8:	6999      	ldr	r1, [r3, #24]
    eaba:	2401      	movs	r4, #1
{
    eabc:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    eabe:	4020      	ands	r0, r4
    eac0:	e9cd 0400 	strd	r0, r4, [sp]
    eac4:	6958      	ldr	r0, [r3, #20]
    eac6:	f008 f807 	bl	16ad8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    eaca:	b108      	cbz	r0, ead0 <lll_resume+0x20>
    eacc:	3077      	adds	r0, #119	; 0x77
    eace:	d101      	bne.n	ead4 <lll_resume+0x24>
}
    ead0:	b002      	add	sp, #8
    ead2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    ead4:	4a06      	ldr	r2, [pc, #24]	; (eaf0 <lll_resume+0x40>)
    ead6:	4907      	ldr	r1, [pc, #28]	; (eaf4 <lll_resume+0x44>)
    ead8:	4807      	ldr	r0, [pc, #28]	; (eaf8 <lll_resume+0x48>)
    eada:	234f      	movs	r3, #79	; 0x4f
    eadc:	f00d fbde 	bl	1c29c <printk>
    eae0:	4040      	eors	r0, r0
    eae2:	f380 8811 	msr	BASEPRI, r0
    eae6:	f04f 0003 	mov.w	r0, #3
    eaea:	df02      	svc	2
}
    eaec:	b002      	add	sp, #8
    eaee:	bd10      	pop	{r4, pc}
    eaf0:	00020a2c 	.word	0x00020a2c
    eaf4:	00020a70 	.word	0x00020a70
    eaf8:	0002060c 	.word	0x0002060c

0000eafc <ticker_stop_cb>:
{
    eafc:	b530      	push	{r4, r5, lr}
    eafe:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    eb00:	4b19      	ldr	r3, [pc, #100]	; (eb68 <ticker_stop_cb+0x6c>)
{
    eb02:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    eb04:	4a19      	ldr	r2, [pc, #100]	; (eb6c <ticker_stop_cb+0x70>)
    eb06:	1aeb      	subs	r3, r5, r3
    eb08:	089b      	lsrs	r3, r3, #2
    eb0a:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    eb0e:	f413 7f7f 	tst.w	r3, #1020	; 0x3fc
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    eb12:	ea4f 0493 	mov.w	r4, r3, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    eb16:	d119      	bne.n	eb4c <ticker_stop_cb+0x50>
			  TICKER_ID_ADV_BASE + handle,
    eb18:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    eb1a:	4b15      	ldr	r3, [pc, #84]	; (eb70 <ticker_stop_cb+0x74>)
    eb1c:	9500      	str	r5, [sp, #0]
    eb1e:	b2d2      	uxtb	r2, r2
    eb20:	2101      	movs	r1, #1
    eb22:	2000      	movs	r0, #0
    eb24:	f7fc ff1c 	bl	b960 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    eb28:	f030 0302 	bics.w	r3, r0, #2
    eb2c:	d00c      	beq.n	eb48 <ticker_stop_cb+0x4c>
    eb2e:	4a11      	ldr	r2, [pc, #68]	; (eb74 <ticker_stop_cb+0x78>)
    eb30:	4911      	ldr	r1, [pc, #68]	; (eb78 <ticker_stop_cb+0x7c>)
    eb32:	4812      	ldr	r0, [pc, #72]	; (eb7c <ticker_stop_cb+0x80>)
    eb34:	f240 7336 	movw	r3, #1846	; 0x736
    eb38:	f00d fbb0 	bl	1c29c <printk>
    eb3c:	4040      	eors	r0, r0
    eb3e:	f380 8811 	msr	BASEPRI, r0
    eb42:	f04f 0003 	mov.w	r0, #3
    eb46:	df02      	svc	2
}
    eb48:	b003      	add	sp, #12
    eb4a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    eb4c:	4a09      	ldr	r2, [pc, #36]	; (eb74 <ticker_stop_cb+0x78>)
    eb4e:	490c      	ldr	r1, [pc, #48]	; (eb80 <ticker_stop_cb+0x84>)
    eb50:	480a      	ldr	r0, [pc, #40]	; (eb7c <ticker_stop_cb+0x80>)
    eb52:	f240 7331 	movw	r3, #1841	; 0x731
    eb56:	f00d fba1 	bl	1c29c <printk>
    eb5a:	4040      	eors	r0, r0
    eb5c:	f380 8811 	msr	BASEPRI, r0
    eb60:	f04f 0003 	mov.w	r0, #3
    eb64:	df02      	svc	2
    eb66:	e7d7      	b.n	eb18 <ticker_stop_cb+0x1c>
    eb68:	20001d74 	.word	0x20001d74
    eb6c:	30c30c31 	.word	0x30c30c31
    eb70:	0000ed49 	.word	0x0000ed49
    eb74:	00020a98 	.word	0x00020a98
    eb78:	00020ae4 	.word	0x00020ae4
    eb7c:	0002060c 	.word	0x0002060c
    eb80:	00020ad8 	.word	0x00020ad8

0000eb84 <disabled_cb>:
{
    eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    eb86:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    eb88:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
    eb8a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    eb8c:	b1d7      	cbz	r7, ebc4 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    eb8e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
    eb90:	2300      	movs	r3, #0
    eb92:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
    eb94:	b34c      	cbz	r4, ebea <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    eb96:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb98:	2314      	movs	r3, #20
	adv->node_rx_cc_free = NULL;
    eb9a:	6469      	str	r1, [r5, #68]	; 0x44
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb9c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    eb9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eba2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    eba4:	221e      	movs	r2, #30
    eba6:	f104 001c 	add.w	r0, r4, #28
    ebaa:	f00e fe58 	bl	1d85e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    ebae:	233c      	movs	r3, #60	; 0x3c
    ebb0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    ebb2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    ebb4:	4621      	mov	r1, r4
    ebb6:	4638      	mov	r0, r7
    ebb8:	f7ff fcd2 	bl	e560 <ll_rx_put>
}
    ebbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    ebc0:	f7ff bcd8 	b.w	e574 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    ebc4:	4a10      	ldr	r2, [pc, #64]	; (ec08 <disabled_cb+0x84>)
    ebc6:	4911      	ldr	r1, [pc, #68]	; (ec0c <disabled_cb+0x88>)
    ebc8:	4811      	ldr	r0, [pc, #68]	; (ec10 <disabled_cb+0x8c>)
    ebca:	f240 7376 	movw	r3, #1910	; 0x776
    ebce:	f00d fb65 	bl	1c29c <printk>
    ebd2:	4040      	eors	r0, r0
    ebd4:	f380 8811 	msr	BASEPRI, r0
    ebd8:	f04f 0003 	mov.w	r0, #3
    ebdc:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    ebde:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	link = adv->link_cc_free;
    ebe0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
    ebe2:	2300      	movs	r3, #0
    ebe4:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
    ebe6:	2c00      	cmp	r4, #0
    ebe8:	d1d5      	bne.n	eb96 <disabled_cb+0x12>
    ebea:	4a07      	ldr	r2, [pc, #28]	; (ec08 <disabled_cb+0x84>)
    ebec:	4909      	ldr	r1, [pc, #36]	; (ec14 <disabled_cb+0x90>)
    ebee:	4808      	ldr	r0, [pc, #32]	; (ec10 <disabled_cb+0x8c>)
    ebf0:	f240 737a 	movw	r3, #1914	; 0x77a
    ebf4:	f00d fb52 	bl	1c29c <printk>
    ebf8:	4040      	eors	r0, r0
    ebfa:	f380 8811 	msr	BASEPRI, r0
    ebfe:	f04f 0003 	mov.w	r0, #3
    ec02:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    ec04:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    ec06:	e7c6      	b.n	eb96 <disabled_cb+0x12>
    ec08:	00020a98 	.word	0x00020a98
    ec0c:	00020b00 	.word	0x00020b00
    ec10:	0002060c 	.word	0x0002060c
    ec14:	00020b14 	.word	0x00020b14

0000ec18 <ticker_cb>:
{
    ec18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ec1c:	461f      	mov	r7, r3
    ec1e:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    ec20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ec24:	429a      	cmp	r2, r3
{
    ec26:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    ec28:	d018      	beq.n	ec5c <ticker_cb+0x44>
	return ++hdr->ref;
    ec2a:	4615      	mov	r5, r2
    ec2c:	7822      	ldrb	r2, [r4, #0]
    ec2e:	3201      	adds	r2, #1
    ec30:	b2d2      	uxtb	r2, r2
    ec32:	4681      	mov	r9, r0
    ec34:	4688      	mov	r8, r1
    ec36:	7022      	strb	r2, [r4, #0]
		LL_ASSERT(ref);
    ec38:	2a00      	cmp	r2, #0
    ec3a:	d061      	beq.n	ed00 <ticker_cb+0xe8>
		p.ticks_at_expire = ticks_at_expire;
    ec3c:	4e37      	ldr	r6, [pc, #220]	; (ed1c <ticker_cb+0x104>)
		mfy.param = &p;
    ec3e:	4b38      	ldr	r3, [pc, #224]	; (ed20 <ticker_cb+0x108>)
		p.lazy = lazy;
    ec40:	8135      	strh	r5, [r6, #8]
	lll = &adv->lll;
    ec42:	f104 011c 	add.w	r1, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ec46:	2200      	movs	r2, #0
		p.param = lll;
    ec48:	60f1      	str	r1, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ec4a:	2001      	movs	r0, #1
    ec4c:	4611      	mov	r1, r2
		p.remainder = remainder;
    ec4e:	e9c6 9800 	strd	r9, r8, [r6]
		p.force = force;
    ec52:	72b7      	strb	r7, [r6, #10]
		mfy.param = &p;
    ec54:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ec56:	f7fb fc1b 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
    ec5a:	b938      	cbnz	r0, ec6c <ticker_cb+0x54>
	if (!lll->is_hdcd)
    ec5c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    ec60:	f010 0501 	ands.w	r5, r0, #1
    ec64:	d014      	beq.n	ec90 <ticker_cb+0x78>
}
    ec66:	b00b      	add	sp, #44	; 0x2c
    ec68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
    ec6c:	4a2d      	ldr	r2, [pc, #180]	; (ed24 <ticker_cb+0x10c>)
    ec6e:	492e      	ldr	r1, [pc, #184]	; (ed28 <ticker_cb+0x110>)
    ec70:	482e      	ldr	r0, [pc, #184]	; (ed2c <ticker_cb+0x114>)
    ec72:	f240 63ed 	movw	r3, #1773	; 0x6ed
    ec76:	f00d fb11 	bl	1c29c <printk>
    ec7a:	4040      	eors	r0, r0
    ec7c:	f380 8811 	msr	BASEPRI, r0
    ec80:	f04f 0003 	mov.w	r0, #3
    ec84:	df02      	svc	2
	if (!lll->is_hdcd)
    ec86:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    ec8a:	f010 0501 	ands.w	r5, r0, #1
    ec8e:	d1ea      	bne.n	ec66 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    ec90:	2104      	movs	r1, #4
    ec92:	a809      	add	r0, sp, #36	; 0x24
    ec94:	f007 fd58 	bl	16748 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    ec98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec9a:	4a25      	ldr	r2, [pc, #148]	; (ed30 <ticker_cb+0x118>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ec9c:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    ec9e:	fba2 1203 	umull	r1, r2, r2, r3
    eca2:	1a99      	subs	r1, r3, r2
    eca4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    eca8:	0a12      	lsrs	r2, r2, #8
    ecaa:	f240 1147 	movw	r1, #327	; 0x147
    ecae:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ecb2:	4a20      	ldr	r2, [pc, #128]	; (ed34 <ticker_cb+0x11c>)
    ecb4:	4920      	ldr	r1, [pc, #128]	; (ed38 <ticker_cb+0x120>)
    ecb6:	1aa2      	subs	r2, r4, r2
    ecb8:	0892      	lsrs	r2, r2, #2
    ecba:	fba1 1202 	umull	r1, r2, r1, r2
    ecbe:	0892      	lsrs	r2, r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ecc0:	491e      	ldr	r1, [pc, #120]	; (ed3c <ticker_cb+0x124>)
				    (TICKER_ID_ADV_BASE +
    ecc2:	3202      	adds	r2, #2
		random_delay += 1;
    ecc4:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ecc6:	e9cd 5104 	strd	r5, r1, [sp, #16]
    ecca:	e9cd 5502 	strd	r5, r5, [sp, #8]
    ecce:	e9cd 5500 	strd	r5, r5, [sp]
    ecd2:	b2d2      	uxtb	r2, r2
    ecd4:	2101      	movs	r1, #1
    ecd6:	4628      	mov	r0, r5
		random_delay += 1;
    ecd8:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ecda:	f7fc fe29 	bl	b930 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ecde:	f030 0302 	bics.w	r3, r0, #2
    ece2:	d0c0      	beq.n	ec66 <ticker_cb+0x4e>
    ece4:	4a0f      	ldr	r2, [pc, #60]	; (ed24 <ticker_cb+0x10c>)
    ece6:	4916      	ldr	r1, [pc, #88]	; (ed40 <ticker_cb+0x128>)
    ece8:	4810      	ldr	r0, [pc, #64]	; (ed2c <ticker_cb+0x114>)
    ecea:	f240 7303 	movw	r3, #1795	; 0x703
    ecee:	f00d fad5 	bl	1c29c <printk>
    ecf2:	4040      	eors	r0, r0
    ecf4:	f380 8811 	msr	BASEPRI, r0
    ecf8:	f04f 0003 	mov.w	r0, #3
    ecfc:	df02      	svc	2
}
    ecfe:	e7b2      	b.n	ec66 <ticker_cb+0x4e>
		LL_ASSERT(ref);
    ed00:	4a08      	ldr	r2, [pc, #32]	; (ed24 <ticker_cb+0x10c>)
    ed02:	4910      	ldr	r1, [pc, #64]	; (ed44 <ticker_cb+0x12c>)
    ed04:	4809      	ldr	r0, [pc, #36]	; (ed2c <ticker_cb+0x114>)
    ed06:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
    ed0a:	f00d fac7 	bl	1c29c <printk>
    ed0e:	4040      	eors	r0, r0
    ed10:	f380 8811 	msr	BASEPRI, r0
    ed14:	f04f 0003 	mov.w	r0, #3
    ed18:	df02      	svc	2
    ed1a:	e78f      	b.n	ec3c <ticker_cb+0x24>
    ed1c:	20001dd4 	.word	0x20001dd4
    ed20:	200003d8 	.word	0x200003d8
    ed24:	00020a98 	.word	0x00020a98
    ed28:	000209f8 	.word	0x000209f8
    ed2c:	0002060c 	.word	0x0002060c
    ed30:	90d4f121 	.word	0x90d4f121
    ed34:	20001d74 	.word	0x20001d74
    ed38:	30c30c31 	.word	0x30c30c31
    ed3c:	0000ee05 	.word	0x0000ee05
    ed40:	00020ae4 	.word	0x00020ae4
    ed44:	00020b2c 	.word	0x00020b2c

0000ed48 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    ed48:	2800      	cmp	r0, #0
    ed4a:	d13d      	bne.n	edc8 <ticker_op_stop_cb+0x80>
{
    ed4c:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
    ed4e:	4d26      	ldr	r5, [pc, #152]	; (ede8 <ticker_op_stop_cb+0xa0>)
    ed50:	f101 031c 	add.w	r3, r1, #28
    ed54:	60ab      	str	r3, [r5, #8]
	return hdr->ref;
    ed56:	460c      	mov	r4, r1
    ed58:	7809      	ldrb	r1, [r1, #0]
	if (ull_ref_get(hdr)) {
    ed5a:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    ed5e:	b1e1      	cbz	r1, ed9a <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    ed60:	6962      	ldr	r2, [r4, #20]
    ed62:	b16a      	cbz	r2, ed80 <ticker_op_stop_cb+0x38>
    ed64:	4a21      	ldr	r2, [pc, #132]	; (edec <ticker_op_stop_cb+0xa4>)
    ed66:	4922      	ldr	r1, [pc, #136]	; (edf0 <ticker_op_stop_cb+0xa8>)
    ed68:	4822      	ldr	r0, [pc, #136]	; (edf4 <ticker_op_stop_cb+0xac>)
    ed6a:	f240 735b 	movw	r3, #1883	; 0x75b
    ed6e:	f00d fa95 	bl	1c29c <printk>
    ed72:	4040      	eors	r0, r0
    ed74:	f380 8811 	msr	BASEPRI, r0
    ed78:	f04f 0003 	mov.w	r0, #3
    ed7c:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    ed7e:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    ed80:	491d      	ldr	r1, [pc, #116]	; (edf8 <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
    ed82:	481e      	ldr	r0, [pc, #120]	; (edfc <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
    ed84:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ed86:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    ed88:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    ed8a:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ed8c:	4b16      	ldr	r3, [pc, #88]	; (ede8 <ticker_op_stop_cb+0xa0>)
    ed8e:	4611      	mov	r1, r2
    ed90:	2002      	movs	r0, #2
    ed92:	f7fb fb7d 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
    ed96:	b9c0      	cbnz	r0, edca <ticker_op_stop_cb+0x82>
}
    ed98:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    ed9a:	4817      	ldr	r0, [pc, #92]	; (edf8 <ticker_op_stop_cb+0xb0>)
    ed9c:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ed9e:	462b      	mov	r3, r5
    eda0:	2101      	movs	r1, #1
    eda2:	2002      	movs	r0, #2
    eda4:	f7fb fb74 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
    eda8:	2800      	cmp	r0, #0
    edaa:	d0f5      	beq.n	ed98 <ticker_op_stop_cb+0x50>
    edac:	4a0f      	ldr	r2, [pc, #60]	; (edec <ticker_op_stop_cb+0xa4>)
    edae:	4914      	ldr	r1, [pc, #80]	; (ee00 <ticker_op_stop_cb+0xb8>)
    edb0:	4810      	ldr	r0, [pc, #64]	; (edf4 <ticker_op_stop_cb+0xac>)
    edb2:	f240 7369 	movw	r3, #1897	; 0x769
    edb6:	f00d fa71 	bl	1c29c <printk>
    edba:	4040      	eors	r0, r0
    edbc:	f380 8811 	msr	BASEPRI, r0
    edc0:	f04f 0003 	mov.w	r0, #3
    edc4:	df02      	svc	2
}
    edc6:	bd38      	pop	{r3, r4, r5, pc}
    edc8:	4770      	bx	lr
		LL_ASSERT(!ret);
    edca:	4a08      	ldr	r2, [pc, #32]	; (edec <ticker_op_stop_cb+0xa4>)
    edcc:	490c      	ldr	r1, [pc, #48]	; (ee00 <ticker_op_stop_cb+0xb8>)
    edce:	4809      	ldr	r0, [pc, #36]	; (edf4 <ticker_op_stop_cb+0xac>)
    edd0:	f240 7362 	movw	r3, #1890	; 0x762
    edd4:	f00d fa62 	bl	1c29c <printk>
    edd8:	4040      	eors	r0, r0
    edda:	f380 8811 	msr	BASEPRI, r0
    edde:	f04f 0003 	mov.w	r0, #3
    ede2:	df02      	svc	2
}
    ede4:	bd38      	pop	{r3, r4, r5, pc}
    ede6:	bf00      	nop
    ede8:	200003e8 	.word	0x200003e8
    edec:	00020a98 	.word	0x00020a98
    edf0:	00020b30 	.word	0x00020b30
    edf4:	0002060c 	.word	0x0002060c
    edf8:	0000eb85 	.word	0x0000eb85
    edfc:	00016775 	.word	0x00016775
    ee00:	000209f8 	.word	0x000209f8

0000ee04 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ee04:	b900      	cbnz	r0, ee08 <ticker_op_update_cb+0x4>
    ee06:	4770      	bx	lr
{
    ee08:	b510      	push	{r4, lr}
    ee0a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ee0c:	f7ff fc5e 	bl	e6cc <ull_disable_mark_get>
    ee10:	4284      	cmp	r4, r0
    ee12:	d00c      	beq.n	ee2e <ticker_op_update_cb+0x2a>
    ee14:	4a06      	ldr	r2, [pc, #24]	; (ee30 <ticker_op_update_cb+0x2c>)
    ee16:	4907      	ldr	r1, [pc, #28]	; (ee34 <ticker_op_update_cb+0x30>)
    ee18:	4807      	ldr	r0, [pc, #28]	; (ee38 <ticker_op_update_cb+0x34>)
    ee1a:	f240 7324 	movw	r3, #1828	; 0x724
    ee1e:	f00d fa3d 	bl	1c29c <printk>
    ee22:	4040      	eors	r0, r0
    ee24:	f380 8811 	msr	BASEPRI, r0
    ee28:	f04f 0003 	mov.w	r0, #3
    ee2c:	df02      	svc	2
}
    ee2e:	bd10      	pop	{r4, pc}
    ee30:	00020a98 	.word	0x00020a98
    ee34:	00020b44 	.word	0x00020b44
    ee38:	0002060c 	.word	0x0002060c

0000ee3c <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    ee3c:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee3e:	4b13      	ldr	r3, [pc, #76]	; (ee8c <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ee40:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ee42:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee46:	f893 c04a 	ldrb.w	ip, [r3, #74]	; 0x4a
    ee4a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ee4e:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    ee52:	f022 0202 	bic.w	r2, r2, #2
    ee56:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    ee58:	f042 020e 	orr.w	r2, r2, #14
    ee5c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    ee5e:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    ee60:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee62:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee66:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee6a:	f8a3 e048 	strh.w	lr, [r3, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee6e:	f883 c04a 	strb.w	ip, [r3, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
    ee72:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    ee74:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ee76:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    ee7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ee7e:	2204      	movs	r2, #4
    ee80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    ee82:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    ee84:	701a      	strb	r2, [r3, #0]
	adv->lll.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    ee86:	f85d fb04 	ldr.w	pc, [sp], #4
    ee8a:	bf00      	nop
    ee8c:	20001d74 	.word	0x20001d74

0000ee90 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    ee90:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    ee92:	4c1b      	ldr	r4, [pc, #108]	; (ef00 <conn_release.constprop.0+0x70>)
    ee94:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    ee96:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ee98:	b163      	cbz	r3, eeb4 <conn_release.constprop.0+0x24>
    ee9a:	4a1a      	ldr	r2, [pc, #104]	; (ef04 <conn_release.constprop.0+0x74>)
    ee9c:	491a      	ldr	r1, [pc, #104]	; (ef08 <conn_release.constprop.0+0x78>)
    ee9e:	481b      	ldr	r0, [pc, #108]	; (ef0c <conn_release.constprop.0+0x7c>)
    eea0:	f240 73a4 	movw	r3, #1956	; 0x7a4
    eea4:	f00d f9fa 	bl	1c29c <printk>
    eea8:	4040      	eors	r0, r0
    eeaa:	f380 8811 	msr	BASEPRI, r0
    eeae:	f04f 0003 	mov.w	r0, #3
    eeb2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    eeb4:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    eeb8:	f105 0048 	add.w	r0, r5, #72	; 0x48
    eebc:	f7fb fa6a 	bl	a394 <memq_deinit>
	LL_ASSERT(link);
    eec0:	4606      	mov	r6, r0
    eec2:	b170      	cbz	r0, eee2 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    eec4:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    eec6:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    eec8:	f001 fa50 	bl	1036c <ll_conn_release>
	adv->lll.conn = NULL;
    eecc:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    eece:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
    eed0:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    eed2:	f7ff fb3f 	bl	e554 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    eed6:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
    eed8:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
    eeda:	f7ff fb2f 	bl	e53c <ll_rx_link_release>
	adv->link_cc_free = NULL;
    eede:	6425      	str	r5, [r4, #64]	; 0x40
}
    eee0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    eee2:	4a08      	ldr	r2, [pc, #32]	; (ef04 <conn_release.constprop.0+0x74>)
    eee4:	490a      	ldr	r1, [pc, #40]	; (ef10 <conn_release.constprop.0+0x80>)
    eee6:	4809      	ldr	r0, [pc, #36]	; (ef0c <conn_release.constprop.0+0x7c>)
    eee8:	f240 73a6 	movw	r3, #1958	; 0x7a6
    eeec:	f00d f9d6 	bl	1c29c <printk>
    eef0:	4040      	eors	r0, r0
    eef2:	f380 8811 	msr	BASEPRI, r0
    eef6:	f04f 0003 	mov.w	r0, #3
    eefa:	df02      	svc	2
    eefc:	e7e2      	b.n	eec4 <conn_release.constprop.0+0x34>
    eefe:	bf00      	nop
    ef00:	20001d74 	.word	0x20001d74
    ef04:	00020a98 	.word	0x00020a98
    ef08:	00020b74 	.word	0x00020b74
    ef0c:	0002060c 	.word	0x0002060c
    ef10:	00020c74 	.word	0x00020c74

0000ef14 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    ef14:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    ef16:	4c4f      	ldr	r4, [pc, #316]	; (f054 <disable.part.0+0x140>)
static inline uint8_t disable(uint8_t handle)
    ef18:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    ef1a:	4620      	mov	r0, r4
    ef1c:	f7ff fbc0 	bl	e6a0 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    ef20:	4284      	cmp	r4, r0
    ef22:	d00c      	beq.n	ef3e <disable.part.0+0x2a>
    ef24:	4a4c      	ldr	r2, [pc, #304]	; (f058 <disable.part.0+0x144>)
    ef26:	494d      	ldr	r1, [pc, #308]	; (f05c <disable.part.0+0x148>)
    ef28:	484d      	ldr	r0, [pc, #308]	; (f060 <disable.part.0+0x14c>)
    ef2a:	f640 0307 	movw	r3, #2055	; 0x807
    ef2e:	f00d f9b5 	bl	1c29c <printk>
    ef32:	4040      	eors	r0, r0
    ef34:	f380 8811 	msr	BASEPRI, r0
    ef38:	f04f 0003 	mov.w	r0, #3
    ef3c:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    ef3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ef42:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    ef44:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    ef46:	d50d      	bpl.n	ef64 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    ef48:	2102      	movs	r1, #2
    ef4a:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    ef4c:	4b45      	ldr	r3, [pc, #276]	; (f064 <disable.part.0+0x150>)
    ef4e:	9500      	str	r5, [sp, #0]
    ef50:	2103      	movs	r1, #3
    ef52:	2201      	movs	r2, #1
    ef54:	2000      	movs	r0, #0
    ef56:	f7fc fd03 	bl	b960 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    ef5a:	4629      	mov	r1, r5
    ef5c:	f7ff fb78 	bl	e650 <ull_ticker_status_take>
		if (ret) {
    ef60:	2800      	cmp	r0, #0
    ef62:	d15d      	bne.n	f020 <disable.part.0+0x10c>
	ret_cb = TICKER_STATUS_BUSY;
    ef64:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ef66:	2103      	movs	r1, #3
    ef68:	4b3e      	ldr	r3, [pc, #248]	; (f064 <disable.part.0+0x150>)
    ef6a:	9500      	str	r5, [sp, #0]
    ef6c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    ef6e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ef70:	f7fc fcf6 	bl	b960 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    ef74:	4629      	mov	r1, r5
    ef76:	f7ff fb6b 	bl	e650 <ull_ticker_status_take>
	if (ret) {
    ef7a:	2800      	cmp	r0, #0
    ef7c:	d13b      	bne.n	eff6 <disable.part.0+0xe2>
	ret = ull_disable(&adv->lll);
    ef7e:	483a      	ldr	r0, [pc, #232]	; (f068 <disable.part.0+0x154>)
    ef80:	f7ff fbc6 	bl	e710 <ull_disable>
	LL_ASSERT(!ret);
    ef84:	bb20      	cbnz	r0, efd0 <disable.part.0+0xbc>
	mark = ull_disable_unmark(adv);
    ef86:	4833      	ldr	r0, [pc, #204]	; (f054 <disable.part.0+0x140>)
    ef88:	f7ff fb94 	bl	e6b4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    ef8c:	4284      	cmp	r4, r0
    ef8e:	d00c      	beq.n	efaa <disable.part.0+0x96>
    ef90:	4a31      	ldr	r2, [pc, #196]	; (f058 <disable.part.0+0x144>)
    ef92:	4932      	ldr	r1, [pc, #200]	; (f05c <disable.part.0+0x148>)
    ef94:	4832      	ldr	r0, [pc, #200]	; (f060 <disable.part.0+0x14c>)
    ef96:	f640 0329 	movw	r3, #2089	; 0x829
    ef9a:	f00d f97f 	bl	1c29c <printk>
    ef9e:	4040      	eors	r0, r0
    efa0:	f380 8811 	msr	BASEPRI, r0
    efa4:	f04f 0003 	mov.w	r0, #3
    efa8:	df02      	svc	2
	if (adv->lll.conn) {
    efaa:	6a23      	ldr	r3, [r4, #32]
    efac:	b10b      	cbz	r3, efb2 <disable.part.0+0x9e>
		conn_release(adv);
    efae:	f7ff ff6f 	bl	ee90 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    efb2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    efb6:	f36f 0300 	bfc	r3, #0, #1
    efba:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    efbe:	2000      	movs	r0, #0
    efc0:	f000 fb30 	bl	f624 <ull_scan_is_enabled_get>
    efc4:	4604      	mov	r4, r0
    efc6:	2800      	cmp	r0, #0
    efc8:	d03f      	beq.n	f04a <disable.part.0+0x136>
	return 0;
    efca:	2000      	movs	r0, #0
}
    efcc:	b005      	add	sp, #20
    efce:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    efd0:	4a21      	ldr	r2, [pc, #132]	; (f058 <disable.part.0+0x144>)
    efd2:	4926      	ldr	r1, [pc, #152]	; (f06c <disable.part.0+0x158>)
    efd4:	4822      	ldr	r0, [pc, #136]	; (f060 <disable.part.0+0x14c>)
    efd6:	f640 0326 	movw	r3, #2086	; 0x826
    efda:	f00d f95f 	bl	1c29c <printk>
    efde:	4040      	eors	r0, r0
    efe0:	f380 8811 	msr	BASEPRI, r0
    efe4:	f04f 0003 	mov.w	r0, #3
    efe8:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    efea:	481a      	ldr	r0, [pc, #104]	; (f054 <disable.part.0+0x140>)
    efec:	f7ff fb62 	bl	e6b4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    eff0:	4284      	cmp	r4, r0
    eff2:	d1cd      	bne.n	ef90 <disable.part.0+0x7c>
    eff4:	e7d9      	b.n	efaa <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
    eff6:	4817      	ldr	r0, [pc, #92]	; (f054 <disable.part.0+0x140>)
    eff8:	f7ff fb5c 	bl	e6b4 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    effc:	4284      	cmp	r4, r0
    effe:	d021      	beq.n	f044 <disable.part.0+0x130>
    f000:	4a15      	ldr	r2, [pc, #84]	; (f058 <disable.part.0+0x144>)
    f002:	4916      	ldr	r1, [pc, #88]	; (f05c <disable.part.0+0x148>)
    f004:	4816      	ldr	r0, [pc, #88]	; (f060 <disable.part.0+0x14c>)
    f006:	f44f 6302 	mov.w	r3, #2080	; 0x820
    f00a:	f00d f947 	bl	1c29c <printk>
    f00e:	4040      	eors	r0, r0
    f010:	f380 8811 	msr	BASEPRI, r0
    f014:	f04f 0003 	mov.w	r0, #3
    f018:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    f01a:	200c      	movs	r0, #12
}
    f01c:	b005      	add	sp, #20
    f01e:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
    f020:	480c      	ldr	r0, [pc, #48]	; (f054 <disable.part.0+0x140>)
    f022:	f7ff fb47 	bl	e6b4 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    f026:	4284      	cmp	r4, r0
    f028:	d00c      	beq.n	f044 <disable.part.0+0x130>
    f02a:	4a0b      	ldr	r2, [pc, #44]	; (f058 <disable.part.0+0x144>)
    f02c:	490b      	ldr	r1, [pc, #44]	; (f05c <disable.part.0+0x148>)
    f02e:	480c      	ldr	r0, [pc, #48]	; (f060 <disable.part.0+0x14c>)
    f030:	f640 0312 	movw	r3, #2066	; 0x812
    f034:	f00d f932 	bl	1c29c <printk>
    f038:	4040      	eors	r0, r0
    f03a:	f380 8811 	msr	BASEPRI, r0
    f03e:	f04f 0003 	mov.w	r0, #3
    f042:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    f044:	200c      	movs	r0, #12
}
    f046:	b005      	add	sp, #20
    f048:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
    f04a:	f006 fcd7 	bl	159fc <ull_filter_adv_scan_state_cb>
	return 0;
    f04e:	4620      	mov	r0, r4
}
    f050:	b005      	add	sp, #20
    f052:	bd30      	pop	{r4, r5, pc}
    f054:	20001d74 	.word	0x20001d74
    f058:	00020a98 	.word	0x00020a98
    f05c:	00020b88 	.word	0x00020b88
    f060:	0002060c 	.word	0x0002060c
    f064:	0000d77d 	.word	0x0000d77d
    f068:	20001d90 	.word	0x20001d90
    f06c:	000209f8 	.word	0x000209f8

0000f070 <ll_adv_params_set>:
{
    f070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
    f074:	4c4d      	ldr	r4, [pc, #308]	; (f1ac <ll_adv_params_set+0x13c>)
{
    f076:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f078:	4b4d      	ldr	r3, [pc, #308]	; (f1b0 <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
    f07a:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
{
    f07e:	4680      	mov	r8, r0
    f080:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f082:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    f086:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
    f088:	f016 0601 	ands.w	r6, r6, #1
{
    f08c:	4615      	mov	r5, r2
    f08e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
    f092:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f096:	9000      	str	r0, [sp, #0]
    f098:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    f09c:	d170      	bne.n	f180 <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
    f09e:	f00c 0c07 	and.w	ip, ip, #7
    f0a2:	f002 0203 	and.w	r2, r2, #3
    f0a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    f0aa:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    f0ae:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    f0b2:	f1be 0f01 	cmp.w	lr, #1
    f0b6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    f0ba:	bf08      	it	eq
    f0bc:	f04f 0800 	moveq.w	r8, #0
    f0c0:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
    f0c4:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    f0c8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
    f0ca:	ab02      	add	r3, sp, #8
    f0cc:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
    f0ce:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    f0d2:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    f0d6:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    f0da:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
    f0de:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
    f0e2:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f0e6:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
    f0ea:	f022 021f 	bic.w	r2, r2, #31
    f0ee:	f003 030f 	and.w	r3, r3, #15
    f0f2:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
    f0f6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f0fa:	bf0c      	ite	eq
    f0fc:	2101      	moveq	r1, #1
    f0fe:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
    f100:	f365 0242 	bfi	r2, r5, #1, #2
    f104:	f361 1345 	bfi	r3, r1, #5, #1
    f108:	f888 3000 	strb.w	r3, [r8]
    f10c:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    f110:	b2d3      	uxtb	r3, r2
    f112:	0752      	lsls	r2, r2, #29
    f114:	d509      	bpl.n	f12a <ll_adv_params_set+0xba>
		adv->peer_addr_type = direct_addr_type;
    f116:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    f11a:	9908      	ldr	r1, [sp, #32]
		adv->peer_addr_type = direct_addr_type;
    f11c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    f120:	2206      	movs	r2, #6
    f122:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    f126:	f00e fb6f 	bl	1d808 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    f12a:	f898 3000 	ldrb.w	r3, [r8]
    f12e:	f003 020f 	and.w	r2, r3, #15
    f132:	2a01      	cmp	r2, #1
    f134:	d029      	beq.n	f18a <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
    f136:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    f13a:	f005 0501 	and.w	r5, r5, #1
    f13e:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
    f142:	b1aa      	cbz	r2, f170 <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
    f144:	f36f 13c7 	bfc	r3, #7, #1
    f148:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    f14c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    f150:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f154:	01ad      	lsls	r5, r5, #6
    f156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    f158:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f15a:	f045 0504 	orr.w	r5, r5, #4
    f15e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    f160:	b912      	cbnz	r2, f168 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
    f162:	2106      	movs	r1, #6
    f164:	7059      	strb	r1, [r3, #1]
	return 0;
    f166:	4616      	mov	r6, r2
}
    f168:	4630      	mov	r0, r6
    f16a:	b002      	add	sp, #8
    f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
    f170:	f362 13c7 	bfi	r3, r2, #7, #1
    f174:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    f178:	2306      	movs	r3, #6
    f17a:	f888 3001 	strb.w	r3, [r8, #1]
    f17e:	e7e5      	b.n	f14c <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f180:	260c      	movs	r6, #12
}
    f182:	4630      	mov	r0, r6
    f184:	b002      	add	sp, #8
    f186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    f18a:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
    f18e:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
    f190:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    f194:	f367 13c7 	bfi	r3, r7, #7, #1
    f198:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    f19c:	9908      	ldr	r1, [sp, #32]
    f19e:	2206      	movs	r2, #6
    f1a0:	f00e fb32 	bl	1d808 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    f1a4:	230c      	movs	r3, #12
    f1a6:	f888 3001 	strb.w	r3, [r8, #1]
    f1aa:	e7cf      	b.n	f14c <ll_adv_params_set+0xdc>
    f1ac:	20001d74 	.word	0x20001d74
    f1b0:	000201c0 	.word	0x000201c0

0000f1b4 <ll_adv_data_set>:
{
    f1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    f1b6:	4e21      	ldr	r6, [pc, #132]	; (f23c <ll_adv_data_set+0x88>)
    f1b8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    f1bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    f1c0:	b083      	sub	sp, #12
    f1c2:	6add      	ldr	r5, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
    f1c4:	782b      	ldrb	r3, [r5, #0]
    f1c6:	f003 030f 	and.w	r3, r3, #15
    f1ca:	2b01      	cmp	r3, #1
    f1cc:	d032      	beq.n	f234 <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
    f1ce:	281f      	cmp	r0, #31
    f1d0:	4604      	mov	r4, r0
    f1d2:	d82c      	bhi.n	f22e <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    f1d4:	460f      	mov	r7, r1
    f1d6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f1da:	f10d 0107 	add.w	r1, sp, #7
    f1de:	f007 fee9 	bl	16fb4 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    f1e2:	4629      	mov	r1, r5
    f1e4:	4605      	mov	r5, r0
    f1e6:	f811 2b02 	ldrb.w	r2, [r1], #2
    f1ea:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    f1ee:	f3c2 0303 	ubfx	r3, r2, #0, #4
    f1f2:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    f1f6:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    f1fa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    f1fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
    f202:	4628      	mov	r0, r5
    f204:	4313      	orrs	r3, r2
    f206:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    f20a:	2206      	movs	r2, #6
    f20c:	f00e fafc 	bl	1d808 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    f210:	4622      	mov	r2, r4
    f212:	4639      	mov	r1, r7
    f214:	f105 0008 	add.w	r0, r5, #8
    f218:	f00e faf6 	bl	1d808 <memcpy>
	pdu->last = idx;
    f21c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
    f220:	3406      	adds	r4, #6
	return 0;
    f222:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
    f224:	706c      	strb	r4, [r5, #1]
    f226:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
}
    f22a:	b003      	add	sp, #12
    f22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
    f22e:	2012      	movs	r0, #18
}
    f230:	b003      	add	sp, #12
    f232:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    f234:	2000      	movs	r0, #0
}
    f236:	b003      	add	sp, #12
    f238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f23a:	bf00      	nop
    f23c:	20001d74 	.word	0x20001d74

0000f240 <ull_adv_init>:
{
    f240:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    f242:	4c06      	ldr	r4, [pc, #24]	; (f25c <ull_adv_init+0x1c>)
    f244:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f248:	f007 fe9e 	bl	16f88 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    f24c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f250:	f007 fe9a 	bl	16f88 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    f254:	f7ff fdf2 	bl	ee3c <init_set.constprop.0>
}
    f258:	2000      	movs	r0, #0
    f25a:	bd10      	pop	{r4, pc}
    f25c:	20001d74 	.word	0x20001d74

0000f260 <ull_adv_reset>:
{
    f260:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
    f262:	4b0b      	ldr	r3, [pc, #44]	; (f290 <ull_adv_reset+0x30>)
    f264:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    f268:	07d2      	lsls	r2, r2, #31
    f26a:	d50e      	bpl.n	f28a <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
    f26c:	6a1a      	ldr	r2, [r3, #32]
    f26e:	b152      	cbz	r2, f286 <ull_adv_reset+0x26>
		adv->lll.conn->slave.cancelled = 1U;
    f270:	f892 1020 	ldrb.w	r1, [r2, #32]
    f274:	f041 0102 	orr.w	r1, r1, #2
    f278:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
    f27c:	6a1b      	ldr	r3, [r3, #32]
    f27e:	f893 3020 	ldrb.w	r3, [r3, #32]
    f282:	07db      	lsls	r3, r3, #31
    f284:	d401      	bmi.n	f28a <ull_adv_reset+0x2a>
    f286:	f7ff fe45 	bl	ef14 <disable.part.0>
}
    f28a:	2000      	movs	r0, #0
    f28c:	bd08      	pop	{r3, pc}
    f28e:	bf00      	nop
    f290:	20001d74 	.word	0x20001d74

0000f294 <ull_adv_reset_finalize>:
{
    f294:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    f296:	4c0a      	ldr	r4, [pc, #40]	; (f2c0 <ull_adv_reset_finalize+0x2c>)
    f298:	f104 0528 	add.w	r5, r4, #40	; 0x28
    f29c:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    f29e:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
    f2a0:	f007 fe82 	bl	16fa8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    f2a4:	4620      	mov	r0, r4
    f2a6:	f007 fe7f 	bl	16fa8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    f2aa:	4628      	mov	r0, r5
    f2ac:	f007 fe6c 	bl	16f88 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    f2b0:	4620      	mov	r0, r4
    f2b2:	f007 fe69 	bl	16f88 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    f2b6:	f7ff fdc1 	bl	ee3c <init_set.constprop.0>
}
    f2ba:	2000      	movs	r0, #0
    f2bc:	bd38      	pop	{r3, r4, r5, pc}
    f2be:	bf00      	nop
    f2c0:	20001d74 	.word	0x20001d74

0000f2c4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f2c4:	4a04      	ldr	r2, [pc, #16]	; (f2d8 <ull_adv_handle_get+0x14>)
    f2c6:	4b05      	ldr	r3, [pc, #20]	; (f2dc <ull_adv_handle_get+0x18>)
    f2c8:	1a80      	subs	r0, r0, r2
    f2ca:	0880      	lsrs	r0, r0, #2
    f2cc:	fba3 3000 	umull	r3, r0, r3, r0
}
    f2d0:	f3c0 008f 	ubfx	r0, r0, #2, #16
    f2d4:	4770      	bx	lr
    f2d6:	bf00      	nop
    f2d8:	20001d74 	.word	0x20001d74
    f2dc:	30c30c31 	.word	0x30c30c31

0000f2e0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f2e0:	4a04      	ldr	r2, [pc, #16]	; (f2f4 <ull_adv_lll_handle_get+0x14>)
    f2e2:	6800      	ldr	r0, [r0, #0]
    f2e4:	4b04      	ldr	r3, [pc, #16]	; (f2f8 <ull_adv_lll_handle_get+0x18>)
    f2e6:	1a80      	subs	r0, r0, r2
    f2e8:	0880      	lsrs	r0, r0, #2
    f2ea:	fba3 3000 	umull	r3, r0, r3, r0
}
    f2ee:	f3c0 008f 	ubfx	r0, r0, #2, #16
    f2f2:	4770      	bx	lr
    f2f4:	20001d74 	.word	0x20001d74
    f2f8:	30c30c31 	.word	0x30c30c31

0000f2fc <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f2fc:	b938      	cbnz	r0, f30e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    f2fe:	4805      	ldr	r0, [pc, #20]	; (f314 <ull_adv_is_enabled_get+0x18>)
    f300:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
    f304:	f013 0f01 	tst.w	r3, #1
    f308:	bf08      	it	eq
    f30a:	2000      	moveq	r0, #0
    f30c:	4770      	bx	lr
		return NULL;
    f30e:	2000      	movs	r0, #0
}
    f310:	4770      	bx	lr
    f312:	bf00      	nop
    f314:	20001d74 	.word	0x20001d74

0000f318 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    f318:	b928      	cbnz	r0, f326 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    f31a:	4b04      	ldr	r3, [pc, #16]	; (f32c <ull_adv_is_enabled+0x14>)
    f31c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    f320:	f000 0001 	and.w	r0, r0, #1
    f324:	4770      	bx	lr
    f326:	2000      	movs	r0, #0
}
    f328:	4770      	bx	lr
    f32a:	bf00      	nop
    f32c:	20001d74 	.word	0x20001d74

0000f330 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f330:	b950      	cbnz	r0, f348 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    f332:	4b06      	ldr	r3, [pc, #24]	; (f34c <ull_adv_filter_pol_get+0x1c>)
    f334:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    f338:	f010 0001 	ands.w	r0, r0, #1
    f33c:	d005      	beq.n	f34a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    f33e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    f342:	f000 0003 	and.w	r0, r0, #3
    f346:	4770      	bx	lr
		return 0;
    f348:	2000      	movs	r0, #0
}
    f34a:	4770      	bx	lr
    f34c:	20001d74 	.word	0x20001d74

0000f350 <ull_scan_rsp_set>:
{
    f350:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    f352:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    f356:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    f35a:	b083      	sub	sp, #12
    f35c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    f35e:	460e      	mov	r6, r1
    f360:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    f362:	f10d 0107 	add.w	r1, sp, #7
    f366:	3034      	adds	r0, #52	; 0x34
    f368:	4617      	mov	r7, r2
    f36a:	f007 fe23 	bl	16fb4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    f36e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    f370:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    f372:	f811 3b02 	ldrb.w	r3, [r1], #2
    f376:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f37a:	019b      	lsls	r3, r3, #6
    f37c:	f043 0304 	orr.w	r3, r3, #4
    f380:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    f382:	1db3      	adds	r3, r6, #6
    f384:	7043      	strb	r3, [r0, #1]
    f386:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    f388:	3002      	adds	r0, #2
    f38a:	f00e fa3d 	bl	1d808 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    f38e:	4632      	mov	r2, r6
    f390:	4639      	mov	r1, r7
    f392:	f105 0008 	add.w	r0, r5, #8
    f396:	f00e fa37 	bl	1d808 <memcpy>
	pdu->last = idx;
    f39a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f39e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
    f3a2:	2000      	movs	r0, #0
    f3a4:	b003      	add	sp, #12
    f3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f3a8 <ll_adv_scan_rsp_set>:
{
    f3a8:	4603      	mov	r3, r0
    f3aa:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    f3ac:	4801      	ldr	r0, [pc, #4]	; (f3b4 <ll_adv_scan_rsp_set+0xc>)
    f3ae:	4619      	mov	r1, r3
    f3b0:	f7ff bfce 	b.w	f350 <ull_scan_rsp_set>
    f3b4:	20001d74 	.word	0x20001d74

0000f3b8 <ull_adv_pdu_update_addrs>:
{
    f3b8:	b570      	push	{r4, r5, r6, lr}
    f3ba:	460c      	mov	r4, r1
    f3bc:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
    f3be:	f006 fc8d 	bl	15cdc <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
    f3c2:	4601      	mov	r1, r0
    f3c4:	b300      	cbz	r0, f408 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
    f3c6:	7823      	ldrb	r3, [r4, #0]
    f3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f3cc:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
    f3ce:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    f3d0:	2206      	movs	r2, #6
    f3d2:	4630      	mov	r0, r6
    f3d4:	f00e fa18 	bl	1d808 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    f3d8:	7823      	ldrb	r3, [r4, #0]
    f3da:	f003 030f 	and.w	r3, r3, #15
    f3de:	2b01      	cmp	r3, #1
    f3e0:	d001      	beq.n	f3e6 <ull_adv_pdu_update_addrs+0x2e>
}
    f3e2:	4630      	mov	r0, r6
    f3e4:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
    f3e6:	4628      	mov	r0, r5
    f3e8:	f006 fca6 	bl	15d38 <ull_filter_tgta_get>
	if (rx_addr) {
    f3ec:	4601      	mov	r1, r0
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d0f7      	beq.n	f3e2 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
    f3f2:	7823      	ldrb	r3, [r4, #0]
    f3f4:	4620      	mov	r0, r4
    f3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f3fa:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
    f3fe:	2206      	movs	r2, #6
    f400:	f00e fa02 	bl	1d808 <memcpy>
}
    f404:	4630      	mov	r0, r6
    f406:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
    f408:	7820      	ldrb	r0, [r4, #0]
    f40a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f40e:	f7fc fb4d 	bl	baac <ll_addr_get>
    f412:	4601      	mov	r1, r0
	if (rpa) {
    f414:	e7db      	b.n	f3ce <ull_adv_pdu_update_addrs+0x16>
    f416:	bf00      	nop

0000f418 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, uint8_t force, void *param)
{
    f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f41c:	f8dd c020 	ldr.w	ip, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    f420:	4666      	mov	r6, ip
{
    f422:	4681      	mov	r9, r0
	return ++hdr->ref;
    f424:	f816 4b1c 	ldrb.w	r4, [r6], #28
    f428:	3401      	adds	r4, #1
    f42a:	b2e4      	uxtb	r4, r4
    f42c:	4688      	mov	r8, r1
    f42e:	4617      	mov	r7, r2
    f430:	461d      	mov	r5, r3
    f432:	f88c 4000 	strb.w	r4, [ip]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    f436:	b17c      	cbz	r4, f458 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    f438:	4c16      	ldr	r4, [pc, #88]	; (f494 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    f43a:	4b17      	ldr	r3, [pc, #92]	; (f498 <ticker_cb+0x80>)
	p.lazy = lazy;
    f43c:	8127      	strh	r7, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f43e:	2200      	movs	r2, #0
    f440:	4611      	mov	r1, r2
    f442:	2001      	movs	r0, #1
	p.remainder = remainder;
    f444:	e9c4 9800 	strd	r9, r8, [r4]
	p.param = lll;
    f448:	60e6      	str	r6, [r4, #12]
	p.force = force;
    f44a:	72a5      	strb	r5, [r4, #10]
	mfy.param = &p;
    f44c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f44e:	f7fb f81f 	bl	a490 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    f452:	b978      	cbnz	r0, f474 <ticker_cb+0x5c>

	DEBUG_RADIO_PREPARE_O(1);
}
    f454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    f458:	4a10      	ldr	r2, [pc, #64]	; (f49c <ticker_cb+0x84>)
    f45a:	4911      	ldr	r1, [pc, #68]	; (f4a0 <ticker_cb+0x88>)
    f45c:	4811      	ldr	r0, [pc, #68]	; (f4a4 <ticker_cb+0x8c>)
    f45e:	f240 23cf 	movw	r3, #719	; 0x2cf
    f462:	f00c ff1b 	bl	1c29c <printk>
    f466:	4040      	eors	r0, r0
    f468:	f380 8811 	msr	BASEPRI, r0
    f46c:	f04f 0003 	mov.w	r0, #3
    f470:	df02      	svc	2
    f472:	e7e1      	b.n	f438 <ticker_cb+0x20>
	LL_ASSERT(!ret);
    f474:	4a09      	ldr	r2, [pc, #36]	; (f49c <ticker_cb+0x84>)
    f476:	490c      	ldr	r1, [pc, #48]	; (f4a8 <ticker_cb+0x90>)
    f478:	480a      	ldr	r0, [pc, #40]	; (f4a4 <ticker_cb+0x8c>)
    f47a:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    f47e:	f00c ff0d 	bl	1c29c <printk>
    f482:	4040      	eors	r0, r0
    f484:	f380 8811 	msr	BASEPRI, r0
    f488:	f04f 0003 	mov.w	r0, #3
    f48c:	df02      	svc	2
}
    f48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f492:	bf00      	nop
    f494:	20001e34 	.word	0x20001e34
    f498:	200003f8 	.word	0x200003f8
    f49c:	00020ba4 	.word	0x00020ba4
    f4a0:	00020b2c 	.word	0x00020b2c
    f4a4:	0002060c 	.word	0x0002060c
    f4a8:	000209f8 	.word	0x000209f8

0000f4ac <ull_scan_init>:
}
    f4ac:	2000      	movs	r0, #0
    f4ae:	4770      	bx	lr

0000f4b0 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    f4b0:	3004      	adds	r0, #4
{
    f4b2:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    f4b4:	f101 021c 	add.w	r2, r1, #28
    f4b8:	b2c0      	uxtb	r0, r0
    f4ba:	f7ff f969 	bl	e790 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    f4be:	b110      	cbz	r0, f4c6 <ull_scan_disable+0x16>
    f4c0:	3078      	adds	r0, #120	; 0x78
    f4c2:	d101      	bne.n	f4c8 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f4c4:	200c      	movs	r0, #12
}
    f4c6:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    f4c8:	4a07      	ldr	r2, [pc, #28]	; (f4e8 <ull_scan_disable+0x38>)
    f4ca:	4908      	ldr	r1, [pc, #32]	; (f4ec <ull_scan_disable+0x3c>)
    f4cc:	4808      	ldr	r0, [pc, #32]	; (f4f0 <ull_scan_disable+0x40>)
    f4ce:	f240 13cf 	movw	r3, #463	; 0x1cf
    f4d2:	f00c fee3 	bl	1c29c <printk>
    f4d6:	4040      	eors	r0, r0
    f4d8:	f380 8811 	msr	BASEPRI, r0
    f4dc:	f04f 0003 	mov.w	r0, #3
    f4e0:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    f4e2:	200c      	movs	r0, #12
}
    f4e4:	bd08      	pop	{r3, pc}
    f4e6:	bf00      	nop
    f4e8:	00020ba4 	.word	0x00020ba4
    f4ec:	00020be4 	.word	0x00020be4
    f4f0:	0002060c 	.word	0x0002060c

0000f4f4 <ll_scan_enable>:
{
    f4f4:	b538      	push	{r3, r4, r5, lr}
	if (!enable) {
    f4f6:	b380      	cbz	r0, f55a <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
    f4f8:	4c2d      	ldr	r4, [pc, #180]	; (f5b0 <ll_scan_enable+0xbc>)
    f4fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    f4fe:	f013 0101 	ands.w	r1, r3, #1
    f502:	d12f      	bne.n	f564 <ll_scan_enable+0x70>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    f504:	079a      	lsls	r2, r3, #30
    f506:	f3c3 0541 	ubfx	r5, r3, #1, #2
    f50a:	d50b      	bpl.n	f524 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
    f50c:	2001      	movs	r0, #1
    f50e:	f7fc facd 	bl	baac <ll_addr_get>
    f512:	2106      	movs	r1, #6
    f514:	f7fa ff2e 	bl	a374 <mem_nz>
    f518:	2800      	cmp	r0, #0
    f51a:	d046      	beq.n	f5aa <ll_scan_enable+0xb6>
		own_addr_type = scan->own_addr_type;
    f51c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    f520:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
    f524:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    f528:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    f52c:	f006 faa6 	bl	15a7c <ull_filter_scan_update>
	lll->rpa_gen = 0;
    f530:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    f534:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
    f538:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
    f53c:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
    f53e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    f542:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
    f544:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
    f548:	d502      	bpl.n	f550 <ll_scan_enable+0x5c>
    f54a:	3d02      	subs	r5, #2
    f54c:	2d01      	cmp	r5, #1
    f54e:	d922      	bls.n	f596 <ll_scan_enable+0xa2>
}
    f550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
    f554:	4816      	ldr	r0, [pc, #88]	; (f5b0 <ll_scan_enable+0xbc>)
    f556:	f7f1 ba6b 	b.w	a30 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
    f55a:	4d15      	ldr	r5, [pc, #84]	; (f5b0 <ll_scan_enable+0xbc>)
    f55c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    f560:	07d9      	lsls	r1, r3, #31
    f562:	d402      	bmi.n	f56a <ll_scan_enable+0x76>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    f564:	240c      	movs	r4, #12
}
    f566:	4620      	mov	r0, r4
    f568:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    f56a:	6a2b      	ldr	r3, [r5, #32]
    f56c:	2b00      	cmp	r3, #0
    f56e:	d1f9      	bne.n	f564 <ll_scan_enable+0x70>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
    f570:	4629      	mov	r1, r5
    f572:	f7ff ff9d 	bl	f4b0 <ull_scan_disable>
	if (ret) {
    f576:	4604      	mov	r4, r0
    f578:	2800      	cmp	r0, #0
    f57a:	d1f4      	bne.n	f566 <ll_scan_enable+0x72>
		return ret;
	}

	scan->is_enabled = 0U;
    f57c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    f580:	f360 0300 	bfi	r3, r0, #0, #1
    f584:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
    f588:	f7ff feb8 	bl	f2fc <ull_adv_is_enabled_get>
    f58c:	2800      	cmp	r0, #0
    f58e:	d1ea      	bne.n	f566 <ll_scan_enable+0x72>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
    f590:	f006 fa34 	bl	159fc <ull_filter_adv_scan_state_cb>
    f594:	e7e7      	b.n	f566 <ll_scan_enable+0x72>
		ull_filter_rpa_update(false);
    f596:	2000      	movs	r0, #0
    f598:	f006 fa94 	bl	15ac4 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    f59c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f5a0:	f043 0302 	orr.w	r3, r3, #2
    f5a4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    f5a8:	e7d2      	b.n	f550 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
    f5aa:	2412      	movs	r4, #18
    f5ac:	e7db      	b.n	f566 <ll_scan_enable+0x72>
    f5ae:	bf00      	nop
    f5b0:	20001dec 	.word	0x20001dec

0000f5b4 <ull_scan_reset>:
{
    f5b4:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    f5b6:	4c0d      	ldr	r4, [pc, #52]	; (f5ec <ull_scan_reset+0x38>)
    f5b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    f5bc:	07db      	lsls	r3, r3, #31
    f5be:	d501      	bpl.n	f5c4 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
    f5c0:	6a20      	ldr	r0, [r4, #32]
    f5c2:	b108      	cbz	r0, f5c8 <ull_scan_reset+0x14>
}
    f5c4:	2000      	movs	r0, #0
    f5c6:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
    f5c8:	4621      	mov	r1, r4
    f5ca:	f7ff ff71 	bl	f4b0 <ull_scan_disable>
	if (ret) {
    f5ce:	2800      	cmp	r0, #0
    f5d0:	d1f8      	bne.n	f5c4 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
    f5d2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    f5d6:	f360 0200 	bfi	r2, r0, #0, #1
    f5da:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    f5de:	f7ff fe8d 	bl	f2fc <ull_adv_is_enabled_get>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d1ee      	bne.n	f5c4 <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
    f5e6:	f006 fa09 	bl	159fc <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
    f5ea:	e7eb      	b.n	f5c4 <ull_scan_reset+0x10>
    f5ec:	20001dec 	.word	0x20001dec

0000f5f0 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    f5f0:	4a03      	ldr	r2, [pc, #12]	; (f600 <ull_scan_handle_get+0x10>)
    f5f2:	4b04      	ldr	r3, [pc, #16]	; (f604 <ull_scan_handle_get+0x14>)
    f5f4:	1a80      	subs	r0, r0, r2
    f5f6:	fba3 3000 	umull	r3, r0, r3, r0
}
    f5fa:	f3c0 1007 	ubfx	r0, r0, #4, #8
    f5fe:	4770      	bx	lr
    f600:	20001dec 	.word	0x20001dec
    f604:	38e38e39 	.word	0x38e38e39

0000f608 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    f608:	4a04      	ldr	r2, [pc, #16]	; (f61c <ull_scan_lll_handle_get+0x14>)
    f60a:	6800      	ldr	r0, [r0, #0]
    f60c:	4b04      	ldr	r3, [pc, #16]	; (f620 <ull_scan_lll_handle_get+0x18>)
    f60e:	1a80      	subs	r0, r0, r2
    f610:	fba3 3000 	umull	r3, r0, r3, r0
}
    f614:	f3c0 1007 	ubfx	r0, r0, #4, #8
    f618:	4770      	bx	lr
    f61a:	bf00      	nop
    f61c:	20001dec 	.word	0x20001dec
    f620:	38e38e39 	.word	0x38e38e39

0000f624 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f624:	b938      	cbnz	r0, f636 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    f626:	4805      	ldr	r0, [pc, #20]	; (f63c <ull_scan_is_enabled_get+0x18>)
    f628:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
    f62c:	f013 0f01 	tst.w	r3, #1
    f630:	bf08      	it	eq
    f632:	2000      	moveq	r0, #0
    f634:	4770      	bx	lr
		return NULL;
    f636:	2000      	movs	r0, #0
}
    f638:	4770      	bx	lr
    f63a:	bf00      	nop
    f63c:	20001dec 	.word	0x20001dec

0000f640 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    f640:	4a04      	ldr	r2, [pc, #16]	; (f654 <ull_scan_is_disabled_get+0x14>)
    f642:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    f646:	f003 0301 	and.w	r3, r3, #1
		return NULL;
    f64a:	4303      	orrs	r3, r0
}
    f64c:	bf0c      	ite	eq
    f64e:	4610      	moveq	r0, r2
    f650:	2000      	movne	r0, #0
    f652:	4770      	bx	lr
    f654:	20001dec 	.word	0x20001dec

0000f658 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f658:	b990      	cbnz	r0, f680 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
    f65a:	4a0a      	ldr	r2, [pc, #40]	; (f684 <ull_scan_is_enabled+0x2c>)
    f65c:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    f660:	f013 0001 	ands.w	r0, r3, #1
    f664:	d00d      	beq.n	f682 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    f666:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
    f66a:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    f66c:	f003 0301 	and.w	r3, r3, #1
    f670:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f674:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
    f678:	b11a      	cbz	r2, f682 <ull_scan_is_enabled+0x2a>
    f67a:	f040 0004 	orr.w	r0, r0, #4
    f67e:	4770      	bx	lr
		return 0;
    f680:	2000      	movs	r0, #0
}
    f682:	4770      	bx	lr
    f684:	20001dec 	.word	0x20001dec

0000f688 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f688:	b950      	cbnz	r0, f6a0 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
    f68a:	4b06      	ldr	r3, [pc, #24]	; (f6a4 <ull_scan_filter_pol_get+0x1c>)
    f68c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    f690:	f010 0001 	ands.w	r0, r0, #1
    f694:	d005      	beq.n	f6a2 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
    f696:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    f69a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    f69e:	4770      	bx	lr
		return 0;
    f6a0:	2000      	movs	r0, #0
}
    f6a2:	4770      	bx	lr
    f6a4:	20001dec 	.word	0x20001dec

0000f6a8 <init_reset>:
{
    f6a8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    f6aa:	4b15      	ldr	r3, [pc, #84]	; (f700 <init_reset+0x58>)
    f6ac:	4815      	ldr	r0, [pc, #84]	; (f704 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    f6ae:	4c16      	ldr	r4, [pc, #88]	; (f708 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    f6b0:	2201      	movs	r2, #1
    f6b2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    f6b6:	f7fa fde3 	bl	a280 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    f6ba:	4b14      	ldr	r3, [pc, #80]	; (f70c <init_reset+0x64>)
    f6bc:	2203      	movs	r2, #3
    f6be:	1d18      	adds	r0, r3, #4
    f6c0:	2124      	movs	r1, #36	; 0x24
    f6c2:	f7fa fddd 	bl	a280 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    f6c6:	4b12      	ldr	r3, [pc, #72]	; (f710 <init_reset+0x68>)
    f6c8:	2204      	movs	r2, #4
    f6ca:	1898      	adds	r0, r3, r2
    f6cc:	212c      	movs	r1, #44	; 0x2c
    f6ce:	f7fa fdd7 	bl	a280 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    f6d2:	4b10      	ldr	r3, [pc, #64]	; (f714 <init_reset+0x6c>)
    f6d4:	2207      	movs	r2, #7
    f6d6:	1d18      	adds	r0, r3, #4
    f6d8:	2108      	movs	r1, #8
    f6da:	f7fa fdd1 	bl	a280 <mem_init>
	default_phy_tx |= PHY_2M;
    f6de:	490e      	ldr	r1, [pc, #56]	; (f718 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
    f6e0:	4a0e      	ldr	r2, [pc, #56]	; (f71c <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f6e2:	480f      	ldr	r0, [pc, #60]	; (f720 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
    f6e4:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    f6e6:	f04f 0c1b 	mov.w	ip, #27
    f6ea:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    f6ee:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f6f0:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
    f6f4:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f6f6:	f8a0 c000 	strh.w	ip, [r0]
}
    f6fa:	2000      	movs	r0, #0
    f6fc:	bd10      	pop	{r4, pc}
    f6fe:	bf00      	nop
    f700:	20001e44 	.word	0x20001e44
    f704:	20000de0 	.word	0x20000de0
    f708:	20002826 	.word	0x20002826
    f70c:	20001e6c 	.word	0x20001e6c
    f710:	20001edc 	.word	0x20001edc
    f714:	20001f90 	.word	0x20001f90
    f718:	20002903 	.word	0x20002903
    f71c:	20002902 	.word	0x20002902
    f720:	20002828 	.word	0x20002828

0000f724 <ctrl_tx_pause_enqueue>:
{
    f724:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
    f726:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
{
    f72a:	4604      	mov	r4, r0
    f72c:	460d      	mov	r5, r1
	if (
    f72e:	b11b      	cbz	r3, f738 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    f730:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
	    conn->tx_head &&
    f734:	0788      	lsls	r0, r1, #30
    f736:	d50e      	bpl.n	f756 <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
    f738:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f73c:	b351      	cbz	r1, f794 <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
    f73e:	2a00      	cmp	r2, #0
    f740:	d132      	bne.n	f7a8 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
    f742:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    f746:	681a      	ldr	r2, [r3, #0]
    f748:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    f74a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    f74c:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    f74e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f752:	b1e3      	cbz	r3, f78e <ctrl_tx_pause_enqueue+0x6a>
}
    f754:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    f756:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    f75a:	07c9      	lsls	r1, r1, #31
    f75c:	d4ec      	bmi.n	f738 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    f75e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    f762:	428b      	cmp	r3, r1
    f764:	d02e      	beq.n	f7c4 <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
    f766:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f76a:	2900      	cmp	r1, #0
    f76c:	d038      	beq.n	f7e0 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
    f76e:	2a00      	cmp	r2, #0
    f770:	d0e7      	beq.n	f742 <ctrl_tx_pause_enqueue+0x1e>
    f772:	4a23      	ldr	r2, [pc, #140]	; (f800 <ctrl_tx_pause_enqueue+0xdc>)
    f774:	4923      	ldr	r1, [pc, #140]	; (f804 <ctrl_tx_pause_enqueue+0xe0>)
    f776:	4824      	ldr	r0, [pc, #144]	; (f808 <ctrl_tx_pause_enqueue+0xe4>)
    f778:	f640 03ce 	movw	r3, #2254	; 0x8ce
    f77c:	f00c fd8e 	bl	1c29c <printk>
    f780:	4040      	eors	r0, r0
    f782:	f380 8811 	msr	BASEPRI, r0
    f786:	f04f 0003 	mov.w	r0, #3
    f78a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    f78c:	e7d9      	b.n	f742 <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
    f78e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
    f792:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    f794:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    f796:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
    f79a:	2a00      	cmp	r2, #0
    f79c:	d1d9      	bne.n	f752 <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
    f79e:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d1d6      	bne.n	f754 <ctrl_tx_pause_enqueue+0x30>
    f7a6:	e7f2      	b.n	f78e <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
    f7a8:	4a15      	ldr	r2, [pc, #84]	; (f800 <ctrl_tx_pause_enqueue+0xdc>)
    f7aa:	4916      	ldr	r1, [pc, #88]	; (f804 <ctrl_tx_pause_enqueue+0xe0>)
    f7ac:	4816      	ldr	r0, [pc, #88]	; (f808 <ctrl_tx_pause_enqueue+0xe4>)
    f7ae:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
    f7b2:	f00c fd73 	bl	1c29c <printk>
    f7b6:	4040      	eors	r0, r0
    f7b8:	f380 8811 	msr	BASEPRI, r0
    f7bc:	f04f 0003 	mov.w	r0, #3
    f7c0:	df02      	svc	2
    f7c2:	e7be      	b.n	f742 <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
    f7c4:	6819      	ldr	r1, [r3, #0]
    f7c6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f7ca:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f7ce:	2900      	cmp	r1, #0
    f7d0:	d1cd      	bne.n	f76e <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
    f7d2:	6819      	ldr	r1, [r3, #0]
    f7d4:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    f7d6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    f7d8:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    f7da:	2a00      	cmp	r2, #0
    f7dc:	d0df      	beq.n	f79e <ctrl_tx_pause_enqueue+0x7a>
    f7de:	e7b8      	b.n	f752 <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f7e0:	7919      	ldrb	r1, [r3, #4]
    f7e2:	f001 0103 	and.w	r1, r1, #3
    f7e6:	2903      	cmp	r1, #3
    f7e8:	d004      	beq.n	f7f4 <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f7ea:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
    f7ee:	2a00      	cmp	r2, #0
    f7f0:	d0a7      	beq.n	f742 <ctrl_tx_pause_enqueue+0x1e>
    f7f2:	e7be      	b.n	f772 <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
    f7f4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f7f6:	2903      	cmp	r1, #3
    f7f8:	d0eb      	beq.n	f7d2 <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f7fa:	290a      	cmp	r1, #10
    f7fc:	d1f5      	bne.n	f7ea <ctrl_tx_pause_enqueue+0xc6>
    f7fe:	e7e8      	b.n	f7d2 <ctrl_tx_pause_enqueue+0xae>
    f800:	00020c10 	.word	0x00020c10
    f804:	00020c50 	.word	0x00020c50
    f808:	0002060c 	.word	0x0002060c

0000f80c <ticker_op_stop_cb>:
{
    f80c:	b538      	push	{r3, r4, r5, lr}
    f80e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f810:	2800      	cmp	r0, #0
    f812:	d14a      	bne.n	f8aa <ticker_op_stop_cb+0x9e>
	mfy.param = &conn->lll;
    f814:	4d2c      	ldr	r5, [pc, #176]	; (f8c8 <ticker_op_stop_cb+0xbc>)
    f816:	f104 031c 	add.w	r3, r4, #28
    f81a:	60ab      	str	r3, [r5, #8]
	return hdr->ref;
    f81c:	7821      	ldrb	r1, [r4, #0]
	if (ull_ref_get(hdr)) {
    f81e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f822:	2900      	cmp	r1, #0
    f824:	d02a      	beq.n	f87c <ticker_op_stop_cb+0x70>
		LL_ASSERT(!hdr->disabled_cb);
    f826:	6962      	ldr	r2, [r4, #20]
    f828:	b16a      	cbz	r2, f846 <ticker_op_stop_cb+0x3a>
    f82a:	4a28      	ldr	r2, [pc, #160]	; (f8cc <ticker_op_stop_cb+0xc0>)
    f82c:	4928      	ldr	r1, [pc, #160]	; (f8d0 <ticker_op_stop_cb+0xc4>)
    f82e:	4829      	ldr	r0, [pc, #164]	; (f8d4 <ticker_op_stop_cb+0xc8>)
    f830:	f240 73f2 	movw	r3, #2034	; 0x7f2
    f834:	f00c fd32 	bl	1c29c <printk>
    f838:	4040      	eors	r0, r0
    f83a:	f380 8811 	msr	BASEPRI, r0
    f83e:	f04f 0003 	mov.w	r0, #3
    f842:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    f844:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    f846:	4924      	ldr	r1, [pc, #144]	; (f8d8 <ticker_op_stop_cb+0xcc>)
		mfy.fp = lll_disable;
    f848:	4824      	ldr	r0, [pc, #144]	; (f8dc <ticker_op_stop_cb+0xd0>)
		hdr->disabled_param = mfy.param;
    f84a:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f84c:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    f84e:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    f850:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f852:	4b1d      	ldr	r3, [pc, #116]	; (f8c8 <ticker_op_stop_cb+0xbc>)
    f854:	4611      	mov	r1, r2
    f856:	2002      	movs	r0, #2
    f858:	f7fa fe1a 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f85c:	b900      	cbnz	r0, f860 <ticker_op_stop_cb+0x54>
}
    f85e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    f860:	4a1a      	ldr	r2, [pc, #104]	; (f8cc <ticker_op_stop_cb+0xc0>)
    f862:	491f      	ldr	r1, [pc, #124]	; (f8e0 <ticker_op_stop_cb+0xd4>)
    f864:	481b      	ldr	r0, [pc, #108]	; (f8d4 <ticker_op_stop_cb+0xc8>)
    f866:	f240 73f9 	movw	r3, #2041	; 0x7f9
    f86a:	f00c fd17 	bl	1c29c <printk>
    f86e:	4040      	eors	r0, r0
    f870:	f380 8811 	msr	BASEPRI, r0
    f874:	f04f 0003 	mov.w	r0, #3
    f878:	df02      	svc	2
}
    f87a:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    f87c:	4816      	ldr	r0, [pc, #88]	; (f8d8 <ticker_op_stop_cb+0xcc>)
    f87e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f880:	462b      	mov	r3, r5
    f882:	2101      	movs	r1, #1
    f884:	2002      	movs	r0, #2
    f886:	f7fa fe03 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f88a:	2800      	cmp	r0, #0
    f88c:	d0e7      	beq.n	f85e <ticker_op_stop_cb+0x52>
    f88e:	4a0f      	ldr	r2, [pc, #60]	; (f8cc <ticker_op_stop_cb+0xc0>)
    f890:	4913      	ldr	r1, [pc, #76]	; (f8e0 <ticker_op_stop_cb+0xd4>)
    f892:	4810      	ldr	r0, [pc, #64]	; (f8d4 <ticker_op_stop_cb+0xc8>)
    f894:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f898:	f00c fd00 	bl	1c29c <printk>
    f89c:	4040      	eors	r0, r0
    f89e:	f380 8811 	msr	BASEPRI, r0
    f8a2:	f04f 0003 	mov.w	r0, #3
    f8a6:	df02      	svc	2
}
    f8a8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f8aa:	4a08      	ldr	r2, [pc, #32]	; (f8cc <ticker_op_stop_cb+0xc0>)
    f8ac:	490d      	ldr	r1, [pc, #52]	; (f8e4 <ticker_op_stop_cb+0xd8>)
    f8ae:	4809      	ldr	r0, [pc, #36]	; (f8d4 <ticker_op_stop_cb+0xc8>)
    f8b0:	f240 73e4 	movw	r3, #2020	; 0x7e4
    f8b4:	f00c fcf2 	bl	1c29c <printk>
    f8b8:	4040      	eors	r0, r0
    f8ba:	f380 8811 	msr	BASEPRI, r0
    f8be:	f04f 0003 	mov.w	r0, #3
    f8c2:	df02      	svc	2
    f8c4:	e7a6      	b.n	f814 <ticker_op_stop_cb+0x8>
    f8c6:	bf00      	nop
    f8c8:	20000490 	.word	0x20000490
    f8cc:	00020c10 	.word	0x00020c10
    f8d0:	00020b30 	.word	0x00020b30
    f8d4:	0002060c 	.word	0x0002060c
    f8d8:	0000fa61 	.word	0x0000fa61
    f8dc:	00016775 	.word	0x00016775
    f8e0:	000209f8 	.word	0x000209f8
    f8e4:	00020c58 	.word	0x00020c58

0000f8e8 <tx_lll_flush>:
{
    f8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    f8ec:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    f8f0:	4934      	ldr	r1, [pc, #208]	; (f9c4 <tx_lll_flush+0xdc>)
{
    f8f2:	b083      	sub	sp, #12
    f8f4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    f8f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    f8fa:	4640      	mov	r0, r8
    f8fc:	f7fa fd26 	bl	a34c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f900:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
    f904:	4629      	mov	r1, r5
    f906:	f008 fb7d 	bl	18004 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f90a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f90c:	aa01      	add	r2, sp, #4
    f90e:	4631      	mov	r1, r6
    f910:	f7fa fd5c 	bl	a3cc <memq_dequeue>
	while (link) {
    f914:	b328      	cbz	r0, f962 <tx_lll_flush+0x7a>
    f916:	4c2c      	ldr	r4, [pc, #176]	; (f9c8 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
    f918:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f91c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    f920:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
    f922:	f894 c001 	ldrb.w	ip, [r4, #1]
    f926:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
    f928:	1c4b      	adds	r3, r1, #1
    f92a:	b2db      	uxtb	r3, r3
		last = 0U;
    f92c:	459c      	cmp	ip, r3
    f92e:	bf08      	it	eq
    f930:	2300      	moveq	r3, #0
	if (last == first) {
    f932:	429a      	cmp	r2, r3
    f934:	d035      	beq.n	f9a2 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f936:	7822      	ldrb	r2, [r4, #0]
    f938:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    f93c:	eb19 0c02 	adds.w	ip, r9, r2
    f940:	d02f      	beq.n	f9a2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
    f942:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
    f944:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    f948:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    f94a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    f94e:	6002      	str	r2, [r0, #0]
		tx->next = link;
    f950:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f952:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
    f954:	70e3      	strb	r3, [r4, #3]
    f956:	aa01      	add	r2, sp, #4
    f958:	4631      	mov	r1, r6
    f95a:	f7fa fd37 	bl	a3cc <memq_dequeue>
	while (link) {
    f95e:	2800      	cmp	r0, #0
    f960:	d1de      	bne.n	f920 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    f962:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
    f966:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
    f96a:	b150      	cbz	r0, f982 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    f96c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    f96e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    f970:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
    f974:	f7fe ff80 	bl	e878 <ull_rx_put>
	ull_rx_sched();
    f978:	f7fe ff8e 	bl	e898 <ull_rx_sched>
}
    f97c:	b003      	add	sp, #12
    f97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    f982:	4a12      	ldr	r2, [pc, #72]	; (f9cc <tx_lll_flush+0xe4>)
    f984:	4912      	ldr	r1, [pc, #72]	; (f9d0 <tx_lll_flush+0xe8>)
    f986:	4813      	ldr	r0, [pc, #76]	; (f9d4 <tx_lll_flush+0xec>)
    f988:	f640 033b 	movw	r3, #2107	; 0x83b
    f98c:	f00c fc86 	bl	1c29c <printk>
    f990:	4040      	eors	r0, r0
    f992:	f380 8811 	msr	BASEPRI, r0
    f996:	f04f 0003 	mov.w	r0, #3
    f99a:	df02      	svc	2
	link = rx->hdr.link;
    f99c:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
    f9a0:	e7e4      	b.n	f96c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    f9a2:	4a0a      	ldr	r2, [pc, #40]	; (f9cc <tx_lll_flush+0xe4>)
    f9a4:	490c      	ldr	r1, [pc, #48]	; (f9d8 <tx_lll_flush+0xf0>)
    f9a6:	480b      	ldr	r0, [pc, #44]	; (f9d4 <tx_lll_flush+0xec>)
    f9a8:	f640 0327 	movw	r3, #2087	; 0x827
    f9ac:	f00c fc76 	bl	1c29c <printk>
    f9b0:	4040      	eors	r0, r0
    f9b2:	f380 8811 	msr	BASEPRI, r0
    f9b6:	f04f 0003 	mov.w	r0, #3
    f9ba:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    f9bc:	2300      	movs	r3, #0
    f9be:	801b      	strh	r3, [r3, #0]
    f9c0:	deff      	udf	#255	; 0xff
    f9c2:	bf00      	nop
    f9c4:	20000de0 	.word	0x20000de0
    f9c8:	20000408 	.word	0x20000408
    f9cc:	00020c10 	.word	0x00020c10
    f9d0:	00020c6c 	.word	0x00020c6c
    f9d4:	0002060c 	.word	0x0002060c
    f9d8:	00020c64 	.word	0x00020c64

0000f9dc <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    f9dc:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    f9e0:	f012 0202 	ands.w	r2, r2, #2
    f9e4:	d00a      	beq.n	f9fc <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    f9e6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
    f9ea:	b1d3      	cbz	r3, fa22 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    f9ec:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    f9f0:	681a      	ldr	r2, [r3, #0]
    f9f2:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    f9f4:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    f9f6:	680b      	ldr	r3, [r1, #0]
    f9f8:	b1d3      	cbz	r3, fa30 <ctrl_tx_sec_enqueue+0x54>
    f9fa:	4770      	bx	lr
		if (conn->tx_head) {
    f9fc:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    fa00:	b1cb      	cbz	r3, fa36 <ctrl_tx_sec_enqueue+0x5a>
{
    fa02:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    fa04:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
    fa08:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
    fa0c:	45e6      	cmp	lr, ip
    fa0e:	d004      	beq.n	fa1a <ctrl_tx_sec_enqueue+0x3e>
    fa10:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
    fa14:	f1bc 0f03 	cmp.w	ip, #3
    fa18:	d010      	beq.n	fa3c <ctrl_tx_sec_enqueue+0x60>
}
    fa1a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    fa1e:	f7ff be81 	b.w	f724 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    fa22:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    fa26:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    fa28:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d1e4      	bne.n	f9fa <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    fa30:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    fa34:	4770      	bx	lr
	bool pause = false;
    fa36:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    fa38:	f7ff be74 	b.w	f724 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fa3c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    fa40:	f00c 0c03 	and.w	ip, ip, #3
    fa44:	f1bc 0f03 	cmp.w	ip, #3
    fa48:	d1e7      	bne.n	fa1a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    fa4a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fa4c:	2a03      	cmp	r2, #3
    fa4e:	d005      	beq.n	fa5c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    fa50:	f1a2 020a 	sub.w	r2, r2, #10
    fa54:	fab2 f282 	clz	r2, r2
    fa58:	0952      	lsrs	r2, r2, #5
    fa5a:	e7de      	b.n	fa1a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    fa5c:	2201      	movs	r2, #1
    fa5e:	e7dc      	b.n	fa1a <ctrl_tx_sec_enqueue+0x3e>

0000fa60 <disabled_cb>:
{
    fa60:	b508      	push	{r3, lr}
	mfy.param = param;
    fa62:	4b0b      	ldr	r3, [pc, #44]	; (fa90 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fa64:	2200      	movs	r2, #0
	mfy.param = param;
    fa66:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fa68:	4611      	mov	r1, r2
    fa6a:	2001      	movs	r0, #1
    fa6c:	f7fa fd10 	bl	a490 <mayfly_enqueue>
	LL_ASSERT(!ret);
    fa70:	b900      	cbnz	r0, fa74 <disabled_cb+0x14>
}
    fa72:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    fa74:	4a07      	ldr	r2, [pc, #28]	; (fa94 <disabled_cb+0x34>)
    fa76:	4908      	ldr	r1, [pc, #32]	; (fa98 <disabled_cb+0x38>)
    fa78:	4808      	ldr	r0, [pc, #32]	; (fa9c <disabled_cb+0x3c>)
    fa7a:	f640 030d 	movw	r3, #2061	; 0x80d
    fa7e:	f00c fc0d 	bl	1c29c <printk>
    fa82:	4040      	eors	r0, r0
    fa84:	f380 8811 	msr	BASEPRI, r0
    fa88:	f04f 0003 	mov.w	r0, #3
    fa8c:	df02      	svc	2
}
    fa8e:	bd08      	pop	{r3, pc}
    fa90:	20000470 	.word	0x20000470
    fa94:	00020c10 	.word	0x00020c10
    fa98:	000209f8 	.word	0x000209f8
    fa9c:	0002060c 	.word	0x0002060c

0000faa0 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    faa0:	6883      	ldr	r3, [r0, #8]
    faa2:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    faa4:	7f53      	ldrb	r3, [r2, #29]
    faa6:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
    faa8:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
    faac:	d001      	beq.n	fab2 <conn_setup_adv_scan_disabled_cb+0x12>
		ull_slave_setup(rx, ftr, lll);
    faae:	f7f1 bc23 	b.w	12f8 <ull_slave_setup>
		ull_master_setup(rx, ftr, lll);
    fab2:	f7f2 b86d 	b.w	1b90 <ull_master_setup>
    fab6:	bf00      	nop

0000fab8 <ticker_start_conn_op_cb>:
{
    fab8:	b510      	push	{r4, lr}
    faba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fabc:	b990      	cbnz	r0, fae4 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    fabe:	4620      	mov	r0, r4
    fac0:	f7fe fe14 	bl	e6ec <ull_update_unmark>
	LL_ASSERT(p == param);
    fac4:	4284      	cmp	r4, r0
    fac6:	d00c      	beq.n	fae2 <ticker_start_conn_op_cb+0x2a>
    fac8:	4a0d      	ldr	r2, [pc, #52]	; (fb00 <ticker_start_conn_op_cb+0x48>)
    faca:	490e      	ldr	r1, [pc, #56]	; (fb04 <ticker_start_conn_op_cb+0x4c>)
    facc:	480e      	ldr	r0, [pc, #56]	; (fb08 <ticker_start_conn_op_cb+0x50>)
    face:	f240 7364 	movw	r3, #1892	; 0x764
    fad2:	f00c fbe3 	bl	1c29c <printk>
    fad6:	4040      	eors	r0, r0
    fad8:	f380 8811 	msr	BASEPRI, r0
    fadc:	f04f 0003 	mov.w	r0, #3
    fae0:	df02      	svc	2
}
    fae2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fae4:	4a06      	ldr	r2, [pc, #24]	; (fb00 <ticker_start_conn_op_cb+0x48>)
    fae6:	4909      	ldr	r1, [pc, #36]	; (fb0c <ticker_start_conn_op_cb+0x54>)
    fae8:	4807      	ldr	r0, [pc, #28]	; (fb08 <ticker_start_conn_op_cb+0x50>)
    faea:	f240 7361 	movw	r3, #1889	; 0x761
    faee:	f00c fbd5 	bl	1c29c <printk>
    faf2:	4040      	eors	r0, r0
    faf4:	f380 8811 	msr	BASEPRI, r0
    faf8:	f04f 0003 	mov.w	r0, #3
    fafc:	df02      	svc	2
    fafe:	e7de      	b.n	fabe <ticker_start_conn_op_cb+0x6>
    fb00:	00020c10 	.word	0x00020c10
    fb04:	00020c7c 	.word	0x00020c7c
    fb08:	0002060c 	.word	0x0002060c
    fb0c:	00020c58 	.word	0x00020c58

0000fb10 <ticker_stop_conn_op_cb>:
{
    fb10:	b510      	push	{r4, lr}
    fb12:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fb14:	b990      	cbnz	r0, fb3c <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    fb16:	4620      	mov	r0, r4
    fb18:	f7fe fdde 	bl	e6d8 <ull_update_mark>
	LL_ASSERT(p == param);
    fb1c:	4284      	cmp	r4, r0
    fb1e:	d00c      	beq.n	fb3a <ticker_stop_conn_op_cb+0x2a>
    fb20:	4a0d      	ldr	r2, [pc, #52]	; (fb58 <ticker_stop_conn_op_cb+0x48>)
    fb22:	490e      	ldr	r1, [pc, #56]	; (fb5c <ticker_stop_conn_op_cb+0x4c>)
    fb24:	480e      	ldr	r0, [pc, #56]	; (fb60 <ticker_stop_conn_op_cb+0x50>)
    fb26:	f240 735a 	movw	r3, #1882	; 0x75a
    fb2a:	f00c fbb7 	bl	1c29c <printk>
    fb2e:	4040      	eors	r0, r0
    fb30:	f380 8811 	msr	BASEPRI, r0
    fb34:	f04f 0003 	mov.w	r0, #3
    fb38:	df02      	svc	2
}
    fb3a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fb3c:	4a06      	ldr	r2, [pc, #24]	; (fb58 <ticker_stop_conn_op_cb+0x48>)
    fb3e:	4909      	ldr	r1, [pc, #36]	; (fb64 <ticker_stop_conn_op_cb+0x54>)
    fb40:	4807      	ldr	r0, [pc, #28]	; (fb60 <ticker_stop_conn_op_cb+0x50>)
    fb42:	f240 7357 	movw	r3, #1879	; 0x757
    fb46:	f00c fba9 	bl	1c29c <printk>
    fb4a:	4040      	eors	r0, r0
    fb4c:	f380 8811 	msr	BASEPRI, r0
    fb50:	f04f 0003 	mov.w	r0, #3
    fb54:	df02      	svc	2
    fb56:	e7de      	b.n	fb16 <ticker_stop_conn_op_cb+0x6>
    fb58:	00020c10 	.word	0x00020c10
    fb5c:	00020c7c 	.word	0x00020c7c
    fb60:	0002060c 	.word	0x0002060c
    fb64:	00020c58 	.word	0x00020c58

0000fb68 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fb68:	b900      	cbnz	r0, fb6c <ticker_update_conn_op_cb+0x4>
    fb6a:	4770      	bx	lr
{
    fb6c:	b510      	push	{r4, lr}
    fb6e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fb70:	f7fe fdc8 	bl	e704 <ull_update_mark_get>
    fb74:	4284      	cmp	r4, r0
    fb76:	d010      	beq.n	fb9a <ticker_update_conn_op_cb+0x32>
    fb78:	f7fe fda8 	bl	e6cc <ull_disable_mark_get>
    fb7c:	4284      	cmp	r4, r0
    fb7e:	d00c      	beq.n	fb9a <ticker_update_conn_op_cb+0x32>
    fb80:	4a06      	ldr	r2, [pc, #24]	; (fb9c <ticker_update_conn_op_cb+0x34>)
    fb82:	4907      	ldr	r1, [pc, #28]	; (fba0 <ticker_update_conn_op_cb+0x38>)
    fb84:	4807      	ldr	r0, [pc, #28]	; (fba4 <ticker_update_conn_op_cb+0x3c>)
    fb86:	f240 734e 	movw	r3, #1870	; 0x74e
    fb8a:	f00c fb87 	bl	1c29c <printk>
    fb8e:	4040      	eors	r0, r0
    fb90:	f380 8811 	msr	BASEPRI, r0
    fb94:	f04f 0003 	mov.w	r0, #3
    fb98:	df02      	svc	2
}
    fb9a:	bd10      	pop	{r4, pc}
    fb9c:	00020c10 	.word	0x00020c10
    fba0:	00020c88 	.word	0x00020c88
    fba4:	0002060c 	.word	0x0002060c

0000fba8 <tx_ull_dequeue>:
{
    fba8:	4603      	mov	r3, r0
    fbaa:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fbac:	f8d0 41c8 	ldr.w	r4, [r0, #456]	; 0x1c8
    fbb0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
    fbb4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fbb6:	b164      	cbz	r4, fbd2 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
    fbb8:	4294      	cmp	r4, r2
    fbba:	d021      	beq.n	fc00 <tx_ull_dequeue+0x58>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fbbc:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
    fbc0:	428a      	cmp	r2, r1
    fbc2:	d00b      	beq.n	fbdc <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
    fbc4:	6811      	ldr	r1, [r2, #0]
    fbc6:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
    fbca:	2200      	movs	r2, #0
}
    fbcc:	bc10      	pop	{r4}
		tx->next = NULL;
    fbce:	6002      	str	r2, [r0, #0]
}
    fbd0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fbd2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
    fbd6:	428a      	cmp	r2, r1
    fbd8:	d104      	bne.n	fbe4 <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
    fbda:	b18a      	cbz	r2, fc00 <tx_ull_dequeue+0x58>
			conn->tx_data = conn->tx_data->next;
    fbdc:	6809      	ldr	r1, [r1, #0]
    fbde:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    fbe2:	e7ef      	b.n	fbc4 <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fbe4:	7911      	ldrb	r1, [r2, #4]
    fbe6:	f001 0103 	and.w	r1, r1, #3
    fbea:	2903      	cmp	r1, #3
    fbec:	d013      	beq.n	fc16 <tx_ull_dequeue+0x6e>
		conn->tx_head = conn->tx_head->next;
    fbee:	6812      	ldr	r2, [r2, #0]
    fbf0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
    fbf4:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    fbf6:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
    fbfa:	bc10      	pop	{r4}
		tx->next = tx;
    fbfc:	6000      	str	r0, [r0, #0]
}
    fbfe:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fc00:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
    fc04:	6812      	ldr	r2, [r2, #0]
    fc06:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fc0a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    fc0c:	bf18      	it	ne
    fc0e:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fc12:	d1f2      	bne.n	fbfa <tx_ull_dequeue+0x52>
    fc14:	e7ee      	b.n	fbf4 <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
    fc16:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fc18:	2903      	cmp	r1, #3
    fc1a:	d0d3      	beq.n	fbc4 <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fc1c:	290a      	cmp	r1, #10
    fc1e:	d1e6      	bne.n	fbee <tx_ull_dequeue+0x46>
    fc20:	e7d0      	b.n	fbc4 <tx_ull_dequeue+0x1c>
    fc22:	bf00      	nop

0000fc24 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_SLAVE_FEAT_REQ))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
    fc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
    fc28:	f890 60d8 	ldrb.w	r6, [r0, #216]	; 0xd8
    fc2c:	f016 0602 	ands.w	r6, r6, #2
{
    fc30:	460f      	mov	r7, r1
	if (conn->common.txn_lock) {
    fc32:	d16b      	bne.n	fd0c <feature_rsp_send+0xe8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    fc34:	4605      	mov	r5, r0
    fc36:	4839      	ldr	r0, [pc, #228]	; (fd1c <feature_rsp_send+0xf8>)
    fc38:	4691      	mov	r9, r2
    fc3a:	f7fa fb51 	bl	a2e0 <mem_acquire>
	if (!tx) {
    fc3e:	4604      	mov	r4, r0
    fc40:	2800      	cmp	r0, #0
    fc42:	d068      	beq.n	fd16 <feature_rsp_send+0xf2>
	conn->common.txn_lock = 1U;
    fc44:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    fc48:	4935      	ldr	r1, [pc, #212]	; (fd20 <feature_rsp_send+0xfc>)
	conn->common.txn_lock = 1U;
    fc4a:	f043 0302 	orr.w	r3, r3, #2
    fc4e:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
    fc52:	f8d9 3008 	ldr.w	r3, [r9, #8]
    fc56:	f8d9 0004 	ldr.w	r0, [r9, #4]
	feat &= LL_FEAT_BIT_MASK;
    fc5a:	f003 020f 	and.w	r2, r3, #15
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    fc5e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    fc62:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    fc64:	400b      	ands	r3, r1
    fc66:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    fc6a:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    fc6e:	4013      	ands	r3, r2
    fc70:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
    fc74:	f8d9 8004 	ldr.w	r8, [r9, #4]
    fc78:	f8d9 9008 	ldr.w	r9, [r9, #8]
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    fc7c:	f7fd fd18 	bl	d6b0 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
    fc80:	4b27      	ldr	r3, [pc, #156]	; (fd20 <feature_rsp_send+0xfc>)
    fc82:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
    fc86:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    fc88:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    fc8c:	f028 03ff 	bic.w	r3, r8, #255	; 0xff
    fc90:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    fc92:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    fc96:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    fc9a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	/* features exchanged */
	conn->common.fex_valid = 1U;
    fc9e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    fca2:	f043 0301 	orr.w	r3, r3, #1
    fca6:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8

	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    fcaa:	7923      	ldrb	r3, [r4, #4]
    fcac:	f009 020f 	and.w	r2, r9, #15
    fcb0:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_feature.features_peer =
    fcb4:	f8c5 2134 	str.w	r2, [r5, #308]	; 0x134
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    fcb8:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    fcba:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    fcbc:	2309      	movs	r3, #9
    fcbe:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    fcc0:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    fcc2:	18a0      	adds	r0, r4, r2
    fcc4:	4631      	mov	r1, r6
    fcc6:	f00d fdca 	bl	1d85e <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
    fcca:	f7fd fcf1 	bl	d6b0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    fcce:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	dst[1] = val >> 8;
    fcd2:	7366      	strb	r6, [r4, #13]
    fcd4:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    fcd6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    fcda:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    fcde:	4303      	orrs	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
    fce0:	0c1a      	lsrs	r2, r3, #16
    fce2:	f001 010f 	and.w	r1, r1, #15
	dst[0] = val;
    fce6:	7223      	strb	r3, [r4, #8]
    fce8:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
    fcea:	f3c3 2307 	ubfx	r3, r3, #8, #8
    fcee:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
    fcf0:	7321      	strb	r1, [r4, #12]
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
    fcf2:	4628      	mov	r0, r5
	dst[1] = val >> 8;
    fcf4:	7263      	strb	r3, [r4, #9]
	dst[0] = val;
    fcf6:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
    fcf8:	73e6      	strb	r6, [r4, #15]
    fcfa:	72e2      	strb	r2, [r4, #11]
    fcfc:	4621      	mov	r1, r4
    fcfe:	f7ff fe6d 	bl	f9dc <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fd02:	2301      	movs	r3, #1
    fd04:	713b      	strb	r3, [r7, #4]

	return 0;
    fd06:	4630      	mov	r0, r6
}
    fd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fd0c:	2301      	movs	r3, #1
    fd0e:	710b      	strb	r3, [r1, #4]
		*err = 0U;
    fd10:	2000      	movs	r0, #0
}
    fd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
    fd16:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd1a:	e7f5      	b.n	fd08 <feature_rsp_send+0xe4>
    fd1c:	20001edc 	.word	0x20001edc
    fd20:	087830d0 	.word	0x087830d0

0000fd24 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd26:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    fd28:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fd2c:	0780      	lsls	r0, r0, #30
{
    fd2e:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    fd30:	d433      	bmi.n	fd9a <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    fd32:	4830      	ldr	r0, [pc, #192]	; (fdf4 <reject_ext_ind_send+0xd0>)
    fd34:	4617      	mov	r7, r2
    fd36:	461e      	mov	r6, r3
    fd38:	f7fa fad2 	bl	a2e0 <mem_acquire>
	if (!tx) {
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d03a      	beq.n	fdb6 <reject_ext_ind_send+0x92>
	conn->common.txn_lock = 1U;
    fd40:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    fd44:	f043 0302 	orr.w	r3, r3, #2
    fd48:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fd4c:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fd4e:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fd50:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    fd52:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fd56:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fd58:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    fd5a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fd5c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    fd60:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fd62:	7102      	strb	r2, [r0, #4]
	if (
    fd64:	b1eb      	cbz	r3, fda2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    fd66:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    fd6a:	0791      	lsls	r1, r2, #30
    fd6c:	d419      	bmi.n	fda2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    fd6e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    fd72:	07d2      	lsls	r2, r2, #31
    fd74:	d415      	bmi.n	fda2 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    fd76:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    fd7a:	4293      	cmp	r3, r2
    fd7c:	d026      	beq.n	fdcc <reject_ext_ind_send+0xa8>
		} else if (!conn->tx_ctrl) {
    fd7e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    fd82:	b1da      	cbz	r2, fdbc <reject_ext_ind_send+0x98>
	tx->next = conn->tx_ctrl_last->next;
    fd84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    fd88:	681a      	ldr	r2, [r3, #0]
    fd8a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    fd8c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    fd8e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    fd90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    fd94:	b90b      	cbnz	r3, fd9a <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    fd96:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fd9a:	2301      	movs	r3, #1
    fd9c:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    fd9e:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    fda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    fda2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    fda6:	2a00      	cmp	r2, #0
    fda8:	d1ec      	bne.n	fd84 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    fdaa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    fdac:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    fdb0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    fdb4:	e7ee      	b.n	fd94 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    fdb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    fdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fdbc:	791a      	ldrb	r2, [r3, #4]
    fdbe:	f002 0203 	and.w	r2, r2, #3
    fdc2:	2a03      	cmp	r2, #3
    fdc4:	d010      	beq.n	fde8 <reject_ext_ind_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    fdc6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    fdca:	e7dd      	b.n	fd88 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    fdcc:	681a      	ldr	r2, [r3, #0]
    fdce:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    fdd2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    fdd6:	2a00      	cmp	r2, #0
    fdd8:	d1d4      	bne.n	fd84 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    fdda:	681a      	ldr	r2, [r3, #0]
    fddc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    fdde:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    fde0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    fde2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    fde6:	e7d5      	b.n	fd94 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    fde8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fdea:	2a03      	cmp	r2, #3
    fdec:	d0f5      	beq.n	fdda <reject_ext_ind_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fdee:	2a0a      	cmp	r2, #10
    fdf0:	d1e9      	bne.n	fdc6 <reject_ext_ind_send+0xa2>
    fdf2:	e7f2      	b.n	fdda <reject_ext_ind_send+0xb6>
    fdf4:	20001edc 	.word	0x20001edc

0000fdf8 <event_len_prep>:
{
    fdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    fdfa:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    fdfe:	f003 0207 	and.w	r2, r3, #7
{
    fe02:	4604      	mov	r4, r0
    fe04:	2a06      	cmp	r2, #6
    fe06:	f200 80d7 	bhi.w	ffb8 <event_len_prep+0x1c0>
    fe0a:	e8df f002 	tbb	[pc, r2]
    fe0e:	4804      	.short	0x4804
    fe10:	49494848 	.word	0x49494848
    fe14:	48          	.byte	0x48
    fe15:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    fe16:	486f      	ldr	r0, [pc, #444]	; (ffd4 <event_len_prep+0x1dc>)
    fe18:	f7fa fa62 	bl	a2e0 <mem_acquire>
		if (!tx) {
    fe1c:	2800      	cmp	r0, #0
    fe1e:	d03e      	beq.n	fe9e <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    fe20:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    fe24:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
    fe28:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    fe2c:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    fe30:	2301      	movs	r3, #1
    fe32:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    fe36:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    fe3a:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    fe3e:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    fe40:	72c3      	strb	r3, [r0, #11]
    fe42:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    fe44:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    fe46:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    fe48:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    fe4a:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
    fe4c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    fe4e:	2214      	movs	r2, #20
	    conn->tx_head &&
    fe50:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    fe54:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    fe56:	221b      	movs	r2, #27
    fe58:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe5a:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    fe5c:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe5e:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    fe62:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe64:	7102      	strb	r2, [r0, #4]
	if (
    fe66:	b13b      	cbz	r3, fe78 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
    fe68:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    fe6c:	0791      	lsls	r1, r2, #30
    fe6e:	d403      	bmi.n	fe78 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
    fe70:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    fe74:	07d2      	lsls	r2, r2, #31
    fe76:	d576      	bpl.n	ff66 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
    fe78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    fe7c:	2a00      	cmp	r2, #0
    fe7e:	f000 8082 	beq.w	ff86 <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
    fe82:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    fe86:	681a      	ldr	r2, [r3, #0]
    fe88:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    fe8a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    fe8c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    fe8e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    fe92:	2b00      	cmp	r3, #0
    fe94:	d056      	beq.n	ff44 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
    fe96:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fe9a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
    fe9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    fea0:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    fea4:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
    fea8:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
    feac:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
    feb0:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    feb4:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    feb8:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    feba:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    febe:	d024      	beq.n	ff0a <event_len_prep+0x112>
			conn->llcp_length.state =
    fec0:	2206      	movs	r2, #6
    fec2:	f362 0302 	bfi	r3, r2, #0, #3
    fec6:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
    feca:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    fece:	b335      	cbz	r5, ff1e <event_len_prep+0x126>
    fed0:	6828      	ldr	r0, [r5, #0]
    fed2:	b320      	cbz	r0, ff1e <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    fed4:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    fed6:	6842      	ldr	r2, [r0, #4]
    fed8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    fedc:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    fee0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    fee2:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    fee4:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    fee6:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    fee8:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    feea:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    feec:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    feee:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    fef0:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    fef4:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    fef6:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    fef8:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fefa:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    fefc:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    fefe:	f7fe fb2f 	bl	e560 <ll_rx_put>
}
    ff02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    ff06:	f7fe bb35 	b.w	e574 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    ff0a:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
    ff0e:	b9e2      	cbnz	r2, ff4a <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
    ff10:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
    ff14:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
    ff18:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
    ff1c:	e7d5      	b.n	feca <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
    ff1e:	4a2e      	ldr	r2, [pc, #184]	; (ffd8 <event_len_prep+0x1e0>)
    ff20:	492e      	ldr	r1, [pc, #184]	; (ffdc <event_len_prep+0x1e4>)
    ff22:	482f      	ldr	r0, [pc, #188]	; (ffe0 <event_len_prep+0x1e8>)
    ff24:	f640 63d9 	movw	r3, #3801	; 0xed9
    ff28:	f00c f9b8 	bl	1c29c <printk>
    ff2c:	4040      	eors	r0, r0
    ff2e:	f380 8811 	msr	BASEPRI, r0
    ff32:	f04f 0003 	mov.w	r0, #3
    ff36:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    ff38:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    ff3a:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    ff3e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    ff42:	e7c7      	b.n	fed4 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
    ff44:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    ff48:	e7a5      	b.n	fe96 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
    ff4a:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    ff4e:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    ff50:	f362 0302 	bfi	r3, r2, #0, #3
    ff54:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    ff58:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
    ff5c:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    ff60:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    ff64:	e7b1      	b.n	feca <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
    ff66:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    ff6a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    ff6c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    ff70:	d00f      	beq.n	ff92 <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
    ff72:	2a00      	cmp	r2, #0
    ff74:	d185      	bne.n	fe82 <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ff76:	791a      	ldrb	r2, [r3, #4]
    ff78:	f002 0203 	and.w	r2, r2, #3
    ff7c:	2a03      	cmp	r2, #3
    ff7e:	d015      	beq.n	ffac <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    ff80:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    ff84:	e77f      	b.n	fe86 <event_len_prep+0x8e>
			tx->next = conn->tx_head;
    ff86:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    ff88:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ff8c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    ff90:	e77f      	b.n	fe92 <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
    ff92:	6819      	ldr	r1, [r3, #0]
    ff94:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    ff98:	2a00      	cmp	r2, #0
    ff9a:	f47f af72 	bne.w	fe82 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
    ff9e:	681a      	ldr	r2, [r3, #0]
    ffa0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    ffa2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ffa4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    ffa6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    ffaa:	e772      	b.n	fe92 <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
    ffac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ffae:	2a03      	cmp	r2, #3
    ffb0:	d0f5      	beq.n	ff9e <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ffb2:	2a0a      	cmp	r2, #10
    ffb4:	d1e4      	bne.n	ff80 <event_len_prep+0x188>
    ffb6:	e7f2      	b.n	ff9e <event_len_prep+0x1a6>
		LL_ASSERT(0);
    ffb8:	4a07      	ldr	r2, [pc, #28]	; (ffd8 <event_len_prep+0x1e0>)
    ffba:	490a      	ldr	r1, [pc, #40]	; (ffe4 <event_len_prep+0x1ec>)
    ffbc:	4808      	ldr	r0, [pc, #32]	; (ffe0 <event_len_prep+0x1e8>)
    ffbe:	f640 7301 	movw	r3, #3841	; 0xf01
    ffc2:	f00c f96b 	bl	1c29c <printk>
    ffc6:	4040      	eors	r0, r0
    ffc8:	f380 8811 	msr	BASEPRI, r0
    ffcc:	f04f 0003 	mov.w	r0, #3
    ffd0:	df02      	svc	2
}
    ffd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffd4:	20001edc 	.word	0x20001edc
    ffd8:	00020c10 	.word	0x00020c10
    ffdc:	00020cdc 	.word	0x00020cdc
    ffe0:	0002060c 	.word	0x0002060c
    ffe4:	000206a4 	.word	0x000206a4

0000ffe8 <event_phy_upd_ind_prep>:
{
    ffe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
    ffec:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
    fff0:	f013 0201 	ands.w	r2, r3, #1
{
    fff4:	4604      	mov	r4, r0
    fff6:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
    fff8:	f040 808d 	bne.w	10116 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x117>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    fffc:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   10000:	1a71      	subs	r1, r6, r1
   10002:	0409      	lsls	r1, r1, #16
   10004:	f100 80d2 	bmi.w	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10008:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   1000c:	2900      	cmp	r1, #0
   1000e:	469c      	mov	ip, r3
   10010:	f2c0 80f7 	blt.w	10202 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x203>
			conn->llcp_ack = conn->llcp_req;
   10014:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   10018:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   1001c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   10020:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   10024:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   10028:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   1002c:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   10030:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   10034:	f040 80bc 	bne.w	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
		uint16_t eff_tx_time = lll->max_tx_time;
   10038:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   1003c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   10040:	d008      	beq.n	10054 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   10042:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   10046:	095b      	lsrs	r3, r3, #5
   10048:	f363 0202 	bfi	r2, r3, #0, #3
   1004c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   10050:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   10054:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   10058:	2d00      	cmp	r5, #0
   1005a:	f000 80b2 	beq.w	101c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c3>
   1005e:	6828      	ldr	r0, [r5, #0]
   10060:	2800      	cmp	r0, #0
   10062:	f000 80ae 	beq.w	101c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c3>
		conn->llcp_rx = rx->hdr.link->mem;
   10066:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   10068:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   1006c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10070:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   10074:	f01c 0f02 	tst.w	ip, #2
   10078:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   1007c:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10080:	d102      	bne.n	10088 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89>
   10082:	4599      	cmp	r9, r3
   10084:	f000 80c5 	beq.w	10212 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x213>
		rx->hdr.handle = lll->handle;
   10088:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   1008a:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1008c:	231a      	movs	r3, #26
   1008e:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   10090:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   10092:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   10094:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   10096:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   10098:	4629      	mov	r1, r5
   1009a:	f7fe fa61 	bl	e560 <ll_rx_put>
		rx = conn->llcp_rx;
   1009e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   100a2:	2d00      	cmp	r5, #0
   100a4:	f000 809e 	beq.w	101e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e5>
   100a8:	6828      	ldr	r0, [r5, #0]
   100aa:	2800      	cmp	r0, #0
   100ac:	f000 809a 	beq.w	101e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e5>
		if ((eff_tx_time <= lll->max_tx_time) &&
   100b0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   100b4:	6842      	ldr	r2, [r0, #4]
   100b6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   100ba:	42b3      	cmp	r3, r6
   100bc:	d30a      	bcc.n	100d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd5>
   100be:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   100c2:	d807      	bhi.n	100d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd5>
		    (eff_rx_time <= lll->max_rx_time) &&
   100c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   100c8:	42bb      	cmp	r3, r7
   100ca:	d303      	bcc.n	100d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd5>
		    (eff_rx_time <= lll->max_rx_time) &&
   100cc:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   100d0:	f240 8113 	bls.w	102fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fb>
		lll->max_tx_time = eff_tx_time;
   100d4:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   100d8:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   100dc:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   100de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   100e0:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   100e2:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   100e6:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   100ea:	2109      	movs	r1, #9
   100ec:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   100ee:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   100f2:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   100f4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   100f8:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   100fa:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   100fe:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10100:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   10102:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   10104:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   10106:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10108:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1010a:	f7fe fa29 	bl	e560 <ll_rx_put>
}
   1010e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   10112:	f7fe ba2f 	b.w	e574 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   10116:	2002      	movs	r0, #2
   10118:	f7fe fa32 	bl	e580 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1011c:	4680      	mov	r8, r0
   1011e:	2800      	cmp	r0, #0
   10120:	d044      	beq.n	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10122:	488b      	ldr	r0, [pc, #556]	; (10350 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x351>)
   10124:	f7fa f8dc 	bl	a2e0 <mem_acquire>
		if (!tx) {
   10128:	4605      	mov	r5, r0
   1012a:	2800      	cmp	r0, #0
   1012c:	d03e      	beq.n	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1012e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10132:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   10136:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1013a:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   1013e:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   10142:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   10146:	b2db      	uxtb	r3, r3
   10148:	d17e      	bne.n	10248 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x249>
			conn->llcp_ack = conn->llcp_req;
   1014a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   1014e:	f8a4 70ea 	strh.w	r7, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   10152:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   10154:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   10158:	f100 80aa 	bmi.w	102b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b1>
   1015c:	463b      	mov	r3, r7
   1015e:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10160:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   10162:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10164:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10166:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   10168:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1016a:	2218      	movs	r2, #24
	    conn->tx_head &&
   1016c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   10170:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10172:	792a      	ldrb	r2, [r5, #4]
   10174:	f042 0203 	orr.w	r2, r2, #3
   10178:	712a      	strb	r2, [r5, #4]
	if (
   1017a:	b13b      	cbz	r3, 1018c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x18d>
	    !conn->llcp_enc.pause_tx &&
   1017c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10180:	0796      	lsls	r6, r2, #30
   10182:	d403      	bmi.n	1018c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x18d>
	    !conn->llcp_phy.pause_tx &&
   10184:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10188:	07d0      	lsls	r0, r2, #31
   1018a:	d57b      	bpl.n	10284 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x285>
		if (!conn->tx_ctrl) {
   1018c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10190:	2a00      	cmp	r2, #0
   10192:	f000 8087 	beq.w	102a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2a5>
	tx->next = conn->tx_ctrl_last->next;
   10196:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1019a:	681a      	ldr	r2, [r3, #0]
   1019c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1019e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   101a0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   101a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   101a6:	b90b      	cbnz	r3, 101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		conn->tx_data_last = tx;
   101a8:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   101ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   101b0:	f3c3 0182 	ubfx	r1, r3, #2, #3
   101b4:	f361 0202 	bfi	r2, r1, #0, #3
   101b8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   101bc:	f44f 76a4 	mov.w	r6, #328	; 0x148
   101c0:	e73c      	b.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
		LL_ASSERT(rx && rx->hdr.link);
   101c2:	4a64      	ldr	r2, [pc, #400]	; (10354 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x355>)
   101c4:	4964      	ldr	r1, [pc, #400]	; (10358 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x359>)
   101c6:	4865      	ldr	r0, [pc, #404]	; (1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>)
   101c8:	f241 0312 	movw	r3, #4114	; 0x1012
   101cc:	f00c f866 	bl	1c29c <printk>
   101d0:	4040      	eors	r0, r0
   101d2:	f380 8811 	msr	BASEPRI, r0
   101d6:	f04f 0003 	mov.w	r0, #3
   101da:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   101dc:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   101de:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   101e2:	e740      	b.n	10066 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x67>
		LL_ASSERT(rx && rx->hdr.link);
   101e4:	4a5b      	ldr	r2, [pc, #364]	; (10354 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x355>)
   101e6:	495c      	ldr	r1, [pc, #368]	; (10358 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x359>)
   101e8:	485c      	ldr	r0, [pc, #368]	; (1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>)
   101ea:	f241 033e 	movw	r3, #4158	; 0x103e
   101ee:	f00c f855 	bl	1c29c <printk>
   101f2:	4040      	eors	r0, r0
   101f4:	f380 8811 	msr	BASEPRI, r0
   101f8:	f04f 0003 	mov.w	r0, #3
   101fc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   101fe:	6828      	ldr	r0, [r5, #0]
   10200:	e756      	b.n	100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10202:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   10206:	2900      	cmp	r1, #0
   10208:	f43f af04 	beq.w	10014 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15>
			conn->slave.llcp_type = LLCP_NONE;
   1020c:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   10210:	e704      	b.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10212:	4590      	cmp	r8, r2
   10214:	f47f af38 	bne.w	10088 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10218:	2301      	movs	r3, #1
   1021a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1021c:	4629      	mov	r1, r5
   1021e:	f7fe f99f 	bl	e560 <ll_rx_put>
				rx = conn->llcp_rx;
   10222:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   10226:	2d00      	cmp	r5, #0
   10228:	d07d      	beq.n	10326 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x327>
   1022a:	6828      	ldr	r0, [r5, #0]
   1022c:	2800      	cmp	r0, #0
   1022e:	d07a      	beq.n	10326 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x327>
				conn->llcp_rx = rx->hdr.link->mem;
   10230:	6842      	ldr	r2, [r0, #4]
   10232:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10236:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   10238:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1023a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1023c:	f7fe f990 	bl	e560 <ll_rx_put>
}
   10240:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10244:	f7fe b996 	b.w	e574 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   10248:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1024a:	4431      	add	r1, r6
							 lll->latency +
   1024c:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   1024e:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   10252:	f7fe f9b3 	bl	e5bc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   10256:	f8d8 3000 	ldr.w	r3, [r8]
   1025a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1025e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   10260:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   10264:	f7fe f9aa 	bl	e5bc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   10268:	6803      	ldr	r3, [r0, #0]
   1026a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1026e:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10270:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10274:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
			conn->llcp_rx = rx;
   10278:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1027c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10280:	095b      	lsrs	r3, r3, #5
   10282:	e76d      	b.n	10160 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x161>
		if (conn->tx_head == conn->tx_data) {
   10284:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10288:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1028a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1028e:	d03d      	beq.n	1030c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x30d>
		} else if (!conn->tx_ctrl) {
   10290:	2a00      	cmp	r2, #0
   10292:	d180      	bne.n	10196 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x197>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10294:	791a      	ldrb	r2, [r3, #4]
   10296:	f002 0203 	and.w	r2, r2, #3
   1029a:	2a03      	cmp	r2, #3
   1029c:	d052      	beq.n	10344 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x345>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1029e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   102a2:	e77a      	b.n	1019a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19b>
			tx->next = conn->tx_head;
   102a4:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   102a6:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   102aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   102ae:	e77a      	b.n	101a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a7>
				(void)ll_pdu_rx_alloc();
   102b0:	f7fe f984 	bl	e5bc <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   102b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   102b6:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   102ba:	231a      	movs	r3, #26
				upd->status = 0U;
   102bc:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   102c0:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   102c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   102c8:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   102cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   102d0:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   102d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   102d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   102dc:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   102e0:	4641      	mov	r1, r8
   102e2:	f7fe f93d 	bl	e560 <ll_rx_put>
				ll_rx_sched();
   102e6:	f7fe f945 	bl	e574 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   102ea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   102ee:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   102f2:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   102f6:	095b      	lsrs	r3, r3, #5
   102f8:	e732      	b.n	10160 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x161>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   102fa:	2301      	movs	r3, #1
   102fc:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   102fe:	4629      	mov	r1, r5
   10300:	f7fe f92e 	bl	e560 <ll_rx_put>
}
   10304:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10308:	f7fe b934 	b.w	e574 <ll_rx_sched>
			conn->tx_data = conn->tx_data->next;
   1030c:	6819      	ldr	r1, [r3, #0]
   1030e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10312:	2a00      	cmp	r2, #0
   10314:	f47f af3f 	bne.w	10196 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x197>
			tx->next = conn->tx_head->next;
   10318:	681a      	ldr	r2, [r3, #0]
   1031a:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   1031c:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1031e:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   10320:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   10324:	e73f      	b.n	101a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a7>
				LL_ASSERT(rx && rx->hdr.link);
   10326:	4a0b      	ldr	r2, [pc, #44]	; (10354 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x355>)
   10328:	490b      	ldr	r1, [pc, #44]	; (10358 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x359>)
   1032a:	480c      	ldr	r0, [pc, #48]	; (1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>)
   1032c:	f241 0321 	movw	r3, #4129	; 0x1021
   10330:	f00b ffb4 	bl	1c29c <printk>
   10334:	4040      	eors	r0, r0
   10336:	f380 8811 	msr	BASEPRI, r0
   1033a:	f04f 0003 	mov.w	r0, #3
   1033e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   10340:	6828      	ldr	r0, [r5, #0]
   10342:	e775      	b.n	10230 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x231>
	    ((pdu_data_tx->llctrl.opcode !=
   10344:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10346:	2a03      	cmp	r2, #3
   10348:	d0e6      	beq.n	10318 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x319>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1034a:	2a0a      	cmp	r2, #10
   1034c:	d1a7      	bne.n	1029e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29f>
   1034e:	e7e3      	b.n	10318 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x319>
   10350:	20001edc 	.word	0x20001edc
   10354:	00020c10 	.word	0x00020c10
   10358:	00020cdc 	.word	0x00020cdc
   1035c:	0002060c 	.word	0x0002060c

00010360 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   10360:	4801      	ldr	r0, [pc, #4]	; (10368 <ll_conn_acquire+0x8>)
   10362:	f7f9 bfbd 	b.w	a2e0 <mem_acquire>
   10366:	bf00      	nop
   10368:	20001e44 	.word	0x20001e44

0001036c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1036c:	4901      	ldr	r1, [pc, #4]	; (10374 <ll_conn_release+0x8>)
   1036e:	f7f9 bfd1 	b.w	a314 <mem_release>
   10372:	bf00      	nop
   10374:	20001e44 	.word	0x20001e44

00010378 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10378:	4902      	ldr	r1, [pc, #8]	; (10384 <ll_conn_handle_get+0xc>)
   1037a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1037e:	f7f9 bfe5 	b.w	a34c <mem_index_get>
   10382:	bf00      	nop
   10384:	20000de0 	.word	0x20000de0

00010388 <ll_conn_get>:
{
   10388:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1038a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1038e:	4801      	ldr	r0, [pc, #4]	; (10394 <ll_conn_get+0xc>)
   10390:	f7f9 bfd8 	b.w	a344 <mem_get>
   10394:	20000de0 	.word	0x20000de0

00010398 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10398:	b958      	cbnz	r0, 103b2 <ll_connected_get+0x1a>
{
   1039a:	b508      	push	{r3, lr}
   1039c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1039e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   103a2:	4805      	ldr	r0, [pc, #20]	; (103b8 <ll_connected_get+0x20>)
   103a4:	f7f9 ffce 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   103a8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   103aa:	b903      	cbnz	r3, 103ae <ll_connected_get+0x16>
}
   103ac:	bd08      	pop	{r3, pc}
		return NULL;
   103ae:	2000      	movs	r0, #0
}
   103b0:	bd08      	pop	{r3, pc}
		return NULL;
   103b2:	2000      	movs	r0, #0
}
   103b4:	4770      	bx	lr
   103b6:	bf00      	nop
   103b8:	20000de0 	.word	0x20000de0

000103bc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   103bc:	4801      	ldr	r0, [pc, #4]	; (103c4 <ll_tx_mem_acquire+0x8>)
   103be:	f7f9 bf8f 	b.w	a2e0 <mem_acquire>
   103c2:	bf00      	nop
   103c4:	20001e6c 	.word	0x20001e6c

000103c8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   103c8:	4901      	ldr	r1, [pc, #4]	; (103d0 <ll_tx_mem_release+0x8>)
   103ca:	f7f9 bfa3 	b.w	a314 <mem_release>
   103ce:	bf00      	nop
   103d0:	20001e6c 	.word	0x20001e6c

000103d4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   103d4:	2800      	cmp	r0, #0
   103d6:	d140      	bne.n	1045a <ll_tx_mem_enqueue+0x86>
{
   103d8:	b570      	push	{r4, r5, r6, lr}
   103da:	4602      	mov	r2, r0
   103dc:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   103de:	4820      	ldr	r0, [pc, #128]	; (10460 <ll_tx_mem_enqueue+0x8c>)
   103e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   103e4:	f7f9 ffae 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   103e8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   103ea:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   103ec:	bb7a      	cbnz	r2, 1044e <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   103ee:	4c1d      	ldr	r4, [pc, #116]	; (10464 <ll_tx_mem_enqueue+0x90>)
   103f0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   103f2:	f894 c001 	ldrb.w	ip, [r4, #1]
   103f6:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   103f8:	1c4b      	adds	r3, r1, #1
   103fa:	b2db      	uxtb	r3, r3
		last = 0U;
   103fc:	459c      	cmp	ip, r3
   103fe:	bf08      	it	eq
   10400:	2300      	moveq	r3, #0
	if (last == first) {
   10402:	4298      	cmp	r0, r3
   10404:	d026      	beq.n	10454 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10406:	46a4      	mov	ip, r4
   10408:	f81c 0b04 	ldrb.w	r0, [ip], #4
   1040c:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   10410:	eb1c 0100 	adds.w	r1, ip, r0
   10414:	d01e      	beq.n	10454 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   10416:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   1041a:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1041c:	70e3      	strb	r3, [r4, #3]
   1041e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   10420:	b92b      	cbnz	r3, 1042e <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10422:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10426:	2b00      	cmp	r3, #0
   10428:	db0b      	blt.n	10442 <ll_tx_mem_enqueue+0x6e>
	return 0;
   1042a:	2000      	movs	r0, #0
}
   1042c:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   1042e:	4b0e      	ldr	r3, [pc, #56]	; (10468 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10430:	2101      	movs	r1, #1
   10432:	2003      	movs	r0, #3
		mfy.param = conn;
   10434:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10436:	f7fa f82b 	bl	a490 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1043a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1043e:	2b00      	cmp	r3, #0
   10440:	daf3      	bge.n	1042a <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   10442:	4628      	mov	r0, r5
   10444:	2100      	movs	r1, #0
   10446:	f004 fa31 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   1044a:	2000      	movs	r0, #0
}
   1044c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1044e:	f06f 0015 	mvn.w	r0, #21
}
   10452:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   10454:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10458:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1045a:	f06f 0015 	mvn.w	r0, #21
}
   1045e:	4770      	bx	lr
   10460:	20000de0 	.word	0x20000de0
   10464:	2000044c 	.word	0x2000044c
   10468:	20000480 	.word	0x20000480

0001046c <ll_conn_update>:
{
   1046c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10470:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   10474:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   10478:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1047c:	2800      	cmp	r0, #0
   1047e:	d155      	bne.n	1052c <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10480:	460c      	mov	r4, r1
   10482:	4615      	mov	r5, r2
   10484:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10488:	4602      	mov	r2, r0
   1048a:	4841      	ldr	r0, [pc, #260]	; (10590 <ll_conn_update+0x124>)
   1048c:	461e      	mov	r6, r3
   1048e:	f7f9 ff59 	bl	a344 <mem_get>
   10492:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   10494:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10496:	2800      	cmp	r0, #0
   10498:	d148      	bne.n	1052c <ll_conn_update+0xc0>
	if (!cmd) {
   1049a:	bb3c      	cbnz	r4, 104ec <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1049c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   104a0:	06d9      	lsls	r1, r3, #27
   104a2:	d44a      	bmi.n	1053a <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   104a4:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   104a8:	07da      	lsls	r2, r3, #31
   104aa:	d442      	bmi.n	10532 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   104ac:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   104b0:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   104b4:	4293      	cmp	r3, r2
   104b6:	d136      	bne.n	10526 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   104b8:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   104bc:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   104c0:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   104c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   104c8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   104ca:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   104ce:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   104d0:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   104d4:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   104d8:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   104dc:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   104e0:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   104e4:	db4e      	blt.n	10584 <ll_conn_update+0x118>
	return 0;
   104e6:	2000      	movs	r0, #0
}
   104e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   104ec:	3c01      	subs	r4, #1
		if (cmd) {
   104ee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   104f2:	d0db      	beq.n	104ac <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   104f4:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   104f8:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   104fc:	429a      	cmp	r2, r3
   104fe:	d012      	beq.n	10526 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   10500:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   10504:	f003 0207 	and.w	r2, r3, #7
   10508:	2a03      	cmp	r2, #3
   1050a:	d10c      	bne.n	10526 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1050c:	f004 0407 	and.w	r4, r4, #7
   10510:	f023 030f 	bic.w	r3, r3, #15
   10514:	f044 0408 	orr.w	r4, r4, #8
   10518:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1051a:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   1051e:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   10522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10526:	200c      	movs	r0, #12
}
   10528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1052c:	2002      	movs	r0, #2
}
   1052e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   10532:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   10536:	079b      	lsls	r3, r3, #30
   10538:	d4b8      	bmi.n	104ac <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1053a:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   1053e:	2b00      	cmp	r3, #0
   10540:	db1e      	blt.n	10580 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   10542:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   10546:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   1054a:	4293      	cmp	r3, r2
   1054c:	d1eb      	bne.n	10526 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1054e:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   10552:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   10556:	3301      	adds	r3, #1
   10558:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1055c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   10560:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10562:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   10566:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   10568:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1056c:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   10570:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10574:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   10578:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1057c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10580:	201a      	movs	r0, #26
   10582:	e7d1      	b.n	10528 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   10584:	4660      	mov	r0, ip
   10586:	2100      	movs	r1, #0
   10588:	f004 f990 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   1058c:	2000      	movs	r0, #0
   1058e:	e7cb      	b.n	10528 <ll_conn_update+0xbc>
   10590:	20000de0 	.word	0x20000de0

00010594 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10594:	b9d0      	cbnz	r0, 105cc <ll_chm_get+0x38>
{
   10596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10598:	4602      	mov	r2, r0
   1059a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1059c:	480c      	ldr	r0, [pc, #48]	; (105d0 <ll_chm_get+0x3c>)
   1059e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   105a2:	f7f9 fecf 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   105a6:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   105a8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   105aa:	b96e      	cbnz	r6, 105c8 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   105ac:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   105b0:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   105b4:	2205      	movs	r2, #5
   105b6:	4639      	mov	r1, r7
   105b8:	4628      	mov	r0, r5
   105ba:	f00d f925 	bl	1d808 <memcpy>
	} while (conn->chm_updated);
   105be:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   105c2:	2800      	cmp	r0, #0
   105c4:	d1f4      	bne.n	105b0 <ll_chm_get+0x1c>
}
   105c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105c8:	2002      	movs	r0, #2
}
   105ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105cc:	2002      	movs	r0, #2
}
   105ce:	4770      	bx	lr
   105d0:	20000de0 	.word	0x20000de0

000105d4 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   105d4:	2800      	cmp	r0, #0
   105d6:	d13e      	bne.n	10656 <ll_terminate_ind_send+0x82>
{
   105d8:	b510      	push	{r4, lr}
   105da:	4602      	mov	r2, r0
   105dc:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   105de:	4821      	ldr	r0, [pc, #132]	; (10664 <ll_terminate_ind_send+0x90>)
   105e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   105e4:	f7f9 feae 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   105e8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   105ea:	bb93      	cbnz	r3, 10652 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   105ec:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   105f0:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   105f4:	429a      	cmp	r2, r3
   105f6:	d12a      	bne.n	1064e <ll_terminate_ind_send+0x7a>
	switch (reason) {
   105f8:	2c29      	cmp	r4, #41	; 0x29
   105fa:	d819      	bhi.n	10630 <ll_terminate_ind_send+0x5c>
   105fc:	2c04      	cmp	r4, #4
   105fe:	d919      	bls.n	10634 <ll_terminate_ind_send+0x60>
   10600:	1f62      	subs	r2, r4, #5
   10602:	2a24      	cmp	r2, #36	; 0x24
   10604:	d816      	bhi.n	10634 <ll_terminate_ind_send+0x60>
   10606:	e8df f002 	tbb	[pc, r2]
   1060a:	1517      	.short	0x1517
   1060c:	15151515 	.word	0x15151515
   10610:	15151515 	.word	0x15151515
   10614:	15151515 	.word	0x15151515
   10618:	15171717 	.word	0x15171717
   1061c:	17151515 	.word	0x17151515
   10620:	15151515 	.word	0x15151515
   10624:	15151515 	.word	0x15151515
   10628:	15151515 	.word	0x15151515
   1062c:	1515      	.short	0x1515
   1062e:	17          	.byte	0x17
   1062f:	00          	.byte	0x00
   10630:	2c3b      	cmp	r4, #59	; 0x3b
   10632:	d001      	beq.n	10638 <ll_terminate_ind_send+0x64>
   10634:	2012      	movs	r0, #18
}
   10636:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10638:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1063c:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   10640:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10642:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   10644:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10648:	db07      	blt.n	1065a <ll_terminate_ind_send+0x86>
	return 0;
   1064a:	2000      	movs	r0, #0
}
   1064c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1064e:	200c      	movs	r0, #12
}
   10650:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10652:	2002      	movs	r0, #2
}
   10654:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10656:	2002      	movs	r0, #2
}
   10658:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1065a:	2100      	movs	r1, #0
   1065c:	f004 f926 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   10660:	2000      	movs	r0, #0
}
   10662:	bd10      	pop	{r4, pc}
   10664:	20000de0 	.word	0x20000de0

00010668 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10668:	bb00      	cbnz	r0, 106ac <ll_feature_req_send+0x44>
{
   1066a:	b510      	push	{r4, lr}
   1066c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1066e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10672:	480f      	ldr	r0, [pc, #60]	; (106b0 <ll_feature_req_send+0x48>)
   10674:	f7f9 fe66 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   10678:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1067a:	b984      	cbnz	r4, 1069e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1067c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   10680:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   10684:	428a      	cmp	r2, r1
   10686:	d108      	bne.n	1069a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10688:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1068c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1068e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   10690:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10694:	db05      	blt.n	106a2 <ll_feature_req_send+0x3a>
	return 0;
   10696:	4620      	mov	r0, r4
}
   10698:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1069a:	200c      	movs	r0, #12
}
   1069c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1069e:	2002      	movs	r0, #2
}
   106a0:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   106a2:	4621      	mov	r1, r4
   106a4:	f004 f902 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   106a8:	4620      	mov	r0, r4
}
   106aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   106ac:	2002      	movs	r0, #2
}
   106ae:	4770      	bx	lr
   106b0:	20000de0 	.word	0x20000de0

000106b4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   106b4:	bb00      	cbnz	r0, 106f8 <ll_version_ind_send+0x44>
{
   106b6:	b510      	push	{r4, lr}
   106b8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   106ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   106be:	480f      	ldr	r0, [pc, #60]	; (106fc <ll_version_ind_send+0x48>)
   106c0:	f7f9 fe40 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   106c4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   106c6:	b984      	cbnz	r4, 106ea <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   106c8:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   106cc:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   106d0:	428a      	cmp	r2, r1
   106d2:	d108      	bne.n	106e6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106d4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   106d8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106da:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   106dc:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106e0:	db05      	blt.n	106ee <ll_version_ind_send+0x3a>
	return 0;
   106e2:	4620      	mov	r0, r4
}
   106e4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   106e6:	200c      	movs	r0, #12
}
   106e8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   106ea:	2002      	movs	r0, #2
}
   106ec:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   106ee:	4621      	mov	r1, r4
   106f0:	f004 f8dc 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   106f4:	4620      	mov	r0, r4
}
   106f6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   106f8:	2002      	movs	r0, #2
}
   106fa:	4770      	bx	lr
   106fc:	20000de0 	.word	0x20000de0

00010700 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10700:	2800      	cmp	r0, #0
   10702:	d14c      	bne.n	1079e <ll_length_req_send+0x9e>
{
   10704:	b538      	push	{r3, r4, r5, lr}
   10706:	460d      	mov	r5, r1
   10708:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1070a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1070e:	4602      	mov	r2, r0
   10710:	4824      	ldr	r0, [pc, #144]	; (107a4 <ll_length_req_send+0xa4>)
   10712:	f7f9 fe17 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   10716:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   10718:	bbc3      	cbnz	r3, 1078c <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   1071a:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1071e:	071a      	lsls	r2, r3, #28
   10720:	d432      	bmi.n	10788 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   10722:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   10726:	07d1      	lsls	r1, r2, #31
   10728:	d503      	bpl.n	10732 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1072a:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   1072e:	0692      	lsls	r2, r2, #26
   10730:	d52a      	bpl.n	10788 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   10732:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   10736:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   1073a:	428a      	cmp	r2, r1
   1073c:	d011      	beq.n	10762 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1073e:	f003 0307 	and.w	r3, r3, #7
   10742:	2b03      	cmp	r3, #3
   10744:	d004      	beq.n	10750 <ll_length_req_send+0x50>
   10746:	3303      	adds	r3, #3
   10748:	f003 0307 	and.w	r3, r3, #7
   1074c:	2b01      	cmp	r3, #1
   1074e:	d824      	bhi.n	1079a <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   10750:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   10754:	bb0b      	cbnz	r3, 1079a <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   10756:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   1075a:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   1075e:	4618      	mov	r0, r3
}
   10760:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10762:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   10766:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1076a:	f36f 0302 	bfc	r3, #0, #3
   1076e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10772:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   10776:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1077a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1077c:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1077e:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10782:	db05      	blt.n	10790 <ll_length_req_send+0x90>
	return 0;
   10784:	2000      	movs	r0, #0
}
   10786:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10788:	201a      	movs	r0, #26
}
   1078a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1078c:	2002      	movs	r0, #2
}
   1078e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   10790:	2100      	movs	r1, #0
   10792:	f004 f88b 	bl	148ac <ull_slave_latency_cancel>
	return 0;
   10796:	2000      	movs	r0, #0
}
   10798:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1079a:	200c      	movs	r0, #12
}
   1079c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1079e:	2002      	movs	r0, #2
}
   107a0:	4770      	bx	lr
   107a2:	bf00      	nop
   107a4:	20000de0 	.word	0x20000de0

000107a8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   107a8:	4a03      	ldr	r2, [pc, #12]	; (107b8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   107aa:	4b04      	ldr	r3, [pc, #16]	; (107bc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   107ac:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   107ae:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   107b0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   107b2:	800b      	strh	r3, [r1, #0]
}
   107b4:	4770      	bx	lr
   107b6:	bf00      	nop
   107b8:	20002826 	.word	0x20002826
   107bc:	20002828 	.word	0x20002828

000107c0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   107c0:	4a02      	ldr	r2, [pc, #8]	; (107cc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   107c2:	4b03      	ldr	r3, [pc, #12]	; (107d0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   107c4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   107c6:	8019      	strh	r1, [r3, #0]
}
   107c8:	2000      	movs	r0, #0
   107ca:	4770      	bx	lr
   107cc:	20002826 	.word	0x20002826
   107d0:	20002828 	.word	0x20002828

000107d4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   107d4:	f04f 0c1b 	mov.w	ip, #27
   107d8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   107dc:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   107e0:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   107e4:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   107e6:	8018      	strh	r0, [r3, #0]
}
   107e8:	4770      	bx	lr
   107ea:	bf00      	nop

000107ec <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   107ec:	b9c0      	cbnz	r0, 10820 <ll_phy_get+0x34>
{
   107ee:	b538      	push	{r3, r4, r5, lr}
   107f0:	460d      	mov	r5, r1
   107f2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   107f4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   107f8:	4602      	mov	r2, r0
   107fa:	480a      	ldr	r0, [pc, #40]	; (10824 <ll_phy_get+0x38>)
   107fc:	f7f9 fda2 	bl	a344 <mem_get>
   10800:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10802:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10804:	b950      	cbnz	r0, 1081c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   10806:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1080a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1080e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   10810:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   10814:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10818:	7023      	strb	r3, [r4, #0]
}
   1081a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1081c:	2002      	movs	r0, #2
}
   1081e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10820:	2002      	movs	r0, #2
}
   10822:	4770      	bx	lr
   10824:	20000de0 	.word	0x20000de0

00010828 <ll_phy_default_set>:
	default_phy_tx = tx;
   10828:	4a02      	ldr	r2, [pc, #8]	; (10834 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1082a:	4b03      	ldr	r3, [pc, #12]	; (10838 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1082c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1082e:	7019      	strb	r1, [r3, #0]
}
   10830:	2000      	movs	r0, #0
   10832:	4770      	bx	lr
   10834:	20002903 	.word	0x20002903
   10838:	20002902 	.word	0x20002902

0001083c <ll_phy_req_send>:
{
   1083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1083e:	2800      	cmp	r0, #0
   10840:	d143      	bne.n	108ca <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10842:	460c      	mov	r4, r1
   10844:	4616      	mov	r6, r2
   10846:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1084a:	4602      	mov	r2, r0
   1084c:	4823      	ldr	r0, [pc, #140]	; (108dc <ll_phy_req_send+0xa0>)
   1084e:	461f      	mov	r7, r3
   10850:	f7f9 fd78 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   10854:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   10856:	bbc3      	cbnz	r3, 108ca <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   10858:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   1085c:	f015 0508 	ands.w	r5, r5, #8
   10860:	d130      	bne.n	108c4 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   10862:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   10866:	07db      	lsls	r3, r3, #31
   10868:	d504      	bpl.n	10874 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1086a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1086e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   10872:	d027      	beq.n	108c4 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   10874:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   10878:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1087c:	4299      	cmp	r1, r3
   1087e:	d11e      	bne.n	108be <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10880:	f004 0407 	and.w	r4, r4, #7
   10884:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   10888:	00a4      	lsls	r4, r4, #2
   1088a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1088e:	f007 0307 	and.w	r3, r7, #7
   10892:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   10896:	f006 0601 	and.w	r6, r6, #1
   1089a:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1089e:	f022 0207 	bic.w	r2, r2, #7
   108a2:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   108a6:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   108a8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   108ac:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   108b0:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   108b2:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   108b4:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   108b8:	db0a      	blt.n	108d0 <ll_phy_req_send+0x94>
}
   108ba:	4628      	mov	r0, r5
   108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   108be:	250c      	movs	r5, #12
}
   108c0:	4628      	mov	r0, r5
   108c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   108c4:	251a      	movs	r5, #26
}
   108c6:	4628      	mov	r0, r5
   108c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   108ca:	2502      	movs	r5, #2
}
   108cc:	4628      	mov	r0, r5
   108ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   108d0:	2100      	movs	r1, #0
   108d2:	f003 ffeb 	bl	148ac <ull_slave_latency_cancel>
}
   108d6:	4628      	mov	r0, r5
   108d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108da:	bf00      	nop
   108dc:	20000de0 	.word	0x20000de0

000108e0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   108e0:	b9d8      	cbnz	r0, 1091a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108e2:	4602      	mov	r2, r0
{
   108e4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108e6:	480e      	ldr	r0, [pc, #56]	; (10920 <ll_apto_get+0x40>)
   108e8:	460c      	mov	r4, r1
   108ea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   108ee:	f7f9 fd29 	bl	a344 <mem_get>
   108f2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   108f4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   108f6:	b970      	cbnz	r0, 10916 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   108f8:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   108fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   108fe:	fb02 f303 	mul.w	r3, r2, r3
   10902:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   10906:	4a07      	ldr	r2, [pc, #28]	; (10924 <ll_apto_get+0x44>)
   10908:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1090c:	fba2 2303 	umull	r2, r3, r2, r3
   10910:	099b      	lsrs	r3, r3, #6
   10912:	8023      	strh	r3, [r4, #0]
}
   10914:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10916:	2002      	movs	r0, #2
}
   10918:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1091a:	2002      	movs	r0, #2
}
   1091c:	4770      	bx	lr
   1091e:	bf00      	nop
   10920:	20000de0 	.word	0x20000de0
   10924:	10624dd3 	.word	0x10624dd3

00010928 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10928:	b9e0      	cbnz	r0, 10964 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1092a:	4602      	mov	r2, r0
{
   1092c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1092e:	480e      	ldr	r0, [pc, #56]	; (10968 <ll_apto_set+0x40>)
   10930:	460c      	mov	r4, r1
   10932:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10936:	f7f9 fd05 	bl	a344 <mem_get>
   1093a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1093c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1093e:	b978      	cbnz	r0, 10960 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   10940:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   10944:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10948:	fb03 fc0c 	mul.w	ip, r3, ip
   1094c:	f242 7310 	movw	r3, #10000	; 0x2710
   10950:	fb03 c304 	mla	r3, r3, r4, ip
   10954:	3b01      	subs	r3, #1
   10956:	fbb3 f3fc 	udiv	r3, r3, ip
   1095a:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   1095e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10960:	2002      	movs	r0, #2
}
   10962:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10964:	2002      	movs	r0, #2
}
   10966:	4770      	bx	lr
   10968:	20000de0 	.word	0x20000de0

0001096c <ull_conn_init>:
	err = init_reset();
   1096c:	f7fe be9c 	b.w	f6a8 <init_reset>

00010970 <ull_conn_reset>:
{
   10970:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10972:	2200      	movs	r2, #0
   10974:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10978:	4813      	ldr	r0, [pc, #76]	; (109c8 <ull_conn_reset+0x58>)
   1097a:	f7f9 fce3 	bl	a344 <mem_get>
   1097e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   10980:	f100 021c 	add.w	r2, r0, #28
   10984:	4601      	mov	r1, r0
   10986:	2005      	movs	r0, #5
   10988:	f7fd ff02 	bl	e790 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1098c:	b108      	cbz	r0, 10992 <ull_conn_reset+0x22>
   1098e:	3078      	adds	r0, #120	; 0x78
   10990:	d10b      	bne.n	109aa <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   10992:	480e      	ldr	r0, [pc, #56]	; (109cc <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   10994:	490e      	ldr	r1, [pc, #56]	; (109d0 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   10996:	4a0f      	ldr	r2, [pc, #60]	; (109d4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   10998:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1099a:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1099c:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   1099e:	6763      	str	r3, [r4, #116]	; 0x74
}
   109a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   109a4:	6013      	str	r3, [r2, #0]
	err = init_reset();
   109a6:	f7fe be7f 	b.w	f6a8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   109aa:	4a0b      	ldr	r2, [pc, #44]	; (109d8 <ull_conn_reset+0x68>)
   109ac:	490b      	ldr	r1, [pc, #44]	; (109dc <ull_conn_reset+0x6c>)
   109ae:	480c      	ldr	r0, [pc, #48]	; (109e0 <ull_conn_reset+0x70>)
   109b0:	f240 7391 	movw	r3, #1937	; 0x791
   109b4:	f00b fc72 	bl	1c29c <printk>
   109b8:	4040      	eors	r0, r0
   109ba:	f380 8811 	msr	BASEPRI, r0
   109be:	f04f 0003 	mov.w	r0, #3
   109c2:	df02      	svc	2
   109c4:	e7e5      	b.n	10992 <ull_conn_reset+0x22>
   109c6:	bf00      	nop
   109c8:	20000de0 	.word	0x20000de0
   109cc:	2000044c 	.word	0x2000044c
   109d0:	20000408 	.word	0x20000408
   109d4:	20001e48 	.word	0x20001e48
   109d8:	00020c10 	.word	0x00020c10
   109dc:	00020be4 	.word	0x00020be4
   109e0:	0002060c 	.word	0x0002060c

000109e4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   109e4:	4b01      	ldr	r3, [pc, #4]	; (109ec <ull_conn_default_tx_octets_get+0x8>)
}
   109e6:	8818      	ldrh	r0, [r3, #0]
   109e8:	4770      	bx	lr
   109ea:	bf00      	nop
   109ec:	20002826 	.word	0x20002826

000109f0 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   109f0:	4b01      	ldr	r3, [pc, #4]	; (109f8 <ull_conn_default_tx_time_get+0x8>)
}
   109f2:	8818      	ldrh	r0, [r3, #0]
   109f4:	4770      	bx	lr
   109f6:	bf00      	nop
   109f8:	20002828 	.word	0x20002828

000109fc <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   109fc:	4b01      	ldr	r3, [pc, #4]	; (10a04 <ull_conn_default_phy_tx_get+0x8>)
}
   109fe:	7818      	ldrb	r0, [r3, #0]
   10a00:	4770      	bx	lr
   10a02:	bf00      	nop
   10a04:	20002903 	.word	0x20002903

00010a08 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   10a08:	4b01      	ldr	r3, [pc, #4]	; (10a10 <ull_conn_default_phy_rx_get+0x8>)
}
   10a0a:	7818      	ldrb	r0, [r3, #0]
   10a0c:	4770      	bx	lr
   10a0e:	bf00      	nop
   10a10:	20002902 	.word	0x20002902

00010a14 <ull_conn_setup>:
{
   10a14:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   10a16:	688b      	ldr	r3, [r1, #8]
	mfy.param = rx;
   10a18:	4d25      	ldr	r5, [pc, #148]	; (10ab0 <ull_conn_setup+0x9c>)
	hdr = HDR_LLL2ULL(ftr->param);
   10a1a:	681c      	ldr	r4, [r3, #0]
	mfy.param = rx;
   10a1c:	60a9      	str	r1, [r5, #8]
	rx->link = rx_link;
   10a1e:	6008      	str	r0, [r1, #0]
   10a20:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(hdr)) {
   10a22:	2b00      	cmp	r3, #0
   10a24:	d02a      	beq.n	10a7c <ull_conn_setup+0x68>
		LL_ASSERT(!hdr->disabled_cb);
   10a26:	6963      	ldr	r3, [r4, #20]
   10a28:	b16b      	cbz	r3, 10a46 <ull_conn_setup+0x32>
   10a2a:	4a22      	ldr	r2, [pc, #136]	; (10ab4 <ull_conn_setup+0xa0>)
   10a2c:	4922      	ldr	r1, [pc, #136]	; (10ab8 <ull_conn_setup+0xa4>)
   10a2e:	4823      	ldr	r0, [pc, #140]	; (10abc <ull_conn_setup+0xa8>)
   10a30:	f44f 7355 	mov.w	r3, #852	; 0x354
   10a34:	f00b fc32 	bl	1c29c <printk>
   10a38:	4040      	eors	r0, r0
   10a3a:	f380 8811 	msr	BASEPRI, r0
   10a3e:	f04f 0003 	mov.w	r0, #3
   10a42:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   10a44:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   10a46:	4b1e      	ldr	r3, [pc, #120]	; (10ac0 <ull_conn_setup+0xac>)
		mfy.fp = lll_disable;
   10a48:	481e      	ldr	r0, [pc, #120]	; (10ac4 <ull_conn_setup+0xb0>)
		hdr->disabled_param = mfy.param;
   10a4a:	61a1      	str	r1, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   10a4c:	2200      	movs	r2, #0
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   10a4e:	6163      	str	r3, [r4, #20]
		mfy.fp = lll_disable;
   10a50:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   10a52:	4b17      	ldr	r3, [pc, #92]	; (10ab0 <ull_conn_setup+0x9c>)
   10a54:	4611      	mov	r1, r2
   10a56:	2002      	movs	r0, #2
   10a58:	f7f9 fd1a 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
   10a5c:	b900      	cbnz	r0, 10a60 <ull_conn_setup+0x4c>
}
   10a5e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   10a60:	4a14      	ldr	r2, [pc, #80]	; (10ab4 <ull_conn_setup+0xa0>)
   10a62:	4919      	ldr	r1, [pc, #100]	; (10ac8 <ull_conn_setup+0xb4>)
   10a64:	4815      	ldr	r0, [pc, #84]	; (10abc <ull_conn_setup+0xa8>)
   10a66:	f240 335b 	movw	r3, #859	; 0x35b
   10a6a:	f00b fc17 	bl	1c29c <printk>
   10a6e:	4040      	eors	r0, r0
   10a70:	f380 8811 	msr	BASEPRI, r0
   10a74:	f04f 0003 	mov.w	r0, #3
   10a78:	df02      	svc	2
}
   10a7a:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = conn_setup_adv_scan_disabled_cb;
   10a7c:	4810      	ldr	r0, [pc, #64]	; (10ac0 <ull_conn_setup+0xac>)
   10a7e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   10a80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   10a84:	2101      	movs	r1, #1
   10a86:	462b      	mov	r3, r5
   10a88:	2002      	movs	r0, #2
   10a8a:	f7f9 fd01 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!ret);
   10a8e:	2800      	cmp	r0, #0
   10a90:	d0e5      	beq.n	10a5e <ull_conn_setup+0x4a>
   10a92:	4a08      	ldr	r2, [pc, #32]	; (10ab4 <ull_conn_setup+0xa0>)
   10a94:	490c      	ldr	r1, [pc, #48]	; (10ac8 <ull_conn_setup+0xb4>)
   10a96:	4809      	ldr	r0, [pc, #36]	; (10abc <ull_conn_setup+0xa8>)
   10a98:	f240 3362 	movw	r3, #866	; 0x362
   10a9c:	f00b fbfe 	bl	1c29c <printk>
   10aa0:	4040      	eors	r0, r0
   10aa2:	f380 8811 	msr	BASEPRI, r0
   10aa6:	f04f 0003 	mov.w	r0, #3
   10aaa:	df02      	svc	2
}
   10aac:	bd38      	pop	{r3, r4, r5, pc}
   10aae:	bf00      	nop
   10ab0:	200004a0 	.word	0x200004a0
   10ab4:	00020c10 	.word	0x00020c10
   10ab8:	00020b30 	.word	0x00020b30
   10abc:	0002060c 	.word	0x0002060c
   10ac0:	0000faa1 	.word	0x0000faa1
   10ac4:	00016775 	.word	0x00016775
   10ac8:	000209f8 	.word	0x000209f8

00010acc <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   10acc:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   10ace:	88da      	ldrh	r2, [r3, #6]
   10ad0:	2a00      	cmp	r2, #0
   10ad2:	f040 80d3 	bne.w	10c7c <ull_conn_rx+0x1b0>
{
   10ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ada:	460f      	mov	r7, r1
   10adc:	b083      	sub	sp, #12
   10ade:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10ae0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10ae4:	48b0      	ldr	r0, [pc, #704]	; (10da8 <ull_conn_rx+0x2dc>)
   10ae6:	f7f9 fc2d 	bl	a344 <mem_get>
   10aea:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   10aec:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10aee:	2800      	cmp	r0, #0
   10af0:	f040 80bd 	bne.w	10c6e <ull_conn_rx+0x1a2>
	pdu_rx = (void *)(*rx)->pdu;
   10af4:	683d      	ldr	r5, [r7, #0]
	switch (pdu_rx->ll_id) {
   10af6:	7f2a      	ldrb	r2, [r5, #28]
   10af8:	f002 0203 	and.w	r2, r2, #3
   10afc:	2a03      	cmp	r2, #3
   10afe:	d12a      	bne.n	10b56 <ull_conn_rx+0x8a>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10b00:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
	opcode = pdu_rx->llctrl.opcode;
   10b04:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10b08:	f01c 0f01 	tst.w	ip, #1
   10b0c:	d03d      	beq.n	10b8a <ull_conn_rx+0xbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   10b0e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10b12:	2b00      	cmp	r3, #0
   10b14:	f2c0 80b6 	blt.w	10c84 <ull_conn_rx+0x1b8>
	return (!conn->lll.role &&
   10b18:	f01c 0f04 	tst.w	ip, #4
   10b1c:	f040 8107 	bne.w	10d2e <ull_conn_rx+0x262>
		((!conn->llcp_enc.refresh &&
   10b20:	f1b8 0f02 	cmp.w	r8, #2
   10b24:	f000 8133 	beq.w	10d8e <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10b28:	f1b8 0f05 	cmp.w	r8, #5
   10b2c:	f000 8574 	beq.w	11618 <ull_conn_rx+0xb4c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10b30:	f1b8 0f06 	cmp.w	r8, #6
   10b34:	f000 83e5 	beq.w	11302 <ull_conn_rx+0x836>
   10b38:	f1b8 0f0d 	cmp.w	r8, #13
   10b3c:	f000 8462 	beq.w	11404 <ull_conn_rx+0x938>
   10b40:	f1b8 0f11 	cmp.w	r8, #17
   10b44:	f000 84a2 	beq.w	1148c <ull_conn_rx+0x9c0>
		conn->llcp_terminate.reason_final =
   10b48:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10b4a:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   10b4c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   10b50:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10b52:	712b      	strb	r3, [r5, #4]
		return 0;
   10b54:	e00a      	b.n	10b6c <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   10b56:	b962      	cbnz	r2, 10b72 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   10b58:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   10b5c:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   10b5e:	bf44      	itt	mi
   10b60:	233d      	movmi	r3, #61	; 0x3d
   10b62:	f884 3143 	strbmi.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10b66:	2301      	movs	r3, #1
   10b68:	712b      	strb	r3, [r5, #4]
	return 0;
   10b6a:	2000      	movs	r0, #0
}
   10b6c:	b003      	add	sp, #12
   10b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   10b72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   10b76:	07d2      	lsls	r2, r2, #31
   10b78:	d5f7      	bpl.n	10b6a <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   10b7a:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10b7c:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   10b7e:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10b82:	712a      	strb	r2, [r5, #4]
}
   10b84:	b003      	add	sp, #12
   10b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   10b8a:	f105 021c 	add.w	r2, r5, #28
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   10b8e:	f1b8 0f19 	cmp.w	r8, #25
   10b92:	d81f      	bhi.n	10bd4 <ull_conn_rx+0x108>
   10b94:	e8df f018 	tbh	[pc, r8, lsl #1]
   10b98:	014f0184 	.word	0x014f0184
   10b9c:	001a00fb 	.word	0x001a00fb
   10ba0:	053b0534 	.word	0x053b0534
   10ba4:	02af03b5 	.word	0x02af03b5
   10ba8:	04fa02aa 	.word	0x04fa02aa
   10bac:	055a04b0 	.word	0x055a04b0
   10bb0:	043603e1 	.word	0x043603e1
   10bb4:	0285029a 	.word	0x0285029a
   10bb8:	047a01f3 	.word	0x047a01f3
   10bbc:	01450411 	.word	0x01450411
   10bc0:	010c010c 	.word	0x010c010c
   10bc4:	034d038a 	.word	0x034d038a
   10bc8:	02da0310 	.word	0x02da0310
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   10bcc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	db65      	blt.n	10ca0 <ull_conn_rx+0x1d4>
	if (conn->common.txn_lock) {
   10bd4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10bd8:	079f      	lsls	r7, r3, #30
   10bda:	d4c4      	bmi.n	10b66 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10bdc:	4873      	ldr	r0, [pc, #460]	; (10dac <ull_conn_rx+0x2e0>)
   10bde:	f7f9 fb7f 	bl	a2e0 <mem_acquire>
	if (!tx) {
   10be2:	2800      	cmp	r0, #0
   10be4:	f000 85eb 	beq.w	117be <ull_conn_rx+0xcf2>
	conn->common.txn_lock = 1U;
   10be8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10bec:	f043 0302 	orr.w	r3, r3, #2
   10bf0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bf4:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   10bf6:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bfa:	f043 0303 	orr.w	r3, r3, #3
   10bfe:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   10c00:	2302      	movs	r3, #2
   10c02:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   10c04:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10c08:	2307      	movs	r3, #7
   10c0a:	71c3      	strb	r3, [r0, #7]
	if (
   10c0c:	b1f2      	cbz	r2, 10c4c <ull_conn_rx+0x180>
	    !conn->llcp_enc.pause_tx &&
   10c0e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   10c12:	079e      	lsls	r6, r3, #30
   10c14:	d41a      	bmi.n	10c4c <ull_conn_rx+0x180>
	    !conn->llcp_phy.pause_tx &&
   10c16:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   10c1a:	07d9      	lsls	r1, r3, #31
   10c1c:	d416      	bmi.n	10c4c <ull_conn_rx+0x180>
		if (conn->tx_head == conn->tx_data) {
   10c1e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   10c22:	429a      	cmp	r2, r3
   10c24:	f000 85e8 	beq.w	117f8 <ull_conn_rx+0xd2c>
		} else if (!conn->tx_ctrl) {
   10c28:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	f000 8631 	beq.w	11894 <ull_conn_rx+0xdc8>
	tx->next = conn->tx_ctrl_last->next;
   10c32:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   10c36:	6813      	ldr	r3, [r2, #0]
   10c38:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10c3a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   10c3c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   10c3e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10c42:	2a00      	cmp	r2, #0
   10c44:	d18f      	bne.n	10b66 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   10c46:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10c4a:	e78c      	b.n	10b66 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   10c4c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10c50:	2b00      	cmp	r3, #0
   10c52:	f000 85aa 	beq.w	117aa <ull_conn_rx+0xcde>
	tx->next = conn->tx_ctrl_last->next;
   10c56:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10c5a:	681a      	ldr	r2, [r3, #0]
   10c5c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10c5e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10c60:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   10c62:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10c66:	2a00      	cmp	r2, #0
   10c68:	f47f af7d 	bne.w	10b66 <ull_conn_rx+0x9a>
   10c6c:	e7eb      	b.n	10c46 <ull_conn_rx+0x17a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10c6e:	683b      	ldr	r3, [r7, #0]
   10c70:	2201      	movs	r2, #1
		return 0;
   10c72:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10c74:	711a      	strb	r2, [r3, #4]
}
   10c76:	b003      	add	sp, #12
   10c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10c7c:	2201      	movs	r2, #1
   10c7e:	711a      	strb	r2, [r3, #4]
		return 0;
   10c80:	2000      	movs	r0, #0
}
   10c82:	4770      	bx	lr
	       (conn->lll.role &&
   10c84:	f01c 0f04 	tst.w	ip, #4
   10c88:	d079      	beq.n	10d7e <ull_conn_rx+0x2b2>
		 (conn->llcp_enc.refresh &&
   10c8a:	f1b8 0f02 	cmp.w	r8, #2
   10c8e:	d07e      	beq.n	10d8e <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10c90:	f1b8 0f0b 	cmp.w	r8, #11
   10c94:	f000 85ce 	beq.w	11834 <ull_conn_rx+0xd68>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10c98:	f1b8 0f03 	cmp.w	r8, #3
   10c9c:	f47f af48 	bne.w	10b30 <ull_conn_rx+0x64>
		if (!conn->lll.role ||
   10ca0:	7f6b      	ldrb	r3, [r5, #29]
   10ca2:	2b17      	cmp	r3, #23
   10ca4:	d196      	bne.n	10bd4 <ull_conn_rx+0x108>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   10ca6:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   10caa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10cae:	1a9b      	subs	r3, r3, r2
   10cb0:	f003 0303 	and.w	r3, r3, #3
   10cb4:	2b02      	cmp	r3, #2
   10cb6:	f001 81c8 	beq.w	1204a <ull_conn_rx+0x157e>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   10cba:	2208      	movs	r2, #8
   10cbc:	f105 0120 	add.w	r1, r5, #32
   10cc0:	f204 1069 	addw	r0, r4, #361	; 0x169
   10cc4:	f00c fda0 	bl	1d808 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   10cc8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   10ccc:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   10cd0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in master prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   10cd4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   10cd8:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10cdc:	6839      	ldr	r1, [r7, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   10cde:	2301      	movs	r3, #1
   10ce0:	f363 0201 	bfi	r2, r3, #0, #2
   10ce4:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10ce8:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   10cea:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   10cee:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   10cf0:	3b02      	subs	r3, #2
   10cf2:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from master stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   10cf6:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   10cf8:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   10cfc:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   10d00:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   10d04:	f00c fd80 	bl	1d808 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   10d08:	2204      	movs	r2, #4
   10d0a:	f105 0132 	add.w	r1, r5, #50	; 0x32
   10d0e:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10d12:	f00c fd79 	bl	1d808 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   10d16:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   10d1a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   10d1e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   10d22:	f043 0301 	orr.w	r3, r3, #1
   10d26:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   10d2a:	2000      	movs	r0, #0

		break;
   10d2c:	e71e      	b.n	10b6c <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   10d2e:	f1b8 0f02 	cmp.w	r8, #2
   10d32:	d02c      	beq.n	10d8e <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10d34:	f1b8 0f0b 	cmp.w	r8, #11
   10d38:	f000 8545 	beq.w	117c6 <ull_conn_rx+0xcfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10d3c:	f1b8 0f04 	cmp.w	r8, #4
   10d40:	f47f aef2 	bne.w	10b28 <ull_conn_rx+0x5c>
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		if (conn->lll.role ||
   10d44:	7f6b      	ldrb	r3, [r5, #29]
   10d46:	2b0d      	cmp	r3, #13
   10d48:	f47f af44 	bne.w	10bd4 <ull_conn_rx+0x108>
		    PDU_DATA_LLCTRL_LEN(enc_rsp) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		/* things sent by slave stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[8],
   10d4c:	2208      	movs	r2, #8
   10d4e:	f105 0120 	add.w	r1, r5, #32
   10d52:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   10d56:	f00c fd57 	bl	1d808 <memcpy>
		       &pdu_rx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
   10d5a:	2204      	movs	r2, #4
   10d5c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   10d60:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10d64:	f00c fd50 	bl	1d808 <memcpy>
		       &pdu_rx->llctrl.enc_rsp.ivs[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   10d68:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10d6c:	683a      	ldr	r2, [r7, #0]
		conn->llcp_enc.pause_rx = 1U;
   10d6e:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10d72:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   10d74:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   10d78:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10d7a:	7111      	strb	r1, [r2, #4]

		break;
   10d7c:	e6f6      	b.n	10b6c <ull_conn_rx+0xa0>
		((!conn->llcp_enc.refresh &&
   10d7e:	f1b8 0f07 	cmp.w	r8, #7
   10d82:	f000 81b8 	beq.w	110f6 <ull_conn_rx+0x62a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   10d86:	f1b8 0f02 	cmp.w	r8, #2
   10d8a:	f47f aed1 	bne.w	10b30 <ull_conn_rx+0x64>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   10d8e:	7f6b      	ldrb	r3, [r5, #29]
   10d90:	2b02      	cmp	r3, #2
   10d92:	f47f af1f 	bne.w	10bd4 <ull_conn_rx+0x108>
	conn->llcp_terminate.reason_final =
   10d96:	f895 2020 	ldrb.w	r2, [r5, #32]
   10d9a:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10d9e:	2301      	movs	r3, #1
	int nack = 0;
   10da0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10da2:	712b      	strb	r3, [r5, #4]
}
   10da4:	e6e2      	b.n	10b6c <ull_conn_rx+0xa0>
   10da6:	bf00      	nop
   10da8:	20000de0 	.word	0x20000de0
   10dac:	20001edc 	.word	0x20001edc
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   10db0:	7f6b      	ldrb	r3, [r5, #29]
   10db2:	2b09      	cmp	r3, #9
   10db4:	f47f af0e 	bne.w	10bd4 <ull_conn_rx+0x108>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   10db8:	f1b8 0f14 	cmp.w	r8, #20
   10dbc:	f000 8574 	beq.w	118a8 <ull_conn_rx+0xddc>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   10dc0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   10dc4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   10dc8:	4293      	cmp	r3, r2
   10dca:	f001 8158 	beq.w	1207e <ull_conn_rx+0x15b2>
	eff_rx_octets = conn->lll.max_rx_octets;
   10dce:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   10dd2:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   10dd6:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   10dda:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   10dde:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   10de2:	2300      	movs	r3, #0
	       tx) ||
   10de4:	f001 0107 	and.w	r1, r1, #7
   10de8:	2902      	cmp	r1, #2
   10dea:	f000 857e 	beq.w	118ea <ull_conn_rx+0xe1e>
   10dee:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   10df2:	f1b8 0f15 	cmp.w	r8, #21
   10df6:	f43f aeb8 	beq.w	10b6a <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   10dfa:	4618      	mov	r0, r3
   10dfc:	49d1      	ldr	r1, [pc, #836]	; (11144 <ull_conn_rx+0x678>)
   10dfe:	f7f9 fa89 	bl	a314 <mem_release>
			if (conn->llcp_length.state ==
   10e02:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   10e06:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   10e0a:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   10e0e:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   10e12:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   10e14:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   10e18:	f47f aea7 	bne.w	10b6a <ull_conn_rx+0x9e>
				return -EBUSY;
   10e1c:	f06f 000f 	mvn.w	r0, #15
   10e20:	e6a4      	b.n	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   10e22:	7f6a      	ldrb	r2, [r5, #29]
   10e24:	2a01      	cmp	r2, #1
   10e26:	f47f aed5 	bne.w	10bd4 <ull_conn_rx+0x108>
		conn->procedure_expire = 0U;
   10e2a:	2300      	movs	r3, #0
   10e2c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   10e30:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10e32:	712a      	strb	r2, [r5, #4]
		break;
   10e34:	e69a      	b.n	10b6c <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   10e36:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	f6bf aeca 	bge.w	10bd4 <ull_conn_rx+0x108>
   10e40:	7f6b      	ldrb	r3, [r5, #29]
   10e42:	2b08      	cmp	r3, #8
   10e44:	f47f aec6 	bne.w	10bd4 <ull_conn_rx+0x108>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   10e48:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   10e4c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10e4e:	1af3      	subs	r3, r6, r3
   10e50:	041f      	lsls	r7, r3, #16
   10e52:	f101 805d 	bmi.w	11f10 <ull_conn_rx+0x1444>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10e56:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10e5a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   10e5e:	1a9b      	subs	r3, r3, r2
   10e60:	f003 0303 	and.w	r3, r3, #3
   10e64:	2b02      	cmp	r3, #2
   10e66:	f001 805d 	beq.w	11f24 <ull_conn_rx+0x1458>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   10e6a:	2205      	movs	r2, #5
   10e6c:	f105 0120 	add.w	r1, r5, #32
   10e70:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   10e74:	f00c fcc8 	bl	1d808 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   10e78:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   10e7c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   10e80:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   10e84:	f36f 0200 	bfc	r2, #0, #1
   10e88:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   10e8c:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   10e8e:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10e90:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   10e92:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   10e96:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   10e9a:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10e9c:	712a      	strb	r2, [r5, #4]
		if (err) {
   10e9e:	e665      	b.n	10b6c <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   10ea0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	f6bf ae95 	bge.w	10bd4 <ull_conn_rx+0x108>
   10eaa:	7f6b      	ldrb	r3, [r5, #29]
   10eac:	2b0c      	cmp	r3, #12
   10eae:	f47f ae91 	bne.w	10bd4 <ull_conn_rx+0x108>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   10eb2:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   10eb6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10eb8:	1acb      	subs	r3, r1, r3
   10eba:	041b      	lsls	r3, r3, #16
   10ebc:	f101 8028 	bmi.w	11f10 <ull_conn_rx+0x1444>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10ec0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10ec4:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   10ec8:	1a9b      	subs	r3, r3, r2
   10eca:	f003 0303 	and.w	r3, r3, #3
   10ece:	2b02      	cmp	r3, #2
   10ed0:	f001 8028 	beq.w	11f24 <ull_conn_rx+0x1458>
	if (!conn_upd_curr) {
   10ed4:	4b9c      	ldr	r3, [pc, #624]	; (11148 <ull_conn_rx+0x67c>)
   10ed6:	681a      	ldr	r2, [r3, #0]
   10ed8:	2a00      	cmp	r2, #0
   10eda:	f001 807f 	beq.w	11fdc <ull_conn_rx+0x1510>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   10ede:	f895 3020 	ldrb.w	r3, [r5, #32]
   10ee2:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   10ee6:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   10eea:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10eee:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   10ef2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   10ef6:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   10efa:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   10efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   10f02:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   10f06:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   10f0a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   10f0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   10f12:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10f16:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   10f1a:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   10f1e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   10f22:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10f26:	f023 030f 	bic.w	r3, r3, #15
   10f2a:	f043 0308 	orr.w	r3, r3, #8
   10f2e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   10f32:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   10f36:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   10f3a:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   10f3e:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   10f40:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   10f44:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   10f48:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   10f4a:	683a      	ldr	r2, [r7, #0]
   10f4c:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   10f4e:	683a      	ldr	r2, [r7, #0]
   10f50:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   10f54:	2300      	movs	r3, #0
   10f56:	603b      	str	r3, [r7, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10f58:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   10f5c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   10f60:	4293      	cmp	r3, r2
   10f62:	d007      	beq.n	10f74 <ull_conn_rx+0x4a8>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   10f64:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10f68:	f003 0307 	and.w	r3, r3, #7
   10f6c:	2b04      	cmp	r3, #4
   10f6e:	d101      	bne.n	10f74 <ull_conn_rx+0x4a8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   10f70:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   10f74:	2300      	movs	r3, #0
   10f76:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   10f7a:	4618      	mov	r0, r3
		break;
   10f7c:	e5f6      	b.n	10b6c <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   10f7e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10f82:	2b00      	cmp	r3, #0
   10f84:	f6ff ae26 	blt.w	10bd4 <ull_conn_rx+0x108>
   10f88:	7f6b      	ldrb	r3, [r5, #29]
   10f8a:	2b18      	cmp	r3, #24
   10f8c:	f47f ae22 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (!conn->lll.role &&
   10f90:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   10f94:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   10f98:	429a      	cmp	r2, r3
   10f9a:	f43f ade4 	beq.w	10b66 <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   10f9e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		     conn->llcp_conn_param.ack) &&
   10fa2:	f003 0307 	and.w	r3, r3, #7
   10fa6:	2b04      	cmp	r3, #4
   10fa8:	f47f addd 	bne.w	10b66 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   10fac:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   10fb0:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   10fb4:	2b05      	cmp	r3, #5
   10fb6:	f240 875c 	bls.w	11e72 <ull_conn_rx+0x13a6>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   10fba:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   10fbc:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   10fbe:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   10fc2:	f200 8756 	bhi.w	11e72 <ull_conn_rx+0x13a6>
			    (interval_max > 3200) ||
   10fc6:	428b      	cmp	r3, r1
   10fc8:	f200 8753 	bhi.w	11e72 <ull_conn_rx+0x13a6>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   10fcc:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   10fce:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   10fd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   10fd4:	f080 874d 	bcs.w	11e72 <ull_conn_rx+0x13a6>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   10fd8:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   10fda:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   10fde:	f1ae 020a 	sub.w	r2, lr, #10
   10fe2:	f640 4876 	movw	r8, #3190	; 0xc76
   10fe6:	b292      	uxth	r2, r2
   10fe8:	4542      	cmp	r2, r8
   10fea:	f200 8742 	bhi.w	11e72 <ull_conn_rx+0x13a6>
			     ((latency + 1) * interval_max)) ||
   10fee:	3301      	adds	r3, #1
   10ff0:	b29b      	uxth	r3, r3
   10ff2:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   10ff6:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   10ffa:	f080 873a 	bcs.w	11e72 <ull_conn_rx+0x13a6>
			     ((latency + 1) * interval_max)) ||
   10ffe:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   11002:	4291      	cmp	r1, r2
   11004:	f0c0 8735 	bcc.w	11e72 <ull_conn_rx+0x13a6>
			conn->llcp_conn_param.preferred_periodicity =
   11008:	f884 2190 	strb.w	r2, [r4, #400]	; 0x190
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1100c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   11010:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   11014:	2301      	movs	r3, #1
   11016:	f363 0202 	bfi	r2, r3, #0, #3
			conn->procedure_expire = 0U;
   1101a:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1101c:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   11020:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   11024:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->procedure_expire = 0U;
   11028:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1102c:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   11030:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   11034:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11038:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   1103c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   11040:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   11044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   11048:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   1104c:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   11050:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   11054:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   11058:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   1105c:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   11060:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   11064:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   11068:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   1106c:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   11070:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   11074:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   11078:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   1107c:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   11080:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   11084:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   11088:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   1108c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   11090:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   11094:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset5);
   11098:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   1109c:	f8a4 319e 	strh.w	r3, [r4, #414]	; 0x19e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110a0:	e561      	b.n	10b66 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   110a2:	7f6b      	ldrb	r3, [r5, #29]
   110a4:	2b18      	cmp	r3, #24
   110a6:	f47f ad95 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   110aa:	4e27      	ldr	r6, [pc, #156]	; (11148 <ull_conn_rx+0x67c>)
   110ac:	6833      	ldr	r3, [r6, #0]
   110ae:	2b00      	cmp	r3, #0
   110b0:	f000 83c5 	beq.w	1183e <ull_conn_rx+0xd72>
   110b4:	429c      	cmp	r4, r3
   110b6:	f000 83c2 	beq.w	1183e <ull_conn_rx+0xd72>
			nack = reject_ext_ind_send(conn, *rx,
   110ba:	2320      	movs	r3, #32
   110bc:	220f      	movs	r2, #15
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   110be:	4629      	mov	r1, r5
   110c0:	4620      	mov	r0, r4
}
   110c2:	b003      	add	sp, #12
   110c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   110c8:	f7fe be2c 	b.w	fd24 <reject_ext_ind_send>
		if (conn->lll.role ||
   110cc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   110d0:	2b00      	cmp	r3, #0
   110d2:	f6ff ad7f 	blt.w	10bd4 <ull_conn_rx+0x108>
   110d6:	7f6b      	ldrb	r3, [r5, #29]
   110d8:	2b09      	cmp	r3, #9
   110da:	f47f ad7b 	bne.w	10bd4 <ull_conn_rx+0x108>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   110de:	4629      	mov	r1, r5
   110e0:	4620      	mov	r0, r4
}
   110e2:	b003      	add	sp, #12
   110e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   110e8:	f7fe bd9c 	b.w	fc24 <feature_rsp_send>
		if (!conn->lll.role ||
   110ec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   110f0:	2b00      	cmp	r3, #0
   110f2:	dbf0      	blt.n	110d6 <ull_conn_rx+0x60a>
   110f4:	e56e      	b.n	10bd4 <ull_conn_rx+0x108>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   110f6:	7f6b      	ldrb	r3, [r5, #29]
   110f8:	2b02      	cmp	r3, #2
   110fa:	f47f ad6b 	bne.w	10bd4 <ull_conn_rx+0x108>
		} else if ((conn->llcp_conn_param.ack !=
   110fe:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   11102:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   11106:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   11108:	f895 2020 	ldrb.w	r2, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1110c:	d002      	beq.n	11114 <ull_conn_rx+0x648>
			    conn->llcp_conn_param.req) &&
   1110e:	2a0f      	cmp	r2, #15
   11110:	f000 8597 	beq.w	11c42 <ull_conn_rx+0x1176>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   11114:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   11118:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   1111c:	4299      	cmp	r1, r3
   1111e:	d002      	beq.n	11126 <ull_conn_rx+0x65a>
   11120:	2a14      	cmp	r2, #20
   11122:	f000 8614 	beq.w	11d4e <ull_conn_rx+0x1282>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   11126:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1112a:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1112e:	428b      	cmp	r3, r1
   11130:	d002      	beq.n	11138 <ull_conn_rx+0x66c>
   11132:	2a16      	cmp	r2, #22
   11134:	f000 86fa 	beq.w	11f2c <ull_conn_rx+0x1460>
			switch (llctrl->unknown_rsp.type) {
   11138:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1113a:	bf04      	itt	eq
   1113c:	2301      	moveq	r3, #1
   1113e:	712b      	strbeq	r3, [r5, #4]
				break;
   11140:	e718      	b.n	10f74 <ull_conn_rx+0x4a8>
   11142:	bf00      	nop
   11144:	20001edc 	.word	0x20001edc
   11148:	20001e48 	.word	0x20001e48
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   1114c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11150:	2b00      	cmp	r3, #0
   11152:	f6ff ad3f 	blt.w	10bd4 <ull_conn_rx+0x108>
   11156:	7f6b      	ldrb	r3, [r5, #29]
   11158:	2b03      	cmp	r3, #3
   1115a:	f47f ad3b 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   1115e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   11162:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   11166:	f895 2020 	ldrb.w	r2, [r5, #32]
   1116a:	430b      	orrs	r3, r1
   1116c:	f003 0307 	and.w	r3, r3, #7
   11170:	4213      	tst	r3, r2
   11172:	f43f acfa 	beq.w	10b6a <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   11176:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1117a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1117e:	1a9b      	subs	r3, r3, r2
   11180:	f003 0303 	and.w	r3, r3, #3
   11184:	2b02      	cmp	r3, #2
   11186:	f43f acf0 	beq.w	10b6a <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   1118a:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1118e:	f003 ff6d 	bl	1506c <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   11192:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.chan_map.initiate = 1U;
   11196:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->llcp_type = LLCP_CHAN_MAP;
   1119a:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   1119c:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   1119e:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   111a2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   111a6:	683a      	ldr	r2, [r7, #0]
			conn->llcp.chan_map.initiate = 1U;
   111a8:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   111ac:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   111ae:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	int nack = 0;
   111b2:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   111b4:	7111      	strb	r1, [r2, #4]

		break;
   111b6:	e4d9      	b.n	10b6c <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   111b8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   111bc:	2b00      	cmp	r3, #0
   111be:	f6bf ad09 	bge.w	10bd4 <ull_conn_rx+0x108>
   111c2:	7f6b      	ldrb	r3, [r5, #29]
   111c4:	2b05      	cmp	r3, #5
   111c6:	f47f ad05 	bne.w	10bd4 <ull_conn_rx+0x108>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   111ca:	f895 1020 	ldrb.w	r1, [r5, #32]
   111ce:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   111d2:	ea41 0003 	orr.w	r0, r1, r3
   111d6:	f010 0007 	ands.w	r0, r0, #7
   111da:	f040 85c2 	bne.w	11d62 <ull_conn_rx+0x1296>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   111de:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   111e2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   111e6:	4293      	cmp	r3, r2
   111e8:	f43f acbd 	beq.w	10b66 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   111ec:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   111f0:	f003 0303 	and.w	r3, r3, #3
   111f4:	2b02      	cmp	r3, #2
   111f6:	f47f acb6 	bne.w	10b66 <ull_conn_rx+0x9a>
		conn->llcp_phy.pause_tx = 0U;
   111fa:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   111fe:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11202:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   11206:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   1120a:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1120e:	4611      	mov	r1, r2
   11210:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11214:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   11218:	f013 0304 	ands.w	r3, r3, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1121c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   11220:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   11224:	f040 87df 	bne.w	121e6 <ull_conn_rx+0x171a>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11228:	683a      	ldr	r2, [r7, #0]
   1122a:	2101      	movs	r1, #1
   1122c:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   1122e:	4618      	mov	r0, r3
   11230:	e49c      	b.n	10b6c <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   11232:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11236:	2b00      	cmp	r3, #0
   11238:	f6ff accc 	blt.w	10bd4 <ull_conn_rx+0x108>
   1123c:	7f6b      	ldrb	r3, [r5, #29]
   1123e:	2b03      	cmp	r3, #3
   11240:	f47f acc8 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (!conn->lll.role &&
   11244:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   11248:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   1124c:	429a      	cmp	r2, r3
   1124e:	f43f ac8a 	beq.w	10b66 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   11252:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11256:	f002 0303 	and.w	r3, r2, #3
   1125a:	2b02      	cmp	r3, #2
   1125c:	f47f ac83 	bne.w	10b66 <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   11260:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   11264:	f3c2 0182 	ubfx	r1, r2, #2, #3
   11268:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   1126a:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1126e:	009b      	lsls	r3, r3, #2
   11270:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   11274:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   11278:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1127c:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   11280:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11284:	d002      	beq.n	1128c <ull_conn_rx+0x7c0>
   11286:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1128a:	d105      	bne.n	11298 <ull_conn_rx+0x7cc>
				conn->llcp_phy.tx = 0;
   1128c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11290:	f003 0303 	and.w	r3, r3, #3
   11294:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_phy.pause_tx = 1U;
   11298:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   1129c:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   1129e:	f043 0301 	orr.w	r3, r3, #1
   112a2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   112a6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   112aa:	e45c      	b.n	10b66 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   112ac:	7f6b      	ldrb	r3, [r5, #29]
   112ae:	2b03      	cmp	r3, #3
   112b0:	f47f ac90 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (!conn->lll.role) {
   112b4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   112b8:	2b00      	cmp	r3, #0
   112ba:	f2c0 8407 	blt.w	11acc <ull_conn_rx+0x1000>
			if ((conn->llcp_phy.ack !=
   112be:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   112c2:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   112c6:	4291      	cmp	r1, r2
   112c8:	d007      	beq.n	112da <ull_conn_rx+0x80e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   112ca:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   112ce:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   112d2:	3b01      	subs	r3, #1
   112d4:	2b02      	cmp	r3, #2
   112d6:	f240 85c9 	bls.w	11e6c <ull_conn_rx+0x13a0>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   112da:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   112de:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   112e2:	1a1b      	subs	r3, r3, r0
   112e4:	f003 0303 	and.w	r3, r3, #3
   112e8:	2b02      	cmp	r3, #2
   112ea:	f000 84f4 	beq.w	11cd6 <ull_conn_rx+0x120a>
				     LLCP_ENCRYPTION)) ||
   112ee:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
   112f2:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   112f6:	4298      	cmp	r0, r3
   112f8:	f000 85c7 	beq.w	11e8a <ull_conn_rx+0x13be>
				nack = reject_ext_ind_send(conn, *rx,
   112fc:	232a      	movs	r3, #42	; 0x2a
   112fe:	2216      	movs	r2, #22
   11300:	e6dd      	b.n	110be <ull_conn_rx+0x5f2>
		if ((conn->llcp_req == conn->llcp_ack) ||
   11302:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11306:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1130a:	429a      	cmp	r2, r3
   1130c:	f43f ac62 	beq.w	10bd4 <ull_conn_rx+0x108>
   11310:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   11314:	2a03      	cmp	r2, #3
   11316:	f47f ac5d 	bne.w	10bd4 <ull_conn_rx+0x108>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1131a:	7f6a      	ldrb	r2, [r5, #29]
   1131c:	2a01      	cmp	r2, #1
   1131e:	f47f ac59 	bne.w	10bd4 <ull_conn_rx+0x108>
		if (conn->lll.role) {
   11322:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   11326:	2a00      	cmp	r2, #0
   11328:	f2c0 85a7 	blt.w	11e7a <ull_conn_rx+0x13ae>
			conn->llcp_enc.pause_rx = 0U;
   1132c:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   11330:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   11334:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   11336:	f02c 0c03 	bic.w	ip, ip, #3
   1133a:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   1133e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   11342:	f01c 0f04 	tst.w	ip, #4
   11346:	f43f ac10 	beq.w	10b6a <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   1134a:	f36f 0c82 	bfc	ip, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1134e:	2317      	movs	r3, #23
			conn->llcp_enc.refresh = 0U;
   11350:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
	int nack = 0;
   11354:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11356:	712b      	strb	r3, [r5, #4]
   11358:	e408      	b.n	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   1135a:	7f6e      	ldrb	r6, [r5, #29]
   1135c:	2e06      	cmp	r6, #6
   1135e:	f47f ac39 	bne.w	10bd4 <ull_conn_rx+0x108>
	if (!conn->llcp_version.tx) {
   11362:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   11366:	07da      	lsls	r2, r3, #31
   11368:	f140 84c0 	bpl.w	11cec <ull_conn_rx+0x1220>
	} else if (!conn->llcp_version.rx) {
   1136c:	f013 0302 	ands.w	r3, r3, #2
   11370:	f47f abf9 	bne.w	10b66 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   11374:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   11378:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   1137c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   11380:	f895 3020 	ldrb.w	r3, [r5, #32]
   11384:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11388:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1138c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   11390:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11394:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11398:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   1139c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   113a0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   113a4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   113a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   113ac:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   113b0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   113b4:	2000      	movs	r0, #0
   113b6:	f7ff bbd9 	b.w	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   113ba:	7f6f      	ldrb	r7, [r5, #29]
   113bc:	2f01      	cmp	r7, #1
   113be:	f47f ac09 	bne.w	10bd4 <ull_conn_rx+0x108>
	if (conn->common.txn_lock) {
   113c2:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   113c6:	f010 0602 	ands.w	r6, r0, #2
   113ca:	f040 848b 	bne.w	11ce4 <ull_conn_rx+0x1218>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   113ce:	48d1      	ldr	r0, [pc, #836]	; (11714 <ull_conn_rx+0xc48>)
   113d0:	f7f8 ff86 	bl	a2e0 <mem_acquire>
	if (!tx) {
   113d4:	4601      	mov	r1, r0
   113d6:	2800      	cmp	r0, #0
   113d8:	f000 81f1 	beq.w	117be <ull_conn_rx+0xcf2>
	conn->common.txn_lock = 1U;
   113dc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   113e0:	f043 0302 	orr.w	r3, r3, #2
   113e4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   113e8:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   113ea:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   113ec:	f043 0303 	orr.w	r3, r3, #3
   113f0:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   113f2:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   113f4:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   113f6:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   113f8:	f7fe faf0 	bl	f9dc <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   113fc:	712f      	strb	r7, [r5, #4]
	return 0;
   113fe:	4630      	mov	r0, r6
   11400:	f7ff bbb4 	b.w	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   11404:	7f6b      	ldrb	r3, [r5, #29]
   11406:	2b02      	cmp	r3, #2
   11408:	f47f abe4 	bne.w	10bd4 <ull_conn_rx+0x108>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1140c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11410:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   11414:	4293      	cmp	r3, r2
   11416:	d004      	beq.n	11422 <ull_conn_rx+0x956>
   11418:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1141c:	2b03      	cmp	r3, #3
   1141e:	f000 85a9 	beq.w	11f74 <ull_conn_rx+0x14a8>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11422:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   11426:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1142a:	4293      	cmp	r3, r2
   1142c:	f000 83cf 	beq.w	11bce <ull_conn_rx+0x1102>
		rej_ext_ind->error_code = rej_ind->error_code;
   11430:	f895 1020 	ldrb.w	r1, [r5, #32]
   11434:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11438:	2923      	cmp	r1, #35	; 0x23
   1143a:	d012      	beq.n	11462 <ull_conn_rx+0x996>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1143c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   11440:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11444:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   11448:	f36f 0200 	bfc	r2, #0, #1
   1144c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   11450:	2200      	movs	r2, #0
   11452:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11456:	f3c3 0202 	ubfx	r2, r3, #0, #3
   1145a:	f362 1306 	bfi	r3, r2, #4, #3
   1145e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   11462:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   11466:	075b      	lsls	r3, r3, #29
   11468:	f57f ab7d 	bpl.w	10b66 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1146c:	231a      	movs	r3, #26
   1146e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   11470:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   11472:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   11476:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1147a:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   1147c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   11480:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   11484:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   11486:	77ab      	strb	r3, [r5, #30]
	if (err) {
   11488:	f7ff bb70 	b.w	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1148c:	7f6b      	ldrb	r3, [r5, #29]
   1148e:	2b03      	cmp	r3, #3
   11490:	f47f aba0 	bne.w	10bd4 <ull_conn_rx+0x108>
	switch (rej_ext_ind->reject_opcode) {
   11494:	f895 3020 	ldrb.w	r3, [r5, #32]
   11498:	3b03      	subs	r3, #3
   1149a:	2b13      	cmp	r3, #19
   1149c:	f63f ab63 	bhi.w	10b66 <ull_conn_rx+0x9a>
   114a0:	a201      	add	r2, pc, #4	; (adr r2, 114a8 <ull_conn_rx+0x9dc>)
   114a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   114a6:	bf00      	nop
   114a8:	0001171d 	.word	0x0001171d
   114ac:	00010b67 	.word	0x00010b67
   114b0:	00010b67 	.word	0x00010b67
   114b4:	00010b67 	.word	0x00010b67
   114b8:	00010b67 	.word	0x00010b67
   114bc:	00010b67 	.word	0x00010b67
   114c0:	00010b67 	.word	0x00010b67
   114c4:	00010b67 	.word	0x00010b67
   114c8:	00010b67 	.word	0x00010b67
   114cc:	00010b67 	.word	0x00010b67
   114d0:	00010b67 	.word	0x00010b67
   114d4:	00010b67 	.word	0x00010b67
   114d8:	000116ad 	.word	0x000116ad
   114dc:	00010b67 	.word	0x00010b67
   114e0:	00010b67 	.word	0x00010b67
   114e4:	00010b67 	.word	0x00010b67
   114e8:	00010b67 	.word	0x00010b67
   114ec:	0001166f 	.word	0x0001166f
   114f0:	00010b67 	.word	0x00010b67
   114f4:	0001175d 	.word	0x0001175d
		if (!conn->lll.role ||
   114f8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   114fc:	2b00      	cmp	r3, #0
   114fe:	f6bf ab69 	bge.w	10bd4 <ull_conn_rx+0x108>
   11502:	7f6e      	ldrb	r6, [r5, #29]
   11504:	2e01      	cmp	r6, #1
   11506:	f47f ab65 	bne.w	10bd4 <ull_conn_rx+0x108>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1150a:	4882      	ldr	r0, [pc, #520]	; (11714 <ull_conn_rx+0xc48>)
   1150c:	f7f8 fee8 	bl	a2e0 <mem_acquire>
		if (!tx) {
   11510:	2800      	cmp	r0, #0
   11512:	f000 8154 	beq.w	117be <ull_conn_rx+0xcf2>
	conn->llcp_enc.pause_rx = 1U;
   11516:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   1151a:	f022 0205 	bic.w	r2, r2, #5
   1151e:	f042 0205 	orr.w	r2, r2, #5
   11522:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   11526:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   1152a:	f36f 02c3 	bfc	r2, #3, #1
   1152e:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11532:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11534:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11536:	f042 0203 	orr.w	r2, r2, #3
   1153a:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   1153c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   11540:	210b      	movs	r1, #11
   11542:	71c1      	strb	r1, [r0, #7]
	if (
   11544:	2a00      	cmp	r2, #0
   11546:	f000 816a 	beq.w	1181e <ull_conn_rx+0xd52>
	    !conn->llcp_enc.pause_tx &&
   1154a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1154e:	078e      	lsls	r6, r1, #30
   11550:	f100 8165 	bmi.w	1181e <ull_conn_rx+0xd52>
	    !conn->llcp_phy.pause_tx &&
   11554:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   11558:	07c9      	lsls	r1, r1, #31
   1155a:	f100 8160 	bmi.w	1181e <ull_conn_rx+0xd52>
		if (conn->tx_head == conn->tx_data) {
   1155e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11562:	428a      	cmp	r2, r1
   11564:	f000 8630 	beq.w	121c8 <ull_conn_rx+0x16fc>
		} else if (!conn->tx_ctrl) {
   11568:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1156c:	2900      	cmp	r1, #0
   1156e:	f000 8656 	beq.w	1221e <ull_conn_rx+0x1752>
	tx->next = conn->tx_ctrl_last->next;
   11572:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   11576:	6811      	ldr	r1, [r2, #0]
   11578:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1157a:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1157c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11580:	6802      	ldr	r2, [r0, #0]
   11582:	2a00      	cmp	r2, #0
   11584:	f47f aaef 	bne.w	10b66 <ull_conn_rx+0x9a>
   11588:	f7ff bb5d 	b.w	10c46 <ull_conn_rx+0x17a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1158c:	7f6b      	ldrb	r3, [r5, #29]
   1158e:	2b09      	cmp	r3, #9
   11590:	f47f ab20 	bne.w	10bd4 <ull_conn_rx+0x108>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11594:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11596:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   11598:	495f      	ldr	r1, [pc, #380]	; (11718 <ull_conn_rx+0xc4c>)
   1159a:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1159e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   115a2:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   115a4:	400b      	ands	r3, r1
   115a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   115aa:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   115ae:	4013      	ands	r3, r2
   115b0:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   115b4:	6a2e      	ldr	r6, [r5, #32]
   115b6:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   115b8:	f7fc f87a 	bl	d6b0 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   115bc:	4a56      	ldr	r2, [pc, #344]	; (11718 <ull_conn_rx+0xc4c>)
	conn->common.fex_valid = 1U;
   115be:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   115c2:	4332      	orrs	r2, r6
	feat_result = feat_to_keep & feat_octet0;
   115c4:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   115c6:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   115ca:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
	conn->common.fex_valid = 1U;
   115ce:	f043 0301 	orr.w	r3, r3, #1
   115d2:	4332      	orrs	r2, r6
   115d4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   115d8:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	conn->llcp_feature.ack = conn->llcp_feature.req;
   115dc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   115e0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
   115e4:	f005 050f 	and.w	r5, r5, #15
	feat_result &= 0xFF;
   115e8:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   115ea:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   115ee:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   115f2:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   115f6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   115fa:	4618      	mov	r0, r3
}
   115fc:	f7ff bab6 	b.w	10b6c <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   11600:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11604:	2b00      	cmp	r3, #0
   11606:	f6bf ab9d 	bge.w	10d44 <ull_conn_rx+0x278>
   1160a:	f7ff bae3 	b.w	10bd4 <ull_conn_rx+0x108>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   1160e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11612:	2b00      	cmp	r3, #0
   11614:	f6ff aade 	blt.w	10bd4 <ull_conn_rx+0x108>
   11618:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1161c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   11620:	429a      	cmp	r2, r3
   11622:	f43f aad7 	beq.w	10bd4 <ull_conn_rx+0x108>
   11626:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1162a:	2b03      	cmp	r3, #3
   1162c:	f47f aad2 	bne.w	10bd4 <ull_conn_rx+0x108>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   11630:	7f6b      	ldrb	r3, [r5, #29]
   11632:	2b01      	cmp	r3, #1
   11634:	f47f aace 	bne.w	10bd4 <ull_conn_rx+0x108>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11638:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   1163c:	f36f 0201 	bfc	r2, #0, #2
   11640:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	int nack = 0;
   11644:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11646:	712b      	strb	r3, [r5, #4]
		break;
   11648:	f7ff ba90 	b.w	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1164c:	7f6b      	ldrb	r3, [r5, #29]
   1164e:	2b01      	cmp	r3, #1
   11650:	f47f aac0 	bne.w	10bd4 <ull_conn_rx+0x108>
	} else if (!conn->lll.role) {
   11654:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11658:	2b00      	cmp	r3, #0
   1165a:	f280 80b8 	bge.w	117ce <ull_conn_rx+0xd02>
		conn->lll.enc_tx = 0;
   1165e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   11662:	f36f 1304 	bfc	r3, #4, #1
   11666:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   1166a:	f7ff ba7c 	b.w	10b66 <ull_conn_rx+0x9a>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1166e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   11672:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   11676:	4293      	cmp	r3, r2
   11678:	f43f aa75 	beq.w	10b66 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   1167c:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1167e:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   11680:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   11684:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11688:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1168a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1168e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11692:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11694:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11696:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1169a:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1169c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   116a0:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   116a2:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   116a4:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   116a6:	4618      	mov	r0, r3
   116a8:	f7ff ba60 	b.w	10b6c <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   116ac:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   116b0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   116b4:	429a      	cmp	r2, r3
   116b6:	f43f aa56 	beq.w	10b66 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   116ba:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   116be:	2a00      	cmp	r2, #0
   116c0:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   116c4:	f2c0 85ee 	blt.w	122a4 <ull_conn_rx+0x17d8>
   116c8:	2a1a      	cmp	r2, #26
   116ca:	f000 8621 	beq.w	12310 <ull_conn_rx+0x1844>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   116ce:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   116d2:	f002 0107 	and.w	r1, r2, #7
   116d6:	2904      	cmp	r1, #4
   116d8:	f000 85c7 	beq.w	1226a <ull_conn_rx+0x179e>
	if (!conn->llcp_conn_param.cmd) {
   116dc:	0712      	lsls	r2, r2, #28
   116de:	f57f aa42 	bpl.w	10b66 <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   116e2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   116e6:	772b      	strb	r3, [r5, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   116e8:	2216      	movs	r2, #22
   116ea:	712a      	strb	r2, [r5, #4]
	cu->interval = lll->interval;
   116ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   116ee:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   116f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   116f4:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   116f6:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   116f8:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   116fc:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   11700:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   11702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   11706:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   1170a:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1170c:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1170e:	f7ff ba2d 	b.w	10b6c <ull_conn_rx+0xa0>
   11712:	bf00      	nop
   11714:	20001edc 	.word	0x20001edc
   11718:	087830d0 	.word	0x087830d0
		if ((conn->llcp_ack != conn->llcp_req) &&
   1171c:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   11720:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   11724:	428b      	cmp	r3, r1
   11726:	f43f aa1e 	beq.w	10b66 <ull_conn_rx+0x9a>
   1172a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1172e:	2b03      	cmp	r3, #3
   11730:	f47f aa19 	bne.w	10b66 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   11734:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   11738:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1173c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1173e:	f022 0203 	bic.w	r2, r2, #3
   11742:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   11746:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1174a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1174e:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11752:	210d      	movs	r1, #13
   11754:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   11756:	4618      	mov	r0, r3
   11758:	f7ff ba08 	b.w	10b6c <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1175c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11760:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   11764:	428b      	cmp	r3, r1
   11766:	f43f a9fe 	beq.w	10b66 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1176a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1176e:	2a23      	cmp	r2, #35	; 0x23
   11770:	d012      	beq.n	11798 <ull_conn_rx+0xccc>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11772:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   11776:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1177a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1177e:	f36f 0100 	bfc	r1, #0, #1
   11782:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   11786:	2100      	movs	r1, #0
   11788:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1178c:	f3c3 0102 	ubfx	r1, r3, #0, #3
   11790:	f361 1306 	bfi	r3, r1, #4, #3
   11794:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   11798:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1179c:	0759      	lsls	r1, r3, #29
   1179e:	f57f a9e2 	bpl.w	10b66 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   117a2:	231a      	movs	r3, #26
   117a4:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   117a6:	772a      	strb	r2, [r5, #28]
   117a8:	e663      	b.n	11472 <ull_conn_rx+0x9a6>
			tx->next = conn->tx_head;
   117aa:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   117ac:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   117b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   117b4:	2a00      	cmp	r2, #0
   117b6:	f47f a9d6 	bne.w	10b66 <ull_conn_rx+0x9a>
   117ba:	f7ff ba44 	b.w	10c46 <ull_conn_rx+0x17a>
			return -ENOBUFS;
   117be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   117c2:	f7ff b9d3 	b.w	10b6c <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   117c6:	7f6b      	ldrb	r3, [r5, #29]
   117c8:	2b01      	cmp	r3, #1
   117ca:	f47f aa03 	bne.w	10bd4 <ull_conn_rx+0x108>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   117ce:	48be      	ldr	r0, [pc, #760]	; (11ac8 <ull_conn_rx+0xffc>)
   117d0:	f7f8 fd86 	bl	a2e0 <mem_acquire>
		if (!tx) {
   117d4:	2800      	cmp	r0, #0
   117d6:	d0f2      	beq.n	117be <ull_conn_rx+0xcf2>
	conn->llcp_enc.pause_rx = 1U;
   117d8:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   117dc:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   117e0:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   117e4:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   117e8:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   117ec:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   117ee:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   117f2:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   117f4:	7141      	strb	r1, [r0, #5]
   117f6:	e69e      	b.n	11536 <ull_conn_rx+0xa6a>
			conn->tx_data = conn->tx_data->next;
   117f8:	6813      	ldr	r3, [r2, #0]
   117fa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   117fe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   11802:	2b00      	cmp	r3, #0
   11804:	f47f aa15 	bne.w	10c32 <ull_conn_rx+0x166>
			tx->next = conn->tx_head->next;
   11808:	6813      	ldr	r3, [r2, #0]
   1180a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1180c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1180e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   11810:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   11814:	2a00      	cmp	r2, #0
   11816:	f47f a9a6 	bne.w	10b66 <ull_conn_rx+0x9a>
   1181a:	f7ff ba14 	b.w	10c46 <ull_conn_rx+0x17a>
		if (!conn->tx_ctrl) {
   1181e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11822:	2900      	cmp	r1, #0
   11824:	f47f aea5 	bne.w	11572 <ull_conn_rx+0xaa6>
			tx->next = conn->tx_head;
   11828:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1182a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1182e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   11832:	e6a5      	b.n	11580 <ull_conn_rx+0xab4>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   11834:	7f6b      	ldrb	r3, [r5, #29]
   11836:	2b01      	cmp	r3, #1
   11838:	f47f a9cc 	bne.w	10bd4 <ull_conn_rx+0x108>
   1183c:	e70f      	b.n	1165e <ull_conn_rx+0xb92>
		if (!conn->lll.role) {
   1183e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   11842:	2a00      	cmp	r2, #0
   11844:	f2c0 80a9 	blt.w	1199a <ull_conn_rx+0xece>
					conn->llcp_conn_param.ack) &&
   11848:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1184c:	9201      	str	r2, [sp, #4]
   1184e:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
   11850:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   11854:	428a      	cmp	r2, r1
   11856:	d009      	beq.n	1186c <ull_conn_rx+0xda0>
			    ((conn->llcp_conn_param.state ==
   11858:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   1185c:	f012 0207 	ands.w	r2, r2, #7
   11860:	f000 8300 	beq.w	11e64 <ull_conn_rx+0x1398>
			      LLCP_CPR_STATE_REQ) ||
   11864:	3a04      	subs	r2, #4
   11866:	2a01      	cmp	r2, #1
   11868:	f240 82fc 	bls.w	11e64 <ull_conn_rx+0x1398>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1186c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11870:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   11874:	1a52      	subs	r2, r2, r1
   11876:	f002 0203 	and.w	r2, r2, #3
   1187a:	2a02      	cmp	r2, #2
   1187c:	f000 8402 	beq.w	12084 <ull_conn_rx+0x15b8>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   11880:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11884:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   11888:	4291      	cmp	r1, r2
   1188a:	f000 8406 	beq.w	1209a <ull_conn_rx+0x15ce>
				nack = reject_ext_ind_send(conn, *rx,
   1188e:	232a      	movs	r3, #42	; 0x2a
   11890:	220f      	movs	r2, #15
   11892:	e414      	b.n	110be <ull_conn_rx+0x5f2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11894:	7913      	ldrb	r3, [r2, #4]
   11896:	f003 0303 	and.w	r3, r3, #3
   1189a:	2b03      	cmp	r3, #3
   1189c:	f000 82da 	beq.w	11e54 <ull_conn_rx+0x1388>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   118a0:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   118a4:	f7ff b9c7 	b.w	10c36 <ull_conn_rx+0x16a>
	if (conn->common.txn_lock) {
   118a8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   118ac:	079b      	lsls	r3, r3, #30
   118ae:	f53f a95a 	bmi.w	10b66 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   118b2:	4885      	ldr	r0, [pc, #532]	; (11ac8 <ull_conn_rx+0xffc>)
   118b4:	f7f8 fd14 	bl	a2e0 <mem_acquire>
	if (!tx) {
   118b8:	4603      	mov	r3, r0
   118ba:	2800      	cmp	r0, #0
   118bc:	f43f af7f 	beq.w	117be <ull_conn_rx+0xcf2>
	conn->common.txn_lock = 1U;
   118c0:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   118c4:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   118c8:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   118cc:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   118d0:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   118d4:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   118d8:	f042 0202 	orr.w	r2, r2, #2
   118dc:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   118e0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   118e4:	428a      	cmp	r2, r1
   118e6:	f040 8594 	bne.w	12412 <ull_conn_rx+0x1946>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   118ea:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   118ec:	291a      	cmp	r1, #26
   118ee:	f240 8317 	bls.w	11f20 <ull_conn_rx+0x1454>
			eff_tx_octets = MIN(max_rx_octets,
   118f2:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   118f6:	4281      	cmp	r1, r0
   118f8:	bf28      	it	cs
   118fa:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   118fc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   118fe:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   11902:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   11904:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   11906:	bf34      	ite	cc
   11908:	46c6      	movcc	lr, r8
   1190a:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1190e:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   11912:	bf34      	ite	cc
   11914:	4658      	movcc	r0, fp
   11916:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1191a:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1191e:	bf34      	ite	cc
   11920:	46d4      	movcc	ip, sl
   11922:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   11926:	45c6      	cmp	lr, r8
   11928:	f000 8332 	beq.w	11f90 <ull_conn_rx+0x14c4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1192c:	3a01      	subs	r2, #1
   1192e:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   11932:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   11936:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   1193a:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   1193e:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   11942:	2b00      	cmp	r3, #0
   11944:	f000 838f 	beq.w	12066 <ull_conn_rx+0x159a>
				conn->llcp_length.state =
   11948:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1194c:	2505      	movs	r5, #5
   1194e:	f365 0202 	bfi	r2, r5, #0, #3
   11952:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   11956:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1195a:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   1195c:	683a      	ldr	r2, [r7, #0]
   1195e:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   11960:	683a      	ldr	r2, [r7, #0]
   11962:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   11966:	2200      	movs	r2, #0
   11968:	603a      	str	r2, [r7, #0]
	if (tx) {
   1196a:	2b00      	cmp	r3, #0
   1196c:	f43f a8fd 	beq.w	10b6a <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11970:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11972:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11974:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   11978:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1197a:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1197c:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1197e:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   11980:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   11982:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11986:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1198a:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1198c:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1198e:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11990:	f7fe f824 	bl	f9dc <ctrl_tx_sec_enqueue>
	return 0;
   11994:	2000      	movs	r0, #0
}
   11996:	f7ff b8e9 	b.w	10b6c <ull_conn_rx+0xa0>
			    conn->llcp_conn_param.ack) ||
   1199a:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
		} else if ((conn->llcp_conn_param.req ==
   1199e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   119a2:	4282      	cmp	r2, r0
   119a4:	d004      	beq.n	119b0 <ull_conn_rx+0xee4>
			    conn->llcp_conn_param.ack) ||
   119a6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   119aa:	0797      	lsls	r7, r2, #30
   119ac:	f47f a8db 	bne.w	10b66 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   119b0:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   119b4:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   119b8:	2a05      	cmp	r2, #5
   119ba:	f240 813e 	bls.w	11c3a <ull_conn_rx+0x116e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   119be:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   119c2:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   119c6:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   119ca:	f200 8136 	bhi.w	11c3a <ull_conn_rx+0x116e>
			    (interval_max > 3200) ||
   119ce:	428a      	cmp	r2, r1
   119d0:	f200 8133 	bhi.w	11c3a <ull_conn_rx+0x116e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   119d4:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   119d8:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   119dc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   119e0:	f080 812b 	bcs.w	11c3a <ull_conn_rx+0x116e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   119e4:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   119e8:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   119ec:	f1a2 070a 	sub.w	r7, r2, #10
   119f0:	f640 4b76 	movw	fp, #3190	; 0xc76
   119f4:	b2bf      	uxth	r7, r7
   119f6:	455f      	cmp	r7, fp
   119f8:	f200 811f 	bhi.w	11c3a <ull_conn_rx+0x116e>
			     ((latency + 1) * interval_max)) ||
   119fc:	f10c 0701 	add.w	r7, ip, #1
   11a00:	b2bf      	uxth	r7, r7
   11a02:	fb01 f707 	mul.w	r7, r1, r7
			    (timeout < 10) || (timeout > 3200) ||
   11a06:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   11a0a:	f080 8116 	bcs.w	11c3a <ull_conn_rx+0x116e>
			     ((latency + 1) * interval_max)) ||
   11a0e:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   11a12:	4559      	cmp	r1, fp
   11a14:	f0c0 8111 	bcc.w	11c3a <ull_conn_rx+0x116e>
			conn->llcp_conn_param.interval_min = interval_min;
   11a18:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   11a1c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   11a20:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   11a24:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   11a28:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11a2c:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   11a30:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   11a34:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11a38:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   11a3c:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   11a40:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   11a44:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   11a48:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   11a4c:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   11a50:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   11a54:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   11a58:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   11a5c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   11a60:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   11a64:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   11a68:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   11a6c:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   11a70:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   11a74:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   11a78:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   11a7c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   11a80:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   11a84:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   11a88:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   11a8c:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   11a90:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   11a94:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   11a98:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   11a9c:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   11a9e:	42b9      	cmp	r1, r7
   11aa0:	f000 8409 	beq.w	122b6 <ull_conn_rx+0x17ea>
				conn->llcp_conn_param.state =
   11aa4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11aa8:	2103      	movs	r1, #3
   11aaa:	f361 0202 	bfi	r2, r1, #0, #3
   11aae:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   11ab2:	3801      	subs	r0, #1
   11ab4:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   11ab8:	2b00      	cmp	r3, #0
   11aba:	f47f a856 	bne.w	10b6a <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   11abe:	6034      	str	r4, [r6, #0]
	int nack = 0;
   11ac0:	4618      	mov	r0, r3
   11ac2:	f7ff b853 	b.w	10b6c <ull_conn_rx+0xa0>
   11ac6:	bf00      	nop
   11ac8:	20001edc 	.word	0x20001edc
	if (conn->common.txn_lock) {
   11acc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11ad0:	079e      	lsls	r6, r3, #30
   11ad2:	f53f a848 	bmi.w	10b66 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11ad6:	48d9      	ldr	r0, [pc, #868]	; (11e3c <ull_conn_rx+0x1370>)
   11ad8:	f7f8 fc02 	bl	a2e0 <mem_acquire>
	if (!tx) {
   11adc:	4602      	mov	r2, r0
   11ade:	2800      	cmp	r0, #0
   11ae0:	f43f ae6d 	beq.w	117be <ull_conn_rx+0xcf2>
	conn->common.txn_lock = 1U;
   11ae4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11ae8:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   11aec:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
	conn->common.txn_lock = 1U;
   11af0:	f043 0302 	orr.w	r3, r3, #2
   11af4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11af8:	2302      	movs	r3, #2
   11afa:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   11afe:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11b02:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   11b06:	4283      	cmp	r3, r0
   11b08:	d115      	bne.n	11b36 <ull_conn_rx+0x106a>
		conn->llcp_phy.ack--;
   11b0a:	3b01      	subs	r3, #1
   11b0c:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   11b10:	f8b4 31be 	ldrh.w	r3, [r4, #446]	; 0x1be
			conn->phy_pref_rx;
   11b14:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.tx =
   11b18:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   11b1c:	f240 43fc 	movw	r3, #1276	; 0x4fc
   11b20:	f021 0104 	bic.w	r1, r1, #4
   11b24:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   11b28:	430b      	orrs	r3, r1
		conn->procedure_expire =
   11b2a:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   11b2e:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
		conn->procedure_expire =
   11b32:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   11b36:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   11b3a:	f895 3020 	ldrb.w	r3, [r5, #32]
   11b3e:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   11b42:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   11b46:	f3c1 0682 	ubfx	r6, r1, #2, #3
   11b4a:	4033      	ands	r3, r6
   11b4c:	009b      	lsls	r3, r3, #2
   11b4e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   11b52:	f001 0103 	and.w	r1, r1, #3
   11b56:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11b58:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   11b5a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11b5e:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11b60:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b64:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11b66:	4603      	mov	r3, r0
   11b68:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11b6c:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   11b6e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b72:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11b76:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11b78:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11b7c:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11b7e:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b80:	7111      	strb	r1, [r2, #4]
	if (
   11b82:	2b00      	cmp	r3, #0
   11b84:	f000 80d8 	beq.w	11d38 <ull_conn_rx+0x126c>
	    !conn->llcp_enc.pause_tx &&
   11b88:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   11b8c:	0788      	lsls	r0, r1, #30
   11b8e:	f100 80d3 	bmi.w	11d38 <ull_conn_rx+0x126c>
	    !conn->llcp_phy.pause_tx &&
   11b92:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   11b96:	07c9      	lsls	r1, r1, #31
   11b98:	f100 80ce 	bmi.w	11d38 <ull_conn_rx+0x126c>
		if (conn->tx_head == conn->tx_data) {
   11b9c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11ba0:	428b      	cmp	r3, r1
   11ba2:	f000 8421 	beq.w	123e8 <ull_conn_rx+0x191c>
		} else if (!conn->tx_ctrl) {
   11ba6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11baa:	2900      	cmp	r1, #0
   11bac:	f000 8413 	beq.w	123d6 <ull_conn_rx+0x190a>
	tx->next = conn->tx_ctrl_last->next;
   11bb0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11bb4:	6819      	ldr	r1, [r3, #0]
   11bb6:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   11bb8:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   11bba:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11bbe:	6813      	ldr	r3, [r2, #0]
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	f47e afd0 	bne.w	10b66 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   11bc6:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11bca:	f7fe bfcc 	b.w	10b66 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11bce:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   11bd2:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   11bd6:	429a      	cmp	r2, r3
   11bd8:	f43f ad49 	beq.w	1166e <ull_conn_rx+0xba2>
		rej_ext_ind->error_code = rej_ind->error_code;
   11bdc:	f895 3020 	ldrb.w	r3, [r5, #32]
   11be0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   11be4:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   11be8:	2a00      	cmp	r2, #0
   11bea:	f2c0 82e5 	blt.w	121b8 <ull_conn_rx+0x16ec>
   11bee:	2b1a      	cmp	r3, #26
   11bf0:	f000 838e 	beq.w	12310 <ull_conn_rx+0x1844>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11bf4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11bf8:	f002 0307 	and.w	r3, r2, #7
   11bfc:	2b04      	cmp	r3, #4
   11bfe:	f47f ad6d 	bne.w	116dc <ull_conn_rx+0xc10>
		LL_ASSERT(conn_upd_curr == conn);
   11c02:	4e8f      	ldr	r6, [pc, #572]	; (11e40 <ull_conn_rx+0x1374>)
   11c04:	6833      	ldr	r3, [r6, #0]
   11c06:	429c      	cmp	r4, r3
   11c08:	d00e      	beq.n	11c28 <ull_conn_rx+0x115c>
   11c0a:	4a8e      	ldr	r2, [pc, #568]	; (11e44 <ull_conn_rx+0x1378>)
   11c0c:	498e      	ldr	r1, [pc, #568]	; (11e48 <ull_conn_rx+0x137c>)
   11c0e:	488f      	ldr	r0, [pc, #572]	; (11e4c <ull_conn_rx+0x1380>)
   11c10:	f241 23a8 	movw	r3, #4776	; 0x12a8
   11c14:	f00a fb42 	bl	1c29c <printk>
   11c18:	4040      	eors	r0, r0
   11c1a:	f380 8811 	msr	BASEPRI, r0
   11c1e:	f04f 0003 	mov.w	r0, #3
   11c22:	df02      	svc	2
   11c24:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11c28:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   11c2c:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   11c30:	2300      	movs	r3, #0
   11c32:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   11c34:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   11c38:	e550      	b.n	116dc <ull_conn_rx+0xc10>
				nack = reject_ext_ind_send(conn, *rx,
   11c3a:	231e      	movs	r3, #30
   11c3c:	220f      	movs	r2, #15
   11c3e:	f7ff ba3e 	b.w	110be <ull_conn_rx+0x5f2>
			conn->llcp_conn_param.disabled = 1U;
   11c42:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11c46:	f042 0210 	orr.w	r2, r2, #16
   11c4a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   11c4e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   11c52:	2a00      	cmp	r2, #0
   11c54:	f2c0 81c5 	blt.w	11fe2 <ull_conn_rx+0x1516>
				LL_ASSERT(conn->llcp_cu.req ==
   11c58:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   11c5c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   11c60:	429a      	cmp	r2, r3
   11c62:	d00e      	beq.n	11c82 <ull_conn_rx+0x11b6>
   11c64:	4a77      	ldr	r2, [pc, #476]	; (11e44 <ull_conn_rx+0x1378>)
   11c66:	497a      	ldr	r1, [pc, #488]	; (11e50 <ull_conn_rx+0x1384>)
   11c68:	4878      	ldr	r0, [pc, #480]	; (11e4c <ull_conn_rx+0x1380>)
   11c6a:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
   11c6e:	f00a fb15 	bl	1c29c <printk>
   11c72:	4040      	eors	r0, r0
   11c74:	f380 8811 	msr	BASEPRI, r0
   11c78:	f04f 0003 	mov.w	r0, #3
   11c7c:	df02      	svc	2
   11c7e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   11c82:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11c86:	2105      	movs	r1, #5
   11c88:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   11c8c:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   11c8e:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   11c90:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   11c94:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11c98:	683d      	ldr	r5, [r7, #0]
				conn->llcp_conn_param.state =
   11c9a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11c9e:	f002 0308 	and.w	r3, r2, #8
   11ca2:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   11ca6:	430b      	orrs	r3, r1
   11ca8:	f022 020f 	bic.w	r2, r2, #15
   11cac:	4313      	orrs	r3, r2
   11cae:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   11cb2:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   11cb6:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   11cba:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   11cbe:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   11cc0:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   11cc4:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   11cc8:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   11ccc:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11cd0:	7129      	strb	r1, [r5, #4]
				break;
   11cd2:	f7fe bf4b 	b.w	10b6c <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   11cd6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   11cda:	2b03      	cmp	r3, #3
   11cdc:	f47f ab0e 	bne.w	112fc <ull_conn_rx+0x830>
   11ce0:	f7ff bb05 	b.w	112ee <ull_conn_rx+0x822>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11ce4:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   11ce6:	2000      	movs	r0, #0
   11ce8:	f7fe bf40 	b.w	10b6c <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11cec:	4853      	ldr	r0, [pc, #332]	; (11e3c <ull_conn_rx+0x1370>)
   11cee:	f7f8 faf7 	bl	a2e0 <mem_acquire>
		if (!tx) {
   11cf2:	4601      	mov	r1, r0
   11cf4:	2800      	cmp	r0, #0
   11cf6:	f43f ad62 	beq.w	117be <ull_conn_rx+0xcf2>
		conn->llcp_version.tx = 1U;
   11cfa:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   11cfe:	f043 0301 	orr.w	r3, r3, #1
   11d02:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11d06:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d08:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11d0a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   11d0c:	220b      	movs	r2, #11
   11d0e:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d10:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11d14:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d18:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11d1a:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   11d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11d20:	2205      	movs	r2, #5
		v->sub_version_number =
   11d22:	72c3      	strb	r3, [r0, #11]
   11d24:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   11d26:	7146      	strb	r6, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11d28:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   11d2a:	4620      	mov	r0, r4
   11d2c:	f7fd fe56 	bl	f9dc <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11d30:	2301      	movs	r3, #1
   11d32:	712b      	strb	r3, [r5, #4]
   11d34:	f7ff bb24 	b.w	11380 <ull_conn_rx+0x8b4>
		if (!conn->tx_ctrl) {
   11d38:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11d3c:	2900      	cmp	r1, #0
   11d3e:	f47f af37 	bne.w	11bb0 <ull_conn_rx+0x10e4>
			tx->next = conn->tx_head;
   11d42:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   11d44:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11d48:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   11d4c:	e737      	b.n	11bbe <ull_conn_rx+0x10f2>
			conn->llcp_length.disabled = 1U;
   11d4e:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   11d52:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   11d56:	f042 0308 	orr.w	r3, r2, #8
   11d5a:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   11d5e:	f7ff b909 	b.w	10f74 <ull_conn_rx+0x4a8>
	instant = sys_le16_to_cpu(ind->instant);
   11d62:	8c68      	ldrh	r0, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11d64:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   11d66:	1a82      	subs	r2, r0, r2
   11d68:	0412      	lsls	r2, r2, #16
   11d6a:	f100 80d1 	bmi.w	11f10 <ull_conn_rx+0x1444>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11d6e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11d72:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   11d76:	eba2 020c 	sub.w	r2, r2, ip
   11d7a:	f002 0203 	and.w	r2, r2, #3
   11d7e:	2a02      	cmp	r2, #2
   11d80:	f000 80d0 	beq.w	11f24 <ull_conn_rx+0x1458>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11d84:	f894 51bc 	ldrb.w	r5, [r4, #444]	; 0x1bc
   11d88:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   11d8c:	42aa      	cmp	r2, r5
   11d8e:	d018      	beq.n	11dc2 <ull_conn_rx+0x12f6>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   11d90:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11d94:	f002 0203 	and.w	r2, r2, #3
   11d98:	2a02      	cmp	r2, #2
   11d9a:	d112      	bne.n	11dc2 <ull_conn_rx+0x12f6>
		conn->llcp_phy.pause_tx = 0U;
   11d9c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11da0:	f884 51bd 	strb.w	r5, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   11da4:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11da8:	f894 50e8 	ldrb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   11dac:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11db0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   11db4:	f362 0541 	bfi	r5, r2, #1, #1
		conn->procedure_expire = 0U;
   11db8:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11dba:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   11dbe:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   11dc2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   11dc6:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   11dca:	009b      	lsls	r3, r3, #2
   11dcc:	f003 031c 	and.w	r3, r3, #28
   11dd0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   11dd4:	f002 0202 	and.w	r2, r2, #2
   11dd8:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   11dda:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   11dde:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   11de2:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   11de4:	683a      	ldr	r2, [r7, #0]
   11de6:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   11de8:	683a      	ldr	r2, [r7, #0]
   11dea:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   11dee:	2300      	movs	r3, #0
   11df0:	603b      	str	r3, [r7, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   11df2:	f7fc fbe3 	bl	e5bc <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   11df6:	4605      	mov	r5, r0
   11df8:	2800      	cmp	r0, #0
   11dfa:	f000 8228 	beq.w	1224e <ull_conn_rx+0x1782>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   11dfe:	682b      	ldr	r3, [r5, #0]
   11e00:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   11e04:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   11e06:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   11e0a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   11e0e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_type = LLCP_PHY_UPD;
   11e12:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   11e14:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   11e16:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   11e1a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   11e1e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   11e22:	f43e aea2 	beq.w	10b6a <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   11e26:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   11e2a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   11e2e:	f363 1206 	bfi	r2, r3, #4, #3
   11e32:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   11e36:	2000      	movs	r0, #0
   11e38:	f7fe be98 	b.w	10b6c <ull_conn_rx+0xa0>
   11e3c:	20001edc 	.word	0x20001edc
   11e40:	20001e48 	.word	0x20001e48
   11e44:	00020c10 	.word	0x00020c10
   11e48:	00020d6c 	.word	0x00020d6c
   11e4c:	0002060c 	.word	0x0002060c
   11e50:	00020d44 	.word	0x00020d44
	    ((pdu_data_tx->llctrl.opcode !=
   11e54:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11e56:	2b03      	cmp	r3, #3
   11e58:	f43f acd6 	beq.w	11808 <ull_conn_rx+0xd3c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11e5c:	2b0a      	cmp	r3, #10
   11e5e:	f47f ad1f 	bne.w	118a0 <ull_conn_rx+0xdd4>
   11e62:	e4d1      	b.n	11808 <ull_conn_rx+0xd3c>
				nack = reject_ext_ind_send(conn, *rx,
   11e64:	2323      	movs	r3, #35	; 0x23
   11e66:	220f      	movs	r2, #15
   11e68:	f7ff b929 	b.w	110be <ull_conn_rx+0x5f2>
				nack = reject_ext_ind_send(conn, *rx,
   11e6c:	2323      	movs	r3, #35	; 0x23
   11e6e:	f7ff ba46 	b.w	112fe <ull_conn_rx+0x832>
				nack = reject_ext_ind_send(conn, *rx,
   11e72:	231e      	movs	r3, #30
   11e74:	2210      	movs	r2, #16
   11e76:	f7ff b922 	b.w	110be <ull_conn_rx+0x5f2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11e7a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   11e7e:	f36f 0301 	bfc	r3, #0, #2
   11e82:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   11e86:	f7ff ba5c 	b.w	11342 <ull_conn_rx+0x876>
				conn->llcp_phy.state =
   11e8a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   11e8e:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   11e90:	f043 0303 	orr.w	r3, r3, #3
   11e94:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   11e98:	d111      	bne.n	11ebe <ull_conn_rx+0x13f2>
					conn->llcp_phy.tx =
   11e9a:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   11e9e:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   11ea2:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   11ea4:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   11ea8:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   11eac:	f240 43fc 	movw	r3, #1276	; 0x4fc
   11eb0:	f022 0204 	bic.w	r2, r2, #4
   11eb4:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   11eb8:	4313      	orrs	r3, r2
   11eba:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   11ebe:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11ec2:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   11ec6:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   11eca:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   11ece:	f003 0203 	and.w	r2, r3, #3
   11ed2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   11ed6:	4003      	ands	r3, r0
   11ed8:	009b      	lsls	r3, r3, #2
   11eda:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   11ede:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11ee0:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   11ee4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11ee8:	d002      	beq.n	11ef0 <ull_conn_rx+0x1424>
   11eea:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   11eee:	d105      	bne.n	11efc <ull_conn_rx+0x1430>
					conn->llcp_phy.tx = 0;
   11ef0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11ef4:	f003 0303 	and.w	r3, r3, #3
   11ef8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   11efc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f00:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   11f02:	4313      	orrs	r3, r2
   11f04:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   11f08:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f0a:	712a      	strb	r2, [r5, #4]
   11f0c:	f7fe be2e 	b.w	10b6c <ull_conn_rx+0xa0>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f10:	2301      	movs	r3, #1
   11f12:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   11f14:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_final = err;
   11f16:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   11f1a:	2000      	movs	r0, #0
   11f1c:	f7fe be26 	b.w	10b6c <ull_conn_rx+0xa0>
   11f20:	4649      	mov	r1, r9
   11f22:	e4eb      	b.n	118fc <ull_conn_rx+0xe30>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f24:	2301      	movs	r3, #1
   11f26:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   11f28:	232a      	movs	r3, #42	; 0x2a
   11f2a:	e7f4      	b.n	11f16 <ull_conn_rx+0x144a>
			lll->phy_tx_time = lll->phy_tx;
   11f2c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   11f30:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   11f34:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   11f38:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   11f3c:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   11f3e:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   11f42:	f362 1106 	bfi	r1, r2, #4, #3
   11f46:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   11f4a:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   11f4e:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   11f52:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f56:	683b      	ldr	r3, [r7, #0]
			if (conn->llcp_phy.cmd) {
   11f58:	f000 809b 	beq.w	12092 <ull_conn_rx+0x15c6>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f5c:	211a      	movs	r1, #26
   11f5e:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   11f60:	2300      	movs	r3, #0
   11f62:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   11f64:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   11f66:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   11f6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f6e:	77ab      	strb	r3, [r5, #30]
   11f70:	f7ff b800 	b.w	10f74 <ull_conn_rx+0x4a8>
	conn->llcp_enc.pause_rx = 0U;
   11f74:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   11f78:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   11f7c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   11f7e:	f021 0103 	bic.w	r1, r1, #3
   11f82:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   11f86:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   11f8a:	4618      	mov	r0, r3
   11f8c:	f7fe bdee 	b.w	10b6c <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   11f90:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   11f92:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   11f94:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   11f98:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   11f9c:	f000 812f 	beq.w	121fe <ull_conn_rx+0x1732>
			conn->lll.max_rx_time = eff_rx_time;
   11fa0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	f000 8135 	beq.w	12214 <ull_conn_rx+0x1748>
					(conn->llcp_length.req - 1);
   11faa:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   11fac:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   11fb0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   11fb4:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   11fb8:	2603      	movs	r6, #3
   11fba:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   11fbe:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   11fc2:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   11fc6:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   11fca:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   11fce:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   11fd2:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11fd4:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11fd8:	84e8      	strh	r0, [r5, #38]	; 0x26
   11fda:	e4c6      	b.n	1196a <ull_conn_rx+0xe9e>
		conn_upd_curr = conn;
   11fdc:	601c      	str	r4, [r3, #0]
   11fde:	f7fe bf7e 	b.w	10ede <ull_conn_rx+0x412>
			LL_ASSERT(conn_upd_curr == conn);
   11fe2:	4ec5      	ldr	r6, [pc, #788]	; (122f8 <ull_conn_rx+0x182c>)
   11fe4:	6832      	ldr	r2, [r6, #0]
   11fe6:	4294      	cmp	r4, r2
   11fe8:	d00e      	beq.n	12008 <ull_conn_rx+0x153c>
   11fea:	4ac4      	ldr	r2, [pc, #784]	; (122fc <ull_conn_rx+0x1830>)
   11fec:	49c4      	ldr	r1, [pc, #784]	; (12300 <ull_conn_rx+0x1834>)
   11fee:	48c5      	ldr	r0, [pc, #788]	; (12304 <ull_conn_rx+0x1838>)
   11ff0:	f641 13b8 	movw	r3, #6584	; 0x19b8
   11ff4:	f00a f952 	bl	1c29c <printk>
   11ff8:	4040      	eors	r0, r0
   11ffa:	f380 8811 	msr	BASEPRI, r0
   11ffe:	f04f 0003 	mov.w	r0, #3
   12002:	df02      	svc	2
   12004:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12008:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
			if (!conn->llcp_conn_param.cmd) {
   1200c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn_upd_curr = NULL;
   12010:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   12012:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   12016:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12018:	683a      	ldr	r2, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   1201a:	f43f a906 	beq.w	1122a <ull_conn_rx+0x75e>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1201e:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12020:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12022:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12024:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   12026:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   12028:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   1202c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1202e:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   12030:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   12034:	227d      	movs	r2, #125	; 0x7d
   12036:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1203a:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1203c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12040:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12044:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12046:	f7fe bf95 	b.w	10f74 <ull_conn_rx+0x4a8>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1204a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   1204e:	3202      	adds	r2, #2
   12050:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12054:	2b00      	cmp	r3, #0
   12056:	f040 80ec 	bne.w	12232 <ull_conn_rx+0x1766>
			conn->slave.llcp_type = conn->llcp_type;
   1205a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1205e:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   12062:	f7fe be2a 	b.w	10cba <ull_conn_rx+0x1ee>
				conn->llcp_length.state =
   12066:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   1206a:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   1206e:	2504      	movs	r5, #4
   12070:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   12074:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   12078:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   1207c:	e46b      	b.n	11956 <ull_conn_rx+0xe8a>
	struct node_tx *tx = NULL;
   1207e:	2300      	movs	r3, #0
   12080:	f7fe beb7 	b.w	10df2 <ull_conn_rx+0x326>
				      0x03) == 0x02) &&
   12084:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   12088:	2a03      	cmp	r2, #3
   1208a:	f47f ac00 	bne.w	1188e <ull_conn_rx+0xdc2>
   1208e:	f7ff bbf7 	b.w	11880 <ull_conn_rx+0xdb4>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12092:	2201      	movs	r2, #1
   12094:	711a      	strb	r2, [r3, #4]
   12096:	f7fe bf6d 	b.w	10f74 <ull_conn_rx+0x4a8>
				uint16_t interval_min =
   1209a:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   1209e:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   120a2:	2a05      	cmp	r2, #5
   120a4:	f67f adc9 	bls.w	11c3a <ull_conn_rx+0x116e>
				uint16_t interval_max =
   120a8:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   120ac:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   120b0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   120b4:	f63f adc1 	bhi.w	11c3a <ull_conn_rx+0x116e>
				    (interval_max > 3200) ||
   120b8:	428a      	cmp	r2, r1
   120ba:	f63f adbe 	bhi.w	11c3a <ull_conn_rx+0x116e>
				uint16_t latency =
   120be:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   120c0:	b2b8      	uxth	r0, r7
				    (interval_min > interval_max) ||
   120c2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   120c6:	f4bf adb8 	bcs.w	11c3a <ull_conn_rx+0x116e>
				uint16_t timeout =
   120ca:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   120ce:	fa1f f28e 	uxth.w	r2, lr
				    (latency > 499) ||
   120d2:	f1a2 0a0a 	sub.w	sl, r2, #10
   120d6:	f640 4b76 	movw	fp, #3190	; 0xc76
   120da:	fa1f fa8a 	uxth.w	sl, sl
   120de:	45da      	cmp	sl, fp
   120e0:	f63f adab 	bhi.w	11c3a <ull_conn_rx+0x116e>
				     ((latency + 1) * interval_max)) ||
   120e4:	f100 0a01 	add.w	sl, r0, #1
   120e8:	fa1f fa8a 	uxth.w	sl, sl
   120ec:	fb01 fa0a 	mul.w	sl, r1, sl
				    (timeout > 3200) ||
   120f0:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   120f4:	f4bf ada1 	bcs.w	11c3a <ull_conn_rx+0x116e>
				     ((latency + 1) * interval_max)) ||
   120f8:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   120fc:	4559      	cmp	r1, fp
   120fe:	f4ff ad9c 	bcc.w	11c3a <ull_conn_rx+0x116e>
				conn->llcp_conn_param.interval_min =
   12102:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   12106:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   1210a:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   1210e:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   12112:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12116:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1211a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1211e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12122:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   12126:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1212a:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1212e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   12132:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   12136:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1213a:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1213e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   12142:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   12146:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1214a:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1214e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   12152:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   12156:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1215a:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1215e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   12162:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   12166:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1216a:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1216e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   12172:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   12176:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1217a:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1217e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset5 =
   12182:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   12186:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   12188:	42b9      	cmp	r1, r7
   1218a:	f000 8104 	beq.w	12396 <ull_conn_rx+0x18ca>
					if (conn->llcp_enc.pause_tx) {
   1218e:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   12192:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   12196:	f000 80f8 	beq.w	1238a <ull_conn_rx+0x18be>
						conn->llcp_conn_param.state =
   1219a:	2102      	movs	r1, #2
   1219c:	f361 0202 	bfi	r2, r1, #0, #3
   121a0:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   121a4:	2201      	movs	r2, #1
   121a6:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   121a8:	9a01      	ldr	r2, [sp, #4]
   121aa:	3a01      	subs	r2, #1
   121ac:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				if (!conn_upd_curr) {
   121b0:	2b00      	cmp	r3, #0
   121b2:	f47e acda 	bne.w	10b6a <ull_conn_rx+0x9e>
   121b6:	e482      	b.n	11abe <ull_conn_rx+0xff2>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   121b8:	2b23      	cmp	r3, #35	; 0x23
   121ba:	f43f ad1b 	beq.w	11bf4 <ull_conn_rx+0x1128>
			conn->slave.ticks_to_offset =
   121be:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   121c2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   121c6:	e515      	b.n	11bf4 <ull_conn_rx+0x1128>
			conn->tx_data = conn->tx_data->next;
   121c8:	6811      	ldr	r1, [r2, #0]
   121ca:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   121ce:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   121d2:	2900      	cmp	r1, #0
   121d4:	f47f a9cd 	bne.w	11572 <ull_conn_rx+0xaa6>
			tx->next = conn->tx_head->next;
   121d8:	6811      	ldr	r1, [r2, #0]
   121da:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   121dc:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   121de:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   121e2:	f7ff b9cd 	b.w	11580 <ull_conn_rx+0xab4>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   121e6:	683b      	ldr	r3, [r7, #0]
   121e8:	211a      	movs	r1, #26
   121ea:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   121ec:	7728      	strb	r0, [r5, #28]
		p->tx = conn->lll.phy_tx;
   121ee:	776a      	strb	r2, [r5, #29]
		p->rx = conn->lll.phy_rx;
   121f0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   121f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   121f8:	77ab      	strb	r3, [r5, #30]
		if (err) {
   121fa:	f7fe bcb7 	b.w	10b6c <ull_conn_rx+0xa0>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   121fe:	4558      	cmp	r0, fp
   12200:	f47f aece 	bne.w	11fa0 <ull_conn_rx+0x14d4>
			    eff_rx_time == conn->lll.max_rx_time &&
   12204:	45d4      	cmp	ip, sl
   12206:	f47f aecb 	bne.w	11fa0 <ull_conn_rx+0x14d4>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1220a:	683a      	ldr	r2, [r7, #0]
   1220c:	2501      	movs	r5, #1
   1220e:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   12210:	f7ff bbab 	b.w	1196a <ull_conn_rx+0xe9e>
				conn->lll.max_tx_octets = eff_tx_octets;
   12214:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   12218:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   1221c:	e6d7      	b.n	11fce <ull_conn_rx+0x1502>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1221e:	7911      	ldrb	r1, [r2, #4]
   12220:	f001 0103 	and.w	r1, r1, #3
   12224:	2903      	cmp	r1, #3
   12226:	f000 80fc 	beq.w	12422 <ull_conn_rx+0x1956>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1222a:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1222e:	f7ff b9a0 	b.w	11572 <ull_conn_rx+0xaa6>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12232:	4a32      	ldr	r2, [pc, #200]	; (122fc <ull_conn_rx+0x1830>)
   12234:	4934      	ldr	r1, [pc, #208]	; (12308 <ull_conn_rx+0x183c>)
   12236:	4833      	ldr	r0, [pc, #204]	; (12304 <ull_conn_rx+0x1838>)
   12238:	f241 7355 	movw	r3, #5973	; 0x1755
   1223c:	f00a f82e 	bl	1c29c <printk>
   12240:	4040      	eors	r0, r0
   12242:	f380 8811 	msr	BASEPRI, r0
   12246:	f04f 0003 	mov.w	r0, #3
   1224a:	df02      	svc	2
   1224c:	e705      	b.n	1205a <ull_conn_rx+0x158e>
	LL_ASSERT(rx_dle);
   1224e:	4a2b      	ldr	r2, [pc, #172]	; (122fc <ull_conn_rx+0x1830>)
   12250:	492e      	ldr	r1, [pc, #184]	; (1230c <ull_conn_rx+0x1840>)
   12252:	482c      	ldr	r0, [pc, #176]	; (12304 <ull_conn_rx+0x1838>)
   12254:	f241 536a 	movw	r3, #5482	; 0x156a
   12258:	f00a f820 	bl	1c29c <printk>
   1225c:	4040      	eors	r0, r0
   1225e:	f380 8811 	msr	BASEPRI, r0
   12262:	f04f 0003 	mov.w	r0, #3
   12266:	df02      	svc	2
   12268:	e5c9      	b.n	11dfe <ull_conn_rx+0x1332>
		LL_ASSERT(conn_upd_curr == conn);
   1226a:	4e23      	ldr	r6, [pc, #140]	; (122f8 <ull_conn_rx+0x182c>)
   1226c:	6831      	ldr	r1, [r6, #0]
   1226e:	428c      	cmp	r4, r1
   12270:	d010      	beq.n	12294 <ull_conn_rx+0x17c8>
   12272:	4a22      	ldr	r2, [pc, #136]	; (122fc <ull_conn_rx+0x1830>)
   12274:	4922      	ldr	r1, [pc, #136]	; (12300 <ull_conn_rx+0x1834>)
   12276:	4823      	ldr	r0, [pc, #140]	; (12304 <ull_conn_rx+0x1838>)
   12278:	f241 23a8 	movw	r3, #4776	; 0x12a8
   1227c:	f00a f80e 	bl	1c29c <printk>
   12280:	4040      	eors	r0, r0
   12282:	f380 8811 	msr	BASEPRI, r0
   12286:	f04f 0003 	mov.w	r0, #3
   1228a:	df02      	svc	2
   1228c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   12290:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12294:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   12298:	2300      	movs	r3, #0
   1229a:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   1229c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   122a0:	f7ff ba1c 	b.w	116dc <ull_conn_rx+0xc10>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   122a4:	2a23      	cmp	r2, #35	; 0x23
   122a6:	f43f aa12 	beq.w	116ce <ull_conn_rx+0xc02>
			conn->slave.ticks_to_offset =
   122aa:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   122ae:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   122b2:	f7ff ba0c 	b.w	116ce <ull_conn_rx+0xc02>
			     lll->interval) ||
   122b6:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   122b8:	4567      	cmp	r7, ip
   122ba:	f47f abf3 	bne.w	11aa4 <ull_conn_rx+0xfd8>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   122be:	f240 47e2 	movw	r7, #1250	; 0x4e2
   122c2:	fb07 f101 	mul.w	r1, r7, r1
   122c6:	f242 7710 	movw	r7, #10000	; 0x2710
   122ca:	fb07 1202 	mla	r2, r7, r2, r1
   122ce:	3a01      	subs	r2, #1
   122d0:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   122d4:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   122d8:	b292      	uxth	r2, r2
   122da:	4291      	cmp	r1, r2
   122dc:	f47f abe2 	bne.w	11aa4 <ull_conn_rx+0xfd8>
				conn->llcp_conn_param.state =
   122e0:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   122e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   122e8:	f042 0201 	orr.w	r2, r2, #1
   122ec:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   122f0:	2201      	movs	r2, #1
   122f2:	712a      	strb	r2, [r5, #4]
   122f4:	f7ff bbdd 	b.w	11ab2 <ull_conn_rx+0xfe6>
   122f8:	20001e48 	.word	0x20001e48
   122fc:	00020c10 	.word	0x00020c10
   12300:	00020d6c 	.word	0x00020d6c
   12304:	0002060c 	.word	0x0002060c
   12308:	00020d20 	.word	0x00020d20
   1230c:	00020d84 	.word	0x00020d84
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12310:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   12314:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   12318:	429a      	cmp	r2, r3
   1231a:	d00e      	beq.n	1233a <ull_conn_rx+0x186e>
   1231c:	4a45      	ldr	r2, [pc, #276]	; (12434 <ull_conn_rx+0x1968>)
   1231e:	4946      	ldr	r1, [pc, #280]	; (12438 <ull_conn_rx+0x196c>)
   12320:	4846      	ldr	r0, [pc, #280]	; (1243c <ull_conn_rx+0x1970>)
   12322:	f241 238d 	movw	r3, #4749	; 0x128d
   12326:	f009 ffb9 	bl	1c29c <printk>
   1232a:	4040      	eors	r0, r0
   1232c:	f380 8811 	msr	BASEPRI, r0
   12330:	f04f 0003 	mov.w	r0, #3
   12334:	df02      	svc	2
   12336:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1233a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1233e:	2105      	movs	r1, #5
   12340:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   12344:	3b01      	subs	r3, #1
   12346:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1234a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1234e:	f002 0308 	and.w	r3, r2, #8
   12352:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   12356:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12358:	430b      	orrs	r3, r1
   1235a:	f022 020f 	bic.w	r2, r2, #15
   1235e:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   12360:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   12364:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   12368:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1236c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   12370:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12372:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   12376:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1237a:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1237e:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12382:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   12386:	f7fe bbee 	b.w	10b66 <ull_conn_rx+0x9a>
						conn->llcp_conn_param.state =
   1238a:	2103      	movs	r1, #3
   1238c:	f361 0202 	bfi	r2, r1, #0, #3
   12390:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   12394:	e708      	b.n	121a8 <ull_conn_rx+0x16dc>
				     lll->interval) ||
   12396:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   12398:	4281      	cmp	r1, r0
   1239a:	f47f aef8 	bne.w	1218e <ull_conn_rx+0x16c2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1239e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   123a2:	fb07 f101 	mul.w	r1, r7, r1
   123a6:	f242 7010 	movw	r0, #10000	; 0x2710
   123aa:	fb00 1202 	mla	r2, r0, r2, r1
   123ae:	3a01      	subs	r2, #1
   123b0:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
   123b4:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   123b8:	b292      	uxth	r2, r2
   123ba:	4291      	cmp	r1, r2
   123bc:	f47f aee7 	bne.w	1218e <ull_conn_rx+0x16c2>
					conn->llcp_conn_param.state =
   123c0:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   123c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   123c8:	f042 0201 	orr.w	r2, r2, #1
   123cc:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
					(*rx)->hdr.type =
   123d0:	2201      	movs	r2, #1
   123d2:	712a      	strb	r2, [r5, #4]
   123d4:	e6e8      	b.n	121a8 <ull_conn_rx+0x16dc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   123d6:	7919      	ldrb	r1, [r3, #4]
   123d8:	f001 0103 	and.w	r1, r1, #3
   123dc:	2903      	cmp	r1, #3
   123de:	d012      	beq.n	12406 <ull_conn_rx+0x193a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   123e0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   123e4:	f7ff bbe4 	b.w	11bb0 <ull_conn_rx+0x10e4>
			conn->tx_data = conn->tx_data->next;
   123e8:	6819      	ldr	r1, [r3, #0]
   123ea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   123ee:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   123f2:	2900      	cmp	r1, #0
   123f4:	f47f abdc 	bne.w	11bb0 <ull_conn_rx+0x10e4>
			tx->next = conn->tx_head->next;
   123f8:	6819      	ldr	r1, [r3, #0]
   123fa:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   123fc:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   123fe:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   12402:	f7ff bbdc 	b.w	11bbe <ull_conn_rx+0x10f2>
	    ((pdu_data_tx->llctrl.opcode !=
   12406:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12408:	2903      	cmp	r1, #3
   1240a:	d0f5      	beq.n	123f8 <ull_conn_rx+0x192c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1240c:	290a      	cmp	r1, #10
   1240e:	d1e7      	bne.n	123e0 <ull_conn_rx+0x1914>
   12410:	e7f2      	b.n	123f8 <ull_conn_rx+0x192c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   12412:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   12416:	f011 0f06 	tst.w	r1, #6
   1241a:	f43f aa66 	beq.w	118ea <ull_conn_rx+0xe1e>
   1241e:	f7fe bce1 	b.w	10de4 <ull_conn_rx+0x318>
	    ((pdu_data_tx->llctrl.opcode !=
   12422:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12424:	2903      	cmp	r1, #3
   12426:	f43f aed7 	beq.w	121d8 <ull_conn_rx+0x170c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1242a:	290a      	cmp	r1, #10
   1242c:	f47f aefd 	bne.w	1222a <ull_conn_rx+0x175e>
   12430:	e6d2      	b.n	121d8 <ull_conn_rx+0x170c>
   12432:	bf00      	nop
   12434:	00020c10 	.word	0x00020c10
   12438:	00020d44 	.word	0x00020d44
   1243c:	0002060c 	.word	0x0002060c

00012440 <ull_conn_llcp>:
{
   12440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12444:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   12446:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   1244a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1244e:	4298      	cmp	r0, r3
{
   12450:	460d      	mov	r5, r1
   12452:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   12454:	f000 8091 	beq.w	1257a <ull_conn_llcp+0x13a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12458:	1a1b      	subs	r3, r3, r0
   1245a:	f003 0303 	and.w	r3, r3, #3
   1245e:	2b02      	cmp	r3, #2
   12460:	d011      	beq.n	12486 <ull_conn_llcp+0x46>
   12462:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   12466:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12468:	f1bc 0f00 	cmp.w	ip, #0
   1246c:	db6a      	blt.n	12544 <ull_conn_llcp+0x104>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   1246e:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   12472:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   12476:	1a9b      	subs	r3, r3, r2
   12478:	b2db      	uxtb	r3, r3
   1247a:	2b01      	cmp	r3, #1
   1247c:	f000 80a8 	beq.w	125d0 <ull_conn_llcp+0x190>
	return 0;
   12480:	2000      	movs	r0, #0
}
   12482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   12486:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   1248a:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1248e:	429a      	cmp	r2, r3
   12490:	d006      	beq.n	124a0 <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   12492:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   12496:	f003 0306 	and.w	r3, r3, #6
   1249a:	2b04      	cmp	r3, #4
   1249c:	f000 8241 	beq.w	12922 <ull_conn_llcp+0x4e2>
		switch (conn->llcp_type) {
   124a0:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   124a4:	1e7b      	subs	r3, r7, #1
   124a6:	2b05      	cmp	r3, #5
   124a8:	f200 8225 	bhi.w	128f6 <ull_conn_llcp+0x4b6>
   124ac:	e8df f013 	tbh	[pc, r3, lsl #1]
   124b0:	01ca0085 	.word	0x01ca0085
   124b4:	02230137 	.word	0x02230137
   124b8:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   124bc:	7903      	ldrb	r3, [r0, #4]
   124be:	f043 0303 	orr.w	r3, r3, #3
   124c2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   124c4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   124c8:	07da      	lsls	r2, r3, #31
   124ca:	f140 879c 	bpl.w	13406 <ull_conn_llcp+0xfc6>
	    (conn->llcp_feature.features_conn &
   124ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   124d2:	075b      	lsls	r3, r3, #29
   124d4:	f140 8797 	bpl.w	13406 <ull_conn_llcp+0xfc6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   124d8:	2311      	movs	r3, #17
   124da:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   124dc:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   124de:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   124e2:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   124e4:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   124e8:	2300      	movs	r3, #0
   124ea:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   124ee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   124f2:	2b00      	cmp	r3, #0
   124f4:	f000 8762 	beq.w	133bc <ull_conn_llcp+0xf7c>
	    !conn->llcp_enc.pause_tx &&
   124f8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   124fc:	0790      	lsls	r0, r2, #30
   124fe:	f100 875d 	bmi.w	133bc <ull_conn_llcp+0xf7c>
	    !conn->llcp_phy.pause_tx &&
   12502:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12506:	07d1      	lsls	r1, r2, #31
   12508:	f100 8758 	bmi.w	133bc <ull_conn_llcp+0xf7c>
		if (conn->tx_head == conn->tx_data) {
   1250c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12510:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12512:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12516:	f001 81ef 	beq.w	138f8 <ull_conn_llcp+0x14b8>
		} else if (!conn->tx_ctrl) {
   1251a:	2a00      	cmp	r2, #0
   1251c:	f001 828a 	beq.w	13a34 <ull_conn_llcp+0x15f4>
	tx->next = conn->tx_ctrl_last->next;
   12520:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12524:	681a      	ldr	r2, [r3, #0]
   12526:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1252a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1252e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12532:	f8d9 3000 	ldr.w	r3, [r9]
   12536:	2b00      	cmp	r3, #0
   12538:	f000 87e7 	beq.w	1350a <ull_conn_llcp+0x10ca>
			conn->llcp_ack = conn->llcp_req;
   1253c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12540:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12544:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   12548:	2b00      	cmp	r3, #0
   1254a:	d090      	beq.n	1246e <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   1254c:	2b02      	cmp	r3, #2
   1254e:	f000 81a9 	beq.w	128a4 <ull_conn_llcp+0x464>
   12552:	2b06      	cmp	r3, #6
   12554:	f000 8089 	beq.w	1266a <ull_conn_llcp+0x22a>
   12558:	2b01      	cmp	r3, #1
   1255a:	f000 808f 	beq.w	1267c <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   1255e:	4ab5      	ldr	r2, [pc, #724]	; (12834 <ull_conn_llcp+0x3f4>)
   12560:	49b5      	ldr	r1, [pc, #724]	; (12838 <ull_conn_llcp+0x3f8>)
   12562:	48b6      	ldr	r0, [pc, #728]	; (1283c <ull_conn_llcp+0x3fc>)
   12564:	f240 436f 	movw	r3, #1135	; 0x46f
   12568:	f009 fe98 	bl	1c29c <printk>
   1256c:	4040      	eors	r0, r0
   1256e:	f380 8811 	msr	BASEPRI, r0
   12572:	f04f 0003 	mov.w	r0, #3
   12576:	df02      	svc	2
			break;
   12578:	e779      	b.n	1246e <ull_conn_llcp+0x2e>
   1257a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   1257e:	2a00      	cmp	r2, #0
   12580:	4694      	mov	ip, r2
   12582:	f2c0 81c8 	blt.w	12916 <ull_conn_llcp+0x4d6>
	    !conn->llcp_enc.pause_rx) {
   12586:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1258a:	f017 0801 	ands.w	r8, r7, #1
   1258e:	f47f af6b 	bne.w	12468 <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   12592:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   12596:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   1259a:	45ce      	cmp	lr, r9
   1259c:	f000 82f1 	beq.w	12b82 <ull_conn_llcp+0x742>
			conn->llcp_type = LLCP_CONN_UPD;
   125a0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   125a2:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   125a4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   125a8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   125ac:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   125b0:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   125b4:	429a      	cmp	r2, r3
   125b6:	f47f af6c 	bne.w	12492 <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   125ba:	462a      	mov	r2, r5
   125bc:	4631      	mov	r1, r6
   125be:	4620      	mov	r0, r4
   125c0:	f7ee faf2 	bl	ba8 <event_conn_upd_prep>
   125c4:	2800      	cmp	r0, #0
   125c6:	f040 81a3 	bne.w	12910 <ull_conn_llcp+0x4d0>
				return -ECANCELED;
   125ca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   125ce:	e758      	b.n	12482 <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   125d0:	489b      	ldr	r0, [pc, #620]	; (12840 <ull_conn_llcp+0x400>)
   125d2:	f7f7 fe85 	bl	a2e0 <mem_acquire>
		if (tx) {
   125d6:	2800      	cmp	r0, #0
   125d8:	d03a      	beq.n	12650 <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   125da:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   125de:	3b01      	subs	r3, #1
   125e0:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   125e4:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   125e6:	2202      	movs	r2, #2
   125e8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   125ea:	f043 0303 	orr.w	r3, r3, #3
   125ee:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   125f0:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   125f2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   125f6:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   125fa:	7202      	strb	r2, [r0, #8]
	if (
   125fc:	b1c3      	cbz	r3, 12630 <ull_conn_llcp+0x1f0>
	    !conn->llcp_enc.pause_tx &&
   125fe:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12602:	0791      	lsls	r1, r2, #30
   12604:	d414      	bmi.n	12630 <ull_conn_llcp+0x1f0>
	    !conn->llcp_phy.pause_tx &&
   12606:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1260a:	07d2      	lsls	r2, r2, #31
   1260c:	d410      	bmi.n	12630 <ull_conn_llcp+0x1f0>
		if (conn->tx_head == conn->tx_data) {
   1260e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12612:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12614:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12618:	f000 85b2 	beq.w	13180 <ull_conn_llcp+0xd40>
		} else if (!conn->tx_ctrl) {
   1261c:	b96a      	cbnz	r2, 1263a <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1261e:	791a      	ldrb	r2, [r3, #4]
   12620:	f002 0203 	and.w	r2, r2, #3
   12624:	2a03      	cmp	r2, #3
   12626:	f000 875e 	beq.w	134e6 <ull_conn_llcp+0x10a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1262a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1262e:	e006      	b.n	1263e <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   12630:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12634:	2a00      	cmp	r2, #0
   12636:	f000 82f6 	beq.w	12c26 <ull_conn_llcp+0x7e6>
	tx->next = conn->tx_ctrl_last->next;
   1263a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1263e:	681a      	ldr	r2, [r3, #0]
   12640:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12642:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   12644:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   12646:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1264a:	2b00      	cmp	r3, #0
   1264c:	f000 816d 	beq.w	1292a <ull_conn_llcp+0x4ea>
		if (!conn->procedure_expire) {
   12650:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   12654:	2800      	cmp	r0, #0
   12656:	f47f af13 	bne.w	12480 <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   1265a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   1265e:	2b01      	cmp	r3, #1
   12660:	f240 82dd 	bls.w	12c1e <ull_conn_llcp+0x7de>
			conn->procedure_expire = conn->supervision_reload;
   12664:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12668:	e70a      	b.n	12480 <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   1266a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   1266c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1266e:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   12670:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12672:	4620      	mov	r0, r4
   12674:	b291      	uxth	r1, r2
   12676:	f7fd fcb7 	bl	ffe8 <event_phy_upd_ind_prep>
		break;
   1267a:	e6f8      	b.n	1246e <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   1267c:	462a      	mov	r2, r5
   1267e:	4631      	mov	r1, r6
   12680:	4620      	mov	r0, r4
   12682:	f7ee fa91 	bl	ba8 <event_conn_upd_prep>
   12686:	2800      	cmp	r0, #0
   12688:	f47f aef1 	bne.w	1246e <ull_conn_llcp+0x2e>
   1268c:	e79d      	b.n	125ca <ull_conn_llcp+0x18a>
			event_counter = lll->event_counter +
   1268e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   12690:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   12692:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   12694:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12696:	b289      	uxth	r1, r1
   12698:	4620      	mov	r0, r4
   1269a:	f7fd fca5 	bl	ffe8 <event_phy_upd_ind_prep>
		break;
   1269e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   126a2:	e6e1      	b.n	12468 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   126a4:	4866      	ldr	r0, [pc, #408]	; (12840 <ull_conn_llcp+0x400>)
   126a6:	f7f7 fe1b 	bl	a2e0 <mem_acquire>
	if (tx) {
   126aa:	2800      	cmp	r0, #0
   126ac:	f000 8130 	beq.w	12910 <ull_conn_llcp+0x4d0>
		conn->llcp_ack = conn->llcp_req;
   126b0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   126b4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   126b8:	7903      	ldrb	r3, [r0, #4]
   126ba:	f043 0303 	orr.w	r3, r3, #3
   126be:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   126c0:	2301      	movs	r3, #1
   126c2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   126c4:	2312      	movs	r3, #18
   126c6:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   126c8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   126cc:	2b00      	cmp	r3, #0
   126ce:	f000 82b3 	beq.w	12c38 <ull_conn_llcp+0x7f8>
	    !conn->llcp_enc.pause_tx &&
   126d2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   126d6:	0791      	lsls	r1, r2, #30
   126d8:	f100 82ae 	bmi.w	12c38 <ull_conn_llcp+0x7f8>
	    !conn->llcp_phy.pause_tx &&
   126dc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   126e0:	07d2      	lsls	r2, r2, #31
   126e2:	f100 82a9 	bmi.w	12c38 <ull_conn_llcp+0x7f8>
		if (conn->tx_head == conn->tx_data) {
   126e6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   126ea:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   126ec:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   126f0:	f000 8671 	beq.w	133d6 <ull_conn_llcp+0xf96>
		} else if (!conn->tx_ctrl) {
   126f4:	2a00      	cmp	r2, #0
   126f6:	f000 86fe 	beq.w	134f6 <ull_conn_llcp+0x10b6>
	tx->next = conn->tx_ctrl_last->next;
   126fa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   126fe:	681a      	ldr	r2, [r3, #0]
   12700:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12702:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   12704:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   12706:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1270a:	2b00      	cmp	r3, #0
   1270c:	f000 8419 	beq.w	12f42 <ull_conn_llcp+0xb02>
		conn->procedure_expire = conn->procedure_reload;
   12710:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   12714:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12718:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1271c:	e6a4      	b.n	12468 <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   1271e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12722:	f013 0803 	ands.w	r8, r3, #3
   12726:	f000 8152 	beq.w	129ce <ull_conn_llcp+0x58e>
		if (lll->role &&
   1272a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1272e:	2b00      	cmp	r3, #0
   12730:	f6bf ae9d 	bge.w	1246e <ull_conn_llcp+0x2e>
   12734:	f1b8 0f01 	cmp.w	r8, #1
   12738:	f47f af04 	bne.w	12544 <ull_conn_llcp+0x104>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1273c:	4840      	ldr	r0, [pc, #256]	; (12840 <ull_conn_llcp+0x400>)
   1273e:	f7f7 fdcf 	bl	a2e0 <mem_acquire>
	if (!tx) {
   12742:	4680      	mov	r8, r0
   12744:	2800      	cmp	r0, #0
   12746:	f000 80e3 	beq.w	12910 <ull_conn_llcp+0x4d0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1274a:	7903      	ldrb	r3, [r0, #4]
   1274c:	f043 0303 	orr.w	r3, r3, #3
   12750:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12752:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   12756:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12758:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1275c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1275e:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12762:	210c      	movs	r1, #12
   12764:	4638      	mov	r0, r7
   12766:	f003 ffdb 	bl	16720 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1276a:	4639      	mov	r1, r7
   1276c:	2208      	movs	r2, #8
   1276e:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   12772:	f00b f849 	bl	1d808 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   12776:	464a      	mov	r2, r9
   12778:	f108 0110 	add.w	r1, r8, #16
   1277c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12780:	f00b f842 	bl	1d808 <memcpy>
	    conn->tx_head &&
   12784:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12788:	2b00      	cmp	r3, #0
   1278a:	f000 84ec 	beq.w	13166 <ull_conn_llcp+0xd26>
	    !conn->llcp_enc.pause_tx &&
   1278e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12792:	0791      	lsls	r1, r2, #30
   12794:	f100 84e7 	bmi.w	13166 <ull_conn_llcp+0xd26>
	    !conn->llcp_phy.pause_tx &&
   12798:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1279c:	07d2      	lsls	r2, r2, #31
   1279e:	f100 84e2 	bmi.w	13166 <ull_conn_llcp+0xd26>
		if (conn->tx_head == conn->tx_data) {
   127a2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   127a6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   127a8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   127ac:	f000 872c 	beq.w	13608 <ull_conn_llcp+0x11c8>
		} else if (!conn->tx_ctrl) {
   127b0:	2a00      	cmp	r2, #0
   127b2:	f000 87c7 	beq.w	13744 <ull_conn_llcp+0x1304>
	tx->next = conn->tx_ctrl_last->next;
   127b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   127ba:	681a      	ldr	r2, [r3, #0]
   127bc:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   127c0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   127c4:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   127c8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   127cc:	2b00      	cmp	r3, #0
   127ce:	f000 85d7 	beq.w	13380 <ull_conn_llcp+0xf40>
			rx = ll_pdu_rx_alloc();
   127d2:	f7fb fef3 	bl	e5bc <ll_pdu_rx_alloc>
			if (!rx) {
   127d6:	4607      	mov	r7, r0
   127d8:	2800      	cmp	r0, #0
   127da:	f000 8099 	beq.w	12910 <ull_conn_llcp+0x4d0>
			rx->hdr.handle = conn->lll.handle;
   127de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   127e0:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   127e2:	2303      	movs	r3, #3
   127e4:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   127e6:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   127e8:	7f3b      	ldrb	r3, [r7, #28]
   127ea:	f043 0303 	orr.w	r3, r3, #3
   127ee:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   127f0:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   127f2:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   127f4:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   127f6:	f204 1169 	addw	r1, r4, #361	; 0x169
   127fa:	f107 0020 	add.w	r0, r7, #32
   127fe:	f00b f803 	bl	1d808 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   12802:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   12806:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1280a:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   1280e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   12812:	6838      	ldr	r0, [r7, #0]
   12814:	4639      	mov	r1, r7
   12816:	f7fb fea3 	bl	e560 <ll_rx_put>
			ll_rx_sched();
   1281a:	f7fb feab 	bl	e574 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   1281e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12822:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12826:	2202      	movs	r2, #2
   12828:	f362 0301 	bfi	r3, r2, #0, #2
   1282c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   12830:	e61a      	b.n	12468 <ull_conn_llcp+0x28>
   12832:	bf00      	nop
   12834:	00020c10 	.word	0x00020c10
   12838:	000206a4 	.word	0x000206a4
   1283c:	0002060c 	.word	0x0002060c
   12840:	20001edc 	.word	0x20001edc
			event_counter = lll->event_counter +
   12844:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   12846:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12848:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   1284a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
					lll->latency_prepare + lazy;
   1284e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   12850:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   12854:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   12856:	d16b      	bne.n	12930 <ull_conn_llcp+0x4f0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12858:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1285c:	1afb      	subs	r3, r7, r3
   1285e:	0418      	lsls	r0, r3, #16
   12860:	d456      	bmi.n	12910 <ull_conn_llcp+0x4d0>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12862:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12866:	2b00      	cmp	r3, #0
   12868:	f2c0 8363 	blt.w	12f32 <ull_conn_llcp+0xaf2>
			conn->llcp_ack = conn->llcp_req;
   1286c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12870:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   12874:	f104 0734 	add.w	r7, r4, #52	; 0x34
   12878:	2205      	movs	r2, #5
   1287a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1287e:	4638      	mov	r0, r7
   12880:	f00a ffc2 	bl	1d808 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   12884:	2105      	movs	r1, #5
   12886:	4638      	mov	r0, r7
   12888:	f7f7 fefa 	bl	a680 <util_ones_count_get>
		lll->data_chan_count =
   1288c:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   12890:	2301      	movs	r3, #1
		lll->data_chan_count =
   12892:	f360 0c05 	bfi	ip, r0, #0, #6
   12896:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1289a:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   1289e:	fa4f fc8c 	sxtb.w	ip, ip
   128a2:	e5e1      	b.n	12468 <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   128a4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   128a6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   128a8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   128ac:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   128ae:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   128b0:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   128b4:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   128b6:	f040 8119 	bne.w	12aec <ull_conn_llcp+0x6ac>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   128ba:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   128be:	1ab6      	subs	r6, r6, r2
   128c0:	0430      	lsls	r0, r6, #16
   128c2:	f53f add4 	bmi.w	1246e <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   128c6:	f104 0534 	add.w	r5, r4, #52	; 0x34
   128ca:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   128cc:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   128d0:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   128d4:	4628      	mov	r0, r5
   128d6:	f00a ff97 	bl	1d808 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   128da:	2105      	movs	r1, #5
   128dc:	4628      	mov	r0, r5
   128de:	f7f7 fecf 	bl	a680 <util_ones_count_get>
		lll->data_chan_count =
   128e2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   128e6:	2201      	movs	r2, #1
		lll->data_chan_count =
   128e8:	f360 0305 	bfi	r3, r0, #0, #6
   128ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   128f0:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   128f4:	e5bb      	b.n	1246e <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   128f6:	4ad6      	ldr	r2, [pc, #856]	; (12c50 <ull_conn_llcp+0x810>)
   128f8:	49d6      	ldr	r1, [pc, #856]	; (12c54 <ull_conn_llcp+0x814>)
   128fa:	48d7      	ldr	r0, [pc, #860]	; (12c58 <ull_conn_llcp+0x818>)
   128fc:	f240 433e 	movw	r3, #1086	; 0x43e
   12900:	f009 fccc 	bl	1c29c <printk>
   12904:	4040      	eors	r0, r0
   12906:	f380 8811 	msr	BASEPRI, r0
   1290a:	f04f 0003 	mov.w	r0, #3
   1290e:	df02      	svc	2
			break;
   12910:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12914:	e5a8      	b.n	12468 <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   12916:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1291a:	2900      	cmp	r1, #0
   1291c:	f47f ada4 	bne.w	12468 <ull_conn_llcp+0x28>
   12920:	e631      	b.n	12586 <ull_conn_llcp+0x146>
				event_len_prep(conn);
   12922:	4620      	mov	r0, r4
   12924:	f7fd fa68 	bl	fdf8 <event_len_prep>
   12928:	e5ba      	b.n	124a0 <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   1292a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1292e:	e68f      	b.n	12650 <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12930:	48ca      	ldr	r0, [pc, #808]	; (12c5c <ull_conn_llcp+0x81c>)
   12932:	f7f7 fcd5 	bl	a2e0 <mem_acquire>
		if (tx) {
   12936:	4680      	mov	r8, r0
   12938:	2800      	cmp	r0, #0
   1293a:	d0e9      	beq.n	12910 <ull_conn_llcp+0x4d0>
			conn->llcp.chan_map.instant = event_counter +
   1293c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1293e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   12942:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   12944:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   12946:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1294a:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   1294c:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12950:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   12954:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12958:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1295a:	2308      	movs	r3, #8
   1295c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1295e:	2301      	movs	r3, #1
   12960:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   12962:	2205      	movs	r2, #5
   12964:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12968:	3008      	adds	r0, #8
   1296a:	f00a ff4d 	bl	1d808 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1296e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   12972:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   12976:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1297a:	2b00      	cmp	r3, #0
   1297c:	f000 82e5 	beq.w	12f4a <ull_conn_llcp+0xb0a>
	    !conn->llcp_enc.pause_tx &&
   12980:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12984:	0792      	lsls	r2, r2, #30
   12986:	f100 82e0 	bmi.w	12f4a <ull_conn_llcp+0xb0a>
	    !conn->llcp_phy.pause_tx &&
   1298a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1298e:	07d7      	lsls	r7, r2, #31
   12990:	f100 82db 	bmi.w	12f4a <ull_conn_llcp+0xb0a>
		if (conn->tx_head == conn->tx_data) {
   12994:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12998:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1299a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1299e:	f000 85b8 	beq.w	13512 <ull_conn_llcp+0x10d2>
		} else if (!conn->tx_ctrl) {
   129a2:	2a00      	cmp	r2, #0
   129a4:	f000 8673 	beq.w	1368e <ull_conn_llcp+0x124e>
	tx->next = conn->tx_ctrl_last->next;
   129a8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   129ac:	681a      	ldr	r2, [r3, #0]
   129ae:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   129b2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   129b6:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   129ba:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   129be:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   129c2:	2b00      	cmp	r3, #0
   129c4:	f47f ad50 	bne.w	12468 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   129c8:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   129cc:	e54c      	b.n	12468 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   129ce:	48a3      	ldr	r0, [pc, #652]	; (12c5c <ull_conn_llcp+0x81c>)
   129d0:	f7f7 fc86 	bl	a2e0 <mem_acquire>
	if (!tx) {
   129d4:	4681      	mov	r9, r0
   129d6:	2800      	cmp	r0, #0
   129d8:	d09a      	beq.n	12910 <ull_conn_llcp+0x4d0>
	if (!lll->role) {
   129da:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   129de:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   129e0:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   129e4:	f280 833f 	bge.w	13066 <ull_conn_llcp+0xc26>
	else if (!lll->enc_rx) {
   129e8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   129ec:	0719      	lsls	r1, r3, #28
   129ee:	f100 8446 	bmi.w	1327e <ull_conn_llcp+0xe3e>
		if (conn->llcp.encryption.error_code) {
   129f2:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   129f6:	f1b8 0f00 	cmp.w	r8, #0
   129fa:	f47f ad5f 	bne.w	124bc <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   129fe:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   12a02:	463b      	mov	r3, r7
   12a04:	4642      	mov	r2, r8
   12a06:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   12a0a:	f204 1071 	addw	r0, r4, #369	; 0x171
   12a0e:	f006 f94b 	bl	18ca8 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   12a12:	4639      	mov	r1, r7
   12a14:	2210      	movs	r2, #16
   12a16:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   12a1a:	f00a fef5 	bl	1d808 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   12a1e:	2208      	movs	r2, #8
   12a20:	f104 0194 	add.w	r1, r4, #148	; 0x94
   12a24:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   12a28:	f00a feee 	bl	1d808 <memcpy>
			lll->ccm_rx.direction = 1U;
   12a2c:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   12a30:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   12a34:	f043 0301 	orr.w	r3, r3, #1
   12a38:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   12a3c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   12a40:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   12a44:	f368 0300 	bfi	r3, r8, #0, #1
   12a48:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   12a4c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   12a50:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   12a54:	f043 0308 	orr.w	r3, r3, #8
   12a58:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12a5c:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   12a60:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12a64:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   12a68:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   12a6c:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   12a70:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   12a74:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   12a78:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12a7c:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12a80:	2301      	movs	r3, #1
   12a82:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12a86:	2305      	movs	r3, #5
   12a88:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   12a8c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12a90:	2b00      	cmp	r3, #0
   12a92:	f000 83a2 	beq.w	131da <ull_conn_llcp+0xd9a>
	    !conn->llcp_enc.pause_tx &&
   12a96:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12a9a:	0792      	lsls	r2, r2, #30
   12a9c:	f100 839d 	bmi.w	131da <ull_conn_llcp+0xd9a>
	    !conn->llcp_phy.pause_tx &&
   12aa0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12aa4:	07d7      	lsls	r7, r2, #31
   12aa6:	f100 8398 	bmi.w	131da <ull_conn_llcp+0xd9a>
		if (conn->tx_head == conn->tx_data) {
   12aaa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12aae:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12ab0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12ab4:	f000 8637 	beq.w	13726 <ull_conn_llcp+0x12e6>
		} else if (!conn->tx_ctrl) {
   12ab8:	2a00      	cmp	r2, #0
   12aba:	f000 876e 	beq.w	1399a <ull_conn_llcp+0x155a>
	tx->next = conn->tx_ctrl_last->next;
   12abe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12ac2:	681a      	ldr	r2, [r3, #0]
   12ac4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   12ac8:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   12acc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12ad0:	f8d9 3000 	ldr.w	r3, [r9]
   12ad4:	2b00      	cmp	r3, #0
   12ad6:	f000 8339 	beq.w	1314c <ull_conn_llcp+0xd0c>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   12ada:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12ade:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12ae2:	f043 0303 	orr.w	r3, r3, #3
   12ae6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   12aea:	e4bd      	b.n	12468 <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12aec:	485b      	ldr	r0, [pc, #364]	; (12c5c <ull_conn_llcp+0x81c>)
   12aee:	f7f7 fbf7 	bl	a2e0 <mem_acquire>
		if (tx) {
   12af2:	4605      	mov	r5, r0
   12af4:	2800      	cmp	r0, #0
   12af6:	f43f acba 	beq.w	1246e <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   12afa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   12afc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b00:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   12b02:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   12b04:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   12b08:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   12b0a:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   12b0e:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b12:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   12b16:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b18:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b1a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b1c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12b1e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   12b20:	2205      	movs	r2, #5
   12b22:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12b26:	3008      	adds	r0, #8
   12b28:	f00a fe6e 	bl	1d808 <memcpy>
	    conn->tx_head &&
   12b2c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12b30:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   12b34:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   12b38:	2b00      	cmp	r3, #0
   12b3a:	f000 8289 	beq.w	13050 <ull_conn_llcp+0xc10>
	    !conn->llcp_enc.pause_tx &&
   12b3e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12b42:	0797      	lsls	r7, r2, #30
   12b44:	f100 8284 	bmi.w	13050 <ull_conn_llcp+0xc10>
	    !conn->llcp_phy.pause_tx &&
   12b48:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12b4c:	07d6      	lsls	r6, r2, #31
   12b4e:	f100 827f 	bmi.w	13050 <ull_conn_llcp+0xc10>
		if (conn->tx_head == conn->tx_data) {
   12b52:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12b56:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12b58:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12b5c:	f000 84f0 	beq.w	13540 <ull_conn_llcp+0x1100>
		} else if (!conn->tx_ctrl) {
   12b60:	2a00      	cmp	r2, #0
   12b62:	f000 858a 	beq.w	1367a <ull_conn_llcp+0x123a>
	tx->next = conn->tx_ctrl_last->next;
   12b66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12b6a:	681a      	ldr	r2, [r3, #0]
   12b6c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   12b6e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   12b70:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   12b72:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12b76:	2b00      	cmp	r3, #0
   12b78:	f47f ac79 	bne.w	1246e <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   12b7c:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   12b80:	e475      	b.n	1246e <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   12b82:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   12b86:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   12b8a:	4571      	cmp	r1, lr
   12b8c:	d068      	beq.n	12c60 <ull_conn_llcp+0x820>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   12b8e:	eba1 010e 	sub.w	r1, r1, lr
   12b92:	07c8      	lsls	r0, r1, #31
   12b94:	f57f ac68 	bpl.w	12468 <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   12b98:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   12b9c:	f013 0701 	ands.w	r7, r3, #1
   12ba0:	f000 81df 	beq.w	12f62 <ull_conn_llcp+0xb22>
		rx = ll_pdu_rx_alloc();
   12ba4:	f7fb fd0a 	bl	e5bc <ll_pdu_rx_alloc>
		if (!rx) {
   12ba8:	4607      	mov	r7, r0
   12baa:	b398      	cbz	r0, 12c14 <ull_conn_llcp+0x7d4>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   12bac:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   12bb0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12bb4:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   12bb6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   12bb8:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12bba:	f043 0303 	orr.w	r3, r3, #3
   12bbe:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12bc0:	2309      	movs	r3, #9
   12bc2:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12bc4:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12bc6:	2303      	movs	r3, #3
   12bc8:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   12bca:	4641      	mov	r1, r8
   12bcc:	2208      	movs	r2, #8
   12bce:	3020      	adds	r0, #32
   12bd0:	f00a fe45 	bl	1d85e <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   12bd4:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   12bd8:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   12bda:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   12bde:	f3c2 2207 	ubfx	r2, r2, #8, #8
   12be2:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   12be6:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   12be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   12bec:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   12bf0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12bf4:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   12bf6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   12bfa:	0a12      	lsrs	r2, r2, #8
   12bfc:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   12c00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   12c04:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   12c08:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   12c0a:	6808      	ldr	r0, [r1, #0]
   12c0c:	f7fb fca8 	bl	e560 <ll_rx_put>
	ll_rx_sched();
   12c10:	f7fb fcb0 	bl	e574 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12c14:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12c18:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   12c1c:	e41c      	b.n	12458 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   12c1e:	3301      	adds	r3, #1
   12c20:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12c24:	e42d      	b.n	12482 <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   12c26:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12c28:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12c2c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12c30:	2b00      	cmp	r3, #0
   12c32:	f47f ad0d 	bne.w	12650 <ull_conn_llcp+0x210>
   12c36:	e678      	b.n	1292a <ull_conn_llcp+0x4ea>
		if (!conn->tx_ctrl) {
   12c38:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12c3c:	2a00      	cmp	r2, #0
   12c3e:	f47f ad5c 	bne.w	126fa <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head;
   12c42:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12c44:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12c48:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12c4c:	e55d      	b.n	1270a <ull_conn_llcp+0x2ca>
   12c4e:	bf00      	nop
   12c50:	00020c10 	.word	0x00020c10
   12c54:	000206a4 	.word	0x000206a4
   12c58:	0002060c 	.word	0x0002060c
   12c5c:	20001edc 	.word	0x20001edc
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   12c60:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   12c64:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   12c68:	4571      	cmp	r1, lr
   12c6a:	d02e      	beq.n	12cca <ull_conn_llcp+0x88a>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   12c6c:	eba1 010e 	sub.w	r1, r1, lr
   12c70:	07cf      	lsls	r7, r1, #31
   12c72:	f57f abf9 	bpl.w	12468 <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   12c76:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   12c7a:	07d8      	lsls	r0, r3, #31
   12c7c:	f140 8333 	bpl.w	132e6 <ull_conn_llcp+0xea6>
	} else if (conn->llcp_version.rx) {
   12c80:	079b      	lsls	r3, r3, #30
   12c82:	f140 832b 	bpl.w	132dc <ull_conn_llcp+0xe9c>
		rx = ll_pdu_rx_alloc();
   12c86:	f7fb fc99 	bl	e5bc <ll_pdu_rx_alloc>
		if (!rx) {
   12c8a:	4601      	mov	r1, r0
   12c8c:	2800      	cmp	r0, #0
   12c8e:	d0c1      	beq.n	12c14 <ull_conn_llcp+0x7d4>
		conn->llcp_version.ack = conn->llcp_version.req;
   12c90:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   12c94:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   12c98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12c9a:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12c9c:	2303      	movs	r3, #3
   12c9e:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ca0:	7f03      	ldrb	r3, [r0, #28]
   12ca2:	f043 0303 	orr.w	r3, r3, #3
   12ca6:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12ca8:	2306      	movs	r3, #6
   12caa:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12cac:	230c      	movs	r3, #12
   12cae:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   12cb0:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   12cb4:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   12cb8:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   12cbc:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   12cc0:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   12cc4:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   12cc8:	e79f      	b.n	12c0a <ull_conn_llcp+0x7ca>
		} else if (conn->llcp_conn_param.ack !=
   12cca:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   12cce:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   12cd2:	458e      	cmp	lr, r1
   12cd4:	f000 823d 	beq.w	13152 <ull_conn_llcp+0xd12>
	conn_upd = conn_upd_curr;
   12cd8:	f8df 835c 	ldr.w	r8, [pc, #860]	; 13038 <ull_conn_llcp+0xbf8>
   12cdc:	f8d8 1000 	ldr.w	r1, [r8]
	if (conn_upd && (conn_upd != conn)) {
   12ce0:	2900      	cmp	r1, #0
   12ce2:	f000 8351 	beq.w	13388 <ull_conn_llcp+0xf48>
   12ce6:	428c      	cmp	r4, r1
   12ce8:	f47f abbe 	bne.w	12468 <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   12cec:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   12cf0:	f001 0107 	and.w	r1, r1, #7
   12cf4:	2907      	cmp	r1, #7
   12cf6:	f200 80e3 	bhi.w	12ec0 <ull_conn_llcp+0xa80>
   12cfa:	f20f 0e08 	addw	lr, pc, #8
   12cfe:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   12d02:	bf00      	nop
   12d04:	00012dfb 	.word	0x00012dfb
   12d08:	00012d75 	.word	0x00012d75
   12d0c:	00012d25 	.word	0x00012d25
   12d10:	00012459 	.word	0x00012459
   12d14:	00012459 	.word	0x00012459
   12d18:	00012459 	.word	0x00012459
   12d1c:	00012459 	.word	0x00012459
   12d20:	00012ec1 	.word	0x00012ec1
	if (conn->llcp_enc.pause_tx) {
   12d24:	07bb      	lsls	r3, r7, #30
   12d26:	f53f ab9f 	bmi.w	12468 <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   12d2a:	f7fb fc47 	bl	e5bc <ll_pdu_rx_alloc>
	if (!rx) {
   12d2e:	4601      	mov	r1, r0
   12d30:	2800      	cmp	r0, #0
   12d32:	f43f af6f 	beq.w	12c14 <ull_conn_llcp+0x7d4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12d36:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12d3a:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12d3c:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12d3e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12d42:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   12d46:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12d48:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   12d4c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12d4e:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12d50:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   12d52:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   12d54:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   12d58:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   12d5a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   12d5e:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   12d60:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   12d64:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   12d66:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   12d6a:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12d6c:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   12d6e:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12d70:	77cb      	strb	r3, [r1, #31]
   12d72:	e74a      	b.n	12c0a <ull_conn_llcp+0x7ca>
	if (conn->llcp_conn_param.status) {
   12d74:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   12d78:	2b00      	cmp	r3, #0
   12d7a:	f040 8512 	bne.w	137a2 <ull_conn_llcp+0x1362>
	if (!conn->lll.role) {
   12d7e:	2a00      	cmp	r2, #0
   12d80:	f2c0 8552 	blt.w	13828 <ull_conn_llcp+0x13e8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12d84:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   12d88:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12d8c:	2105      	movs	r1, #5
   12d8e:	f361 0202 	bfi	r2, r1, #0, #3
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   12d92:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12d96:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   12d9a:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   12d9c:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   12da0:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   12da4:	2900      	cmp	r1, #0
   12da6:	f000 85c6 	beq.w	13936 <ull_conn_llcp+0x14f6>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   12daa:	fbb2 f3f1 	udiv	r3, r2, r1
   12dae:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   12db2:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   12db6:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   12db8:	4299      	cmp	r1, r3
   12dba:	bf98      	it	ls
   12dbc:	461a      	movls	r2, r3
   12dbe:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12dc2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   12dc6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   12dca:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   12dce:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12dd2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   12dd6:	00db      	lsls	r3, r3, #3
   12dd8:	f022 020f 	bic.w	r2, r2, #15
   12ddc:	f043 0302 	orr.w	r3, r3, #2
   12de0:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   12de2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12de6:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   12dea:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   12dee:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   12df2:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12df6:	f7ff bb3a 	b.w	1246e <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12dfa:	4890      	ldr	r0, [pc, #576]	; (1303c <ull_conn_llcp+0xbfc>)
   12dfc:	f7f7 fa70 	bl	a2e0 <mem_acquire>
	if (!tx) {
   12e00:	4602      	mov	r2, r0
   12e02:	2800      	cmp	r0, #0
   12e04:	f43f af06 	beq.w	12c14 <ull_conn_llcp+0x7d4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e08:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   12e0a:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e0e:	f043 0303 	orr.w	r3, r3, #3
   12e12:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   12e14:	2318      	movs	r3, #24
   12e16:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12e18:	230f      	movs	r3, #15
   12e1a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   12e1c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   12e20:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   12e22:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   12e26:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   12e28:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   12e2c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   12e2e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   12e32:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   12e34:	2300      	movs	r3, #0
   12e36:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   12e38:	74c3      	strb	r3, [r0, #19]
   12e3a:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   12e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e40:	7543      	strb	r3, [r0, #21]
   12e42:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   12e44:	75c3      	strb	r3, [r0, #23]
   12e46:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   12e48:	7643      	strb	r3, [r0, #25]
   12e4a:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   12e4c:	76c3      	strb	r3, [r0, #27]
   12e4e:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   12e50:	7743      	strb	r3, [r0, #29]
   12e52:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   12e54:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   12e58:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   12e5c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   12e60:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   12e64:	2106      	movs	r1, #6
   12e66:	f361 0302 	bfi	r3, r1, #0, #3
   12e6a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   12e6e:	68a3      	ldr	r3, [r4, #8]
   12e70:	2b00      	cmp	r3, #0
   12e72:	da0a      	bge.n	12e8a <ull_conn_llcp+0xa4a>
			uint32_t ticks_prepare_to_start =
   12e74:	68e7      	ldr	r7, [r4, #12]
   12e76:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   12e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   12e7c:	4287      	cmp	r7, r0
   12e7e:	bf2c      	ite	cs
   12e80:	19e9      	addcs	r1, r5, r7
   12e82:	1829      	addcc	r1, r5, r0
   12e84:	1acb      	subs	r3, r1, r3
   12e86:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
   12e8a:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   12e8c:	4b6c      	ldr	r3, [pc, #432]	; (13040 <ull_conn_llcp+0xc00>)
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
   12e8e:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12e92:	2201      	movs	r2, #1
   12e94:	2102      	movs	r1, #2
   12e96:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   12e98:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12e9a:	f7f7 faf9 	bl	a490 <mayfly_enqueue>
		LL_ASSERT(!retval);
   12e9e:	2800      	cmp	r0, #0
   12ea0:	f43f aeb8 	beq.w	12c14 <ull_conn_llcp+0x7d4>
   12ea4:	4a67      	ldr	r2, [pc, #412]	; (13044 <ull_conn_llcp+0xc04>)
   12ea6:	4968      	ldr	r1, [pc, #416]	; (13048 <ull_conn_llcp+0xc08>)
   12ea8:	f640 531e 	movw	r3, #3358	; 0xd1e
   12eac:	4867      	ldr	r0, [pc, #412]	; (1304c <ull_conn_llcp+0xc0c>)
   12eae:	f009 f9f5 	bl	1c29c <printk>
   12eb2:	4040      	eors	r0, r0
   12eb4:	f380 8811 	msr	BASEPRI, r0
   12eb8:	f04f 0003 	mov.w	r0, #3
   12ebc:	df02      	svc	2
   12ebe:	e6a9      	b.n	12c14 <ull_conn_llcp+0x7d4>
			event_counter = lll->event_counter +
   12ec0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   12ec2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   12ec4:	f8d4 01a0 	ldr.w	r0, [r4, #416]	; 0x1a0
			event_counter = lll->event_counter +
   12ec8:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
   12eca:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12ecc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   12ed0:	f820 3c02 	strh.w	r3, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12ed4:	2304      	movs	r3, #4
   12ed6:	f363 0202 	bfi	r2, r3, #0, #3
	    conn->tx_head &&
   12eda:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12ede:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   12ee2:	f1a0 0113 	sub.w	r1, r0, #19
	if (
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	f000 8382 	beq.w	135f0 <ull_conn_llcp+0x11b0>
	    conn->tx_head &&
   12eec:	07bf      	lsls	r7, r7, #30
   12eee:	f100 837f 	bmi.w	135f0 <ull_conn_llcp+0x11b0>
	    !conn->llcp_phy.pause_tx &&
   12ef2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12ef6:	07d2      	lsls	r2, r2, #31
   12ef8:	f100 837a 	bmi.w	135f0 <ull_conn_llcp+0x11b0>
		if (conn->tx_head == conn->tx_data) {
   12efc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12f00:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12f02:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12f06:	f000 8569 	beq.w	139dc <ull_conn_llcp+0x159c>
		} else if (!conn->tx_ctrl) {
   12f0a:	2a00      	cmp	r2, #0
   12f0c:	f000 85c1 	beq.w	13a92 <ull_conn_llcp+0x1652>
	tx->next = conn->tx_ctrl_last->next;
   12f10:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12f14:	681a      	ldr	r2, [r3, #0]
   12f16:	f840 2c13 	str.w	r2, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
   12f1a:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   12f1c:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12f20:	f850 3c13 	ldr.w	r3, [r0, #-19]
   12f24:	2b00      	cmp	r3, #0
   12f26:	f47f aa9f 	bne.w	12468 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   12f2a:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
   12f2e:	f7ff ba9b 	b.w	12468 <ull_conn_llcp+0x28>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12f32:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   12f36:	2b00      	cmp	r3, #0
   12f38:	f43f ac98 	beq.w	1286c <ull_conn_llcp+0x42c>
			conn->slave.llcp_type = LLCP_NONE;
   12f3c:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   12f40:	e498      	b.n	12874 <ull_conn_llcp+0x434>
		conn->tx_data_last = tx;
   12f42:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   12f46:	f7ff bbe3 	b.w	12710 <ull_conn_llcp+0x2d0>
		if (!conn->tx_ctrl) {
   12f4a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12f4e:	2a00      	cmp	r2, #0
   12f50:	f47f ad2a 	bne.w	129a8 <ull_conn_llcp+0x568>
			tx->next = conn->tx_head;
   12f54:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   12f58:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12f5c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   12f60:	e52d      	b.n	129be <ull_conn_llcp+0x57e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12f62:	4836      	ldr	r0, [pc, #216]	; (1303c <ull_conn_llcp+0xbfc>)
   12f64:	f7f7 f9bc 	bl	a2e0 <mem_acquire>
	if (tx) {
   12f68:	4680      	mov	r8, r0
   12f6a:	2800      	cmp	r0, #0
   12f6c:	f43f ae52 	beq.w	12c14 <ull_conn_llcp+0x7d4>
		conn->llcp_feature.ack--;
   12f70:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   12f74:	3b01      	subs	r3, #1
   12f76:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   12f7a:	2309      	movs	r3, #9
   12f7c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   12f7e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12f82:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12f84:	7903      	ldrb	r3, [r0, #4]
   12f86:	f043 0303 	orr.w	r3, r3, #3
   12f8a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   12f8c:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   12f90:	bfac      	ite	ge
   12f92:	2308      	movge	r3, #8
   12f94:	230e      	movlt	r3, #14
   12f96:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   12f98:	4639      	mov	r1, r7
   12f9a:	4410      	add	r0, r2
   12f9c:	f00a fc5f 	bl	1d85e <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   12fa0:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   12fa4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   12fa6:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   12faa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   12fae:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   12fb2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   12fb4:	f888 300c 	strb.w	r3, [r8, #12]
   12fb8:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   12fbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   12fc0:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   12fc4:	0a09      	lsrs	r1, r1, #8
   12fc6:	0a12      	lsrs	r2, r2, #8
   12fc8:	f888 100b 	strb.w	r1, [r8, #11]
   12fcc:	f888 300d 	strb.w	r3, [r8, #13]
   12fd0:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   12fd4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12fd8:	2b00      	cmp	r3, #0
   12fda:	f000 80f2 	beq.w	131c2 <ull_conn_llcp+0xd82>
	    !conn->llcp_enc.pause_tx &&
   12fde:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12fe2:	0791      	lsls	r1, r2, #30
   12fe4:	f100 80ed 	bmi.w	131c2 <ull_conn_llcp+0xd82>
	    !conn->llcp_phy.pause_tx &&
   12fe8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12fec:	07d2      	lsls	r2, r2, #31
   12fee:	f100 80e8 	bmi.w	131c2 <ull_conn_llcp+0xd82>
		if (conn->tx_head == conn->tx_data) {
   12ff2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12ff6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12ff8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12ffc:	f000 832d 	beq.w	1365a <ull_conn_llcp+0x121a>
		} else if (!conn->tx_ctrl) {
   13000:	2a00      	cmp	r2, #0
   13002:	f000 84b9 	beq.w	13978 <ull_conn_llcp+0x1538>
	tx->next = conn->tx_ctrl_last->next;
   13006:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1300a:	681a      	ldr	r2, [r3, #0]
   1300c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   13010:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13014:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   13018:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1301c:	2b00      	cmp	r3, #0
   1301e:	f000 81e8 	beq.w	133f2 <ull_conn_llcp+0xfb2>
		conn->procedure_expire = conn->procedure_reload;
   13022:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13026:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1302a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   1302e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   13032:	f7ff ba11 	b.w	12458 <ull_conn_llcp+0x18>
   13036:	bf00      	nop
   13038:	20001e48 	.word	0x20001e48
   1303c:	20001edc 	.word	0x20001edc
   13040:	200004c0 	.word	0x200004c0
   13044:	00020c10 	.word	0x00020c10
   13048:	0002092c 	.word	0x0002092c
   1304c:	0002060c 	.word	0x0002060c
		if (!conn->tx_ctrl) {
   13050:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13054:	2a00      	cmp	r2, #0
   13056:	f47f ad86 	bne.w	12b66 <ull_conn_llcp+0x726>
			tx->next = conn->tx_head;
   1305a:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   1305c:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13060:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   13064:	e587      	b.n	12b76 <ull_conn_llcp+0x736>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   13066:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   1306a:	463b      	mov	r3, r7
   1306c:	4642      	mov	r2, r8
   1306e:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   13072:	f204 1071 	addw	r0, r4, #369	; 0x171
   13076:	f005 fe17 	bl	18ca8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   1307a:	4639      	mov	r1, r7
   1307c:	2210      	movs	r2, #16
   1307e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   13082:	f00a fbc1 	bl	1d808 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   13086:	2208      	movs	r2, #8
   13088:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1308c:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   13090:	f00a fbba 	bl	1d808 <memcpy>
		lll->ccm_rx.direction = 0;
   13094:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   13098:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->ccm_rx.direction = 0;
   1309c:	f368 0300 	bfi	r3, r8, #0, #1
   130a0:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   130a4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   130a8:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_tx.direction = 1;
   130ac:	f043 0301 	orr.w	r3, r3, #1
   130b0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
		lll->enc_rx = 1;
   130b4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   130b8:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->enc_rx = 1;
   130bc:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   130c0:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   130c4:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   130c8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   130cc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   130d0:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   130d4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->enc_rx = 1;
   130d8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	if (!pdu_ctrl_tx) {
   130dc:	f1ba 0f00 	cmp.w	sl, #0
   130e0:	f000 81a3 	beq.w	1342a <ull_conn_llcp+0xfea>
	conn->lll.enc_tx = 1;
   130e4:	b2db      	uxtb	r3, r3
   130e6:	f043 0310 	orr.w	r3, r3, #16
   130ea:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130ee:	f899 3004 	ldrb.w	r3, [r9, #4]
   130f2:	f043 0303 	orr.w	r3, r3, #3
   130f6:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   130fa:	2301      	movs	r3, #1
   130fc:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   13100:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13104:	2306      	movs	r3, #6
   13106:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   1310a:	2900      	cmp	r1, #0
   1310c:	d049      	beq.n	131a2 <ull_conn_llcp+0xd62>
	    !conn->llcp_enc.pause_tx &&
   1310e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   13112:	079f      	lsls	r7, r3, #30
   13114:	d445      	bmi.n	131a2 <ull_conn_llcp+0xd62>
	    !conn->llcp_phy.pause_tx &&
   13116:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1311a:	07d8      	lsls	r0, r3, #31
   1311c:	d441      	bmi.n	131a2 <ull_conn_llcp+0xd62>
		if (conn->tx_head == conn->tx_data) {
   1311e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   13122:	428b      	cmp	r3, r1
   13124:	f000 8289 	beq.w	1363a <ull_conn_llcp+0x11fa>
		} else if (!conn->tx_ctrl) {
   13128:	f1be 0f00 	cmp.w	lr, #0
   1312c:	f000 840f 	beq.w	1394e <ull_conn_llcp+0x150e>
	tx->next = conn->tx_ctrl_last->next;
   13130:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13134:	681a      	ldr	r2, [r3, #0]
   13136:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1313a:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1313e:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   13142:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13146:	2900      	cmp	r1, #0
   13148:	f47f acc7 	bne.w	12ada <ull_conn_llcp+0x69a>
		conn->tx_data_last = tx;
   1314c:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   13150:	e4c3      	b.n	12ada <ull_conn_llcp+0x69a>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13152:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   13156:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1315a:	4299      	cmp	r1, r3
   1315c:	d049      	beq.n	131f2 <ull_conn_llcp+0xdb2>
			event_len_prep(conn);
   1315e:	4620      	mov	r0, r4
   13160:	f7fc fe4a 	bl	fdf8 <event_len_prep>
   13164:	e556      	b.n	12c14 <ull_conn_llcp+0x7d4>
		if (!conn->tx_ctrl) {
   13166:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1316a:	2a00      	cmp	r2, #0
   1316c:	f47f ab23 	bne.w	127b6 <ull_conn_llcp+0x376>
			tx->next = conn->tx_head;
   13170:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   13174:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13178:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1317c:	f7ff bb26 	b.w	127cc <ull_conn_llcp+0x38c>
			conn->tx_data = conn->tx_data->next;
   13180:	6819      	ldr	r1, [r3, #0]
   13182:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13186:	2a00      	cmp	r2, #0
   13188:	f47f aa57 	bne.w	1263a <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   1318c:	681a      	ldr	r2, [r3, #0]
   1318e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13190:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   13192:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13194:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   13198:	2b00      	cmp	r3, #0
   1319a:	f47f aa59 	bne.w	12650 <ull_conn_llcp+0x210>
   1319e:	f7ff bbc4 	b.w	1292a <ull_conn_llcp+0x4ea>
		if (!conn->tx_ctrl) {
   131a2:	f1be 0f00 	cmp.w	lr, #0
   131a6:	f000 8127 	beq.w	133f8 <ull_conn_llcp+0xfb8>
   131aa:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   131ae:	6803      	ldr	r3, [r0, #0]
   131b0:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   131b4:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   131b8:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   131bc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
}
   131c0:	e7c1      	b.n	13146 <ull_conn_llcp+0xd06>
		if (!conn->tx_ctrl) {
   131c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   131c6:	2a00      	cmp	r2, #0
   131c8:	f47f af1d 	bne.w	13006 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
   131cc:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   131d0:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   131d4:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   131d8:	e720      	b.n	1301c <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
   131da:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   131de:	2a00      	cmp	r2, #0
   131e0:	f47f ac6d 	bne.w	12abe <ull_conn_llcp+0x67e>
			tx->next = conn->tx_head;
   131e4:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   131e8:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   131ec:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   131f0:	e46e      	b.n	12ad0 <ull_conn_llcp+0x690>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   131f2:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   131f6:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   131fa:	428b      	cmp	r3, r1
   131fc:	f43f a934 	beq.w	12468 <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   13200:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   13204:	f003 0703 	and.w	r7, r3, #3
   13208:	2f03      	cmp	r7, #3
   1320a:	f000 824a 	beq.w	136a2 <ull_conn_llcp+0x1262>
   1320e:	2f00      	cmp	r7, #0
   13210:	f47f a929 	bne.w	12466 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13214:	48c7      	ldr	r0, [pc, #796]	; (13534 <ull_conn_llcp+0x10f4>)
   13216:	f7f7 f863 	bl	a2e0 <mem_acquire>
		if (!tx) {
   1321a:	4601      	mov	r1, r0
   1321c:	2800      	cmp	r0, #0
   1321e:	f43f acf9 	beq.w	12c14 <ull_conn_llcp+0x7d4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   13222:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   13226:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1322a:	2201      	movs	r2, #1
   1322c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   13230:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   13234:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   13238:	f3c3 0782 	ubfx	r7, r3, #2, #3
   1323c:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   13240:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   13244:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13248:	f360 07c3 	bfi	r7, r0, #3, #1
   1324c:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   13250:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13254:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   13256:	f367 02c5 	bfi	r2, r7, #3, #3
   1325a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1325e:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   13262:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13264:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   13268:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1326a:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1326c:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   1326e:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   13270:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13272:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   13274:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13276:	4620      	mov	r0, r4
   13278:	f7fc fa54 	bl	f724 <ctrl_tx_pause_enqueue>
   1327c:	e6d1      	b.n	13022 <ull_conn_llcp+0xbe2>
	if (!pdu_ctrl_tx) {
   1327e:	f1ba 0f00 	cmp.w	sl, #0
   13282:	f000 816b 	beq.w	1355c <ull_conn_llcp+0x111c>
	conn->lll.enc_tx = 1;
   13286:	f043 0310 	orr.w	r3, r3, #16
   1328a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1328e:	7903      	ldrb	r3, [r0, #4]
   13290:	f043 0303 	orr.w	r3, r3, #3
   13294:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13296:	2301      	movs	r3, #1
   13298:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1329a:	2306      	movs	r3, #6
   1329c:	71c3      	strb	r3, [r0, #7]
	if (tx) {
   1329e:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
	if (
   132a2:	2b00      	cmp	r3, #0
   132a4:	d067      	beq.n	13376 <ull_conn_llcp+0xf36>
	    !conn->llcp_enc.pause_tx &&
   132a6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   132aa:	0797      	lsls	r7, r2, #30
   132ac:	d463      	bmi.n	13376 <ull_conn_llcp+0xf36>
	    !conn->llcp_phy.pause_tx &&
   132ae:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   132b2:	07d0      	lsls	r0, r2, #31
   132b4:	d45f      	bmi.n	13376 <ull_conn_llcp+0xf36>
		if (conn->tx_head == conn->tx_data) {
   132b6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   132ba:	429a      	cmp	r2, r3
   132bc:	f000 8254 	beq.w	13768 <ull_conn_llcp+0x1328>
		} else if (!conn->tx_ctrl) {
   132c0:	f1bc 0f00 	cmp.w	ip, #0
   132c4:	f47f abfb 	bne.w	12abe <ull_conn_llcp+0x67e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   132c8:	791a      	ldrb	r2, [r3, #4]
   132ca:	f002 0203 	and.w	r2, r2, #3
   132ce:	2a03      	cmp	r2, #3
   132d0:	f000 8406 	beq.w	13ae0 <ull_conn_llcp+0x16a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   132d4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   132d8:	f7ff bbf1 	b.w	12abe <ull_conn_llcp+0x67e>
		LL_ASSERT(0);
   132dc:	4a96      	ldr	r2, [pc, #600]	; (13538 <ull_conn_llcp+0x10f8>)
   132de:	4997      	ldr	r1, [pc, #604]	; (1353c <ull_conn_llcp+0x10fc>)
   132e0:	f640 43d2 	movw	r3, #3282	; 0xcd2
   132e4:	e5e2      	b.n	12eac <ull_conn_llcp+0xa6c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   132e6:	4893      	ldr	r0, [pc, #588]	; (13534 <ull_conn_llcp+0x10f4>)
   132e8:	f7f6 fffa 	bl	a2e0 <mem_acquire>
		if (tx) {
   132ec:	2800      	cmp	r0, #0
   132ee:	f43f ac91 	beq.w	12c14 <ull_conn_llcp+0x7d4>
			conn->llcp_version.ack--;
   132f2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   132f6:	3b01      	subs	r3, #1
   132f8:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   132fc:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   13300:	f043 0301 	orr.w	r3, r3, #1
   13304:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   13308:	7903      	ldrb	r3, [r0, #4]
   1330a:	f043 0303 	orr.w	r3, r3, #3
   1330e:	7103      	strb	r3, [r0, #4]
			pdu->len =
   13310:	2306      	movs	r3, #6
   13312:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   13314:	230c      	movs	r3, #12
   13316:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   13318:	230b      	movs	r3, #11
   1331a:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1331c:	f06f 030e 	mvn.w	r3, #14
   13320:	7243      	strb	r3, [r0, #9]
   13322:	2305      	movs	r3, #5
   13324:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   13326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1332a:	72c3      	strb	r3, [r0, #11]
   1332c:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1332e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13332:	2b00      	cmp	r3, #0
   13334:	d06f      	beq.n	13416 <ull_conn_llcp+0xfd6>
	    !conn->llcp_enc.pause_tx &&
   13336:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1333a:	0791      	lsls	r1, r2, #30
   1333c:	d46b      	bmi.n	13416 <ull_conn_llcp+0xfd6>
	    !conn->llcp_phy.pause_tx &&
   1333e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13342:	07d2      	lsls	r2, r2, #31
   13344:	d467      	bmi.n	13416 <ull_conn_llcp+0xfd6>
		if (conn->tx_head == conn->tx_data) {
   13346:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1334a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1334c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13350:	f000 8306 	beq.w	13960 <ull_conn_llcp+0x1520>
		} else if (!conn->tx_ctrl) {
   13354:	2a00      	cmp	r2, #0
   13356:	f000 8356 	beq.w	13a06 <ull_conn_llcp+0x15c6>
	tx->next = conn->tx_ctrl_last->next;
   1335a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1335e:	681a      	ldr	r2, [r3, #0]
   13360:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13362:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13364:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13368:	6803      	ldr	r3, [r0, #0]
   1336a:	2b00      	cmp	r3, #0
   1336c:	f47f ae59 	bne.w	13022 <ull_conn_llcp+0xbe2>
		conn->tx_data_last = tx;
   13370:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   13374:	e655      	b.n	13022 <ull_conn_llcp+0xbe2>
		if (!conn->tx_ctrl) {
   13376:	f1bc 0f00 	cmp.w	ip, #0
   1337a:	f47f aba0 	bne.w	12abe <ull_conn_llcp+0x67e>
   1337e:	e731      	b.n	131e4 <ull_conn_llcp+0xda4>
		conn->tx_data_last = tx;
   13380:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   13384:	f7ff ba25 	b.w	127d2 <ull_conn_llcp+0x392>
	switch (conn->llcp_conn_param.state) {
   13388:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1338c:	f003 0307 	and.w	r3, r3, #7
   13390:	2b07      	cmp	r3, #7
   13392:	f200 83b4 	bhi.w	13afe <ull_conn_llcp+0x16be>
   13396:	a101      	add	r1, pc, #4	; (adr r1, 1339c <ull_conn_llcp+0xf5c>)
   13398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1339c:	00012dfb 	.word	0x00012dfb
   133a0:	00012d75 	.word	0x00012d75
   133a4:	00012d25 	.word	0x00012d25
   133a8:	00012469 	.word	0x00012469
   133ac:	00012469 	.word	0x00012469
   133b0:	00012469 	.word	0x00012469
   133b4:	00012469 	.word	0x00012469
   133b8:	00012ec1 	.word	0x00012ec1
		if (!conn->tx_ctrl) {
   133bc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   133c0:	2a00      	cmp	r2, #0
   133c2:	f47f a8ad 	bne.w	12520 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head;
   133c6:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   133ca:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   133ce:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   133d2:	f7ff b8ae 	b.w	12532 <ull_conn_llcp+0xf2>
			conn->tx_data = conn->tx_data->next;
   133d6:	6819      	ldr	r1, [r3, #0]
   133d8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   133dc:	2a00      	cmp	r2, #0
   133de:	f47f a98c 	bne.w	126fa <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head->next;
   133e2:	681a      	ldr	r2, [r3, #0]
   133e4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   133e6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   133e8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   133ea:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   133ee:	f7ff b98c 	b.w	1270a <ull_conn_llcp+0x2ca>
		conn->tx_data_last = tx;
   133f2:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   133f6:	e614      	b.n	13022 <ull_conn_llcp+0xbe2>
			tx->next = conn->tx_head;
   133f8:	f8c9 1000 	str.w	r1, [r9]
				conn->tx_ctrl = tx;
   133fc:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13400:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13404:	e69f      	b.n	13146 <ull_conn_llcp+0xd06>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13406:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   13408:	f889 8008 	strb.w	r8, [r9, #8]
   1340c:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1340e:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   13412:	f7ff b867 	b.w	124e4 <ull_conn_llcp+0xa4>
		if (!conn->tx_ctrl) {
   13416:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1341a:	2a00      	cmp	r2, #0
   1341c:	d19d      	bne.n	1335a <ull_conn_llcp+0xf1a>
			tx->next = conn->tx_head;
   1341e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13420:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13424:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13428:	e79e      	b.n	13368 <ull_conn_llcp+0xf28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1342a:	4842      	ldr	r0, [pc, #264]	; (13534 <ull_conn_llcp+0x10f4>)
   1342c:	f7f6 ff58 	bl	a2e0 <mem_acquire>
		if (!tx) {
   13430:	4602      	mov	r2, r0
   13432:	2800      	cmp	r0, #0
   13434:	f000 82c7 	beq.w	139c6 <ull_conn_llcp+0x1586>
	conn->lll.enc_tx = 1;
   13438:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1343c:	f043 0310 	orr.w	r3, r3, #16
   13440:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13444:	2301      	movs	r3, #1
   13446:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13448:	7903      	ldrb	r3, [r0, #4]
   1344a:	f043 0303 	orr.w	r3, r3, #3
   1344e:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   13450:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13454:	2106      	movs	r1, #6
   13456:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   13458:	4619      	mov	r1, r3
	if (
   1345a:	b1f3      	cbz	r3, 1349a <ull_conn_llcp+0x105a>
	    !conn->llcp_enc.pause_tx &&
   1345c:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   13460:	0787      	lsls	r7, r0, #30
   13462:	d41a      	bmi.n	1349a <ull_conn_llcp+0x105a>
	    !conn->llcp_phy.pause_tx &&
   13464:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   13468:	07c0      	lsls	r0, r0, #31
   1346a:	d416      	bmi.n	1349a <ull_conn_llcp+0x105a>
		if (conn->tx_head == conn->tx_data) {
   1346c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13470:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13474:	428b      	cmp	r3, r1
   13476:	f000 8186 	beq.w	13786 <ull_conn_llcp+0x1346>
		} else if (!conn->tx_ctrl) {
   1347a:	f1bc 0f00 	cmp.w	ip, #0
   1347e:	f000 8231 	beq.w	138e4 <ull_conn_llcp+0x14a4>
	tx->next = conn->tx_ctrl_last->next;
   13482:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   13486:	6801      	ldr	r1, [r0, #0]
   13488:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1348a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1348c:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13490:	6811      	ldr	r1, [r2, #0]
   13492:	b1d9      	cbz	r1, 134cc <ull_conn_llcp+0x108c>
	    conn->tx_head &&
   13494:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   13496:	46e6      	mov	lr, ip
   13498:	e639      	b.n	1310e <ull_conn_llcp+0xcce>
		if (!conn->tx_ctrl) {
   1349a:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   1349e:	46e6      	mov	lr, ip
   134a0:	f1bc 0f00 	cmp.w	ip, #0
   134a4:	d017      	beq.n	134d6 <ull_conn_llcp+0x1096>
	tx->next = conn->tx_ctrl_last->next;
   134a6:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   134aa:	6807      	ldr	r7, [r0, #0]
   134ac:	6017      	str	r7, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   134ae:	6002      	str	r2, [r0, #0]
	if (!tx->next) {
   134b0:	6817      	ldr	r7, [r2, #0]
	conn->tx_ctrl_last = tx;
   134b2:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   134b6:	4610      	mov	r0, r2
	if (!tx->next) {
   134b8:	b147      	cbz	r7, 134cc <ull_conn_llcp+0x108c>
	if (
   134ba:	2b00      	cmp	r3, #0
   134bc:	f43f ae77 	beq.w	131ae <ull_conn_llcp+0xd6e>
	    !conn->llcp_enc.pause_tx &&
   134c0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   134c4:	079b      	lsls	r3, r3, #30
   134c6:	f57f ae26 	bpl.w	13116 <ull_conn_llcp+0xcd6>
   134ca:	e670      	b.n	131ae <ull_conn_llcp+0xd6e>
		conn->tx_data_last = tx;
   134cc:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	    conn->tx_head &&
   134d0:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   134d2:	46e6      	mov	lr, ip
   134d4:	e619      	b.n	1310a <ull_conn_llcp+0xcca>
			tx->next = conn->tx_head;
   134d6:	6013      	str	r3, [r2, #0]
			conn->tx_head = tx;
   134d8:	4694      	mov	ip, r2
				conn->tx_ctrl = tx;
   134da:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   134de:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   134e2:	4613      	mov	r3, r2
   134e4:	e7d4      	b.n	13490 <ull_conn_llcp+0x1050>
	    ((pdu_data_tx->llctrl.opcode !=
   134e6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   134e8:	2a03      	cmp	r2, #3
   134ea:	f43f ae4f 	beq.w	1318c <ull_conn_llcp+0xd4c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   134ee:	2a0a      	cmp	r2, #10
   134f0:	f47f a89b 	bne.w	1262a <ull_conn_llcp+0x1ea>
   134f4:	e64a      	b.n	1318c <ull_conn_llcp+0xd4c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   134f6:	791a      	ldrb	r2, [r3, #4]
   134f8:	f002 0203 	and.w	r2, r2, #3
   134fc:	2a03      	cmp	r2, #3
   134fe:	f000 812b 	beq.w	13758 <ull_conn_llcp+0x1318>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13502:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13506:	f7ff b8f8 	b.w	126fa <ull_conn_llcp+0x2ba>
		conn->tx_data_last = tx;
   1350a:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   1350e:	f7ff b815 	b.w	1253c <ull_conn_llcp+0xfc>
			conn->tx_data = conn->tx_data->next;
   13512:	6819      	ldr	r1, [r3, #0]
   13514:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13518:	2a00      	cmp	r2, #0
   1351a:	f47f aa45 	bne.w	129a8 <ull_conn_llcp+0x568>
			tx->next = conn->tx_head->next;
   1351e:	681a      	ldr	r2, [r3, #0]
   13520:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   13524:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13528:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1352c:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13530:	f7ff ba45 	b.w	129be <ull_conn_llcp+0x57e>
   13534:	20001edc 	.word	0x20001edc
   13538:	00020c10 	.word	0x00020c10
   1353c:	000206a4 	.word	0x000206a4
			conn->tx_data = conn->tx_data->next;
   13540:	6819      	ldr	r1, [r3, #0]
   13542:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13546:	2a00      	cmp	r2, #0
   13548:	f47f ab0d 	bne.w	12b66 <ull_conn_llcp+0x726>
			tx->next = conn->tx_head->next;
   1354c:	681a      	ldr	r2, [r3, #0]
   1354e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   13550:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   13552:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   13554:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   13558:	f7ff bb0d 	b.w	12b76 <ull_conn_llcp+0x736>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1355c:	48b1      	ldr	r0, [pc, #708]	; (13824 <ull_conn_llcp+0x13e4>)
   1355e:	f7f6 febf 	bl	a2e0 <mem_acquire>
		if (!tx) {
   13562:	4601      	mov	r1, r0
   13564:	2800      	cmp	r0, #0
   13566:	f000 8291 	beq.w	13a8c <ull_conn_llcp+0x164c>
	conn->lll.enc_tx = 1;
   1356a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1356e:	f043 0310 	orr.w	r3, r3, #16
   13572:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13576:	2301      	movs	r3, #1
   13578:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1357a:	7903      	ldrb	r3, [r0, #4]
   1357c:	f043 0303 	orr.w	r3, r3, #3
   13580:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   13582:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13586:	2206      	movs	r2, #6
   13588:	71c2      	strb	r2, [r0, #7]
	if (
   1358a:	b303      	cbz	r3, 135ce <ull_conn_llcp+0x118e>
	    !conn->llcp_enc.pause_tx &&
   1358c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13590:	0790      	lsls	r0, r2, #30
   13592:	d41c      	bmi.n	135ce <ull_conn_llcp+0x118e>
	    !conn->llcp_phy.pause_tx &&
   13594:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13598:	07d2      	lsls	r2, r2, #31
   1359a:	d418      	bmi.n	135ce <ull_conn_llcp+0x118e>
		if (conn->tx_head == conn->tx_data) {
   1359c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   135a0:	4293      	cmp	r3, r2
   135a2:	f000 81b8 	beq.w	13916 <ull_conn_llcp+0x14d6>
		} else if (!conn->tx_ctrl) {
   135a6:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   135aa:	f1bc 0f00 	cmp.w	ip, #0
   135ae:	f000 828e 	beq.w	13ace <ull_conn_llcp+0x168e>
	tx->next = conn->tx_ctrl_last->next;
   135b2:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   135b6:	6802      	ldr	r2, [r0, #0]
   135b8:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   135ba:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   135bc:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   135c0:	680a      	ldr	r2, [r1, #0]
   135c2:	2a00      	cmp	r2, #0
   135c4:	f47f ae6f 	bne.w	132a6 <ull_conn_llcp+0xe66>
		conn->tx_data_last = tx;
   135c8:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
   135cc:	e669      	b.n	132a2 <ull_conn_llcp+0xe62>
		if (!conn->tx_ctrl) {
   135ce:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   135d2:	f1bc 0f00 	cmp.w	ip, #0
   135d6:	d028      	beq.n	1362a <ull_conn_llcp+0x11ea>
	tx->next = conn->tx_ctrl_last->next;
   135d8:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   135dc:	6802      	ldr	r2, [r0, #0]
   135de:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   135e0:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   135e2:	680a      	ldr	r2, [r1, #0]
	conn->tx_ctrl_last = tx;
   135e4:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   135e8:	2a00      	cmp	r2, #0
   135ea:	f47f ae5a 	bne.w	132a2 <ull_conn_llcp+0xe62>
   135ee:	e7eb      	b.n	135c8 <ull_conn_llcp+0x1188>
		if (!conn->tx_ctrl) {
   135f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   135f4:	2a00      	cmp	r2, #0
   135f6:	f47f ac8b 	bne.w	12f10 <ull_conn_llcp+0xad0>
			tx->next = conn->tx_head;
   135fa:	f840 3c13 	str.w	r3, [r0, #-19]
				conn->tx_ctrl = tx;
   135fe:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13602:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   13606:	e48b      	b.n	12f20 <ull_conn_llcp+0xae0>
			conn->tx_data = conn->tx_data->next;
   13608:	6819      	ldr	r1, [r3, #0]
   1360a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1360e:	2a00      	cmp	r2, #0
   13610:	f47f a8d1 	bne.w	127b6 <ull_conn_llcp+0x376>
			tx->next = conn->tx_head->next;
   13614:	681a      	ldr	r2, [r3, #0]
   13616:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1361a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1361e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13622:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13626:	f7ff b8d1 	b.w	127cc <ull_conn_llcp+0x38c>
			tx->next = conn->tx_head;
   1362a:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1362c:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   1362e:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13632:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   13636:	460b      	mov	r3, r1
   13638:	e7c2      	b.n	135c0 <ull_conn_llcp+0x1180>
			conn->tx_data = conn->tx_data->next;
   1363a:	680b      	ldr	r3, [r1, #0]
   1363c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13640:	f1be 0f00 	cmp.w	lr, #0
   13644:	f47f ad74 	bne.w	13130 <ull_conn_llcp+0xcf0>
			tx->next = conn->tx_head->next;
   13648:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   1364c:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   13650:	f8d9 1000 	ldr.w	r1, [r9]
				conn->tx_ctrl_last = tx;
   13654:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13658:	e575      	b.n	13146 <ull_conn_llcp+0xd06>
			conn->tx_data = conn->tx_data->next;
   1365a:	6819      	ldr	r1, [r3, #0]
   1365c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13660:	2a00      	cmp	r2, #0
   13662:	f47f acd0 	bne.w	13006 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
   13666:	681a      	ldr	r2, [r3, #0]
   13668:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1366c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13670:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13674:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13678:	e4d0      	b.n	1301c <ull_conn_llcp+0xbdc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1367a:	791a      	ldrb	r2, [r3, #4]
   1367c:	f002 0203 	and.w	r2, r2, #3
   13680:	2a03      	cmp	r2, #3
   13682:	f000 815c 	beq.w	1393e <ull_conn_llcp+0x14fe>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13686:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1368a:	f7ff ba6c 	b.w	12b66 <ull_conn_llcp+0x726>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1368e:	791a      	ldrb	r2, [r3, #4]
   13690:	f002 0203 	and.w	r2, r2, #3
   13694:	2a03      	cmp	r2, #3
   13696:	f000 8178 	beq.w	1398a <ull_conn_llcp+0x154a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1369a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1369e:	f7ff b983 	b.w	129a8 <ull_conn_llcp+0x568>
		if (conn->llcp_phy.tx & PHY_2M) {
   136a2:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   136a4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   136a8:	f3c3 0282 	ubfx	r2, r3, #2, #3
   136ac:	f140 810f 	bpl.w	138ce <ull_conn_llcp+0x148e>
			conn->llcp_phy.tx = PHY_2M;
   136b0:	2202      	movs	r2, #2
   136b2:	f362 0384 	bfi	r3, r2, #2, #3
   136b6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   136ba:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   136be:	065f      	lsls	r7, r3, #25
   136c0:	ea4f 1253 	mov.w	r2, r3, lsr #5
   136c4:	f140 80fa 	bpl.w	138bc <ull_conn_llcp+0x147c>
			conn->llcp_phy.rx = PHY_2M;
   136c8:	2202      	movs	r2, #2
   136ca:	f362 1347 	bfi	r3, r2, #5, #3
   136ce:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   136d2:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   136d4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   136d8:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   136dc:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   136e0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   136e4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   136e8:	f3c2 0182 	ubfx	r1, r2, #2, #3
   136ec:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   136f0:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   136f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   136f8:	428f      	cmp	r7, r1
   136fa:	bf08      	it	eq
   136fc:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   136fe:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   13700:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   13704:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13708:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1370c:	bf08      	it	eq
   1370e:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13710:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   13714:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   13718:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   1371a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   1371e:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13722:	f7fe bebd 	b.w	124a0 <ull_conn_llcp+0x60>
			conn->tx_data = conn->tx_data->next;
   13726:	6819      	ldr	r1, [r3, #0]
   13728:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1372c:	2a00      	cmp	r2, #0
   1372e:	f47f a9c6 	bne.w	12abe <ull_conn_llcp+0x67e>
			tx->next = conn->tx_head->next;
   13732:	681a      	ldr	r2, [r3, #0]
   13734:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13738:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1373c:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13740:	f7ff b9c6 	b.w	12ad0 <ull_conn_llcp+0x690>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13744:	791a      	ldrb	r2, [r3, #4]
   13746:	f002 0203 	and.w	r2, r2, #3
   1374a:	2a03      	cmp	r2, #3
   1374c:	f000 8133 	beq.w	139b6 <ull_conn_llcp+0x1576>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13750:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13754:	f7ff b82f 	b.w	127b6 <ull_conn_llcp+0x376>
	    ((pdu_data_tx->llctrl.opcode !=
   13758:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1375a:	2a03      	cmp	r2, #3
   1375c:	f43f ae41 	beq.w	133e2 <ull_conn_llcp+0xfa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13760:	2a0a      	cmp	r2, #10
   13762:	f47f aece 	bne.w	13502 <ull_conn_llcp+0x10c2>
   13766:	e63c      	b.n	133e2 <ull_conn_llcp+0xfa2>
			conn->tx_data = conn->tx_data->next;
   13768:	681a      	ldr	r2, [r3, #0]
   1376a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1376e:	f1bc 0f00 	cmp.w	ip, #0
   13772:	f47f a9a4 	bne.w	12abe <ull_conn_llcp+0x67e>
			tx->next = conn->tx_head->next;
   13776:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1377a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1377e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13782:	f7ff b9a5 	b.w	12ad0 <ull_conn_llcp+0x690>
			conn->tx_data = conn->tx_data->next;
   13786:	6819      	ldr	r1, [r3, #0]
   13788:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1378c:	f1bc 0f00 	cmp.w	ip, #0
   13790:	f47f ae77 	bne.w	13482 <ull_conn_llcp+0x1042>
			tx->next = conn->tx_head->next;
   13794:	6819      	ldr	r1, [r3, #0]
   13796:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   13798:	4694      	mov	ip, r2
   1379a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1379c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   137a0:	e676      	b.n	13490 <ull_conn_llcp+0x1050>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   137a2:	4820      	ldr	r0, [pc, #128]	; (13824 <ull_conn_llcp+0x13e4>)
   137a4:	f7f6 fd9c 	bl	a2e0 <mem_acquire>
		if (!tx) {
   137a8:	2800      	cmp	r0, #0
   137aa:	f43f aa33 	beq.w	12c14 <ull_conn_llcp+0x7d4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   137ae:	7902      	ldrb	r2, [r0, #4]
   137b0:	f042 0203 	orr.w	r2, r2, #3
   137b4:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   137b6:	2211      	movs	r2, #17
   137b8:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   137ba:	2203      	movs	r2, #3
   137bc:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   137be:	220f      	movs	r2, #15
   137c0:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   137c2:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   137c6:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   137c8:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   137cc:	2a00      	cmp	r2, #0
   137ce:	d068      	beq.n	138a2 <ull_conn_llcp+0x1462>
	    !conn->llcp_enc.pause_tx &&
   137d0:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   137d4:	078f      	lsls	r7, r1, #30
   137d6:	d464      	bmi.n	138a2 <ull_conn_llcp+0x1462>
	    !conn->llcp_phy.pause_tx &&
   137d8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   137dc:	07c9      	lsls	r1, r1, #31
   137de:	d460      	bmi.n	138a2 <ull_conn_llcp+0x1462>
		if (conn->tx_head == conn->tx_data) {
   137e0:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   137e4:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   137e6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   137ea:	f000 813b 	beq.w	13a64 <ull_conn_llcp+0x1624>
		} else if (!conn->tx_ctrl) {
   137ee:	2900      	cmp	r1, #0
   137f0:	f000 8144 	beq.w	13a7c <ull_conn_llcp+0x163c>
	tx->next = conn->tx_ctrl_last->next;
   137f4:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   137f8:	6811      	ldr	r1, [r2, #0]
   137fa:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   137fc:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   137fe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13802:	6802      	ldr	r2, [r0, #0]
   13804:	2a00      	cmp	r2, #0
   13806:	d056      	beq.n	138b6 <ull_conn_llcp+0x1476>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13808:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1380c:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   13810:	2300      	movs	r3, #0
   13812:	f8c8 3000 	str.w	r3, [r8]
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13816:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   1381a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
}
   1381e:	f7fe be1b 	b.w	12458 <ull_conn_llcp+0x18>
   13822:	bf00      	nop
   13824:	20001edc 	.word	0x20001edc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13828:	48b5      	ldr	r0, [pc, #724]	; (13b00 <ull_conn_llcp+0x16c0>)
   1382a:	f7f6 fd59 	bl	a2e0 <mem_acquire>
	if (!tx) {
   1382e:	2800      	cmp	r0, #0
   13830:	f43f a9f0 	beq.w	12c14 <ull_conn_llcp+0x7d4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13834:	7902      	ldrb	r2, [r0, #4]
   13836:	f042 0203 	orr.w	r2, r2, #3
   1383a:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   1383c:	2218      	movs	r2, #24
   1383e:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   13840:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   13844:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   13846:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   1384a:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1384c:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   13850:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   13852:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   13856:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13858:	2210      	movs	r2, #16
   1385a:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   1385c:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   13860:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   13862:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
	    conn->tx_head &&
   13866:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	rsp->reference_conn_event_count =
   1386a:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   1386e:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   13872:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13876:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   1387a:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   1387e:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
   13882:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13886:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
   1388a:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   1388e:	f8b4 119c 	ldrh.w	r1, [r4, #412]	; 0x19c
   13892:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   13896:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
   1389a:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   1389e:	2a00      	cmp	r2, #0
   138a0:	d196      	bne.n	137d0 <ull_conn_llcp+0x1390>
		if (!conn->tx_ctrl) {
   138a2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   138a6:	2900      	cmp	r1, #0
   138a8:	d1a4      	bne.n	137f4 <ull_conn_llcp+0x13b4>
			tx->next = conn->tx_head;
   138aa:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   138ac:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   138b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   138b4:	e7a5      	b.n	13802 <ull_conn_llcp+0x13c2>
		conn->tx_data_last = tx;
   138b6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   138ba:	e7a5      	b.n	13808 <ull_conn_llcp+0x13c8>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   138bc:	07d1      	lsls	r1, r2, #31
   138be:	f140 80fd 	bpl.w	13abc <ull_conn_llcp+0x167c>
			conn->llcp_phy.rx = PHY_1M;
   138c2:	2201      	movs	r2, #1
   138c4:	f362 1347 	bfi	r3, r2, #5, #3
   138c8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   138cc:	e701      	b.n	136d2 <ull_conn_llcp+0x1292>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   138ce:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   138d0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   138d4:	f140 809f 	bpl.w	13a16 <ull_conn_llcp+0x15d6>
			conn->llcp_phy.tx = PHY_1M;
   138d8:	2201      	movs	r2, #1
   138da:	f362 0384 	bfi	r3, r2, #2, #3
   138de:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   138e2:	e6ea      	b.n	136ba <ull_conn_llcp+0x127a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   138e4:	7919      	ldrb	r1, [r3, #4]
   138e6:	f001 0103 	and.w	r1, r1, #3
   138ea:	2903      	cmp	r1, #3
   138ec:	f000 80ab 	beq.w	13a46 <ull_conn_llcp+0x1606>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   138f0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   138f4:	469c      	mov	ip, r3
   138f6:	e5c4      	b.n	13482 <ull_conn_llcp+0x1042>
			conn->tx_data = conn->tx_data->next;
   138f8:	6819      	ldr	r1, [r3, #0]
   138fa:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   138fe:	2a00      	cmp	r2, #0
   13900:	f47e ae0e 	bne.w	12520 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head->next;
   13904:	681a      	ldr	r2, [r3, #0]
   13906:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1390a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1390e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13912:	f7fe be0e 	b.w	12532 <ull_conn_llcp+0xf2>
		if (!conn->tx_ctrl) {
   13916:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
			conn->tx_data = conn->tx_data->next;
   1391a:	6812      	ldr	r2, [r2, #0]
   1391c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13920:	f1bc 0f00 	cmp.w	ip, #0
   13924:	f47f ae45 	bne.w	135b2 <ull_conn_llcp+0x1172>
			tx->next = conn->tx_head->next;
   13928:	681a      	ldr	r2, [r3, #0]
   1392a:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1392c:	468c      	mov	ip, r1
   1392e:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   13930:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   13934:	e644      	b.n	135c0 <ull_conn_llcp+0x1180>
			conn->llcp_cu.interval = interval_max;
   13936:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   1393a:	f7ff ba42 	b.w	12dc2 <ull_conn_llcp+0x982>
	    ((pdu_data_tx->llctrl.opcode !=
   1393e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13940:	2a03      	cmp	r2, #3
   13942:	f43f ae03 	beq.w	1354c <ull_conn_llcp+0x110c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13946:	2a0a      	cmp	r2, #10
   13948:	f47f ae9d 	bne.w	13686 <ull_conn_llcp+0x1246>
   1394c:	e5fe      	b.n	1354c <ull_conn_llcp+0x110c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1394e:	790b      	ldrb	r3, [r1, #4]
   13950:	f003 0303 	and.w	r3, r3, #3
   13954:	2b03      	cmp	r3, #3
   13956:	d03a      	beq.n	139ce <ull_conn_llcp+0x158e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13958:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   1395c:	f7ff bbe8 	b.w	13130 <ull_conn_llcp+0xcf0>
			conn->tx_data = conn->tx_data->next;
   13960:	6819      	ldr	r1, [r3, #0]
   13962:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13966:	2a00      	cmp	r2, #0
   13968:	f47f acf7 	bne.w	1335a <ull_conn_llcp+0xf1a>
			tx->next = conn->tx_head->next;
   1396c:	681a      	ldr	r2, [r3, #0]
   1396e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13970:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   13972:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13976:	e4f7      	b.n	13368 <ull_conn_llcp+0xf28>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13978:	791a      	ldrb	r2, [r3, #4]
   1397a:	f002 0203 	and.w	r2, r2, #3
   1397e:	2a03      	cmp	r2, #3
   13980:	d03a      	beq.n	139f8 <ull_conn_llcp+0x15b8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13982:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13986:	f7ff bb3e 	b.w	13006 <ull_conn_llcp+0xbc6>
	    ((pdu_data_tx->llctrl.opcode !=
   1398a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1398c:	2a03      	cmp	r2, #3
   1398e:	f43f adc6 	beq.w	1351e <ull_conn_llcp+0x10de>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13992:	2a0a      	cmp	r2, #10
   13994:	f47f ae81 	bne.w	1369a <ull_conn_llcp+0x125a>
   13998:	e5c1      	b.n	1351e <ull_conn_llcp+0x10de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1399a:	791a      	ldrb	r2, [r3, #4]
   1399c:	f002 0203 	and.w	r2, r2, #3
   139a0:	2a03      	cmp	r2, #3
   139a2:	f47f ac97 	bne.w	132d4 <ull_conn_llcp+0xe94>
	    ((pdu_data_tx->llctrl.opcode !=
   139a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   139a8:	2a03      	cmp	r2, #3
   139aa:	f43f aec2 	beq.w	13732 <ull_conn_llcp+0x12f2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   139ae:	2a0a      	cmp	r2, #10
   139b0:	f47f ac90 	bne.w	132d4 <ull_conn_llcp+0xe94>
   139b4:	e6bd      	b.n	13732 <ull_conn_llcp+0x12f2>
	    ((pdu_data_tx->llctrl.opcode !=
   139b6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   139b8:	2a03      	cmp	r2, #3
   139ba:	f43f ae2b 	beq.w	13614 <ull_conn_llcp+0x11d4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   139be:	2a0a      	cmp	r2, #10
   139c0:	f47f aec6 	bne.w	13750 <ull_conn_llcp+0x1310>
   139c4:	e626      	b.n	13614 <ull_conn_llcp+0x11d4>
		if (!conn->tx_ctrl) {
   139c6:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
   139ca:	f7ff bb9e 	b.w	1310a <ull_conn_llcp+0xcca>
	    ((pdu_data_tx->llctrl.opcode !=
   139ce:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   139d0:	2b03      	cmp	r3, #3
   139d2:	d001      	beq.n	139d8 <ull_conn_llcp+0x1598>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   139d4:	2b0a      	cmp	r3, #10
   139d6:	d1bf      	bne.n	13958 <ull_conn_llcp+0x1518>
   139d8:	680b      	ldr	r3, [r1, #0]
   139da:	e635      	b.n	13648 <ull_conn_llcp+0x1208>
			conn->tx_data = conn->tx_data->next;
   139dc:	681f      	ldr	r7, [r3, #0]
   139de:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   139e2:	2a00      	cmp	r2, #0
   139e4:	f47f aa94 	bne.w	12f10 <ull_conn_llcp+0xad0>
			tx->next = conn->tx_head->next;
   139e8:	681a      	ldr	r2, [r3, #0]
   139ea:	f840 2c13 	str.w	r2, [r0, #-19]
			conn->tx_head->next = tx;
   139ee:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   139f0:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   139f4:	f7ff ba94 	b.w	12f20 <ull_conn_llcp+0xae0>
	    ((pdu_data_tx->llctrl.opcode !=
   139f8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   139fa:	2a03      	cmp	r2, #3
   139fc:	f43f ae33 	beq.w	13666 <ull_conn_llcp+0x1226>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a00:	2a0a      	cmp	r2, #10
   13a02:	d1be      	bne.n	13982 <ull_conn_llcp+0x1542>
   13a04:	e62f      	b.n	13666 <ull_conn_llcp+0x1226>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a06:	791a      	ldrb	r2, [r3, #4]
   13a08:	f002 0203 	and.w	r2, r2, #3
   13a0c:	2a03      	cmp	r2, #3
   13a0e:	d00b      	beq.n	13a28 <ull_conn_llcp+0x15e8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a10:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13a14:	e4a1      	b.n	1335a <ull_conn_llcp+0xf1a>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   13a16:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   13a1a:	bf18      	it	ne
   13a1c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   13a1e:	f362 0384 	bfi	r3, r2, #2, #3
   13a22:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13a26:	e648      	b.n	136ba <ull_conn_llcp+0x127a>
	    ((pdu_data_tx->llctrl.opcode !=
   13a28:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a2a:	2a03      	cmp	r2, #3
   13a2c:	d09e      	beq.n	1396c <ull_conn_llcp+0x152c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a2e:	2a0a      	cmp	r2, #10
   13a30:	d1ee      	bne.n	13a10 <ull_conn_llcp+0x15d0>
   13a32:	e79b      	b.n	1396c <ull_conn_llcp+0x152c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a34:	791a      	ldrb	r2, [r3, #4]
   13a36:	f002 0203 	and.w	r2, r2, #3
   13a3a:	2a03      	cmp	r2, #3
   13a3c:	d00b      	beq.n	13a56 <ull_conn_llcp+0x1616>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a3e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13a42:	f7fe bd6d 	b.w	12520 <ull_conn_llcp+0xe0>
	    ((pdu_data_tx->llctrl.opcode !=
   13a46:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a48:	2903      	cmp	r1, #3
   13a4a:	f43f aea3 	beq.w	13794 <ull_conn_llcp+0x1354>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a4e:	290a      	cmp	r1, #10
   13a50:	f47f af4e 	bne.w	138f0 <ull_conn_llcp+0x14b0>
   13a54:	e69e      	b.n	13794 <ull_conn_llcp+0x1354>
	    ((pdu_data_tx->llctrl.opcode !=
   13a56:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a58:	2a03      	cmp	r2, #3
   13a5a:	f43f af53 	beq.w	13904 <ull_conn_llcp+0x14c4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a5e:	2a0a      	cmp	r2, #10
   13a60:	d1ed      	bne.n	13a3e <ull_conn_llcp+0x15fe>
   13a62:	e74f      	b.n	13904 <ull_conn_llcp+0x14c4>
			conn->tx_data = conn->tx_data->next;
   13a64:	6813      	ldr	r3, [r2, #0]
   13a66:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13a6a:	2900      	cmp	r1, #0
   13a6c:	f47f aec2 	bne.w	137f4 <ull_conn_llcp+0x13b4>
			tx->next = conn->tx_head->next;
   13a70:	6811      	ldr	r1, [r2, #0]
   13a72:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   13a74:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   13a76:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13a7a:	e6c2      	b.n	13802 <ull_conn_llcp+0x13c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a7c:	7911      	ldrb	r1, [r2, #4]
   13a7e:	f001 0103 	and.w	r1, r1, #3
   13a82:	2903      	cmp	r1, #3
   13a84:	d00e      	beq.n	13aa4 <ull_conn_llcp+0x1664>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a86:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   13a8a:	e6b3      	b.n	137f4 <ull_conn_llcp+0x13b4>
   13a8c:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
   13a90:	e407      	b.n	132a2 <ull_conn_llcp+0xe62>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a92:	791a      	ldrb	r2, [r3, #4]
   13a94:	f002 0203 	and.w	r2, r2, #3
   13a98:	2a03      	cmp	r2, #3
   13a9a:	d009      	beq.n	13ab0 <ull_conn_llcp+0x1670>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a9c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13aa0:	f7ff ba36 	b.w	12f10 <ull_conn_llcp+0xad0>
	    ((pdu_data_tx->llctrl.opcode !=
   13aa4:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13aa6:	2903      	cmp	r1, #3
   13aa8:	d0e2      	beq.n	13a70 <ull_conn_llcp+0x1630>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13aaa:	290a      	cmp	r1, #10
   13aac:	d1eb      	bne.n	13a86 <ull_conn_llcp+0x1646>
   13aae:	e7df      	b.n	13a70 <ull_conn_llcp+0x1630>
	    ((pdu_data_tx->llctrl.opcode !=
   13ab0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ab2:	2a03      	cmp	r2, #3
   13ab4:	d098      	beq.n	139e8 <ull_conn_llcp+0x15a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ab6:	2a0a      	cmp	r2, #10
   13ab8:	d1f0      	bne.n	13a9c <ull_conn_llcp+0x165c>
   13aba:	e795      	b.n	139e8 <ull_conn_llcp+0x15a8>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   13abc:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   13ac0:	bf18      	it	ne
   13ac2:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   13ac4:	f362 1347 	bfi	r3, r2, #5, #3
   13ac8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13acc:	e601      	b.n	136d2 <ull_conn_llcp+0x1292>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ace:	791a      	ldrb	r2, [r3, #4]
   13ad0:	f002 0203 	and.w	r2, r2, #3
   13ad4:	2a03      	cmp	r2, #3
   13ad6:	d00b      	beq.n	13af0 <ull_conn_llcp+0x16b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13ad8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13adc:	469c      	mov	ip, r3
   13ade:	e568      	b.n	135b2 <ull_conn_llcp+0x1172>
	    ((pdu_data_tx->llctrl.opcode !=
   13ae0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ae2:	2a03      	cmp	r2, #3
   13ae4:	d002      	beq.n	13aec <ull_conn_llcp+0x16ac>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ae6:	2a0a      	cmp	r2, #10
   13ae8:	f47f abf4 	bne.w	132d4 <ull_conn_llcp+0xe94>
   13aec:	681a      	ldr	r2, [r3, #0]
   13aee:	e642      	b.n	13776 <ull_conn_llcp+0x1336>
	    ((pdu_data_tx->llctrl.opcode !=
   13af0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13af2:	2a03      	cmp	r2, #3
   13af4:	f43f af18 	beq.w	13928 <ull_conn_llcp+0x14e8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13af8:	2a0a      	cmp	r2, #10
   13afa:	d1ed      	bne.n	13ad8 <ull_conn_llcp+0x1698>
   13afc:	e714      	b.n	13928 <ull_conn_llcp+0x14e8>
		LL_ASSERT(0);
   13afe:	bf00      	nop
   13b00:	20001edc 	.word	0x20001edc

00013b04 <ull_conn_tx_demux>:
{
   13b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13b08:	4f24      	ldr	r7, [pc, #144]	; (13b9c <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13b0a:	4e25      	ldr	r6, [pc, #148]	; (13ba0 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13b0c:	78fa      	ldrb	r2, [r7, #3]
{
   13b0e:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   13b10:	1d3d      	adds	r5, r7, #4
   13b12:	e021      	b.n	13b58 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13b14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13b18:	4630      	mov	r0, r6
   13b1a:	f7f6 fc13 	bl	a344 <mem_get>
	if (conn->lll.handle != handle) {
   13b1e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   13b20:	bb32      	cbnz	r2, 13b70 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   13b22:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   13b26:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   13b2a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   13b2c:	b359      	cbz	r1, 13b86 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   13b2e:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   13b32:	b102      	cbz	r2, 13b36 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   13b34:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   13b36:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   13b3a:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   13b3c:	78bb      	ldrb	r3, [r7, #2]
   13b3e:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   13b40:	429a      	cmp	r2, r3
   13b42:	d005      	beq.n	13b50 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   13b44:	3301      	adds	r3, #1
   13b46:	b2db      	uxtb	r3, r3
		_first = 0U;
   13b48:	4299      	cmp	r1, r3
   13b4a:	bf08      	it	eq
   13b4c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13b4e:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   13b50:	3c01      	subs	r4, #1
   13b52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   13b56:	d01f      	beq.n	13b98 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13b58:	78bb      	ldrb	r3, [r7, #2]
   13b5a:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   13b5c:	4293      	cmp	r3, r2
   13b5e:	d01b      	beq.n	13b98 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   13b60:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   13b64:	eb15 0803 	adds.w	r8, r5, r3
   13b68:	d016      	beq.n	13b98 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   13b6a:	5aea      	ldrh	r2, [r5, r3]
   13b6c:	2a00      	cmp	r2, #0
   13b6e:	d0d1      	beq.n	13b14 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   13b70:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   13b74:	790b      	ldrb	r3, [r1, #4]
   13b76:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   13b7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   13b7e:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   13b80:	f7fa fd32 	bl	e5e8 <ll_tx_ack_put>
   13b84:	e7d9      	b.n	13b3a <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   13b86:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   13b8a:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   13b8e:	2a00      	cmp	r2, #0
   13b90:	d1cd      	bne.n	13b2e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   13b92:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   13b96:	e7ce      	b.n	13b36 <ull_conn_tx_demux+0x32>
}
   13b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b9c:	2000044c 	.word	0x2000044c
   13ba0:	20000de0 	.word	0x20000de0

00013ba4 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   13ba4:	4b39      	ldr	r3, [pc, #228]	; (13c8c <conn_cleanup+0xe8>)
{
   13ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   13baa:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   13bac:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   13bb0:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   13bb4:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   13bb6:	bf04      	itt	eq
   13bb8:	2200      	moveq	r2, #0
   13bba:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   13bbc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   13bbe:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13bc2:	2315      	movs	r3, #21
{
   13bc4:	b082      	sub	sp, #8
   13bc6:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13bc8:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   13bcc:	b144      	cbz	r4, 13be0 <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   13bce:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   13bd0:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   13bd2:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   13bd4:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   13bd6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   13bd8:	f7fa fcc2 	bl	e560 <ll_rx_put>
	while (rx) {
   13bdc:	2c00      	cmp	r4, #0
   13bde:	d1f7      	bne.n	13bd0 <conn_cleanup+0x2c>
	while (conn->tx_head) {
   13be0:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13be4:	b381      	cbz	r1, 13c48 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   13be6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 13c90 <conn_cleanup+0xec>
		LL_ASSERT(link);
   13bea:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 13c94 <conn_cleanup+0xf0>
   13bee:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13c98 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13bf2:	f106 0768 	add.w	r7, r6, #104	; 0x68
   13bf6:	e007      	b.n	13c08 <conn_cleanup+0x64>
   13bf8:	4629      	mov	r1, r5
   13bfa:	463a      	mov	r2, r7
   13bfc:	4620      	mov	r0, r4
   13bfe:	f7f6 fbd3 	bl	a3a8 <memq_enqueue>
	while (conn->tx_head) {
   13c02:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13c06:	b1f9      	cbz	r1, 13c48 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   13c08:	4630      	mov	r0, r6
   13c0a:	f7fb ffcd 	bl	fba8 <tx_ull_dequeue>
   13c0e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   13c10:	4640      	mov	r0, r8
   13c12:	f7f6 fb65 	bl	a2e0 <mem_acquire>
		LL_ASSERT(link);
   13c16:	4604      	mov	r4, r0
   13c18:	2800      	cmp	r0, #0
   13c1a:	d1ed      	bne.n	13bf8 <conn_cleanup+0x54>
   13c1c:	481f      	ldr	r0, [pc, #124]	; (13c9c <conn_cleanup+0xf8>)
   13c1e:	f240 73d7 	movw	r3, #2007	; 0x7d7
   13c22:	4652      	mov	r2, sl
   13c24:	4649      	mov	r1, r9
   13c26:	f008 fb39 	bl	1c29c <printk>
   13c2a:	4040      	eors	r0, r0
   13c2c:	f380 8811 	msr	BASEPRI, r0
   13c30:	f04f 0003 	mov.w	r0, #3
   13c34:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13c36:	4629      	mov	r1, r5
   13c38:	463a      	mov	r2, r7
   13c3a:	4620      	mov	r0, r4
   13c3c:	f7f6 fbb4 	bl	a3a8 <memq_enqueue>
	while (conn->tx_head) {
   13c40:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13c44:	2900      	cmp	r1, #0
   13c46:	d1df      	bne.n	13c08 <conn_cleanup+0x64>
				    TICKER_ID_CONN_BASE + lll->handle,
   13c48:	8d32      	ldrh	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13c4a:	4b15      	ldr	r3, [pc, #84]	; (13ca0 <conn_cleanup+0xfc>)
   13c4c:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   13c4e:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13c50:	b2d2      	uxtb	r2, r2
   13c52:	2101      	movs	r1, #1
   13c54:	2000      	movs	r0, #0
   13c56:	f7f7 fe83 	bl	b960 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c5a:	f030 0302 	bics.w	r3, r0, #2
   13c5e:	d00c      	beq.n	13c7a <conn_cleanup+0xd6>
   13c60:	4a0c      	ldr	r2, [pc, #48]	; (13c94 <conn_cleanup+0xf0>)
   13c62:	4910      	ldr	r1, [pc, #64]	; (13ca4 <conn_cleanup+0x100>)
   13c64:	480d      	ldr	r0, [pc, #52]	; (13c9c <conn_cleanup+0xf8>)
   13c66:	f240 73c4 	movw	r3, #1988	; 0x7c4
   13c6a:	f008 fb17 	bl	1c29c <printk>
   13c6e:	4040      	eors	r0, r0
   13c70:	f380 8811 	msr	BASEPRI, r0
   13c74:	f04f 0003 	mov.w	r0, #3
   13c78:	df02      	svc	2
	lll->handle = 0xFFFF;
   13c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13c7e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   13c80:	8533      	strh	r3, [r6, #40]	; 0x28
}
   13c82:	b002      	add	sp, #8
   13c84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13c88:	f7ff bf3c 	b.w	13b04 <ull_conn_tx_demux>
   13c8c:	20001e48 	.word	0x20001e48
   13c90:	20001f90 	.word	0x20001f90
   13c94:	00020c10 	.word	0x00020c10
   13c98:	00020c74 	.word	0x00020c74
   13c9c:	0002060c 	.word	0x0002060c
   13ca0:	0000f80d 	.word	0x0000f80d
   13ca4:	00020cf0 	.word	0x00020cf0

00013ca8 <ull_conn_done>:
{
   13ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   13caa:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   13cac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   13cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13cb2:	429a      	cmp	r2, r3
{
   13cb4:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   13cb6:	d057      	beq.n	13d68 <ull_conn_done+0xc0>
	switch (done->extra.mic_state) {
   13cb8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13cbc:	2b01      	cmp	r3, #1
   13cbe:	4605      	mov	r5, r0
   13cc0:	f000 8112 	beq.w	13ee8 <ull_conn_done+0x240>
   13cc4:	2b02      	cmp	r3, #2
   13cc6:	d051      	beq.n	13d6c <ull_conn_done+0xc4>
   13cc8:	2b00      	cmp	r3, #0
   13cca:	f000 80f3 	beq.w	13eb4 <ull_conn_done+0x20c>
	reason_final = conn->llcp_terminate.reason_final;
   13cce:	f894 1143 	ldrb.w	r1, [r4, #323]	; 0x143
	if (reason_final && (
   13cd2:	2900      	cmp	r1, #0
   13cd4:	d14d      	bne.n	13d72 <ull_conn_done+0xca>
	latency_event = lll->latency_event;
   13cd6:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   13cd8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   13cda:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13cdc:	1c7e      	adds	r6, r7, #1
   13cde:	b2b6      	uxth	r6, r6
	ticks_drift_minus = 0U;
   13ce0:	9108      	str	r1, [sp, #32]
	if (done->extra.trx_cnt) {
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d071      	beq.n	13dca <ull_conn_done+0x122>
		} else if (lll->role) {
   13ce6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13cea:	2b00      	cmp	r3, #0
   13cec:	f2c0 8130 	blt.w	13f50 <ull_conn_done+0x2a8>
	if (done->extra.crc_valid) {
   13cf0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   13cf4:	2200      	movs	r2, #0
   13cf6:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   13cfa:	2b00      	cmp	r3, #0
   13cfc:	f000 80fa 	beq.w	13ef4 <ull_conn_done+0x24c>
		conn->supervision_expire = 0U;
   13d00:	2500      	movs	r5, #0
   13d02:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   13d06:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   13d0a:	b12b      	cbz	r3, 13d18 <ull_conn_done+0x70>
		if (conn->procedure_expire > elapsed_event) {
   13d0c:	42b3      	cmp	r3, r6
   13d0e:	f240 8145 	bls.w	13f9c <ull_conn_done+0x2f4>
			conn->procedure_expire -= elapsed_event;
   13d12:	1b9b      	subs	r3, r3, r6
   13d14:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   13d18:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   13d1c:	b12b      	cbz	r3, 13d2a <ull_conn_done+0x82>
		if (conn->apto_expire > elapsed_event) {
   13d1e:	42b3      	cmp	r3, r6
   13d20:	f240 8121 	bls.w	13f66 <ull_conn_done+0x2be>
			conn->apto_expire -= elapsed_event;
   13d24:	1b9b      	subs	r3, r3, r6
   13d26:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   13d2a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d07d      	beq.n	13e2e <ull_conn_done+0x186>
		if (conn->appto_expire > elapsed_event) {
   13d32:	42b3      	cmp	r3, r6
   13d34:	f200 80ed 	bhi.w	13f12 <ull_conn_done+0x26a>
			if ((conn->procedure_expire == 0U) &&
   13d38:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   13d3c:	2200      	movs	r2, #0
   13d3e:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   13d42:	2b00      	cmp	r3, #0
   13d44:	d173      	bne.n	13e2e <ull_conn_done+0x186>
			    (conn->llcp_req == conn->llcp_ack)) {
   13d46:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13d4a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			if ((conn->procedure_expire == 0U) &&
   13d4e:	4293      	cmp	r3, r2
   13d50:	d171      	bne.n	13e36 <ull_conn_done+0x18e>
				conn->llcp_type = LLCP_PING;
   13d52:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   13d54:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   13d56:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   13d5a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13d5e:	e06f      	b.n	13e40 <ull_conn_done+0x198>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   13d60:	2108      	movs	r1, #8
   13d62:	4620      	mov	r0, r4
   13d64:	f7ff ff1e 	bl	13ba4 <conn_cleanup>
}
   13d68:	b00b      	add	sp, #44	; 0x2c
   13d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   13d6c:	213d      	movs	r1, #61	; 0x3d
   13d6e:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
	if (reason_final && (
   13d72:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13d76:	2b00      	cmp	r3, #0
   13d78:	db21      	blt.n	13dbe <ull_conn_done+0x116>
			       conn->llcp_terminate.ack) & 0xFF) ==
   13d7a:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   13d7e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   13d82:	1a9b      	subs	r3, r3, r2
			    lll->role ||
   13d84:	b2db      	uxtb	r3, r3
   13d86:	2b03      	cmp	r3, #3
   13d88:	d019      	beq.n	13dbe <ull_conn_done+0x116>
			     TERM_ACKED) ||
   13d8a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   13d8e:	f013 0204 	ands.w	r2, r3, #4
   13d92:	d114      	bne.n	13dbe <ull_conn_done+0x116>
			    conn->master.terminate_ack ||
   13d94:	293d      	cmp	r1, #61	; 0x3d
   13d96:	d012      	beq.n	13dbe <ull_conn_done+0x116>
	latency_event = lll->latency_event;
   13d98:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   13d9a:	e9cd 2208 	strd	r2, r2, [sp, #32]
	if (done->extra.trx_cnt) {
   13d9e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13da0:	1c7e      	adds	r6, r7, #1
   13da2:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   13da4:	b18a      	cbz	r2, 13dca <ull_conn_done+0x122>
			conn->master.terminate_ack = 1;
   13da6:	f043 0304 	orr.w	r3, r3, #4
   13daa:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	if (done->extra.crc_valid) {
   13dae:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   13db2:	2200      	movs	r2, #0
   13db4:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   13db8:	2b00      	cmp	r3, #0
   13dba:	d1a1      	bne.n	13d00 <ull_conn_done+0x58>
   13dbc:	e09a      	b.n	13ef4 <ull_conn_done+0x24c>
		conn_cleanup(conn, reason_final);
   13dbe:	4620      	mov	r0, r4
}
   13dc0:	b00b      	add	sp, #44	; 0x2c
   13dc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn, reason_final);
   13dc6:	f7ff beed 	b.w	13ba4 <conn_cleanup>
	if (done->extra.crc_valid) {
   13dca:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d196      	bne.n	13d00 <ull_conn_done+0x58>
	else if (conn->connect_expire) {
   13dd2:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   13dd6:	2b00      	cmp	r3, #0
   13dd8:	f000 808c 	beq.w	13ef4 <ull_conn_done+0x24c>
		if (conn->connect_expire > elapsed_event) {
   13ddc:	42b3      	cmp	r3, r6
   13dde:	f240 80e6 	bls.w	13fae <ull_conn_done+0x306>
			conn->connect_expire -= elapsed_event;
   13de2:	1b9b      	subs	r3, r3, r6
	if (conn->supervision_expire) {
   13de4:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   13de8:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   13dec:	2d00      	cmp	r5, #0
   13dee:	d08a      	beq.n	13d06 <ull_conn_done+0x5e>
		if (conn->supervision_expire > elapsed_event) {
   13df0:	42ae      	cmp	r6, r5
   13df2:	d2b5      	bcs.n	13d60 <ull_conn_done+0xb8>
			conn->supervision_expire -= elapsed_event;
   13df4:	1bad      	subs	r5, r5, r6
   13df6:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   13df8:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   13dfa:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   13dfe:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   13e02:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   13e04:	f240 80c0 	bls.w	13f88 <ull_conn_done+0x2e0>
			else if (lll->role) {
   13e08:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13e0c:	42ab      	cmp	r3, r5
   13e0e:	f6bf af7a 	bge.w	13d06 <ull_conn_done+0x5e>
				if (latency_event) {
   13e12:	2f00      	cmp	r7, #0
   13e14:	f040 80b8 	bne.w	13f88 <ull_conn_done+0x2e0>
					force = conn->slave.force & 0x01;
   13e18:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   13e1c:	086b      	lsrs	r3, r5, #1
					if (force) {
   13e1e:	f015 0501 	ands.w	r5, r5, #1
						conn->slave.force |= BIT(31);
   13e22:	bf18      	it	ne
   13e24:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   13e28:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   13e2c:	e76b      	b.n	13d06 <ull_conn_done+0x5e>
			    (conn->llcp_req == conn->llcp_ack)) {
   13e2e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13e32:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13e36:	1a9b      	subs	r3, r3, r2
   13e38:	f003 0303 	and.w	r3, r3, #3
   13e3c:	2b02      	cmp	r3, #2
   13e3e:	d074      	beq.n	13f2a <ull_conn_done+0x282>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   13e40:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   13e44:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   13e48:	429a      	cmp	r2, r3
   13e4a:	f000 809f 	beq.w	13f8c <ull_conn_done+0x2e4>
		lll->latency_event = 0U;
   13e4e:	2200      	movs	r2, #0
   13e50:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   13e54:	b90d      	cbnz	r5, 13e5a <ull_conn_done+0x1b2>
   13e56:	4297      	cmp	r7, r2
   13e58:	d073      	beq.n	13f42 <ull_conn_done+0x29a>
		lazy = lll->latency_event + 1U;
   13e5a:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13e5c:	9e08      	ldr	r6, [sp, #32]
		lazy = lll->latency_event + 1U;
   13e5e:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13e60:	b90b      	cbnz	r3, 13e66 <ull_conn_done+0x1be>
   13e62:	2e00      	cmp	r6, #0
   13e64:	d050      	beq.n	13f08 <ull_conn_done+0x260>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13e66:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   13e68:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13e6a:	9504      	str	r5, [sp, #16]
   13e6c:	2000      	movs	r0, #0
   13e6e:	4d5d      	ldr	r5, [pc, #372]	; (13fe4 <ull_conn_done+0x33c>)
   13e70:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13e72:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13e74:	e9cd 0001 	strd	r0, r0, [sp, #4]
   13e78:	9406      	str	r4, [sp, #24]
   13e7a:	9600      	str	r6, [sp, #0]
   13e7c:	b2d2      	uxtb	r2, r2
   13e7e:	2101      	movs	r1, #1
   13e80:	9505      	str	r5, [sp, #20]
   13e82:	f7f7 fd55 	bl	b930 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13e86:	f030 0302 	bics.w	r3, r0, #2
   13e8a:	f43f af6d 	beq.w	13d68 <ull_conn_done+0xc0>
   13e8e:	f7fa fc1d 	bl	e6cc <ull_disable_mark_get>
   13e92:	4284      	cmp	r4, r0
   13e94:	f43f af68 	beq.w	13d68 <ull_conn_done+0xc0>
   13e98:	4a53      	ldr	r2, [pc, #332]	; (13fe8 <ull_conn_done+0x340>)
   13e9a:	4954      	ldr	r1, [pc, #336]	; (13fec <ull_conn_done+0x344>)
   13e9c:	4854      	ldr	r0, [pc, #336]	; (13ff0 <ull_conn_done+0x348>)
   13e9e:	f240 53db 	movw	r3, #1499	; 0x5db
   13ea2:	f008 f9fb 	bl	1c29c <printk>
   13ea6:	4040      	eors	r0, r0
   13ea8:	f380 8811 	msr	BASEPRI, r0
   13eac:	f04f 0003 	mov.w	r0, #3
   13eb0:	df02      	svc	2
   13eb2:	e759      	b.n	13d68 <ull_conn_done+0xc0>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13eb4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   13eb8:	0719      	lsls	r1, r3, #28
   13eba:	d53c      	bpl.n	13f36 <ull_conn_done+0x28e>
					    (lll->latency + 6)) ?
   13ebc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   13ebe:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   13ec2:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   13ec4:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   13ec6:	bfc4      	itt	gt
   13ec8:	1ad3      	subgt	r3, r2, r3
   13eca:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   13ecc:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   13ed0:	bfcc      	ite	gt
   13ed2:	b29b      	uxthgt	r3, r3
   13ed4:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   13ed6:	4299      	cmp	r1, r3
   13ed8:	d05a      	beq.n	13f90 <ull_conn_done+0x2e8>
				conn->appto_reload = appto_reload_new;
   13eda:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   13ede:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   13ee2:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   13ee6:	e6f2      	b.n	13cce <ull_conn_done+0x26>
		conn->appto_expire = conn->apto_expire = 0U;
   13ee8:	2300      	movs	r3, #0
   13eea:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   13eee:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   13ef2:	e6ec      	b.n	13cce <ull_conn_done+0x26>
		if (!conn->supervision_expire) {
   13ef4:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   13ef8:	2d00      	cmp	r5, #0
   13efa:	f47f af79 	bne.w	13df0 <ull_conn_done+0x148>
			conn->supervision_expire = conn->supervision_reload;
   13efe:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   13f02:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   13f06:	e771      	b.n	13dec <ull_conn_done+0x144>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13f08:	2900      	cmp	r1, #0
   13f0a:	d1ac      	bne.n	13e66 <ull_conn_done+0x1be>
   13f0c:	2d00      	cmp	r5, #0
   13f0e:	d1aa      	bne.n	13e66 <ull_conn_done+0x1be>
   13f10:	e72a      	b.n	13d68 <ull_conn_done+0xc0>
			conn->appto_expire -= elapsed_event;
   13f12:	1b9e      	subs	r6, r3, r6
			    (conn->llcp_req == conn->llcp_ack)) {
   13f14:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   13f18:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
			conn->appto_expire -= elapsed_event;
   13f1c:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f20:	1a9b      	subs	r3, r3, r2
   13f22:	f003 0303 	and.w	r3, r3, #3
   13f26:	2b02      	cmp	r3, #2
   13f28:	d18a      	bne.n	13e40 <ull_conn_done+0x198>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   13f2a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f2e:	3b01      	subs	r3, #1
   13f30:	2b01      	cmp	r3, #1
   13f32:	d885      	bhi.n	13e40 <ull_conn_done+0x198>
   13f34:	e78b      	b.n	13e4e <ull_conn_done+0x1a6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13f36:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   13f3a:	07da      	lsls	r2, r3, #31
   13f3c:	f57f aec7 	bpl.w	13cce <ull_conn_done+0x26>
   13f40:	e7bc      	b.n	13ebc <ull_conn_done+0x214>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13f42:	9e08      	ldr	r6, [sp, #32]
   13f44:	b913      	cbnz	r3, 13f4c <ull_conn_done+0x2a4>
   13f46:	2e00      	cmp	r6, #0
   13f48:	f43f af0e 	beq.w	13d68 <ull_conn_done+0xc0>
	lazy = 0U;
   13f4c:	4629      	mov	r1, r5
   13f4e:	e78a      	b.n	13e66 <ull_conn_done+0x1be>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   13f50:	aa08      	add	r2, sp, #32
   13f52:	a909      	add	r1, sp, #36	; 0x24
   13f54:	4628      	mov	r0, r5
   13f56:	f7ec fa57 	bl	408 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   13f5a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   13f5e:	b35b      	cbz	r3, 13fb8 <ull_conn_done+0x310>
				lll->latency_event = 0;
   13f60:	2300      	movs	r3, #0
   13f62:	8623      	strh	r3, [r4, #48]	; 0x30
   13f64:	e6c4      	b.n	13cf0 <ull_conn_done+0x48>
			rx = ll_pdu_rx_alloc();
   13f66:	f7fa fb29 	bl	e5bc <ll_pdu_rx_alloc>
			if (rx) {
   13f6a:	4601      	mov	r1, r0
   13f6c:	b1d8      	cbz	r0, 13fa6 <ull_conn_done+0x2fe>
				rx->handle = lll->handle;
   13f6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   13f70:	2200      	movs	r2, #0
   13f72:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   13f76:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   13f78:	2318      	movs	r3, #24
   13f7a:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   13f7c:	6800      	ldr	r0, [r0, #0]
   13f7e:	f7fa faef 	bl	e560 <ll_rx_put>
				ll_rx_sched();
   13f82:	f7fa faf7 	bl	e574 <ll_rx_sched>
   13f86:	e6d0      	b.n	13d2a <ull_conn_done+0x82>
					force = 1U;
   13f88:	2501      	movs	r5, #1
   13f8a:	e6bc      	b.n	13d06 <ull_conn_done+0x5e>
	if ((force) || (latency_event != lll->latency_event)) {
   13f8c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   13f8e:	e760      	b.n	13e52 <ull_conn_done+0x1aa>
			if (conn->apto_expire == 0U) {
   13f90:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   13f94:	2900      	cmp	r1, #0
   13f96:	f47f ae9a 	bne.w	13cce <ull_conn_done+0x26>
   13f9a:	e7a0      	b.n	13ede <ull_conn_done+0x236>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   13f9c:	2122      	movs	r1, #34	; 0x22
   13f9e:	4620      	mov	r0, r4
   13fa0:	f7ff fe00 	bl	13ba4 <conn_cleanup>
			return;
   13fa4:	e6e0      	b.n	13d68 <ull_conn_done+0xc0>
				conn->apto_expire = 1U;
   13fa6:	2301      	movs	r3, #1
   13fa8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   13fac:	e6bd      	b.n	13d2a <ull_conn_done+0x82>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   13fae:	213e      	movs	r1, #62	; 0x3e
   13fb0:	4620      	mov	r0, r4
   13fb2:	f7ff fdf7 	bl	13ba4 <conn_cleanup>
			return;
   13fb6:	e6d7      	b.n	13d68 <ull_conn_done+0xc0>
				ull_conn_tx_demux(UINT8_MAX);
   13fb8:	20ff      	movs	r0, #255	; 0xff
   13fba:	f7ff fda3 	bl	13b04 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   13fbe:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   13fc2:	2a00      	cmp	r2, #0
   13fc4:	d1cc      	bne.n	13f60 <ull_conn_done+0x2b8>
   13fc6:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   13fca:	f7f6 f9f7 	bl	a3bc <memq_peek>
   13fce:	2800      	cmp	r0, #0
   13fd0:	d1c6      	bne.n	13f60 <ull_conn_done+0x2b8>
			} else if (lll->slave.latency_enabled) {
   13fd2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   13fd6:	075b      	lsls	r3, r3, #29
   13fd8:	f57f ae8a 	bpl.w	13cf0 <ull_conn_done+0x48>
				lll->latency_event = lll->latency;
   13fdc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   13fde:	8623      	strh	r3, [r4, #48]	; 0x30
   13fe0:	e686      	b.n	13cf0 <ull_conn_done+0x48>
   13fe2:	bf00      	nop
   13fe4:	0000fb69 	.word	0x0000fb69
   13fe8:	00020c10 	.word	0x00020c10
   13fec:	00020d8c 	.word	0x00020d8c
   13ff0:	0002060c 	.word	0x0002060c

00013ff4 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   13ff4:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   13ff8:	2b00      	cmp	r3, #0
   13ffa:	f000 80e7 	beq.w	141cc <ull_conn_tx_lll_enqueue+0x1d8>
   13ffe:	3901      	subs	r1, #1
{
   14000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   14004:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 141d0 <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   14008:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 141d4 <ull_conn_tx_lll_enqueue+0x1e0>
   1400c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 141d8 <ull_conn_tx_lll_enqueue+0x1e4>
   14010:	4604      	mov	r4, r0
   14012:	b2cd      	uxtb	r5, r1
   14014:	e012      	b.n	1403c <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   14016:	4640      	mov	r0, r8
   14018:	f7f6 f962 	bl	a2e0 <mem_acquire>
		LL_ASSERT(link);
   1401c:	4607      	mov	r7, r0
   1401e:	2800      	cmp	r0, #0
   14020:	d066      	beq.n	140f0 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   14022:	f104 0268 	add.w	r2, r4, #104	; 0x68
   14026:	4631      	mov	r1, r6
   14028:	4638      	mov	r0, r7
   1402a:	f7f6 f9bd 	bl	a3a8 <memq_enqueue>
	while (conn->tx_head &&
   1402e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14032:	3d01      	subs	r5, #1
   14034:	b2ed      	uxtb	r5, r5
   14036:	2b00      	cmp	r3, #0
   14038:	f000 8082 	beq.w	14140 <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   1403c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   14040:	07d1      	lsls	r1, r2, #31
   14042:	d403      	bmi.n	1404c <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   14044:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   14048:	0792      	lsls	r2, r2, #30
   1404a:	d55f      	bpl.n	1410c <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1404c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14050:	4293      	cmp	r3, r2
   14052:	d175      	bne.n	14140 <ull_conn_tx_lll_enqueue+0x14c>
   14054:	2dff      	cmp	r5, #255	; 0xff
   14056:	d073      	beq.n	14140 <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   14058:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   1405c:	4620      	mov	r0, r4
   1405e:	f7fb fda3 	bl	fba8 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14062:	7903      	ldrb	r3, [r0, #4]
   14064:	f003 0303 	and.w	r3, r3, #3
   14068:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1406a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1406c:	d1d3      	bne.n	14016 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1406e:	79c3      	ldrb	r3, [r0, #7]
   14070:	3b03      	subs	r3, #3
   14072:	2b14      	cmp	r3, #20
   14074:	d8cf      	bhi.n	14016 <ull_conn_tx_lll_enqueue+0x22>
   14076:	a201      	add	r2, pc, #4	; (adr r2, 1407c <ull_conn_tx_lll_enqueue+0x88>)
   14078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1407c:	000140d9 	.word	0x000140d9
   14080:	000140d9 	.word	0x000140d9
   14084:	00014017 	.word	0x00014017
   14088:	00014017 	.word	0x00014017
   1408c:	00014017 	.word	0x00014017
   14090:	00014017 	.word	0x00014017
   14094:	00014017 	.word	0x00014017
   14098:	000140d9 	.word	0x000140d9
   1409c:	000140d1 	.word	0x000140d1
   140a0:	00014017 	.word	0x00014017
   140a4:	00014017 	.word	0x00014017
   140a8:	00014017 	.word	0x00014017
   140ac:	00014017 	.word	0x00014017
   140b0:	00014017 	.word	0x00014017
   140b4:	00014017 	.word	0x00014017
   140b8:	00014017 	.word	0x00014017
   140bc:	00014017 	.word	0x00014017
   140c0:	00014017 	.word	0x00014017
   140c4:	00014017 	.word	0x00014017
   140c8:	00014145 	.word	0x00014145
   140cc:	00014145 	.word	0x00014145
		if (!conn->lll.role) {
   140d0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   140d4:	2b00      	cmp	r3, #0
   140d6:	da9e      	bge.n	14016 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   140d8:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   140dc:	f043 0302 	orr.w	r3, r3, #2
   140e0:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   140e4:	4640      	mov	r0, r8
   140e6:	f7f6 f8fb 	bl	a2e0 <mem_acquire>
		LL_ASSERT(link);
   140ea:	4607      	mov	r7, r0
   140ec:	2800      	cmp	r0, #0
   140ee:	d198      	bne.n	14022 <ull_conn_tx_lll_enqueue+0x2e>
   140f0:	483a      	ldr	r0, [pc, #232]	; (141dc <ull_conn_tx_lll_enqueue+0x1e8>)
   140f2:	f240 632f 	movw	r3, #1583	; 0x62f
   140f6:	4652      	mov	r2, sl
   140f8:	4649      	mov	r1, r9
   140fa:	f008 f8cf 	bl	1c29c <printk>
   140fe:	4040      	eors	r0, r0
   14100:	f380 8811 	msr	BASEPRI, r0
   14104:	f04f 0003 	mov.w	r0, #3
   14108:	df02      	svc	2
   1410a:	e78a      	b.n	14022 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1410c:	791a      	ldrb	r2, [r3, #4]
   1410e:	f002 0203 	and.w	r2, r2, #3
   14112:	2a03      	cmp	r2, #3
   14114:	d19e      	bne.n	14054 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   14116:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14118:	2a03      	cmp	r2, #3
   1411a:	d001      	beq.n	14120 <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1411c:	2a0a      	cmp	r2, #10
   1411e:	d199      	bne.n	14054 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   14120:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   14124:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   14128:	428a      	cmp	r2, r1
   1412a:	d012      	beq.n	14152 <ull_conn_tx_lll_enqueue+0x15e>
   1412c:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   14130:	2a03      	cmp	r2, #3
   14132:	d08f      	beq.n	14054 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   14134:	681a      	ldr	r2, [r3, #0]
   14136:	b11a      	cbz	r2, 14140 <ull_conn_tx_lll_enqueue+0x14c>
   14138:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1413c:	428a      	cmp	r2, r1
   1413e:	d034      	beq.n	141aa <ull_conn_tx_lll_enqueue+0x1b6>
}
   14140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   14144:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14148:	f043 0301 	orr.w	r3, r3, #1
   1414c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   14150:	e761      	b.n	14016 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   14152:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   14156:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   1415a:	4288      	cmp	r0, r1
   1415c:	d1ea      	bne.n	14134 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1415e:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   14162:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   14166:	4288      	cmp	r0, r1
   14168:	d1e4      	bne.n	14134 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1416a:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   1416e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   14172:	4288      	cmp	r0, r1
   14174:	d1de      	bne.n	14134 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   14176:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   1417a:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   1417e:	4288      	cmp	r0, r1
   14180:	d1d8      	bne.n	14134 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   14182:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   14186:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1418a:	4288      	cmp	r0, r1
   1418c:	d1d2      	bne.n	14134 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1418e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   14192:	3a02      	subs	r2, #2
   14194:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14198:	2201      	movs	r2, #1
   1419a:	f362 0301 	bfi	r3, r2, #0, #2
   1419e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   141a2:	2303      	movs	r3, #3
   141a4:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   141a8:	e754      	b.n	14054 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   141aa:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   141ae:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   141b2:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   141b6:	6810      	ldr	r0, [r2, #0]
   141b8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   141ba:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   141bc:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   141c0:	2900      	cmp	r1, #0
   141c2:	f47f af47 	bne.w	14054 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   141c6:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   141ca:	e743      	b.n	14054 <ull_conn_tx_lll_enqueue+0x60>
   141cc:	4770      	bx	lr
   141ce:	bf00      	nop
   141d0:	20001f90 	.word	0x20001f90
   141d4:	00020c10 	.word	0x00020c10
   141d8:	00020c74 	.word	0x00020c74
   141dc:	0002060c 	.word	0x0002060c

000141e0 <tx_demux>:
{
   141e0:	b510      	push	{r4, lr}
   141e2:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   141e4:	2001      	movs	r0, #1
   141e6:	f7ff fc8d 	bl	13b04 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   141ea:	4620      	mov	r0, r4
   141ec:	2101      	movs	r1, #1
}
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   141f2:	f7ff beff 	b.w	13ff4 <ull_conn_tx_lll_enqueue>
   141f6:	bf00      	nop

000141f8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   141f8:	4901      	ldr	r1, [pc, #4]	; (14200 <ull_conn_link_tx_release+0x8>)
   141fa:	f7f6 b88b 	b.w	a314 <mem_release>
   141fe:	bf00      	nop
   14200:	20001f90 	.word	0x20001f90

00014204 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   14204:	4b01      	ldr	r3, [pc, #4]	; (1420c <ull_conn_ack_last_idx_get+0x8>)
}
   14206:	78d8      	ldrb	r0, [r3, #3]
   14208:	4770      	bx	lr
   1420a:	bf00      	nop
   1420c:	20000408 	.word	0x20000408

00014210 <ull_conn_ack_peek>:
{
   14210:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   14212:	4b0c      	ldr	r3, [pc, #48]	; (14244 <ull_conn_ack_peek+0x34>)
   14214:	f893 c002 	ldrb.w	ip, [r3, #2]
   14218:	78dc      	ldrb	r4, [r3, #3]
   1421a:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1421c:	45a4      	cmp	ip, r4
   1421e:	d00f      	beq.n	14240 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   14220:	fb1c fc05 	smulbb	ip, ip, r5
   14224:	3304      	adds	r3, #4
	if (!lll_tx) {
   14226:	4686      	mov	lr, r0
   14228:	eb13 000c 	adds.w	r0, r3, ip
   1422c:	d007      	beq.n	1423e <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   1422e:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   14232:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   14236:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   14238:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1423a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1423c:	6818      	ldr	r0, [r3, #0]
}
   1423e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   14240:	2000      	movs	r0, #0
}
   14242:	bd30      	pop	{r4, r5, pc}
   14244:	20000408 	.word	0x20000408

00014248 <ull_conn_ack_by_last_peek>:
{
   14248:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1424a:	4b0c      	ldr	r3, [pc, #48]	; (1427c <ull_conn_ack_by_last_peek+0x34>)
   1424c:	f893 c002 	ldrb.w	ip, [r3, #2]
   14250:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   14254:	4584      	cmp	ip, r0
   14256:	d00e      	beq.n	14276 <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   14258:	3304      	adds	r3, #4
   1425a:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   1425e:	eb13 000c 	adds.w	r0, r3, ip
   14262:	d006      	beq.n	14272 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   14264:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   14268:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1426a:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   1426e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   14270:	6818      	ldr	r0, [r3, #0]
}
   14272:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   14276:	2000      	movs	r0, #0
   14278:	e7fb      	b.n	14272 <ull_conn_ack_by_last_peek+0x2a>
   1427a:	bf00      	nop
   1427c:	20000408 	.word	0x20000408

00014280 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   14280:	4b09      	ldr	r3, [pc, #36]	; (142a8 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14282:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14284:	78da      	ldrb	r2, [r3, #3]
   14286:	7818      	ldrb	r0, [r3, #0]
   14288:	f893 c001 	ldrb.w	ip, [r3, #1]
   1428c:	428a      	cmp	r2, r1
   1428e:	d009      	beq.n	142a4 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   14290:	1c4a      	adds	r2, r1, #1
   14292:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14294:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14298:	4594      	cmp	ip, r2
   1429a:	bf08      	it	eq
   1429c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1429e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   142a0:	709a      	strb	r2, [r3, #2]
	return mem;
   142a2:	4770      	bx	lr
		return NULL;
   142a4:	2000      	movs	r0, #0
}
   142a6:	4770      	bx	lr
   142a8:	20000408 	.word	0x20000408

000142ac <ull_conn_lll_ack_enqueue>:
{
   142ac:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   142ae:	4a15      	ldr	r2, [pc, #84]	; (14304 <ull_conn_lll_ack_enqueue+0x58>)
   142b0:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   142b2:	f892 e001 	ldrb.w	lr, [r2, #1]
   142b6:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   142ba:	1c63      	adds	r3, r4, #1
   142bc:	b2db      	uxtb	r3, r3
		last = 0U;
   142be:	459e      	cmp	lr, r3
   142c0:	bf08      	it	eq
   142c2:	2300      	moveq	r3, #0
	if (last == first) {
   142c4:	459c      	cmp	ip, r3
   142c6:	d00c      	beq.n	142e2 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   142c8:	4696      	mov	lr, r2
   142ca:	f81e cb04 	ldrb.w	ip, [lr], #4
   142ce:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   142d2:	eb1e 040c 	adds.w	r4, lr, ip
   142d6:	d004      	beq.n	142e2 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   142d8:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   142dc:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   142de:	70d3      	strb	r3, [r2, #3]
}
   142e0:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   142e2:	4a09      	ldr	r2, [pc, #36]	; (14308 <ull_conn_lll_ack_enqueue+0x5c>)
   142e4:	4909      	ldr	r1, [pc, #36]	; (1430c <ull_conn_lll_ack_enqueue+0x60>)
   142e6:	480a      	ldr	r0, [pc, #40]	; (14310 <ull_conn_lll_ack_enqueue+0x64>)
   142e8:	f240 636d 	movw	r3, #1645	; 0x66d
   142ec:	f007 ffd6 	bl	1c29c <printk>
   142f0:	4040      	eors	r0, r0
   142f2:	f380 8811 	msr	BASEPRI, r0
   142f6:	f04f 0003 	mov.w	r0, #3
   142fa:	df02      	svc	2
	lll_tx->handle = handle;
   142fc:	2300      	movs	r3, #0
   142fe:	801b      	strh	r3, [r3, #0]
   14300:	deff      	udf	#255	; 0xff
   14302:	bf00      	nop
   14304:	20000408 	.word	0x20000408
   14308:	00020c10 	.word	0x00020c10
   1430c:	00020c64 	.word	0x00020c64
   14310:	0002060c 	.word	0x0002060c

00014314 <ull_conn_tx_ack>:
{
   14314:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   14316:	7953      	ldrb	r3, [r2, #5]
{
   14318:	b083      	sub	sp, #12
   1431a:	4614      	mov	r4, r2
   1431c:	4605      	mov	r5, r0
   1431e:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   14320:	b37b      	cbz	r3, 14382 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14322:	7923      	ldrb	r3, [r4, #4]
   14324:	f003 0203 	and.w	r2, r3, #3
   14328:	2a03      	cmp	r2, #3
   1432a:	d00d      	beq.n	14348 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   1432c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14330:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   14332:	bf04      	itt	eq
   14334:	f36f 0301 	bfceq	r3, #0, #2
   14338:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1433a:	4621      	mov	r1, r4
   1433c:	4628      	mov	r0, r5
}
   1433e:	b003      	add	sp, #12
   14340:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   14344:	f7fa b950 	b.w	e5e8 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   14348:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1434c:	429d      	cmp	r5, r3
   1434e:	d126      	bne.n	1439e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   14350:	6830      	ldr	r0, [r6, #0]
   14352:	4284      	cmp	r4, r0
   14354:	d05b      	beq.n	1440e <ull_conn_tx_ack+0xfa>
			LL_ASSERT(!link->next);
   14356:	2800      	cmp	r0, #0
   14358:	d0ef      	beq.n	1433a <ull_conn_tx_ack+0x26>
   1435a:	4ac2      	ldr	r2, [pc, #776]	; (14664 <ull_conn_tx_ack+0x350>)
   1435c:	49c2      	ldr	r1, [pc, #776]	; (14668 <ull_conn_tx_ack+0x354>)
   1435e:	48c3      	ldr	r0, [pc, #780]	; (1466c <ull_conn_tx_ack+0x358>)
   14360:	f240 638d 	movw	r3, #1677	; 0x68d
   14364:	f007 ff9a 	bl	1c29c <printk>
   14368:	4040      	eors	r0, r0
   1436a:	f380 8811 	msr	BASEPRI, r0
   1436e:	f04f 0003 	mov.w	r0, #3
   14372:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   14374:	4621      	mov	r1, r4
   14376:	4628      	mov	r0, r5
}
   14378:	b003      	add	sp, #12
   1437a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1437e:	f7fa b933 	b.w	e5e8 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   14382:	4ab8      	ldr	r2, [pc, #736]	; (14664 <ull_conn_tx_ack+0x350>)
   14384:	49ba      	ldr	r1, [pc, #744]	; (14670 <ull_conn_tx_ack+0x35c>)
   14386:	48b9      	ldr	r0, [pc, #740]	; (1466c <ull_conn_tx_ack+0x358>)
   14388:	f240 637a 	movw	r3, #1658	; 0x67a
   1438c:	f007 ff86 	bl	1c29c <printk>
   14390:	4040      	eors	r0, r0
   14392:	f380 8811 	msr	BASEPRI, r0
   14396:	f04f 0003 	mov.w	r0, #3
   1439a:	df02      	svc	2
   1439c:	e7c1      	b.n	14322 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1439e:	48b5      	ldr	r0, [pc, #724]	; (14674 <ull_conn_tx_ack+0x360>)
   143a0:	462a      	mov	r2, r5
   143a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   143a6:	f7f5 ffcd 	bl	a344 <mem_get>
   143aa:	79e3      	ldrb	r3, [r4, #7]
   143ac:	3b02      	subs	r3, #2
   143ae:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   143b0:	2b16      	cmp	r3, #22
   143b2:	d83c      	bhi.n	1442e <ull_conn_tx_ack+0x11a>
   143b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   143b8:	00d400e6 	.word	0x00d400e6
   143bc:	00410048 	.word	0x00410048
   143c0:	003400b1 	.word	0x003400b1
   143c4:	0034003b 	.word	0x0034003b
   143c8:	005900a0 	.word	0x005900a0
   143cc:	004f003b 	.word	0x004f003b
   143d0:	003b003b 	.word	0x003b003b
   143d4:	0031003b 	.word	0x0031003b
   143d8:	0034003b 	.word	0x0034003b
   143dc:	0121014e 	.word	0x0121014e
   143e0:	00f2010f 	.word	0x00f2010f
   143e4:	00c3      	.short	0x00c3
		if (link->next == (void *)tx) {
   143e6:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   143e8:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
		if (link->next == (void *)tx) {
   143ec:	2b00      	cmp	r3, #0
   143ee:	f040 8081 	bne.w	144f4 <ull_conn_tx_ack+0x1e0>
			LL_ASSERT(link->next);
   143f2:	4a9c      	ldr	r2, [pc, #624]	; (14664 <ull_conn_tx_ack+0x350>)
   143f4:	49a0      	ldr	r1, [pc, #640]	; (14678 <ull_conn_tx_ack+0x364>)
   143f6:	489d      	ldr	r0, [pc, #628]	; (1466c <ull_conn_tx_ack+0x358>)
   143f8:	f240 6385 	movw	r3, #1669	; 0x685
   143fc:	f007 ff4e 	bl	1c29c <printk>
   14400:	4040      	eors	r0, r0
   14402:	f380 8811 	msr	BASEPRI, r0
   14406:	f04f 0003 	mov.w	r0, #3
   1440a:	df02      	svc	2
   1440c:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1440e:	499b      	ldr	r1, [pc, #620]	; (1467c <ull_conn_tx_ack+0x368>)
}
   14410:	b003      	add	sp, #12
   14412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14416:	f7f5 bf7d 	b.w	a314 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1441a:	7a23      	ldrb	r3, [r4, #8]
   1441c:	2b03      	cmp	r3, #3
   1441e:	d01a      	beq.n	14456 <ull_conn_tx_ack+0x142>
			conn->common.txn_lock = 0U;
   14420:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   14424:	f36f 0341 	bfc	r3, #1, #1
   14428:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			break;
   1442c:	e790      	b.n	14350 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   1442e:	6830      	ldr	r0, [r6, #0]
   14430:	42a0      	cmp	r0, r4
   14432:	d0ec      	beq.n	1440e <ull_conn_tx_ack+0xfa>
			LL_ASSERT(!link->next);
   14434:	2800      	cmp	r0, #0
   14436:	d190      	bne.n	1435a <ull_conn_tx_ack+0x46>
   14438:	e77f      	b.n	1433a <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1443a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
   1443e:	f043 0303 	orr.w	r3, r3, #3
   14442:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
   14446:	e783      	b.n	14350 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   14448:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1444c:	f043 0302 	orr.w	r3, r3, #2
   14450:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
   14454:	e77c      	b.n	14350 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   14456:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1445a:	f023 0303 	bic.w	r3, r3, #3
   1445e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = 0U;
   14462:	2300      	movs	r3, #0
   14464:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   14468:	e772      	b.n	14350 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   1446a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1446e:	2b00      	cmp	r3, #0
   14470:	dbea      	blt.n	14448 <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14472:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   14474:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14476:	f043 0303 	orr.w	r3, r3, #3
   1447a:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1447c:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1447e:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   14480:	2208      	movs	r2, #8
   14482:	f200 1169 	addw	r1, r0, #361	; 0x169
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14486:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   14488:	18a0      	adds	r0, r4, r2
   1448a:	f009 f9bd 	bl	1d808 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1448e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
   14492:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   14494:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
   14498:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1449a:	210c      	movs	r1, #12
   1449c:	f104 0012 	add.w	r0, r4, #18
   144a0:	f002 f93e 	bl	16720 <lll_csrand_isr_get>
	    conn->tx_head &&
   144a4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
	if (
   144a8:	2b00      	cmp	r3, #0
   144aa:	f000 80eb 	beq.w	14684 <ull_conn_tx_ack+0x370>
	    !conn->llcp_enc.pause_tx &&
   144ae:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
	    conn->tx_head &&
   144b2:	0791      	lsls	r1, r2, #30
   144b4:	f100 80e6 	bmi.w	14684 <ull_conn_tx_ack+0x370>
	    !conn->llcp_phy.pause_tx &&
   144b8:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
   144bc:	07d2      	lsls	r2, r2, #31
   144be:	f100 80e1 	bmi.w	14684 <ull_conn_tx_ack+0x370>
		if (conn->tx_head == conn->tx_data) {
   144c2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
   144c6:	4293      	cmp	r3, r2
   144c8:	f000 80fb 	beq.w	146c2 <ull_conn_tx_ack+0x3ae>
		} else if (!conn->tx_ctrl) {
   144cc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   144d0:	2a00      	cmp	r2, #0
   144d2:	f000 8105 	beq.w	146e0 <ull_conn_tx_ack+0x3cc>
	tx->next = conn->tx_ctrl_last->next;
   144d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
   144da:	681a      	ldr	r2, [r3, #0]
   144dc:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   144de:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   144e0:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   144e2:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
	if (!tx->next) {
   144e6:	2b00      	cmp	r3, #0
   144e8:	f43f af7d 	beq.w	143e6 <ull_conn_tx_ack+0xd2>
		if (link->next == (void *)tx) {
   144ec:	6833      	ldr	r3, [r6, #0]
   144ee:	2b00      	cmp	r3, #0
   144f0:	f43f af7f 	beq.w	143f2 <ull_conn_tx_ack+0xde>
}
   144f4:	b003      	add	sp, #12
   144f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   144f8:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   144fc:	f023 0306 	bic.w	r3, r3, #6
   14500:	f043 0306 	orr.w	r3, r3, #6
   14504:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   14508:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   1450c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   14510:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
   14514:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
		break;
   14518:	e71a      	b.n	14350 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1451a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1451e:	2b00      	cmp	r3, #0
   14520:	da8b      	bge.n	1443a <ull_conn_tx_ack+0x126>
			conn->llcp_enc.pause_rx = 0U;
   14522:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   14526:	f023 0303 	bic.w	r3, r3, #3
   1452a:	f880 3166 	strb.w	r3, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   1452e:	2300      	movs	r3, #0
   14530:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   14534:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
   14538:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
   1453c:	e708      	b.n	14350 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1453e:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   14542:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   14546:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   1454a:	f363 1206 	bfi	r2, r3, #4, #3
   1454e:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   14552:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
   14556:	f36f 0300 	bfc	r3, #0, #1
   1455a:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
		break;
   1455e:	e6f7      	b.n	14350 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   14560:	2208      	movs	r2, #8
   14562:	f104 0112 	add.w	r1, r4, #18
   14566:	30f6      	adds	r0, #246	; 0xf6
   14568:	f009 f94e 	bl	1d808 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1456c:	2204      	movs	r2, #4
   1456e:	f104 011a 	add.w	r1, r4, #26
   14572:	f107 0094 	add.w	r0, r7, #148	; 0x94
   14576:	f009 f947 	bl	1d808 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1457a:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1457e:	f043 0302 	orr.w	r3, r3, #2
   14582:	e7bf      	b.n	14504 <ull_conn_tx_ack+0x1f0>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   14584:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   14586:	2b13      	cmp	r3, #19
   14588:	bf08      	it	eq
   1458a:	2316      	moveq	r3, #22
   1458c:	f880 3143 	strb.w	r3, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   14590:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   14594:	3b01      	subs	r3, #1
   14596:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
	break;
   1459a:	e6d9      	b.n	14350 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1459c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   145a0:	2b00      	cmp	r3, #0
   145a2:	dad6      	bge.n	14552 <ull_conn_tx_ack+0x23e>
				conn->common.txn_lock = 0U;
   145a4:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   145a8:	4b35      	ldr	r3, [pc, #212]	; (14680 <ull_conn_tx_ack+0x36c>)
				conn->common.txn_lock = 0U;
   145aa:	f36f 0241 	bfc	r2, #1, #1
   145ae:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   145b2:	e893 0003 	ldmia.w	r3, {r0, r1}
   145b6:	ab02      	add	r3, sp, #8
   145b8:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   145bc:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
   145c0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   145c4:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   145c8:	f003 0307 	and.w	r3, r3, #7
   145cc:	a902      	add	r1, sp, #8
   145ce:	440b      	add	r3, r1
   145d0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   145d4:	e7b9      	b.n	1454a <ull_conn_tx_ack+0x236>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   145d6:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   145da:	2202      	movs	r2, #2
   145dc:	f362 0301 	bfi	r3, r2, #0, #2
   145e0:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   145e4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   145e8:	2b00      	cmp	r3, #0
   145ea:	dab2      	bge.n	14552 <ull_conn_tx_ack+0x23e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   145ec:	4b24      	ldr	r3, [pc, #144]	; (14680 <ull_conn_tx_ack+0x36c>)
   145ee:	e893 0003 	ldmia.w	r3, {r0, r1}
   145f2:	ab02      	add	r3, sp, #8
   145f4:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   145f8:	e7e0      	b.n	145bc <ull_conn_tx_ack+0x2a8>
		conn->common.txn_lock = 0U;
   145fa:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   145fe:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   14602:	f36f 0341 	bfc	r3, #1, #1
   14606:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1460a:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
   1460e:	428b      	cmp	r3, r1
   14610:	f43f ae9e 	beq.w	14350 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   14614:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   14618:	f002 0307 	and.w	r3, r2, #7
   1461c:	2b03      	cmp	r3, #3
   1461e:	d005      	beq.n	1462c <ull_conn_tx_ack+0x318>
   14620:	3303      	adds	r3, #3
   14622:	f003 0307 	and.w	r3, r3, #7
   14626:	2b01      	cmp	r3, #1
   14628:	f63f af01 	bhi.w	1442e <ull_conn_tx_ack+0x11a>
				conn->lll.max_tx_octets =
   1462c:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
   14630:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   14634:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
   14638:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1463c:	f002 0307 	and.w	r3, r2, #7
   14640:	2b05      	cmp	r3, #5
   14642:	d02a      	beq.n	1469a <ull_conn_tx_ack+0x386>
				if (!conn->llcp_length.cache.tx_octets) {
   14644:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
   14648:	bb6b      	cbnz	r3, 146a6 <ull_conn_tx_ack+0x392>
					conn->llcp_length.ack =
   1464a:	f887 11ad 	strb.w	r1, [r7, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   1464e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   14652:	e67d      	b.n	14350 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   14654:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   14658:	2202      	movs	r2, #2
   1465a:	f362 0302 	bfi	r3, r2, #0, #3
   1465e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		break;
   14662:	e675      	b.n	14350 <ull_conn_tx_ack+0x3c>
   14664:	00020c10 	.word	0x00020c10
   14668:	00020df4 	.word	0x00020df4
   1466c:	0002060c 	.word	0x0002060c
   14670:	00020de8 	.word	0x00020de8
   14674:	20000de0 	.word	0x20000de0
   14678:	00020e00 	.word	0x00020e00
   1467c:	20001edc 	.word	0x20001edc
   14680:	00020e0c 	.word	0x00020e0c
		if (!conn->tx_ctrl) {
   14684:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   14688:	2a00      	cmp	r2, #0
   1468a:	f47f af24 	bne.w	144d6 <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head;
   1468e:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   14690:	e9c7 4471 	strd	r4, r4, [r7, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14694:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
   14698:	e725      	b.n	144e6 <ull_conn_tx_ack+0x1d2>
					conn->llcp_length.state =
   1469a:	2304      	movs	r3, #4
   1469c:	f363 0202 	bfi	r2, r3, #0, #3
   146a0:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
					break;
   146a4:	e654      	b.n	14350 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   146a6:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   146aa:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   146ac:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   146b0:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   146b4:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   146b8:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   146bc:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
				break;
   146c0:	e646      	b.n	14350 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   146c2:	681a      	ldr	r2, [r3, #0]
   146c4:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   146c8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   146cc:	2a00      	cmp	r2, #0
   146ce:	f47f af02 	bne.w	144d6 <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head->next;
   146d2:	681a      	ldr	r2, [r3, #0]
   146d4:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   146d6:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   146d8:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   146da:	e9c7 4472 	strd	r4, r4, [r7, #456]	; 0x1c8
   146de:	e702      	b.n	144e6 <ull_conn_tx_ack+0x1d2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   146e0:	791a      	ldrb	r2, [r3, #4]
   146e2:	f002 0203 	and.w	r2, r2, #3
   146e6:	2a03      	cmp	r2, #3
   146e8:	d002      	beq.n	146f0 <ull_conn_tx_ack+0x3dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   146ea:	e9c7 3372 	strd	r3, r3, [r7, #456]	; 0x1c8
   146ee:	e6f2      	b.n	144d6 <ull_conn_tx_ack+0x1c2>
	    ((pdu_data_tx->llctrl.opcode !=
   146f0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   146f2:	2a03      	cmp	r2, #3
   146f4:	d0ed      	beq.n	146d2 <ull_conn_tx_ack+0x3be>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   146f6:	2a0a      	cmp	r2, #10
   146f8:	d1f7      	bne.n	146ea <ull_conn_tx_ack+0x3d6>
   146fa:	e7ea      	b.n	146d2 <ull_conn_tx_ack+0x3be>

000146fc <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   146fc:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   14700:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14704:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   14706:	bf03      	ittte	eq
   14708:	3301      	addeq	r3, #1
   1470a:	f880 30e4 	strbeq.w	r3, [r0, #228]	; 0xe4
	return 0;
   1470e:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   14710:	200c      	movne	r0, #12
}
   14712:	4770      	bx	lr

00014714 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   14714:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   14718:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   1471c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   14720:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14722:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   14726:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14728:	bf15      	itete	ne
   1472a:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1472c:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1472e:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   14730:	3b0b      	subeq	r3, #11
   14732:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   14734:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   14736:	bf44      	itt	mi
   14738:	3b04      	submi	r3, #4
   1473a:	b29b      	uxthmi	r3, r3
}
   1473c:	4298      	cmp	r0, r3
   1473e:	bf28      	it	cs
   14740:	4618      	movcs	r0, r3
   14742:	4770      	bx	lr

00014744 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   14744:	b510      	push	{r4, lr}
   14746:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14748:	b930      	cbnz	r0, 14758 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   1474a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1474e:	f36f 0382 	bfc	r3, #2, #1
   14752:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   14756:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14758:	4a09      	ldr	r2, [pc, #36]	; (14780 <ticker_update_latency_cancel_op_cb+0x3c>)
   1475a:	490a      	ldr	r1, [pc, #40]	; (14784 <ticker_update_latency_cancel_op_cb+0x40>)
   1475c:	480a      	ldr	r0, [pc, #40]	; (14788 <ticker_update_latency_cancel_op_cb+0x44>)
   1475e:	f240 2357 	movw	r3, #599	; 0x257
   14762:	f007 fd9b 	bl	1c29c <printk>
   14766:	4040      	eors	r0, r0
   14768:	f380 8811 	msr	BASEPRI, r0
   1476c:	f04f 0003 	mov.w	r0, #3
   14770:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   14772:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14776:	f36f 0382 	bfc	r3, #2, #1
   1477a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1477e:	bd10      	pop	{r4, pc}
   14780:	00020e2c 	.word	0x00020e2c
   14784:	00020e70 	.word	0x00020e70
   14788:	0002060c 	.word	0x0002060c

0001478c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1478c:	b900      	cbnz	r0, 14790 <ticker_op_cb+0x4>
   1478e:	4770      	bx	lr
{
   14790:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14792:	4a07      	ldr	r2, [pc, #28]	; (147b0 <ticker_op_cb+0x24>)
   14794:	4907      	ldr	r1, [pc, #28]	; (147b4 <ticker_op_cb+0x28>)
   14796:	4808      	ldr	r0, [pc, #32]	; (147b8 <ticker_op_cb+0x2c>)
   14798:	f240 234f 	movw	r3, #591	; 0x24f
   1479c:	f007 fd7e 	bl	1c29c <printk>
   147a0:	4040      	eors	r0, r0
   147a2:	f380 8811 	msr	BASEPRI, r0
   147a6:	f04f 0003 	mov.w	r0, #3
   147aa:	df02      	svc	2
}
   147ac:	bd08      	pop	{r3, pc}
   147ae:	bf00      	nop
   147b0:	00020e2c 	.word	0x00020e2c
   147b4:	00020c58 	.word	0x00020c58
   147b8:	0002060c 	.word	0x0002060c

000147bc <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   147bc:	2801      	cmp	r0, #1
   147be:	d000      	beq.n	147c2 <ticker_op_stop_adv_cb+0x6>
   147c0:	4770      	bx	lr
{
   147c2:	b510      	push	{r4, lr}
   147c4:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   147c6:	f7f9 ff81 	bl	e6cc <ull_disable_mark_get>
   147ca:	4284      	cmp	r4, r0
   147cc:	d00c      	beq.n	147e8 <ticker_op_stop_adv_cb+0x2c>
   147ce:	4a07      	ldr	r2, [pc, #28]	; (147ec <ticker_op_stop_adv_cb+0x30>)
   147d0:	4907      	ldr	r1, [pc, #28]	; (147f0 <ticker_op_stop_adv_cb+0x34>)
   147d2:	4808      	ldr	r0, [pc, #32]	; (147f4 <ticker_op_stop_adv_cb+0x38>)
   147d4:	f240 2347 	movw	r3, #583	; 0x247
   147d8:	f007 fd60 	bl	1c29c <printk>
   147dc:	4040      	eors	r0, r0
   147de:	f380 8811 	msr	BASEPRI, r0
   147e2:	f04f 0003 	mov.w	r0, #3
   147e6:	df02      	svc	2
}
   147e8:	bd10      	pop	{r4, pc}
   147ea:	bf00      	nop
   147ec:	00020e2c 	.word	0x00020e2c
   147f0:	00020e84 	.word	0x00020e84
   147f4:	0002060c 	.word	0x0002060c

000147f8 <ull_slave_ticker_cb>:
{
   147f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147fc:	9c06      	ldr	r4, [sp, #24]
   147fe:	4688      	mov	r8, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14800:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   14802:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14804:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14808:	4299      	cmp	r1, r3
   1480a:	d024      	beq.n	14856 <ull_slave_ticker_cb+0x5e>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1480c:	4605      	mov	r5, r0
   1480e:	4601      	mov	r1, r0
   14810:	4620      	mov	r0, r4
   14812:	4617      	mov	r7, r2
   14814:	f7fd fe14 	bl	12440 <ull_conn_llcp>
		if (ret) {
   14818:	b9e8      	cbnz	r0, 14856 <ull_slave_ticker_cb+0x5e>
	return ++hdr->ref;
   1481a:	7820      	ldrb	r0, [r4, #0]
   1481c:	3001      	adds	r0, #1
   1481e:	b2c0      	uxtb	r0, r0
   14820:	7020      	strb	r0, [r4, #0]
	LL_ASSERT(ref);
   14822:	b340      	cbz	r0, 14876 <ull_slave_ticker_cb+0x7e>
	p.ticks_at_expire = ticks_at_expire;
   14824:	481b      	ldr	r0, [pc, #108]	; (14894 <ull_slave_ticker_cb+0x9c>)
	mfy.param = &p;
   14826:	4b1c      	ldr	r3, [pc, #112]	; (14898 <ull_slave_ticker_cb+0xa0>)
	p.lazy = lazy;
   14828:	8107      	strh	r7, [r0, #8]
	p.param = &conn->lll;
   1482a:	f104 011c 	add.w	r1, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1482e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   14830:	60c1      	str	r1, [r0, #12]
	p.remainder = remainder;
   14832:	e9c0 5800 	strd	r5, r8, [r0]
	p.force = force;
   14836:	7286      	strb	r6, [r0, #10]
	mfy.param = &p;
   14838:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1483a:	4611      	mov	r1, r2
   1483c:	2001      	movs	r0, #1
   1483e:	f7f5 fe27 	bl	a490 <mayfly_enqueue>
	LL_ASSERT(!err);
   14842:	b950      	cbnz	r0, 1485a <ull_slave_ticker_cb+0x62>
	ull_conn_tx_demux(UINT8_MAX);
   14844:	20ff      	movs	r0, #255	; 0xff
   14846:	f7ff f95d 	bl	13b04 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1484a:	4620      	mov	r0, r4
   1484c:	21ff      	movs	r1, #255	; 0xff
}
   1484e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14852:	f7ff bbcf 	b.w	13ff4 <ull_conn_tx_lll_enqueue>
}
   14856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1485a:	4a10      	ldr	r2, [pc, #64]	; (1489c <ull_slave_ticker_cb+0xa4>)
   1485c:	4910      	ldr	r1, [pc, #64]	; (148a0 <ull_slave_ticker_cb+0xa8>)
   1485e:	4811      	ldr	r0, [pc, #68]	; (148a4 <ull_slave_ticker_cb+0xac>)
   14860:	f240 230b 	movw	r3, #523	; 0x20b
   14864:	f007 fd1a 	bl	1c29c <printk>
   14868:	4040      	eors	r0, r0
   1486a:	f380 8811 	msr	BASEPRI, r0
   1486e:	f04f 0003 	mov.w	r0, #3
   14872:	df02      	svc	2
   14874:	e7e6      	b.n	14844 <ull_slave_ticker_cb+0x4c>
	LL_ASSERT(ref);
   14876:	4a09      	ldr	r2, [pc, #36]	; (1489c <ull_slave_ticker_cb+0xa4>)
   14878:	490b      	ldr	r1, [pc, #44]	; (148a8 <ull_slave_ticker_cb+0xb0>)
   1487a:	480a      	ldr	r0, [pc, #40]	; (148a4 <ull_slave_ticker_cb+0xac>)
   1487c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   14880:	f007 fd0c 	bl	1c29c <printk>
   14884:	4040      	eors	r0, r0
   14886:	f380 8811 	msr	BASEPRI, r0
   1488a:	f04f 0003 	mov.w	r0, #3
   1488e:	df02      	svc	2
   14890:	e7c8      	b.n	14824 <ull_slave_ticker_cb+0x2c>
   14892:	bf00      	nop
   14894:	20001fe4 	.word	0x20001fe4
   14898:	200004d0 	.word	0x200004d0
   1489c:	00020e2c 	.word	0x00020e2c
   148a0:	000208f8 	.word	0x000208f8
   148a4:	0002060c 	.word	0x0002060c
   148a8:	00020b2c 	.word	0x00020b2c

000148ac <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   148ac:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   148ae:	b123      	cbz	r3, 148ba <ull_slave_latency_cancel+0xe>
   148b0:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   148b4:	f012 0304 	ands.w	r3, r2, #4
   148b8:	d000      	beq.n	148bc <ull_slave_latency_cancel+0x10>
   148ba:	4770      	bx	lr
{
   148bc:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   148be:	f042 0204 	orr.w	r2, r2, #4
{
   148c2:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   148c4:	4c11      	ldr	r4, [pc, #68]	; (1490c <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   148c6:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
				      (TICKER_ID_CONN_BASE + handle),
   148ca:	3105      	adds	r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   148cc:	2201      	movs	r2, #1
   148ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
   148d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   148d6:	e9cd 3300 	strd	r3, r3, [sp]
   148da:	9006      	str	r0, [sp, #24]
   148dc:	b2ca      	uxtb	r2, r1
   148de:	4618      	mov	r0, r3
   148e0:	2103      	movs	r1, #3
   148e2:	f7f7 f825 	bl	b930 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   148e6:	f030 0302 	bics.w	r3, r0, #2
   148ea:	d00c      	beq.n	14906 <ull_slave_latency_cancel+0x5a>
   148ec:	4a08      	ldr	r2, [pc, #32]	; (14910 <ull_slave_latency_cancel+0x64>)
   148ee:	4909      	ldr	r1, [pc, #36]	; (14914 <ull_slave_latency_cancel+0x68>)
   148f0:	4809      	ldr	r0, [pc, #36]	; (14918 <ull_slave_latency_cancel+0x6c>)
   148f2:	f240 13c5 	movw	r3, #453	; 0x1c5
   148f6:	f007 fcd1 	bl	1c29c <printk>
   148fa:	4040      	eors	r0, r0
   148fc:	f380 8811 	msr	BASEPRI, r0
   14900:	f04f 0003 	mov.w	r0, #3
   14904:	df02      	svc	2
}
   14906:	b008      	add	sp, #32
   14908:	bd10      	pop	{r4, pc}
   1490a:	bf00      	nop
   1490c:	00014745 	.word	0x00014745
   14910:	00020e2c 	.word	0x00020e2c
   14914:	00020cf0 	.word	0x00020cf0
   14918:	0002060c 	.word	0x0002060c

0001491c <ll_start_enc_req_send>:
{
   1491c:	b570      	push	{r4, r5, r6, lr}
   1491e:	460e      	mov	r6, r1
   14920:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   14922:	f7fb fd39 	bl	10398 <ll_connected_get>
	if (!conn) {
   14926:	2800      	cmp	r0, #0
   14928:	d040      	beq.n	149ac <ll_start_enc_req_send+0x90>
	if (error_code) {
   1492a:	4604      	mov	r4, r0
   1492c:	b95e      	cbnz	r6, 14946 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1492e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14932:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   14936:	429a      	cmp	r2, r3
   14938:	d003      	beq.n	14942 <ll_start_enc_req_send+0x26>
   1493a:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   1493e:	2b03      	cmp	r3, #3
   14940:	d026      	beq.n	14990 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   14942:	200c      	movs	r0, #12
}
   14944:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   14946:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1494a:	f010 0004 	ands.w	r0, r0, #4
   1494e:	d112      	bne.n	14976 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   14950:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   14954:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   14958:	429a      	cmp	r2, r3
   1495a:	d0f2      	beq.n	14942 <ll_start_enc_req_send+0x26>
   1495c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   14960:	2b03      	cmp	r3, #3
   14962:	d1ee      	bne.n	14942 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14964:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   14968:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1496c:	f360 0301 	bfi	r3, r0, #0, #2
   14970:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   14974:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   14976:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1497a:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   1497e:	4293      	cmp	r3, r2
   14980:	d1df      	bne.n	14942 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   14982:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   14984:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   14988:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   1498c:	2000      	movs	r0, #0
}
   1498e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   14990:	2210      	movs	r2, #16
   14992:	4629      	mov	r1, r5
   14994:	f200 1071 	addw	r0, r0, #369	; 0x171
   14998:	f008 ff36 	bl	1d808 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1499c:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   149a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   149a4:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   149a8:	4630      	mov	r0, r6
}
   149aa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   149ac:	2002      	movs	r0, #2
}
   149ae:	bd70      	pop	{r4, r5, r6, pc}

000149b0 <ticker_op_stop_scan_cb>:
}
   149b0:	4770      	bx	lr
   149b2:	bf00      	nop

000149b4 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   149b4:	b900      	cbnz	r0, 149b8 <ticker_op_cb+0x4>
   149b6:	4770      	bx	lr
{
   149b8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   149ba:	4a07      	ldr	r2, [pc, #28]	; (149d8 <ticker_op_cb+0x24>)
   149bc:	4907      	ldr	r1, [pc, #28]	; (149dc <ticker_op_cb+0x28>)
   149be:	4808      	ldr	r0, [pc, #32]	; (149e0 <ticker_op_cb+0x2c>)
   149c0:	f240 33ee 	movw	r3, #1006	; 0x3ee
   149c4:	f007 fc6a 	bl	1c29c <printk>
   149c8:	4040      	eors	r0, r0
   149ca:	f380 8811 	msr	BASEPRI, r0
   149ce:	f04f 0003 	mov.w	r0, #3
   149d2:	df02      	svc	2
}
   149d4:	bd08      	pop	{r3, pc}
   149d6:	bf00      	nop
   149d8:	00020ec8 	.word	0x00020ec8
   149dc:	00020c58 	.word	0x00020c58
   149e0:	0002060c 	.word	0x0002060c

000149e4 <ull_master_ticker_cb>:
{
   149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149e8:	9c06      	ldr	r4, [sp, #24]
   149ea:	4688      	mov	r8, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   149ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   149ee:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   149f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   149f4:	4299      	cmp	r1, r3
   149f6:	d02b      	beq.n	14a50 <ull_master_ticker_cb+0x6c>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   149f8:	4605      	mov	r5, r0
   149fa:	4601      	mov	r1, r0
   149fc:	4620      	mov	r0, r4
   149fe:	4617      	mov	r7, r2
   14a00:	f7fd fd1e 	bl	12440 <ull_conn_llcp>
		if (ret) {
   14a04:	bb20      	cbnz	r0, 14a50 <ull_master_ticker_cb+0x6c>
   14a06:	7820      	ldrb	r0, [r4, #0]
   14a08:	3001      	adds	r0, #1
   14a0a:	b2c0      	uxtb	r0, r0
   14a0c:	7020      	strb	r0, [r4, #0]
	LL_ASSERT(ref);
   14a0e:	b378      	cbz	r0, 14a70 <ull_master_ticker_cb+0x8c>
	ull_conn_tx_demux(2);
   14a10:	2002      	movs	r0, #2
   14a12:	f7ff f877 	bl	13b04 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   14a16:	2102      	movs	r1, #2
   14a18:	4620      	mov	r0, r4
   14a1a:	f7ff faeb 	bl	13ff4 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   14a1e:	481b      	ldr	r0, [pc, #108]	; (14a8c <ull_master_ticker_cb+0xa8>)
	mfy.param = &p;
   14a20:	4b1b      	ldr	r3, [pc, #108]	; (14a90 <ull_master_ticker_cb+0xac>)
	p.lazy = lazy;
   14a22:	8107      	strh	r7, [r0, #8]
	p.param = &conn->lll;
   14a24:	f104 011c 	add.w	r1, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14a28:	2200      	movs	r2, #0
	p.param = &conn->lll;
   14a2a:	60c1      	str	r1, [r0, #12]
	p.remainder = remainder;
   14a2c:	e9c0 5800 	strd	r5, r8, [r0]
	p.force = force;
   14a30:	7286      	strb	r6, [r0, #10]
	mfy.param = &p;
   14a32:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14a34:	4611      	mov	r1, r2
   14a36:	2001      	movs	r0, #1
   14a38:	f7f5 fd2a 	bl	a490 <mayfly_enqueue>
	LL_ASSERT(!err);
   14a3c:	b950      	cbnz	r0, 14a54 <ull_master_ticker_cb+0x70>
	ull_conn_tx_demux(UINT8_MAX);
   14a3e:	20ff      	movs	r0, #255	; 0xff
   14a40:	f7ff f860 	bl	13b04 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14a44:	4620      	mov	r0, r4
   14a46:	21ff      	movs	r1, #255	; 0xff
}
   14a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14a4c:	f7ff bad2 	b.w	13ff4 <ull_conn_tx_lll_enqueue>
}
   14a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   14a54:	4a0f      	ldr	r2, [pc, #60]	; (14a94 <ull_master_ticker_cb+0xb0>)
   14a56:	4910      	ldr	r1, [pc, #64]	; (14a98 <ull_master_ticker_cb+0xb4>)
   14a58:	4810      	ldr	r0, [pc, #64]	; (14a9c <ull_master_ticker_cb+0xb8>)
   14a5a:	f240 33b6 	movw	r3, #950	; 0x3b6
   14a5e:	f007 fc1d 	bl	1c29c <printk>
   14a62:	4040      	eors	r0, r0
   14a64:	f380 8811 	msr	BASEPRI, r0
   14a68:	f04f 0003 	mov.w	r0, #3
   14a6c:	df02      	svc	2
   14a6e:	e7e6      	b.n	14a3e <ull_master_ticker_cb+0x5a>
	LL_ASSERT(ref);
   14a70:	4a08      	ldr	r2, [pc, #32]	; (14a94 <ull_master_ticker_cb+0xb0>)
   14a72:	490b      	ldr	r1, [pc, #44]	; (14aa0 <ull_master_ticker_cb+0xbc>)
   14a74:	4809      	ldr	r0, [pc, #36]	; (14a9c <ull_master_ticker_cb+0xb8>)
   14a76:	f240 33a3 	movw	r3, #931	; 0x3a3
   14a7a:	f007 fc0f 	bl	1c29c <printk>
   14a7e:	4040      	eors	r0, r0
   14a80:	f380 8811 	msr	BASEPRI, r0
   14a84:	f04f 0003 	mov.w	r0, #3
   14a88:	df02      	svc	2
   14a8a:	e7c1      	b.n	14a10 <ull_master_ticker_cb+0x2c>
   14a8c:	20001ffc 	.word	0x20001ffc
   14a90:	200004e0 	.word	0x200004e0
   14a94:	00020ec8 	.word	0x00020ec8
   14a98:	000208f8 	.word	0x000208f8
   14a9c:	0002060c 	.word	0x0002060c
   14aa0:	00020b2c 	.word	0x00020b2c

00014aa4 <ll_connect_disable>:
{
   14aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14aa8:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   14aaa:	2000      	movs	r0, #0
   14aac:	f7fa fdba 	bl	f624 <ull_scan_is_enabled_get>
	if (!scan) {
   14ab0:	b368      	cbz	r0, 14b0e <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   14ab2:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   14ab4:	4604      	mov	r4, r0
   14ab6:	b353      	cbz	r3, 14b0e <ll_connect_disable+0x6a>
	conn_lll->master.cancelled = 1U;
   14ab8:	f893 2020 	ldrb.w	r2, [r3, #32]
   14abc:	f042 0202 	orr.w	r2, r2, #2
   14ac0:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   14ac4:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   14ac6:	b317      	cbz	r7, 14b0e <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   14ac8:	4601      	mov	r1, r0
   14aca:	2000      	movs	r0, #0
   14acc:	f7fa fcf0 	bl	f4b0 <ull_scan_disable>
	if (!err) {
   14ad0:	4605      	mov	r5, r0
   14ad2:	b9c8      	cbnz	r0, 14b08 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   14ad4:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   14ad6:	f8d7 8144 	ldr.w	r8, [r7, #324]	; 0x144
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   14ada:	f507 79a2 	add.w	r9, r7, #324	; 0x144
		LL_ASSERT(link);
   14ade:	f1b8 0f00 	cmp.w	r8, #0
   14ae2:	d018      	beq.n	14b16 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   14ae4:	4640      	mov	r0, r8
   14ae6:	f7f9 fd29 	bl	e53c <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14aea:	2314      	movs	r3, #20
   14aec:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		node_rx->hdr.handle = 0xffff;
   14af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14af4:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
		scan_lll = &scan->lll;
   14af8:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14afa:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   14afc:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b00:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
		*rx = node_rx;
   14b04:	f8c6 9000 	str.w	r9, [r6]
}
   14b08:	4628      	mov	r0, r5
   14b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14b0e:	250c      	movs	r5, #12
}
   14b10:	4628      	mov	r0, r5
   14b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   14b16:	4a07      	ldr	r2, [pc, #28]	; (14b34 <ll_connect_disable+0x90>)
   14b18:	4907      	ldr	r1, [pc, #28]	; (14b38 <ll_connect_disable+0x94>)
   14b1a:	4808      	ldr	r0, [pc, #32]	; (14b3c <ll_connect_disable+0x98>)
   14b1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   14b20:	f007 fbbc 	bl	1c29c <printk>
   14b24:	4040      	eors	r0, r0
   14b26:	f380 8811 	msr	BASEPRI, r0
   14b2a:	f04f 0003 	mov.w	r0, #3
   14b2e:	df02      	svc	2
   14b30:	e7d8      	b.n	14ae4 <ll_connect_disable+0x40>
   14b32:	bf00      	nop
   14b34:	00020ec8 	.word	0x00020ec8
   14b38:	00020c74 	.word	0x00020c74
   14b3c:	0002060c 	.word	0x0002060c

00014b40 <ll_chm_update>:
{
   14b40:	b570      	push	{r4, r5, r6, lr}
   14b42:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
   14b44:	f000 fa9e 	bl	15084 <ull_chan_map_set>
		conn = ll_connected_get(handle);
   14b48:	2000      	movs	r0, #0
   14b4a:	f7fb fc25 	bl	10398 <ll_connected_get>
		if (!conn || conn->lll.role) {
   14b4e:	4604      	mov	r4, r0
   14b50:	b1e8      	cbz	r0, 14b8e <ll_chm_update+0x4e>
   14b52:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14b56:	2b00      	cmp	r3, #0
   14b58:	db19      	blt.n	14b8e <ll_chm_update+0x4e>
		ret = ull_conn_llcp_req(conn);
   14b5a:	f7ff fdcf 	bl	146fc <ull_conn_llcp_req>
		if (ret) {
   14b5e:	4605      	mov	r5, r0
   14b60:	b998      	cbnz	r0, 14b8a <ll_chm_update+0x4a>
		memcpy(conn->llcp.chan_map.chm, chm,
   14b62:	2205      	movs	r2, #5
   14b64:	4631      	mov	r1, r6
   14b66:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   14b6a:	f008 fe4d 	bl	1d808 <memcpy>
		conn->llcp.chan_map.initiate = 1U;
   14b6e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_req++;
   14b72:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		conn->llcp.chan_map.initiate = 1U;
   14b76:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   14b7a:	2102      	movs	r1, #2
		conn->llcp_req++;
   14b7c:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   14b7e:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   14b82:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		conn->llcp_req++;
   14b86:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   14b8a:	4628      	mov	r0, r5
   14b8c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   14b8e:	2500      	movs	r5, #0
}
   14b90:	4628      	mov	r0, r5
   14b92:	bd70      	pop	{r4, r5, r6, pc}

00014b94 <ll_enc_req_send>:
{
   14b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b98:	4607      	mov	r7, r0
   14b9a:	4688      	mov	r8, r1
   14b9c:	4691      	mov	r9, r2
   14b9e:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   14ba0:	f7fb fbfa 	bl	10398 <ll_connected_get>
	if (!conn) {
   14ba4:	2800      	cmp	r0, #0
   14ba6:	d067      	beq.n	14c78 <ll_enc_req_send+0xe4>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   14ba8:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
   14bac:	f890 3165 	ldrb.w	r3, [r0, #357]	; 0x165
   14bb0:	429a      	cmp	r2, r3
   14bb2:	4604      	mov	r4, r0
   14bb4:	d13f      	bne.n	14c36 <ll_enc_req_send+0xa2>
   14bb6:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14bba:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   14bbe:	429a      	cmp	r2, r3
   14bc0:	d003      	beq.n	14bca <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   14bc2:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   14bc6:	2b03      	cmp	r3, #3
   14bc8:	d035      	beq.n	14c36 <ll_enc_req_send+0xa2>
	tx = ll_tx_mem_acquire();
   14bca:	f7fb fbf7 	bl	103bc <ll_tx_mem_acquire>
	if (tx) {
   14bce:	4605      	mov	r5, r0
   14bd0:	b388      	cbz	r0, 14c36 <ll_enc_req_send+0xa2>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   14bd2:	4631      	mov	r1, r6
   14bd4:	2210      	movs	r2, #16
   14bd6:	f204 1071 	addw	r0, r4, #369	; 0x171
   14bda:	f008 fe15 	bl	1d808 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   14bde:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14be2:	f013 0318 	ands.w	r3, r3, #24
   14be6:	d029      	beq.n	14c3c <ll_enc_req_send+0xa8>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   14be8:	2b18      	cmp	r3, #24
   14bea:	d121      	bne.n	14c30 <ll_enc_req_send+0x9c>
			memcpy(&conn->llcp_enc.rand[0], rand,
   14bec:	2208      	movs	r2, #8
   14bee:	4641      	mov	r1, r8
   14bf0:	f204 1069 	addw	r0, r4, #361	; 0x169
   14bf4:	f008 fe08 	bl	1d808 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   14bf8:	f899 3000 	ldrb.w	r3, [r9]
   14bfc:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
			conn->llcp_enc.ediv[1] = ediv[1];
   14c00:	f899 3001 	ldrb.w	r3, [r9, #1]
   14c04:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14c08:	792b      	ldrb	r3, [r5, #4]
   14c0a:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14c0e:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14c10:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   14c12:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14c14:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   14c16:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   14c18:	4629      	mov	r1, r5
   14c1a:	4638      	mov	r0, r7
   14c1c:	f7fb fbda 	bl	103d4 <ll_tx_mem_enqueue>
   14c20:	b930      	cbnz	r0, 14c30 <ll_enc_req_send+0x9c>
		conn->llcp_enc.req++;
   14c22:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
   14c26:	3301      	adds	r3, #1
   14c28:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
}
   14c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   14c30:	4628      	mov	r0, r5
   14c32:	f7fb fbc9 	bl	103c8 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   14c36:	200c      	movs	r0, #12
}
   14c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14c3c:	792b      	ldrb	r3, [r5, #4]
   14c3e:	f043 0303 	orr.w	r3, r3, #3
   14c42:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   14c44:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14c46:	2208      	movs	r2, #8
			pdu_data_tx->len =
   14c48:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   14c4a:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14c4c:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   14c4e:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14c50:	18a8      	adds	r0, r5, r2
   14c52:	f008 fdd9 	bl	1d808 <memcpy>
			enc_req->ediv[0] = ediv[0];
   14c56:	f899 3000 	ldrb.w	r3, [r9]
   14c5a:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   14c5c:	f899 3001 	ldrb.w	r3, [r9, #1]
   14c60:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   14c62:	2108      	movs	r1, #8
   14c64:	f105 0012 	add.w	r0, r5, #18
   14c68:	f001 fd4c 	bl	16704 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   14c6c:	2104      	movs	r1, #4
   14c6e:	f105 001a 	add.w	r0, r5, #26
   14c72:	f001 fd47 	bl	16704 <lll_csrand_get>
   14c76:	e7cf      	b.n	14c18 <ll_enc_req_send+0x84>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c78:	2002      	movs	r0, #2
}
   14c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c7e:	bf00      	nop

00014c80 <ull_master_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   14c80:	6883      	ldr	r3, [r0, #8]
{
   14c82:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   14c84:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   14c86:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   14c88:	b31c      	cbz	r4, 14cd2 <ull_master_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   14c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   14c8c:	2200      	movs	r2, #0
   14c8e:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   14c90:	b163      	cbz	r3, 14cac <ull_master_cleanup+0x2c>
   14c92:	4a1e      	ldr	r2, [pc, #120]	; (14d0c <ull_master_cleanup+0x8c>)
   14c94:	491e      	ldr	r1, [pc, #120]	; (14d10 <ull_master_cleanup+0x90>)
   14c96:	481f      	ldr	r0, [pc, #124]	; (14d14 <ull_master_cleanup+0x94>)
   14c98:	f240 237b 	movw	r3, #635	; 0x27b
   14c9c:	f007 fafe 	bl	1c29c <printk>
   14ca0:	4040      	eors	r0, r0
   14ca2:	f380 8811 	msr	BASEPRI, r0
   14ca6:	f04f 0003 	mov.w	r0, #3
   14caa:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   14cac:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   14cb0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   14cb4:	f7f5 fb6e 	bl	a394 <memq_deinit>
	LL_ASSERT(link);
   14cb8:	4606      	mov	r6, r0
   14cba:	b1c0      	cbz	r0, 14cee <ull_master_cleanup+0x6e>
	ll_conn_release(conn);
   14cbc:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   14cbe:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   14cc0:	f7fb fb54 	bl	1036c <ll_conn_release>
	scan->is_enabled = 0U;
   14cc4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   14cc8:	f36f 0300 	bfc	r3, #0, #1
   14ccc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   14cd0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   14cd2:	4a0e      	ldr	r2, [pc, #56]	; (14d0c <ull_master_cleanup+0x8c>)
   14cd4:	4910      	ldr	r1, [pc, #64]	; (14d18 <ull_master_cleanup+0x98>)
   14cd6:	480f      	ldr	r0, [pc, #60]	; (14d14 <ull_master_cleanup+0x94>)
   14cd8:	f44f 731e 	mov.w	r3, #632	; 0x278
   14cdc:	f007 fade 	bl	1c29c <printk>
   14ce0:	4040      	eors	r0, r0
   14ce2:	f380 8811 	msr	BASEPRI, r0
   14ce6:	f04f 0003 	mov.w	r0, #3
   14cea:	df02      	svc	2
   14cec:	e7cd      	b.n	14c8a <ull_master_cleanup+0xa>
	LL_ASSERT(link);
   14cee:	4a07      	ldr	r2, [pc, #28]	; (14d0c <ull_master_cleanup+0x8c>)
   14cf0:	490a      	ldr	r1, [pc, #40]	; (14d1c <ull_master_cleanup+0x9c>)
   14cf2:	4808      	ldr	r0, [pc, #32]	; (14d14 <ull_master_cleanup+0x94>)
   14cf4:	f240 237e 	movw	r3, #638	; 0x27e
   14cf8:	f007 fad0 	bl	1c29c <printk>
   14cfc:	4040      	eors	r0, r0
   14cfe:	f380 8811 	msr	BASEPRI, r0
   14d02:	f04f 0003 	mov.w	r0, #3
   14d06:	df02      	svc	2
   14d08:	e7d8      	b.n	14cbc <ull_master_cleanup+0x3c>
   14d0a:	bf00      	nop
   14d0c:	00020ec8 	.word	0x00020ec8
   14d10:	00020978 	.word	0x00020978
   14d14:	0002060c 	.word	0x0002060c
   14d18:	0002096c 	.word	0x0002096c
   14d1c:	00020c74 	.word	0x00020c74

00014d20 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   14d20:	6008      	str	r0, [r1, #0]
}
   14d22:	4770      	bx	lr

00014d24 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   14d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d28:	b091      	sub	sp, #68	; 0x44
   14d2a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   14d2e:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   14d30:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   14d34:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   14d36:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   14d38:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   14d3c:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   14d3e:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   14d40:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   14d42:	da02      	bge.n	14d4a <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   14d44:	4613      	mov	r3, r2
   14d46:	3314      	adds	r3, #20
   14d48:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14d4a:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14d4c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14d50:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   14d54:	f8df b254 	ldr.w	fp, [pc, #596]	; 14fac <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14d58:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   14d5c:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14d5e:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   14d62:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   14d64:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14d66:	4635      	mov	r5, r6
   14d68:	e044      	b.n	14df4 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   14d6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14d6e:	2bff      	cmp	r3, #255	; 0xff
   14d70:	d064      	beq.n	14e3c <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   14d72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   14d76:	d011      	beq.n	14d9c <win_offset_calc.constprop.0+0x78>
   14d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14d7a:	4552      	cmp	r2, sl
   14d7c:	d00e      	beq.n	14d9c <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   14d7e:	498c      	ldr	r1, [pc, #560]	; (14fb0 <win_offset_calc.constprop.0+0x28c>)
   14d80:	488c      	ldr	r0, [pc, #560]	; (14fb4 <win_offset_calc.constprop.0+0x290>)
   14d82:	f44f 73be 	mov.w	r3, #380	; 0x17c
   14d86:	465a      	mov	r2, fp
   14d88:	f007 fa88 	bl	1c29c <printk>
   14d8c:	4040      	eors	r0, r0
   14d8e:	f380 8811 	msr	BASEPRI, r0
   14d92:	f04f 0003 	mov.w	r0, #3
   14d96:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   14d98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14d9c:	1e9a      	subs	r2, r3, #2
   14d9e:	2a03      	cmp	r2, #3
   14da0:	d825      	bhi.n	14dee <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   14da2:	2b05      	cmp	r3, #5
   14da4:	d17f      	bne.n	14ea6 <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   14da6:	9b05      	ldr	r3, [sp, #20]
   14da8:	2bff      	cmp	r3, #255	; 0xff
   14daa:	d178      	bne.n	14e9e <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   14dac:	2000      	movs	r0, #0
   14dae:	f7fb faeb 	bl	10388 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   14db2:	9b07      	ldr	r3, [sp, #28]
   14db4:	4283      	cmp	r3, r0
   14db6:	d01a      	beq.n	14dee <win_offset_calc.constprop.0+0xca>
   14db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14dba:	2b00      	cmp	r3, #0
   14dbc:	f040 808c 	bne.w	14ed8 <win_offset_calc.constprop.0+0x1b4>
   14dc0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14dc4:	2b00      	cmp	r3, #0
   14dc6:	db12      	blt.n	14dee <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14dc8:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   14dca:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   14dce:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14dd2:	3328      	adds	r3, #40	; 0x28
   14dd4:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   14dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14dd8:	681b      	ldr	r3, [r3, #0]
   14dda:	4543      	cmp	r3, r8
   14ddc:	f0c0 808c 	bcc.w	14ef8 <win_offset_calc.constprop.0+0x1d4>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   14de0:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   14de2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   14de6:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   14de8:	4645      	mov	r5, r8
   14dea:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   14dee:	783b      	ldrb	r3, [r7, #0]
   14df0:	42a3      	cmp	r3, r4
   14df2:	d95c      	bls.n	14eae <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   14df4:	ab0f      	add	r3, sp, #60	; 0x3c
   14df6:	9302      	str	r3, [sp, #8]
   14df8:	4b6f      	ldr	r3, [pc, #444]	; (14fb8 <win_offset_calc.constprop.0+0x294>)
   14dfa:	9301      	str	r3, [sp, #4]
   14dfc:	ab0d      	add	r3, sp, #52	; 0x34
   14dfe:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   14e00:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   14e02:	ab0e      	add	r3, sp, #56	; 0x38
   14e04:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   14e08:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   14e0a:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   14e0c:	f7f6 fdea 	bl	b9e4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   14e10:	2802      	cmp	r0, #2
   14e12:	d056      	beq.n	14ec2 <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   14e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   14e16:	2b00      	cmp	r3, #0
   14e18:	d0a7      	beq.n	14d6a <win_offset_calc.constprop.0+0x46>
   14e1a:	4968      	ldr	r1, [pc, #416]	; (14fbc <win_offset_calc.constprop.0+0x298>)
   14e1c:	4865      	ldr	r0, [pc, #404]	; (14fb4 <win_offset_calc.constprop.0+0x290>)
   14e1e:	f240 1373 	movw	r3, #371	; 0x173
   14e22:	465a      	mov	r2, fp
   14e24:	f007 fa3a 	bl	1c29c <printk>
   14e28:	4040      	eors	r0, r0
   14e2a:	f380 8811 	msr	BASEPRI, r0
   14e2e:	f04f 0003 	mov.w	r0, #3
   14e32:	df02      	svc	2
		if (ticker_id == 0xff) {
   14e34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14e38:	2bff      	cmp	r3, #255	; 0xff
   14e3a:	d19a      	bne.n	14d72 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   14e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e3e:	681b      	ldr	r3, [r3, #0]
   14e40:	429d      	cmp	r5, r3
   14e42:	bf38      	it	cc
   14e44:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   14e46:	783b      	ldrb	r3, [r7, #0]
   14e48:	42a3      	cmp	r3, r4
   14e4a:	d926      	bls.n	14e9a <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   14e4c:	9b04      	ldr	r3, [sp, #16]
   14e4e:	495c      	ldr	r1, [pc, #368]	; (14fc0 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   14e50:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   14e52:	442b      	add	r3, r5
   14e54:	fba1 2303 	umull	r2, r3, r1, r3
   14e58:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   14e5c:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   14e5e:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   14e62:	f240 809a 	bls.w	14f9a <win_offset_calc.constprop.0+0x276>
   14e66:	9e04      	ldr	r6, [sp, #16]
   14e68:	f8dd c018 	ldr.w	ip, [sp, #24]
   14e6c:	e002      	b.n	14e74 <win_offset_calc.constprop.0+0x150>
   14e6e:	4594      	cmp	ip, r2
   14e70:	f240 8093 	bls.w	14f9a <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   14e74:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   14e78:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   14e7c:	0a12      	lsrs	r2, r2, #8
   14e7e:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   14e80:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   14e82:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   14e84:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   14e86:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   14e88:	1973      	adds	r3, r6, r5
   14e8a:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   14e8e:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   14e90:	f3c3 124f 	ubfx	r2, r3, #5, #16
   14e94:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   14e98:	d8e9      	bhi.n	14e6e <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   14e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e9c:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   14e9e:	703c      	strb	r4, [r7, #0]
}
   14ea0:	b011      	add	sp, #68	; 0x44
   14ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ea6:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   14ea8:	783b      	ldrb	r3, [r7, #0]
   14eaa:	42a3      	cmp	r3, r4
   14eac:	d8a2      	bhi.n	14df4 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   14eae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14eb2:	2bff      	cmp	r3, #255	; 0xff
   14eb4:	d1f3      	bne.n	14e9e <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   14eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14eb8:	681b      	ldr	r3, [r3, #0]
   14eba:	429d      	cmp	r5, r3
   14ebc:	bf38      	it	cc
   14ebe:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   14ec0:	e7eb      	b.n	14e9a <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14ec4:	2b02      	cmp	r3, #2
   14ec6:	d1a5      	bne.n	14e14 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   14ec8:	2102      	movs	r1, #2
   14eca:	2000      	movs	r0, #0
   14ecc:	f7f6 fdd0 	bl	ba70 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14ed2:	2b02      	cmp	r3, #2
   14ed4:	d0f8      	beq.n	14ec8 <win_offset_calc.constprop.0+0x1a4>
   14ed6:	e79d      	b.n	14e14 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   14ed8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14edc:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   14ede:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   14ee2:	2900      	cmp	r1, #0
   14ee4:	da4e      	bge.n	14f84 <win_offset_calc.constprop.0+0x260>
				ticks_slot_abs_curr += ticks_slot_margin;
   14ee6:	333c      	adds	r3, #60	; 0x3c
   14ee8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   14eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14eec:	681b      	ldr	r3, [r3, #0]
   14eee:	4543      	cmp	r3, r8
				ticks_slot_margin =
   14ef0:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   14ef4:	f4bf af74 	bcs.w	14de0 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   14ef8:	429d      	cmp	r5, r3
   14efa:	bf38      	it	cc
   14efc:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   14efe:	783b      	ldrb	r3, [r7, #0]
   14f00:	42a3      	cmp	r3, r4
   14f02:	d930      	bls.n	14f66 <win_offset_calc.constprop.0+0x242>
					(ticks_slot_abs_prev + ticks_slot_abs +
   14f04:	9b04      	ldr	r3, [sp, #16]
   14f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14f08:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   14f0c:	4413      	add	r3, r2
   14f0e:	449a      	add	sl, r3
   14f10:	46b1      	mov	r9, r6
   14f12:	462e      	mov	r6, r5
   14f14:	4655      	mov	r5, sl
   14f16:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   14f1a:	e014      	b.n	14f46 <win_offset_calc.constprop.0+0x222>
					if (offset >= conn_interval) {
   14f1c:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   14f1e:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   14f22:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   14f24:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   14f28:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   14f2c:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   14f30:	d237      	bcs.n	14fa2 <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   14f32:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   14f36:	ea4f 2319 	mov.w	r3, r9, lsr #8
   14f3a:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   14f3e:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   14f40:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   14f42:	42a3      	cmp	r3, r4
   14f44:	d923      	bls.n	14f8e <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   14f46:	4631      	mov	r1, r6
   14f48:	4640      	mov	r0, r8
   14f4a:	f7f6 fdab 	bl	baa4 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   14f4e:	9b04      	ldr	r3, [sp, #16]
   14f50:	4a1b      	ldr	r2, [pc, #108]	; (14fc0 <win_offset_calc.constprop.0+0x29c>)
   14f52:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   14f54:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   14f56:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   14f5a:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   14f5e:	d2dd      	bcs.n	14f1c <win_offset_calc.constprop.0+0x1f8>
   14f60:	4635      	mov	r5, r6
   14f62:	464e      	mov	r6, r9
   14f64:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   14f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14f68:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   14f6a:	9b06      	ldr	r3, [sp, #24]
   14f6c:	42b3      	cmp	r3, r6
   14f6e:	f63f af37 	bhi.w	14de0 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   14f72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14f76:	2bff      	cmp	r3, #255	; 0xff
   14f78:	f43f af60 	beq.w	14e3c <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   14f7c:	703c      	strb	r4, [r7, #0]
}
   14f7e:	b011      	add	sp, #68	; 0x44
   14f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14f84:	3328      	adds	r3, #40	; 0x28
   14f86:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   14f88:	f04f 0a00 	mov.w	sl, #0
   14f8c:	e723      	b.n	14dd6 <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   14f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14f90:	4635      	mov	r5, r6
   14f92:	601d      	str	r5, [r3, #0]
   14f94:	464e      	mov	r6, r9
   14f96:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   14f98:	e722      	b.n	14de0 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   14f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   14f9c:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   14f9e:	601d      	str	r5, [r3, #0]
   14fa0:	e77d      	b.n	14e9e <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   14fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14fa4:	2500      	movs	r5, #0
   14fa6:	46d1      	mov	r9, sl
   14fa8:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   14faa:	e7e2      	b.n	14f72 <win_offset_calc.constprop.0+0x24e>
   14fac:	00020f20 	.word	0x00020f20
   14fb0:	000206a4 	.word	0x000206a4
   14fb4:	0002060c 	.word	0x0002060c
   14fb8:	00014d21 	.word	0x00014d21
   14fbc:	00020f64 	.word	0x00020f64
   14fc0:	cccccccd 	.word	0xcccccccd

00014fc4 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   14fc4:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   14fc6:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   14fc8:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   14fca:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   14fcc:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   14fce:	89c0      	ldrh	r0, [r0, #14]
   14fd0:	6909      	ldr	r1, [r1, #16]
   14fd2:	3310      	adds	r3, #16
   14fd4:	f7ec bfa8 	b.w	1f28 <after_mstr_offset_get>

00014fd8 <ull_sched_mfy_win_offset_use>:
{
   14fd8:	b510      	push	{r4, lr}
   14fda:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   14fdc:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   14fe0:	6901      	ldr	r1, [r0, #16]
   14fe2:	f500 738c 	add.w	r3, r0, #280	; 0x118
   14fe6:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   14fe8:	f7ec ff9e 	bl	1f28 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   14fec:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   14ff0:	4908      	ldr	r1, [pc, #32]	; (15014 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   14ff2:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   14ff6:	fba1 1303 	umull	r1, r3, r1, r3
   14ffa:	0a9b      	lsrs	r3, r3, #10
   14ffc:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   15000:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   15002:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   15004:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   15008:	2204      	movs	r2, #4
   1500a:	f362 0302 	bfi	r3, r2, #0, #3
   1500e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
   15012:	bd10      	pop	{r4, pc}
   15014:	d1b71759 	.word	0xd1b71759

00015018 <ull_sched_mfy_free_win_offset_calc>:
{
   15018:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   1501a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   1501e:	2100      	movs	r1, #0
{
   15020:	b084      	sub	sp, #16
	if (conn->lll.role) {
   15022:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   15024:	bfbc      	itt	lt
   15026:	f8d0 30e0 	ldrlt.w	r3, [r0, #224]	; 0xe0
   1502a:	f8c0 31a8 	strlt.w	r3, [r0, #424]	; 0x1a8
	uint8_t offset_max = 6U;
   1502e:	f04f 0206 	mov.w	r2, #6
{
   15032:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   15034:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   15038:	bfb8      	it	lt
   1503a:	f500 72d4 	addlt.w	r2, r0, #424	; 0x1a8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1503e:	f8d0 01a0 	ldr.w	r0, [r0, #416]	; 0x1a0
	uint32_t ticks_to_offset_default = 0U;
   15042:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   15044:	f10d 010b 	add.w	r1, sp, #11
   15048:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset_next = &ticks_to_offset_default;
   1504c:	bfa8      	it	ge
   1504e:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   15050:	e9cd 1000 	strd	r1, r0, [sp]
   15054:	2100      	movs	r1, #0
   15056:	4620      	mov	r0, r4
   15058:	f7ff fe64 	bl	14d24 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1505c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   15060:	f043 0307 	orr.w	r3, r3, #7
   15064:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
}
   15068:	b004      	add	sp, #16
   1506a:	bd10      	pop	{r4, pc}

0001506c <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   1506c:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   1506e:	4903      	ldr	r1, [pc, #12]	; (1507c <ull_chan_map_get+0x10>)
   15070:	2205      	movs	r2, #5
   15072:	f008 fbc9 	bl	1d808 <memcpy>

	return count;
   15076:	4b02      	ldr	r3, [pc, #8]	; (15080 <ull_chan_map_get+0x14>)
}
   15078:	7818      	ldrb	r0, [r3, #0]
   1507a:	bd08      	pop	{r3, pc}
   1507c:	200004f0 	.word	0x200004f0
   15080:	20000607 	.word	0x20000607

00015084 <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   15084:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   15086:	4c06      	ldr	r4, [pc, #24]	; (150a0 <ull_chan_map_set+0x1c>)
{
   15088:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   1508a:	2205      	movs	r2, #5
   1508c:	4620      	mov	r0, r4
   1508e:	f008 fbbb 	bl	1d808 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   15092:	2105      	movs	r1, #5
   15094:	4620      	mov	r0, r4
   15096:	f7f5 faf3 	bl	a680 <util_ones_count_get>
   1509a:	4b02      	ldr	r3, [pc, #8]	; (150a4 <ull_chan_map_set+0x20>)
   1509c:	7018      	strb	r0, [r3, #0]
}
   1509e:	bd10      	pop	{r4, pc}
   150a0:	200004f0 	.word	0x200004f0
   150a4:	20000607 	.word	0x20000607

000150a8 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   150a8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150aa:	fb02 1c01 	mla	ip, r2, r1, r1
   150ae:	7802      	ldrb	r2, [r0, #0]
   150b0:	491c      	ldr	r1, [pc, #112]	; (15124 <lll_chan_sel_1+0x7c>)
{
   150b2:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150b6:	4494      	add	ip, r2
   150b8:	fb81 210c 	smull	r2, r1, r1, ip
   150bc:	4461      	add	r1, ip
   150be:	1149      	asrs	r1, r1, #5
   150c0:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   150c4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   150c8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150ca:	ebac 0101 	sub.w	r1, ip, r1
   150ce:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   150d0:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   150d2:	08c4      	lsrs	r4, r0, #3
   150d4:	f001 0107 	and.w	r1, r1, #7
   150d8:	f813 c004 	ldrb.w	ip, [r3, r4]
   150dc:	fa4c f101 	asr.w	r1, ip, r1
   150e0:	f011 0101 	ands.w	r1, r1, #1
   150e4:	d11d      	bne.n	15122 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   150e6:	fbb0 f2f5 	udiv	r2, r0, r5
   150ea:	fb05 0212 	mls	r2, r5, r2, r0
   150ee:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   150f0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   150f4:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   150f6:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   150f8:	f100 0c08 	add.w	ip, r0, #8
   150fc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   15100:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   15104:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   15108:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1510c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   15110:	d002      	beq.n	15118 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   15112:	b132      	cbz	r2, 15122 <lll_chan_sel_1+0x7a>
				chan_index--;
   15114:	3a01      	subs	r2, #1
   15116:	b2d2      	uxtb	r2, r2
			chan_next++;
   15118:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1511a:	4584      	cmp	ip, r0
   1511c:	d1f2      	bne.n	15104 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1511e:	45a6      	cmp	lr, r4
   15120:	d1ea      	bne.n	150f8 <lll_chan_sel_1+0x50>
}
   15122:	bd30      	pop	{r4, r5, pc}
   15124:	dd67c8a7 	.word	0xdd67c8a7

00015128 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   15128:	8842      	ldrh	r2, [r0, #2]
   1512a:	8800      	ldrh	r0, [r0, #0]
}
   1512c:	4050      	eors	r0, r2
   1512e:	4770      	bx	lr

00015130 <lll_chan_sel_2>:
{
   15130:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15132:	4d2f      	ldr	r5, [pc, #188]	; (151f0 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   15134:	4c2f      	ldr	r4, [pc, #188]	; (151f4 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   15136:	4048      	eors	r0, r1
   15138:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1513c:	0a07      	lsrs	r7, r0, #8
   1513e:	b2c0      	uxtb	r0, r0
   15140:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   15144:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   15148:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1514c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   15150:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   15154:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15158:	433e      	orrs	r6, r7
   1515a:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1515e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   15162:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   15166:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1516a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1516e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   15170:	f3c0 4007 	ubfx	r0, r0, #16, #8
   15174:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15178:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1517c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15180:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   15182:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15186:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   15188:	d1d8      	bne.n	1513c <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1518a:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1518c:	481a      	ldr	r0, [pc, #104]	; (151f8 <lll_chan_sel_2+0xc8>)
   1518e:	fba0 4001 	umull	r4, r0, r0, r1
   15192:	1a0c      	subs	r4, r1, r0
   15194:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   15198:	0940      	lsrs	r0, r0, #5
   1519a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1519e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   151a2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   151a4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   151a8:	f000 0507 	and.w	r5, r0, #7
   151ac:	5d14      	ldrb	r4, [r2, r4]
   151ae:	412c      	asrs	r4, r5
   151b0:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   151b2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   151b4:	d41a      	bmi.n	151ec <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   151b6:	fb01 f303 	mul.w	r3, r1, r3
   151ba:	1e56      	subs	r6, r2, #1
   151bc:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   151c0:	3204      	adds	r2, #4
	chan_next = 0U;
   151c2:	4660      	mov	r0, ip
		bite = *chan_map;
   151c4:	f100 0508 	add.w	r5, r0, #8
   151c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   151cc:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   151ce:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   151d2:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   151d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   151da:	d002      	beq.n	151e2 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   151dc:	b133      	cbz	r3, 151ec <lll_chan_sel_2+0xbc>
				chan_index--;
   151de:	3b01      	subs	r3, #1
   151e0:	b2db      	uxtb	r3, r3
			chan_next++;
   151e2:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   151e4:	42a8      	cmp	r0, r5
   151e6:	d1f2      	bne.n	151ce <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   151e8:	42b2      	cmp	r2, r6
   151ea:	d1eb      	bne.n	151c4 <lll_chan_sel_2+0x94>
}
   151ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151ee:	bf00      	nop
   151f0:	00022110 	.word	0x00022110
   151f4:	00088440 	.word	0x00088440
   151f8:	bacf914d 	.word	0xbacf914d

000151fc <rl_update>:
		}
	}
}

static void rl_update(void)
{
   151fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15200:	4d18      	ldr	r5, [pc, #96]	; (15264 <rl_update+0x68>)
   15202:	4e19      	ldr	r6, [pc, #100]	; (15268 <rl_update+0x6c>)
   15204:	2400      	movs	r4, #0
   15206:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1520a:	1eaf      	subs	r7, r5, #2
   1520c:	f04f 0801 	mov.w	r8, #1
   15210:	e006      	b.n	15220 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15212:	3401      	adds	r4, #1
   15214:	2c08      	cmp	r4, #8
   15216:	f105 0506 	add.w	r5, r5, #6
   1521a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1521e:	d01e      	beq.n	1525e <rl_update+0x62>
		if (rl[i].taken) {
   15220:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15224:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   15228:	07da      	lsls	r2, r3, #31
   1522a:	d5f2      	bpl.n	15212 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1522c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1522e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   15230:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   15234:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15238:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1523a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1523e:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15240:	4631      	mov	r1, r6
   15242:	4628      	mov	r0, r5
   15244:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15246:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   15248:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1524c:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1524e:	f008 fadb 	bl	1d808 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15252:	2c08      	cmp	r4, #8
   15254:	f105 0506 	add.w	r5, r5, #6
   15258:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1525c:	d1e0      	bne.n	15220 <rl_update+0x24>
}
   1525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15262:	bf00      	nop
   15264:	20002206 	.word	0x20002206
   15268:	200020c5 	.word	0x200020c5

0001526c <wl_update>:
{
   1526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15270:	4e20      	ldr	r6, [pc, #128]	; (152f4 <wl_update+0x88>)
   15272:	4d21      	ldr	r5, [pc, #132]	; (152f8 <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15274:	f8df 8084 	ldr.w	r8, [pc, #132]	; 152fc <wl_update+0x90>
   15278:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15300 <wl_update+0x94>
{
   1527c:	2400      	movs	r4, #0
   1527e:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   15282:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   15284:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   15288:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   1528c:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15290:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   15292:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15296:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   15298:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1529c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   152a0:	d021      	beq.n	152e6 <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   152a2:	f898 3000 	ldrb.w	r3, [r8]
   152a6:	b163      	cbz	r3, 152c2 <wl_update+0x56>
		j = wl[i].rl_idx;
   152a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   152ac:	2b07      	cmp	r3, #7
   152ae:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   152b2:	d806      	bhi.n	152c2 <wl_update+0x56>
   152b4:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   152b8:	f013 0f04 	tst.w	r3, #4
   152bc:	d001      	beq.n	152c2 <wl_update+0x56>
   152be:	06db      	lsls	r3, r3, #27
   152c0:	d511      	bpl.n	152e6 <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152c2:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   152c6:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   152ce:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152d2:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   152d6:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152da:	40a3      	lsls	r3, r4
   152dc:	ea4e 0303 	orr.w	r3, lr, r3
   152e0:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   152e2:	f008 fa91 	bl	1d808 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   152e6:	3401      	adds	r4, #1
   152e8:	2c08      	cmp	r4, #8
   152ea:	f105 0508 	add.w	r5, r5, #8
   152ee:	d1c9      	bne.n	15284 <wl_update+0x18>
}
   152f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   152f4:	2000227e 	.word	0x2000227e
   152f8:	2000223e 	.word	0x2000223e
   152fc:	20002905 	.word	0x20002905
   15300:	200020c4 	.word	0x200020c4

00015304 <ll_wl_size_get>:
}
   15304:	2008      	movs	r0, #8
   15306:	4770      	bx	lr

00015308 <ll_wl_clear>:
{
   15308:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1530a:	2000      	movs	r0, #0
   1530c:	f7fa f810 	bl	f330 <ull_adv_filter_pol_get>
   15310:	bb00      	cbnz	r0, 15354 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   15312:	f7fa f9b9 	bl	f688 <ull_scan_filter_pol_get>
   15316:	f010 0001 	ands.w	r0, r0, #1
   1531a:	d11b      	bne.n	15354 <ll_wl_clear+0x4c>
   1531c:	4a0e      	ldr	r2, [pc, #56]	; (15358 <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
   1531e:	4c0f      	ldr	r4, [pc, #60]	; (1535c <ll_wl_clear+0x54>)
		uint8_t j = wl[i].rl_idx;
   15320:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   15324:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   15326:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   15328:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1532c:	d805      	bhi.n	1533a <ll_wl_clear+0x32>
			rl[j].wl = 0U;
   1532e:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   15332:	f36f 1345 	bfc	r3, #5, #1
   15336:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   1533a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1533e:	f36f 0300 	bfc	r3, #0, #1
   15342:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15346:	3001      	adds	r0, #1
   15348:	2808      	cmp	r0, #8
   1534a:	d1e9      	bne.n	15320 <ll_wl_clear+0x18>
	wl_anon = 0U;
   1534c:	4b04      	ldr	r3, [pc, #16]	; (15360 <ll_wl_clear+0x58>)
   1534e:	2000      	movs	r0, #0
   15350:	7018      	strb	r0, [r3, #0]
}
   15352:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15354:	200c      	movs	r0, #12
}
   15356:	bd10      	pop	{r4, pc}
   15358:	2000223c 	.word	0x2000223c
   1535c:	200020c4 	.word	0x200020c4
   15360:	20002906 	.word	0x20002906

00015364 <ll_wl_add>:
{
   15364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15368:	4607      	mov	r7, r0
   1536a:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1536c:	2000      	movs	r0, #0
   1536e:	f7f9 ffdf 	bl	f330 <ull_adv_filter_pol_get>
   15372:	2800      	cmp	r0, #0
   15374:	d16f      	bne.n	15456 <ll_wl_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   15376:	f7fa f987 	bl	f688 <ull_scan_filter_pol_get>
   1537a:	f010 0401 	ands.w	r4, r0, #1
   1537e:	d16a      	bne.n	15456 <ll_wl_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   15380:	f897 a000 	ldrb.w	sl, [r7]
   15384:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   15388:	d069      	beq.n	1545e <ll_wl_add+0xfa>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1538a:	4e42      	ldr	r6, [pc, #264]	; (15494 <ll_wl_add+0x130>)
   1538c:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15390:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   15394:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   15398:	4625      	mov	r5, r4
   1539a:	f1a6 0802 	sub.w	r8, r6, #2
   1539e:	e009      	b.n	153b4 <ll_wl_add+0x50>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   153a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   153a4:	d101      	bne.n	153aa <ll_wl_add+0x46>
			*free = i;
   153a6:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < WL_SIZE; i++) {
   153aa:	3501      	adds	r5, #1
   153ac:	2d08      	cmp	r5, #8
   153ae:	f106 0608 	add.w	r6, r6, #8
   153b2:	d017      	beq.n	153e4 <ll_wl_add+0x80>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   153b4:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   153b8:	07d8      	lsls	r0, r3, #31
   153ba:	f3c3 0240 	ubfx	r2, r3, #1, #1
   153be:	d5ef      	bpl.n	153a0 <ll_wl_add+0x3c>
   153c0:	4552      	cmp	r2, sl
   153c2:	d1f2      	bne.n	153aa <ll_wl_add+0x46>
   153c4:	2206      	movs	r2, #6
   153c6:	4630      	mov	r0, r6
   153c8:	4659      	mov	r1, fp
   153ca:	f008 fa0c 	bl	1d7e6 <memcmp>
   153ce:	2800      	cmp	r0, #0
   153d0:	d03e      	beq.n	15450 <ll_wl_add+0xec>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   153d2:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   153d6:	07d9      	lsls	r1, r3, #31
   153d8:	d5e2      	bpl.n	153a0 <ll_wl_add+0x3c>
	for (i = 0; i < WL_SIZE; i++) {
   153da:	3501      	adds	r5, #1
   153dc:	2d08      	cmp	r5, #8
   153de:	f106 0608 	add.w	r6, r6, #8
   153e2:	d1e7      	bne.n	153b4 <ll_wl_add+0x50>
	} else if (j >= ARRAY_SIZE(wl)) {
   153e4:	f1b9 0f07 	cmp.w	r9, #7
   153e8:	d840      	bhi.n	1546c <ll_wl_add+0x108>
	wl[i].id_addr_type = id_addr->type & 0x1;
   153ea:	783a      	ldrb	r2, [r7, #0]
   153ec:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   153f0:	4e29      	ldr	r6, [pc, #164]	; (15498 <ll_wl_add+0x134>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   153f2:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   153f4:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   153f8:	fb15 0009 	smlabb	r0, r5, r9, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   153fc:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   15400:	4440      	add	r0, r8
   15402:	2206      	movs	r2, #6
   15404:	4659      	mov	r1, fp
   15406:	f008 f9ff 	bl	1d808 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1540a:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1540c:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1540e:	f003 0301 	and.w	r3, r3, #1
   15412:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   15416:	fa5f fa84 	uxtb.w	sl, r4
   1541a:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   1541e:	f3c2 1180 	ubfx	r1, r2, #6, #1
   15422:	07d2      	lsls	r2, r2, #31
   15424:	f104 0401 	add.w	r4, r4, #1
   15428:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1542c:	d501      	bpl.n	15432 <ll_wl_add+0xce>
   1542e:	4299      	cmp	r1, r3
   15430:	d01e      	beq.n	15470 <ll_wl_add+0x10c>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15432:	2c08      	cmp	r4, #8
   15434:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15438:	d1eb      	bne.n	15412 <ll_wl_add+0xae>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1543a:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1543e:	22ff      	movs	r2, #255	; 0xff
   15440:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   15442:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   15446:	f043 0301 	orr.w	r3, r3, #1
   1544a:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   1544e:	2000      	movs	r0, #0
}
   15450:	b003      	add	sp, #12
   15452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15456:	200c      	movs	r0, #12
}
   15458:	b003      	add	sp, #12
   1545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   1545e:	4b0f      	ldr	r3, [pc, #60]	; (1549c <ll_wl_add+0x138>)
   15460:	2201      	movs	r2, #1
		return 0;
   15462:	4620      	mov	r0, r4
		wl_anon = 1U;
   15464:	701a      	strb	r2, [r3, #0]
}
   15466:	b003      	add	sp, #12
   15468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1546c:	2007      	movs	r0, #7
	return wl_add(addr);
   1546e:	e7ef      	b.n	15450 <ll_wl_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15470:	4630      	mov	r0, r6
   15472:	2206      	movs	r2, #6
   15474:	4659      	mov	r1, fp
   15476:	9301      	str	r3, [sp, #4]
   15478:	f008 f9b5 	bl	1d7e6 <memcmp>
   1547c:	9b01      	ldr	r3, [sp, #4]
   1547e:	2800      	cmp	r0, #0
   15480:	d1d7      	bne.n	15432 <ll_wl_add+0xce>
		rl[j].wl = 1U;
   15482:	5d7b      	ldrb	r3, [r7, r5]
   15484:	f043 0320 	orr.w	r3, r3, #32
   15488:	557b      	strb	r3, [r7, r5]
		wl[i].rl_idx = j;
   1548a:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1548e:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   15492:	e7d6      	b.n	15442 <ll_wl_add+0xde>
   15494:	2000223e 	.word	0x2000223e
   15498:	200020c5 	.word	0x200020c5
   1549c:	20002906 	.word	0x20002906

000154a0 <ll_wl_remove>:
{
   154a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154a4:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   154a6:	2000      	movs	r0, #0
   154a8:	f7f9 ff42 	bl	f330 <ull_adv_filter_pol_get>
   154ac:	b9f0      	cbnz	r0, 154ec <ll_wl_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   154ae:	f7fa f8eb 	bl	f688 <ull_scan_filter_pol_get>
   154b2:	f010 0401 	ands.w	r4, r0, #1
   154b6:	d119      	bne.n	154ec <ll_wl_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   154b8:	f895 8000 	ldrb.w	r8, [r5]
   154bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   154c0:	d035      	beq.n	1552e <ll_wl_remove+0x8e>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   154c2:	4f1d      	ldr	r7, [pc, #116]	; (15538 <ll_wl_remove+0x98>)
   154c4:	3501      	adds	r5, #1
	for (i = 0; i < WL_SIZE; i++) {
   154c6:	1ebe      	subs	r6, r7, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   154c8:	f008 0801 	and.w	r8, r8, #1
   154cc:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   154d0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   154d4:	07db      	lsls	r3, r3, #31
   154d6:	d501      	bpl.n	154dc <ll_wl_remove+0x3c>
   154d8:	4542      	cmp	r2, r8
   154da:	d00a      	beq.n	154f2 <ll_wl_remove+0x52>
	for (i = 0; i < WL_SIZE; i++) {
   154dc:	3401      	adds	r4, #1
   154de:	2c08      	cmp	r4, #8
   154e0:	f107 0708 	add.w	r7, r7, #8
   154e4:	d1f2      	bne.n	154cc <ll_wl_remove+0x2c>
   154e6:	2002      	movs	r0, #2
}
   154e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   154ec:	200c      	movs	r0, #12
}
   154ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   154f2:	2206      	movs	r2, #6
   154f4:	4638      	mov	r0, r7
   154f6:	4629      	mov	r1, r5
   154f8:	f008 f975 	bl	1d7e6 <memcmp>
   154fc:	2800      	cmp	r0, #0
   154fe:	d1ed      	bne.n	154dc <ll_wl_remove+0x3c>
		uint8_t j = wl[i].rl_idx;
   15500:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   15504:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   15506:	2b07      	cmp	r3, #7
   15508:	d808      	bhi.n	1551c <ll_wl_remove+0x7c>
			rl[j].wl = 0U;
   1550a:	4a0c      	ldr	r2, [pc, #48]	; (1553c <ll_wl_remove+0x9c>)
   1550c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15510:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   15514:	f360 1145 	bfi	r1, r0, #5, #1
   15518:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   1551c:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   15520:	f36f 0300 	bfc	r3, #0, #1
   15524:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
		return 0;
   15528:	2000      	movs	r0, #0
}
   1552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   1552e:	4b04      	ldr	r3, [pc, #16]	; (15540 <ll_wl_remove+0xa0>)
   15530:	701c      	strb	r4, [r3, #0]
		return 0;
   15532:	4620      	mov	r0, r4
}
   15534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15538:	2000223e 	.word	0x2000223e
   1553c:	200020c4 	.word	0x200020c4
   15540:	20002906 	.word	0x20002906

00015544 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15544:	2807      	cmp	r0, #7
{
   15546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1554a:	4604      	mov	r4, r0
   1554c:	460e      	mov	r6, r1
   1554e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15550:	d817      	bhi.n	15582 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   15552:	4d19      	ldr	r5, [pc, #100]	; (155b8 <ll_rl_id_addr_get+0x74>)
   15554:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15558:	00a7      	lsls	r7, r4, #2
   1555a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1555e:	07db      	lsls	r3, r3, #31
   15560:	d51c      	bpl.n	1559c <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   15562:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15564:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   15566:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1556a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1556e:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   15572:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15574:	4640      	mov	r0, r8
   15576:	2206      	movs	r2, #6
}
   15578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1557c:	3101      	adds	r1, #1
   1557e:	f008 b943 	b.w	1d808 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15582:	4a0e      	ldr	r2, [pc, #56]	; (155bc <ll_rl_id_addr_get+0x78>)
   15584:	490e      	ldr	r1, [pc, #56]	; (155c0 <ll_rl_id_addr_get+0x7c>)
   15586:	480f      	ldr	r0, [pc, #60]	; (155c4 <ll_rl_id_addr_get+0x80>)
   15588:	23f3      	movs	r3, #243	; 0xf3
   1558a:	f006 fe87 	bl	1c29c <printk>
   1558e:	4040      	eors	r0, r0
   15590:	f380 8811 	msr	BASEPRI, r0
   15594:	f04f 0003 	mov.w	r0, #3
   15598:	df02      	svc	2
   1559a:	e7da      	b.n	15552 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1559c:	4a07      	ldr	r2, [pc, #28]	; (155bc <ll_rl_id_addr_get+0x78>)
   1559e:	490a      	ldr	r1, [pc, #40]	; (155c8 <ll_rl_id_addr_get+0x84>)
   155a0:	4808      	ldr	r0, [pc, #32]	; (155c4 <ll_rl_id_addr_get+0x80>)
   155a2:	23f4      	movs	r3, #244	; 0xf4
   155a4:	f006 fe7a 	bl	1c29c <printk>
   155a8:	4040      	eors	r0, r0
   155aa:	f380 8811 	msr	BASEPRI, r0
   155ae:	f04f 0003 	mov.w	r0, #3
   155b2:	df02      	svc	2
   155b4:	e7d5      	b.n	15562 <ll_rl_id_addr_get+0x1e>
   155b6:	bf00      	nop
   155b8:	200020c4 	.word	0x200020c4
   155bc:	00020f94 	.word	0x00020f94
   155c0:	00020fd8 	.word	0x00020fd8
   155c4:	0002060c 	.word	0x0002060c
   155c8:	00020fe4 	.word	0x00020fe4

000155cc <ll_rl_size_get>:
   155cc:	2008      	movs	r0, #8
   155ce:	4770      	bx	lr

000155d0 <ll_rl_clear>:
{
   155d0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   155d2:	2000      	movs	r0, #0
   155d4:	f7f9 fea0 	bl	f318 <ull_adv_is_enabled>
		? 0 : 1;
   155d8:	b108      	cbz	r0, 155de <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   155da:	200c      	movs	r0, #12
}
   155dc:	bd10      	pop	{r4, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   155de:	f7fa f83b 	bl	f658 <ull_scan_is_enabled>
		? 0 : 1;
   155e2:	2800      	cmp	r0, #0
   155e4:	d1f9      	bne.n	155da <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   155e6:	4b19      	ldr	r3, [pc, #100]	; (1564c <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   155e8:	4c19      	ldr	r4, [pc, #100]	; (15650 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   155ea:	7819      	ldrb	r1, [r3, #0]
   155ec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   155f0:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   155f2:	f360 0100 	bfi	r1, r0, #0, #1
   155f6:	f360 0200 	bfi	r2, r0, #0, #1
   155fa:	7019      	strb	r1, [r3, #0]
   155fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   15600:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   15604:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   15608:	f360 0100 	bfi	r1, r0, #0, #1
   1560c:	f360 0200 	bfi	r2, r0, #0, #1
   15610:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   15614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   15618:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1561c:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   15620:	f360 0100 	bfi	r1, r0, #0, #1
   15624:	f360 0200 	bfi	r2, r0, #0, #1
   15628:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1562c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   15630:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   15634:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   15638:	f360 0100 	bfi	r1, r0, #0, #1
   1563c:	f360 0200 	bfi	r2, r0, #0, #1
   15640:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   15644:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   15648:	bd10      	pop	{r4, pc}
   1564a:	bf00      	nop
   1564c:	200020c4 	.word	0x200020c4
   15650:	20002904 	.word	0x20002904

00015654 <ll_rl_remove>:
{
   15654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15658:	b083      	sub	sp, #12
   1565a:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1565c:	2000      	movs	r0, #0
{
   1565e:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15660:	f7f9 fe5a 	bl	f318 <ull_adv_is_enabled>
		? 0 : 1;
   15664:	b118      	cbz	r0, 1566e <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15666:	200c      	movs	r0, #12
}
   15668:	b003      	add	sp, #12
   1566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1566e:	f7f9 fff3 	bl	f658 <ull_scan_is_enabled>
		? 0 : 1;
   15672:	4683      	mov	fp, r0
   15674:	2800      	cmp	r0, #0
   15676:	d1f6      	bne.n	15666 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15678:	9b00      	ldr	r3, [sp, #0]
   1567a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 157a8 <ll_rl_remove+0x154>
   1567e:	f813 ab01 	ldrb.w	sl, [r3], #1
   15682:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15684:	f00a 0a01 	and.w	sl, sl, #1
   15688:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1568c:	461e      	mov	r6, r3
   1568e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15692:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   15696:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1569a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1569e:	07db      	lsls	r3, r3, #31
   156a0:	ea4f 0984 	mov.w	r9, r4, lsl #2
   156a4:	d501      	bpl.n	156aa <ll_rl_remove+0x56>
   156a6:	4552      	cmp	r2, sl
   156a8:	d008      	beq.n	156bc <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   156aa:	3401      	adds	r4, #1
   156ac:	2c08      	cmp	r4, #8
   156ae:	f108 0828 	add.w	r8, r8, #40	; 0x28
   156b2:	d1ec      	bne.n	1568e <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156b4:	2002      	movs	r0, #2
}
   156b6:	b003      	add	sp, #12
   156b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   156bc:	4640      	mov	r0, r8
   156be:	2206      	movs	r2, #6
   156c0:	4631      	mov	r1, r6
   156c2:	f008 f890 	bl	1d7e6 <memcmp>
   156c6:	2800      	cmp	r0, #0
   156c8:	d1ef      	bne.n	156aa <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   156ca:	782a      	ldrb	r2, [r5, #0]
   156cc:	0752      	lsls	r2, r2, #29
   156ce:	4633      	mov	r3, r6
   156d0:	4606      	mov	r6, r0
   156d2:	d531      	bpl.n	15738 <ll_rl_remove+0xe4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   156d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 157ac <ll_rl_remove+0x158>
   156d8:	f898 2000 	ldrb.w	r2, [r8]
   156dc:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   156de:	f012 0aff 	ands.w	sl, r2, #255	; 0xff
   156e2:	d056      	beq.n	15792 <ll_rl_remove+0x13e>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   156e4:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   156e6:	4555      	cmp	r5, sl
   156e8:	d024      	beq.n	15734 <ll_rl_remove+0xe0>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   156ea:	4831      	ldr	r0, [pc, #196]	; (157b0 <ll_rl_remove+0x15c>)
   156ec:	9301      	str	r3, [sp, #4]
   156ee:	eb00 110a 	add.w	r1, r0, sl, lsl #4
   156f2:	2210      	movs	r2, #16
   156f4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   156f8:	f008 f886 	bl	1d808 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   156fc:	482d      	ldr	r0, [pc, #180]	; (157b4 <ll_rl_remove+0x160>)
   156fe:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   15700:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   15704:	fa5f fc8b 	uxtb.w	ip, fp
   15708:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   1570c:	f011 0f01 	tst.w	r1, #1
   15710:	f10b 0b01 	add.w	fp, fp, #1
   15714:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   15718:	d004      	beq.n	15724 <ll_rl_remove+0xd0>
   1571a:	0749      	lsls	r1, r1, #29
   1571c:	d502      	bpl.n	15724 <ll_rl_remove+0xd0>
   1571e:	7dc1      	ldrb	r1, [r0, #23]
   15720:	4551      	cmp	r1, sl
   15722:	d038      	beq.n	15796 <ll_rl_remove+0x142>
				for (k = 0U;
   15724:	f1bb 0f08 	cmp.w	fp, #8
   15728:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1572c:	d1e8      	bne.n	15700 <ll_rl_remove+0xac>
			peer_irk_count--;
   1572e:	f898 2000 	ldrb.w	r2, [r8]
   15732:	3a01      	subs	r2, #1
   15734:	f888 2000 	strb.w	r2, [r8]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15738:	9a00      	ldr	r2, [sp, #0]
   1573a:	4d1f      	ldr	r5, [pc, #124]	; (157b8 <ll_rl_remove+0x164>)
   1573c:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < WL_SIZE; i++) {
   15740:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15744:	f00a 0a01 	and.w	sl, sl, #1
   15748:	469b      	mov	fp, r3
   1574a:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   1574e:	07d1      	lsls	r1, r2, #31
   15750:	f3c2 0040 	ubfx	r0, r2, #1, #1
   15754:	d501      	bpl.n	1575a <ll_rl_remove+0x106>
   15756:	4550      	cmp	r0, sl
   15758:	d00f      	beq.n	1577a <ll_rl_remove+0x126>
	for (i = 0; i < WL_SIZE; i++) {
   1575a:	3601      	adds	r6, #1
   1575c:	2e08      	cmp	r6, #8
   1575e:	f105 0508 	add.w	r5, r5, #8
   15762:	d1f2      	bne.n	1574a <ll_rl_remove+0xf6>
		rl[i].taken = 0U;
   15764:	444c      	add	r4, r9
		return 0;
   15766:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   15768:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1576c:	f36f 0300 	bfc	r3, #0, #1
   15770:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   15774:	b003      	add	sp, #12
   15776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1577a:	2206      	movs	r2, #6
   1577c:	4628      	mov	r0, r5
   1577e:	4659      	mov	r1, fp
   15780:	f008 f831 	bl	1d7e6 <memcmp>
   15784:	2800      	cmp	r0, #0
   15786:	d1e8      	bne.n	1575a <ll_rl_remove+0x106>
			wl[j].rl_idx = FILTER_IDX_NONE;
   15788:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   1578c:	23ff      	movs	r3, #255	; 0xff
   1578e:	7073      	strb	r3, [r6, #1]
   15790:	e7e8      	b.n	15764 <ll_rl_remove+0x110>
   15792:	4632      	mov	r2, r6
   15794:	e7ce      	b.n	15734 <ll_rl_remove+0xe0>
						rl[k].pirk_idx = pi;
   15796:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   15798:	4a08      	ldr	r2, [pc, #32]	; (157bc <ll_rl_remove+0x168>)
   1579a:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   1579e:	f898 2000 	ldrb.w	r2, [r8]
   157a2:	3a01      	subs	r2, #1
						break;
   157a4:	e7c6      	b.n	15734 <ll_rl_remove+0xe0>
   157a6:	bf00      	nop
   157a8:	200020c5 	.word	0x200020c5
   157ac:	20002904 	.word	0x20002904
   157b0:	20002044 	.word	0x20002044
   157b4:	200020c4 	.word	0x200020c4
   157b8:	2000223e 	.word	0x2000223e
   157bc:	2000203c 	.word	0x2000203c

000157c0 <ll_rl_crpa_set>:
{
   157c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   157c4:	795c      	ldrb	r4, [r3, #5]
   157c6:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   157ca:	2c40      	cmp	r4, #64	; 0x40
   157cc:	d001      	beq.n	157d2 <ll_rl_crpa_set+0x12>
}
   157ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   157d2:	461e      	mov	r6, r3
   157d4:	460f      	mov	r7, r1
   157d6:	b301      	cbz	r1, 1581a <ll_rl_crpa_set+0x5a>
   157d8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15844 <ll_rl_crpa_set+0x84>
   157dc:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   157de:	f000 0a01 	and.w	sl, r0, #1
   157e2:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   157e6:	e003      	b.n	157f0 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   157e8:	2c08      	cmp	r4, #8
   157ea:	f109 0928 	add.w	r9, r9, #40	; 0x28
   157ee:	d0ee      	beq.n	157ce <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   157f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   157f4:	4625      	mov	r5, r4
   157f6:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   157fa:	f3c2 1380 	ubfx	r3, r2, #6, #1
   157fe:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15800:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15804:	d5f0      	bpl.n	157e8 <ll_rl_crpa_set+0x28>
   15806:	4553      	cmp	r3, sl
   15808:	d1ee      	bne.n	157e8 <ll_rl_crpa_set+0x28>
   1580a:	4648      	mov	r0, r9
   1580c:	2206      	movs	r2, #6
   1580e:	4639      	mov	r1, r7
   15810:	f007 ffe9 	bl	1d7e6 <memcmp>
   15814:	2800      	cmp	r0, #0
   15816:	d1e7      	bne.n	157e8 <ll_rl_crpa_set+0x28>
   15818:	e004      	b.n	15824 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1581a:	2a07      	cmp	r2, #7
   1581c:	d8d7      	bhi.n	157ce <ll_rl_crpa_set+0xe>
   1581e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 15848 <ll_rl_crpa_set+0x88>
   15822:	4615      	mov	r5, r2
   15824:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   15828:	00e8      	lsls	r0, r5, #3
   1582a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1582e:	07db      	lsls	r3, r3, #31
   15830:	d5cd      	bpl.n	157ce <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15832:	3018      	adds	r0, #24
   15834:	4631      	mov	r1, r6
   15836:	4440      	add	r0, r8
   15838:	2206      	movs	r2, #6
}
   1583a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1583e:	f007 bfe3 	b.w	1d808 <memcpy>
   15842:	bf00      	nop
   15844:	200020c5 	.word	0x200020c5
   15848:	200020c4 	.word	0x200020c4

0001584c <ll_rl_crpa_get>:
{
   1584c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15850:	4682      	mov	sl, r0
   15852:	4e1a      	ldr	r6, [pc, #104]	; (158bc <ll_rl_crpa_get+0x70>)
   15854:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   15858:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1585a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1585c:	f008 0801 	and.w	r8, r8, #1
   15860:	1e77      	subs	r7, r6, #1
   15862:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15866:	00d5      	lsls	r5, r2, #3
   15868:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1586c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15870:	07db      	lsls	r3, r3, #31
   15872:	f104 0401 	add.w	r4, r4, #1
   15876:	d501      	bpl.n	1587c <ll_rl_crpa_get+0x30>
   15878:	4542      	cmp	r2, r8
   1587a:	d006      	beq.n	1588a <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1587c:	2c08      	cmp	r4, #8
   1587e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15882:	d1ee      	bne.n	15862 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15884:	2002      	movs	r0, #2
}
   15886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1588a:	4630      	mov	r0, r6
   1588c:	2206      	movs	r2, #6
   1588e:	4651      	mov	r1, sl
   15890:	f007 ffa9 	bl	1d7e6 <memcmp>
   15894:	4683      	mov	fp, r0
   15896:	2800      	cmp	r0, #0
   15898:	d1f0      	bne.n	1587c <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1589a:	f105 0218 	add.w	r2, r5, #24
   1589e:	4417      	add	r7, r2
   158a0:	2106      	movs	r1, #6
   158a2:	4638      	mov	r0, r7
   158a4:	f7f4 fd66 	bl	a374 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   158a8:	2800      	cmp	r0, #0
   158aa:	d0eb      	beq.n	15884 <ll_rl_crpa_get+0x38>
   158ac:	2206      	movs	r2, #6
   158ae:	4639      	mov	r1, r7
   158b0:	4648      	mov	r0, r9
   158b2:	f007 ffa9 	bl	1d808 <memcpy>
		return 0;
   158b6:	4658      	mov	r0, fp
}
   158b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158bc:	200020c5 	.word	0x200020c5

000158c0 <ll_rl_lrpa_get>:
{
   158c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   158c4:	4681      	mov	r9, r0
   158c6:	4e16      	ldr	r6, [pc, #88]	; (15920 <ll_rl_lrpa_get+0x60>)
   158c8:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   158cc:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   158ce:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   158d0:	f008 0801 	and.w	r8, r8, #1
   158d4:	1e77      	subs	r7, r6, #1
   158d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   158da:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   158de:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   158e2:	f3c3 1280 	ubfx	r2, r3, #6, #1
   158e6:	07db      	lsls	r3, r3, #31
   158e8:	f104 0401 	add.w	r4, r4, #1
   158ec:	d501      	bpl.n	158f2 <ll_rl_lrpa_get+0x32>
   158ee:	4542      	cmp	r2, r8
   158f0:	d006      	beq.n	15900 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   158f2:	2c08      	cmp	r4, #8
   158f4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   158f8:	d1ed      	bne.n	158d6 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158fa:	2002      	movs	r0, #2
}
   158fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15900:	4630      	mov	r0, r6
   15902:	2206      	movs	r2, #6
   15904:	4649      	mov	r1, r9
   15906:	f007 ff6e 	bl	1d7e6 <memcmp>
   1590a:	4683      	mov	fp, r0
   1590c:	2800      	cmp	r0, #0
   1590e:	d1f0      	bne.n	158f2 <ll_rl_lrpa_get+0x32>
   15910:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15912:	2206      	movs	r2, #6
   15914:	4650      	mov	r0, sl
   15916:	f007 ff77 	bl	1d808 <memcpy>
		return 0;
   1591a:	4658      	mov	r0, fp
}
   1591c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15920:	200020c5 	.word	0x200020c5

00015924 <ll_rl_enable>:
{
   15924:	b510      	push	{r4, lr}
   15926:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15928:	2000      	movs	r0, #0
   1592a:	f7f9 fcf5 	bl	f318 <ull_adv_is_enabled>
		? 0 : 1;
   1592e:	b108      	cbz	r0, 15934 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15930:	200c      	movs	r0, #12
}
   15932:	bd10      	pop	{r4, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   15934:	f7f9 fe90 	bl	f658 <ull_scan_is_enabled>
		? 0 : 1;
   15938:	2800      	cmp	r0, #0
   1593a:	d1f9      	bne.n	15930 <ll_rl_enable+0xc>
	switch (enable) {
   1593c:	b134      	cbz	r4, 1594c <ll_rl_enable+0x28>
   1593e:	2c01      	cmp	r4, #1
   15940:	d102      	bne.n	15948 <ll_rl_enable+0x24>
		rl_enable = 1U;
   15942:	4b04      	ldr	r3, [pc, #16]	; (15954 <ll_rl_enable+0x30>)
   15944:	701c      	strb	r4, [r3, #0]
}
   15946:	bd10      	pop	{r4, pc}
	switch (enable) {
   15948:	2012      	movs	r0, #18
}
   1594a:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1594c:	4b01      	ldr	r3, [pc, #4]	; (15954 <ll_rl_enable+0x30>)
   1594e:	701c      	strb	r4, [r3, #0]
	return 0;
   15950:	4620      	mov	r0, r4
}
   15952:	bd10      	pop	{r4, pc}
   15954:	20002905 	.word	0x20002905

00015958 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   15958:	4b03      	ldr	r3, [pc, #12]	; (15968 <ll_rl_timeout_set+0x10>)
   1595a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1595e:	fb02 f000 	mul.w	r0, r2, r0
   15962:	6018      	str	r0, [r3, #0]
}
   15964:	4770      	bx	lr
   15966:	bf00      	nop
   15968:	20002238 	.word	0x20002238

0001596c <ll_priv_mode_set>:
{
   1596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15970:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15972:	2000      	movs	r0, #0
{
   15974:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15976:	f7f9 fccf 	bl	f318 <ull_adv_is_enabled>
		? 0 : 1;
   1597a:	b110      	cbz	r0, 15982 <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1597c:	200c      	movs	r0, #12
}
   1597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   15982:	f7f9 fe69 	bl	f658 <ull_scan_is_enabled>
		? 0 : 1;
   15986:	4604      	mov	r4, r0
   15988:	2800      	cmp	r0, #0
   1598a:	d1f7      	bne.n	1597c <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1598c:	4e1a      	ldr	r6, [pc, #104]	; (159f8 <ll_priv_mode_set+0x8c>)
   1598e:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15992:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15994:	f009 0901 	and.w	r9, r9, #1
   15998:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1599c:	00d5      	lsls	r5, r2, #3
   1599e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   159a2:	f3c3 1280 	ubfx	r2, r3, #6, #1
   159a6:	07db      	lsls	r3, r3, #31
   159a8:	f104 0401 	add.w	r4, r4, #1
   159ac:	d501      	bpl.n	159b2 <ll_priv_mode_set+0x46>
   159ae:	454a      	cmp	r2, r9
   159b0:	d006      	beq.n	159c0 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   159b2:	2c08      	cmp	r4, #8
   159b4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   159b8:	d1ee      	bne.n	15998 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   159ba:	2002      	movs	r0, #2
}
   159bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   159c0:	4630      	mov	r0, r6
   159c2:	2206      	movs	r2, #6
   159c4:	4651      	mov	r1, sl
   159c6:	f007 ff0e 	bl	1d7e6 <memcmp>
   159ca:	2800      	cmp	r0, #0
   159cc:	d1f1      	bne.n	159b2 <ll_priv_mode_set+0x46>
		switch (mode) {
   159ce:	f1b8 0f00 	cmp.w	r8, #0
   159d2:	d00b      	beq.n	159ec <ll_priv_mode_set+0x80>
   159d4:	f1b8 0f01 	cmp.w	r8, #1
   159d8:	d105      	bne.n	159e6 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   159da:	5d7b      	ldrb	r3, [r7, r5]
   159dc:	f043 0310 	orr.w	r3, r3, #16
   159e0:	557b      	strb	r3, [r7, r5]
}
   159e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   159e6:	2012      	movs	r0, #18
}
   159e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   159ec:	5d7b      	ldrb	r3, [r7, r5]
   159ee:	f368 1304 	bfi	r3, r8, #4, #1
   159f2:	557b      	strb	r3, [r7, r5]
	return 0;
   159f4:	4640      	mov	r0, r8
			break;
   159f6:	e7c2      	b.n	1597e <ll_priv_mode_set+0x12>
   159f8:	200020c5 	.word	0x200020c5

000159fc <ull_filter_adv_scan_state_cb>:
	if (bm) {
   159fc:	b1a8      	cbz	r0, 15a2a <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   159fe:	4a0c      	ldr	r2, [pc, #48]	; (15a30 <ull_filter_adv_scan_state_cb+0x34>)
   15a00:	6812      	ldr	r2, [r2, #0]
{
   15a02:	b510      	push	{r4, lr}
   15a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15a08:	f240 30e7 	movw	r0, #999	; 0x3e7
   15a0c:	2100      	movs	r1, #0
   15a0e:	fbe2 0103 	umlal	r0, r1, r2, r3
   15a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a16:	2300      	movs	r3, #0
   15a18:	f7ea fb72 	bl	100 <__aeabi_uldivmod>
}
   15a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15a20:	4602      	mov	r2, r0
   15a22:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15a24:	4803      	ldr	r0, [pc, #12]	; (15a34 <ull_filter_adv_scan_state_cb+0x38>)
   15a26:	f005 bdab 	b.w	1b580 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   15a2a:	4802      	ldr	r0, [pc, #8]	; (15a34 <ull_filter_adv_scan_state_cb+0x38>)
   15a2c:	f009 be52 	b.w	1f6d4 <k_work_cancel_delayable>
   15a30:	20002238 	.word	0x20002238
   15a34:	20000fc8 	.word	0x20000fc8

00015a38 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   15a38:	4a0d      	ldr	r2, [pc, #52]	; (15a70 <ull_filter_adv_update+0x38>)
{
   15a3a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   15a3c:	2300      	movs	r3, #0
   15a3e:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   15a40:	b970      	cbnz	r0, 15a60 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   15a42:	4b0c      	ldr	r3, [pc, #48]	; (15a74 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   15a44:	4a0c      	ldr	r2, [pc, #48]	; (15a78 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   15a46:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   15a48:	2000      	movs	r0, #0
   15a4a:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   15a4c:	b903      	cbnz	r3, 15a50 <ull_filter_adv_update+0x18>
}
   15a4e:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   15a50:	f7f9 fe02 	bl	f658 <ull_scan_is_enabled>
	if (rl_enable &&
   15a54:	2800      	cmp	r0, #0
   15a56:	d1fa      	bne.n	15a4e <ull_filter_adv_update+0x16>
}
   15a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   15a5c:	f7ff bbce 	b.w	151fc <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   15a60:	4618      	mov	r0, r3
   15a62:	f7f9 fe11 	bl	f688 <ull_scan_filter_pol_get>
	if (adv_fp &&
   15a66:	07c3      	lsls	r3, r0, #31
   15a68:	d4eb      	bmi.n	15a42 <ull_filter_adv_update+0xa>
		wl_update();
   15a6a:	f7ff fbff 	bl	1526c <wl_update>
   15a6e:	e7e8      	b.n	15a42 <ull_filter_adv_update+0xa>
   15a70:	2000227c 	.word	0x2000227c
   15a74:	20002905 	.word	0x20002905
   15a78:	20002204 	.word	0x20002204

00015a7c <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   15a7c:	4a0e      	ldr	r2, [pc, #56]	; (15ab8 <ull_filter_scan_update+0x3c>)
{
   15a7e:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   15a80:	2300      	movs	r3, #0
   15a82:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   15a84:	07c2      	lsls	r2, r0, #31
   15a86:	d40e      	bmi.n	15aa6 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   15a88:	4b0c      	ldr	r3, [pc, #48]	; (15abc <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   15a8a:	4a0d      	ldr	r2, [pc, #52]	; (15ac0 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   15a8c:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   15a8e:	2000      	movs	r0, #0
   15a90:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   15a92:	b903      	cbnz	r3, 15a96 <ull_filter_scan_update+0x1a>
}
   15a94:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   15a96:	f7f9 fc3f 	bl	f318 <ull_adv_is_enabled>
	if (rl_enable &&
   15a9a:	2800      	cmp	r0, #0
   15a9c:	d1fa      	bne.n	15a94 <ull_filter_scan_update+0x18>
}
   15a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   15aa2:	f7ff bbab 	b.w	151fc <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   15aa6:	4618      	mov	r0, r3
   15aa8:	f7f9 fc42 	bl	f330 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   15aac:	2800      	cmp	r0, #0
   15aae:	d1eb      	bne.n	15a88 <ull_filter_scan_update+0xc>
		wl_update();
   15ab0:	f7ff fbdc 	bl	1526c <wl_update>
   15ab4:	e7e8      	b.n	15a88 <ull_filter_scan_update+0xc>
   15ab6:	bf00      	nop
   15ab8:	2000227c 	.word	0x2000227c
   15abc:	20002905 	.word	0x20002905
   15ac0:	20002204 	.word	0x20002204

00015ac4 <ull_filter_rpa_update>:
{
   15ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ac8:	4683      	mov	fp, r0
   15aca:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   15acc:	f009 ff9b 	bl	1fa06 <z_impl_k_uptime_ticks>
   15ad0:	014b      	lsls	r3, r1, #5
   15ad2:	0142      	lsls	r2, r0, #5
   15ad4:	1a12      	subs	r2, r2, r0
   15ad6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   15ada:	eb63 0301 	sbc.w	r3, r3, r1
   15ade:	009b      	lsls	r3, r3, #2
   15ae0:	ea4f 0982 	mov.w	r9, r2, lsl #2
   15ae4:	eb19 0900 	adds.w	r9, r9, r0
   15ae8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   15aec:	eb41 0103 	adc.w	r1, r1, r3
   15af0:	00cb      	lsls	r3, r1, #3
   15af2:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   15af6:	0bd9      	lsrs	r1, r3, #15
   15af8:	f3c9 3910 	ubfx	r9, r9, #12, #17
   15afc:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   15b00:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   15b02:	f1bb 0f00 	cmp.w	fp, #0
   15b06:	d117      	bne.n	15b38 <ull_filter_rpa_update+0x74>
   15b08:	4a5d      	ldr	r2, [pc, #372]	; (15c80 <ull_filter_rpa_update+0x1bc>)
   15b0a:	e9d2 3200 	ldrd	r3, r2, [r2]
   15b0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15b12:	bf08      	it	eq
   15b14:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15b18:	d00e      	beq.n	15b38 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   15b1a:	ebb9 0303 	subs.w	r3, r9, r3
   15b1e:	eb61 0202 	sbc.w	r2, r1, r2
   15b22:	4958      	ldr	r1, [pc, #352]	; (15c84 <ull_filter_rpa_update+0x1c0>)
   15b24:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   15b26:	428b      	cmp	r3, r1
   15b28:	f172 0300 	sbcs.w	r3, r2, #0
   15b2c:	bfac      	ite	ge
   15b2e:	f04f 0a01 	movge.w	sl, #1
   15b32:	f04f 0a00 	movlt.w	sl, #0
   15b36:	e001      	b.n	15b3c <ull_filter_rpa_update+0x78>
   15b38:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15b3c:	4e52      	ldr	r6, [pc, #328]	; (15c88 <ull_filter_rpa_update+0x1c4>)
   15b3e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 15c8c <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   15b42:	2400      	movs	r4, #0
   15b44:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   15b48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15b4c:	00a5      	lsls	r5, r4, #2
   15b4e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15b52:	07da      	lsls	r2, r3, #31
   15b54:	d515      	bpl.n	15b82 <ull_filter_rpa_update+0xbe>
   15b56:	f1ba 0f00 	cmp.w	sl, #0
   15b5a:	d101      	bne.n	15b60 <ull_filter_rpa_update+0x9c>
   15b5c:	0798      	lsls	r0, r3, #30
   15b5e:	d410      	bmi.n	15b82 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   15b60:	192b      	adds	r3, r5, r4
   15b62:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15b66:	0759      	lsls	r1, r3, #29
   15b68:	d432      	bmi.n	15bd0 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   15b6a:	192b      	adds	r3, r5, r4
   15b6c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15b70:	071a      	lsls	r2, r3, #28
   15b72:	d41b      	bmi.n	15bac <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   15b74:	4425      	add	r5, r4
   15b76:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   15b7a:	f043 0302 	orr.w	r3, r3, #2
   15b7e:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15b82:	3401      	adds	r4, #1
   15b84:	2c08      	cmp	r4, #8
   15b86:	f108 0806 	add.w	r8, r8, #6
   15b8a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15b8e:	d1db      	bne.n	15b48 <ull_filter_rpa_update+0x84>
	if (all) {
   15b90:	f1ba 0f00 	cmp.w	sl, #0
   15b94:	d004      	beq.n	15ba0 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   15b96:	4b3a      	ldr	r3, [pc, #232]	; (15c80 <ull_filter_rpa_update+0x1bc>)
   15b98:	9a01      	ldr	r2, [sp, #4]
   15b9a:	f8c3 9000 	str.w	r9, [r3]
   15b9e:	605a      	str	r2, [r3, #4]
	if (timeout) {
   15ba0:	f1bb 0f00 	cmp.w	fp, #0
   15ba4:	d138      	bne.n	15c18 <ull_filter_rpa_update+0x154>
}
   15ba6:	b007      	add	sp, #28
   15ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   15bac:	a902      	add	r1, sp, #8
   15bae:	f1a6 0017 	sub.w	r0, r6, #23
   15bb2:	f007 feca 	bl	1d94a <bt_rpa_create>
				LL_ASSERT(!err);
   15bb6:	2800      	cmp	r0, #0
   15bb8:	d154      	bne.n	15c64 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   15bba:	ab02      	add	r3, sp, #8
   15bbc:	f8c6 3006 	str.w	r3, [r6, #6]
   15bc0:	4619      	mov	r1, r3
   15bc2:	2206      	movs	r2, #6
   15bc4:	4640      	mov	r0, r8
   15bc6:	f007 fe1f 	bl	1d808 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   15bca:	f8c6 8006 	str.w	r8, [r6, #6]
   15bce:	e7d1      	b.n	15b74 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   15bd0:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   15bd4:	4a2e      	ldr	r2, [pc, #184]	; (15c90 <ull_filter_rpa_update+0x1cc>)
   15bd6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15bda:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   15bdc:	f10d 0307 	add.w	r3, sp, #7
   15be0:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   15be4:	f812 1901 	ldrb.w	r1, [r2], #-1
   15be8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   15bec:	4283      	cmp	r3, r0
   15bee:	d1f9      	bne.n	15be4 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   15bf0:	4631      	mov	r1, r6
   15bf2:	a802      	add	r0, sp, #8
   15bf4:	f007 fea9 	bl	1d94a <bt_rpa_create>
				LL_ASSERT(!err);
   15bf8:	2800      	cmp	r0, #0
   15bfa:	d0b6      	beq.n	15b6a <ull_filter_rpa_update+0xa6>
   15bfc:	4a25      	ldr	r2, [pc, #148]	; (15c94 <ull_filter_rpa_update+0x1d0>)
   15bfe:	4926      	ldr	r1, [pc, #152]	; (15c98 <ull_filter_rpa_update+0x1d4>)
   15c00:	4826      	ldr	r0, [pc, #152]	; (15c9c <ull_filter_rpa_update+0x1d8>)
   15c02:	f240 2323 	movw	r3, #547	; 0x223
   15c06:	f006 fb49 	bl	1c29c <printk>
   15c0a:	4040      	eors	r0, r0
   15c0c:	f380 8811 	msr	BASEPRI, r0
   15c10:	f04f 0003 	mov.w	r0, #3
   15c14:	df02      	svc	2
   15c16:	e7a8      	b.n	15b6a <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   15c18:	2000      	movs	r0, #0
   15c1a:	f7f9 fb6f 	bl	f2fc <ull_adv_is_enabled_get>
		if (adv) {
   15c1e:	4604      	mov	r4, r0
   15c20:	2800      	cmp	r0, #0
   15c22:	d0c0      	beq.n	15ba6 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   15c24:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   15c28:	075b      	lsls	r3, r3, #29
   15c2a:	d5bc      	bpl.n	15ba6 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   15c2c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   15c30:	2b07      	cmp	r3, #7
   15c32:	d8b8      	bhi.n	15ba6 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15c34:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   15c38:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15c3c:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15c3e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15c40:	3028      	adds	r0, #40	; 0x28
   15c42:	f001 f9b7 	bl	16fb4 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   15c46:	7872      	ldrb	r2, [r6, #1]
   15c48:	4605      	mov	r5, r0
   15c4a:	3202      	adds	r2, #2
   15c4c:	4631      	mov	r1, r6
   15c4e:	f007 fddb 	bl	1d808 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   15c52:	4629      	mov	r1, r5
   15c54:	4620      	mov	r0, r4
   15c56:	f7f9 fbaf 	bl	f3b8 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   15c5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15c5e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   15c62:	e7a0      	b.n	15ba6 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   15c64:	4a0b      	ldr	r2, [pc, #44]	; (15c94 <ull_filter_rpa_update+0x1d0>)
   15c66:	490c      	ldr	r1, [pc, #48]	; (15c98 <ull_filter_rpa_update+0x1d4>)
   15c68:	480c      	ldr	r0, [pc, #48]	; (15c9c <ull_filter_rpa_update+0x1d8>)
   15c6a:	f44f 730c 	mov.w	r3, #560	; 0x230
   15c6e:	f006 fb15 	bl	1c29c <printk>
   15c72:	4040      	eors	r0, r0
   15c74:	f380 8811 	msr	BASEPRI, r0
   15c78:	f04f 0003 	mov.w	r0, #3
   15c7c:	df02      	svc	2
   15c7e:	e79c      	b.n	15bba <ull_filter_rpa_update+0xf6>
   15c80:	20000fc0 	.word	0x20000fc0
   15c84:	20002238 	.word	0x20002238
   15c88:	200020e2 	.word	0x200020e2
   15c8c:	2000200c 	.word	0x2000200c
   15c90:	20002044 	.word	0x20002044
   15c94:	00020f94 	.word	0x00020f94
   15c98:	000208f8 	.word	0x000208f8
   15c9c:	0002060c 	.word	0x0002060c

00015ca0 <rpa_timeout>:
{
   15ca0:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   15ca2:	2001      	movs	r0, #1
   15ca4:	f7ff ff0e 	bl	15ac4 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15ca8:	4a0a      	ldr	r2, [pc, #40]	; (15cd4 <rpa_timeout+0x34>)
   15caa:	6812      	ldr	r2, [r2, #0]
   15cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15cb0:	f240 30e7 	movw	r0, #999	; 0x3e7
   15cb4:	2100      	movs	r1, #0
   15cb6:	fbe2 0103 	umlal	r0, r1, r2, r3
   15cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15cbe:	2300      	movs	r3, #0
   15cc0:	f7ea fa1e 	bl	100 <__aeabi_uldivmod>
}
   15cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15cc8:	4602      	mov	r2, r0
   15cca:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15ccc:	4802      	ldr	r0, [pc, #8]	; (15cd8 <rpa_timeout+0x38>)
   15cce:	f005 bc57 	b.w	1b580 <k_work_schedule>
   15cd2:	bf00      	nop
   15cd4:	20002238 	.word	0x20002238
   15cd8:	20000fc8 	.word	0x20000fc8

00015cdc <ull_filter_adva_get>:
{
   15cdc:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   15cde:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   15ce2:	2c07      	cmp	r4, #7
   15ce4:	d810      	bhi.n	15d08 <ull_filter_adva_get+0x2c>
   15ce6:	4d10      	ldr	r5, [pc, #64]	; (15d28 <ull_filter_adva_get+0x4c>)
   15ce8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15cec:	00a6      	lsls	r6, r4, #2
   15cee:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   15cf2:	071a      	lsls	r2, r3, #28
   15cf4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   15cf8:	d505      	bpl.n	15d06 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   15cfa:	079b      	lsls	r3, r3, #30
   15cfc:	d506      	bpl.n	15d0c <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   15cfe:	4434      	add	r4, r6
   15d00:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   15d04:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   15d06:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   15d08:	2000      	movs	r0, #0
}
   15d0a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   15d0c:	4a07      	ldr	r2, [pc, #28]	; (15d2c <ull_filter_adva_get+0x50>)
   15d0e:	4908      	ldr	r1, [pc, #32]	; (15d30 <ull_filter_adva_get+0x54>)
   15d10:	4808      	ldr	r0, [pc, #32]	; (15d34 <ull_filter_adva_get+0x58>)
   15d12:	f240 2356 	movw	r3, #598	; 0x256
   15d16:	f006 fac1 	bl	1c29c <printk>
   15d1a:	4040      	eors	r0, r0
   15d1c:	f380 8811 	msr	BASEPRI, r0
   15d20:	f04f 0003 	mov.w	r0, #3
   15d24:	df02      	svc	2
   15d26:	e7ea      	b.n	15cfe <ull_filter_adva_get+0x22>
   15d28:	200020c4 	.word	0x200020c4
   15d2c:	00020f94 	.word	0x00020f94
   15d30:	00020ff8 	.word	0x00020ff8
   15d34:	0002060c 	.word	0x0002060c

00015d38 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   15d38:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   15d3c:	2b07      	cmp	r3, #7
   15d3e:	d80d      	bhi.n	15d5c <ull_filter_tgta_get+0x24>
   15d40:	4a07      	ldr	r2, [pc, #28]	; (15d60 <ull_filter_tgta_get+0x28>)
   15d42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   15d46:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   15d4a:	f3c1 0080 	ubfx	r0, r1, #2, #1
   15d4e:	0749      	lsls	r1, r1, #29
   15d50:	d505      	bpl.n	15d5e <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   15d52:	2028      	movs	r0, #40	; 0x28
   15d54:	fb00 2003 	mla	r0, r0, r3, r2
   15d58:	301e      	adds	r0, #30
   15d5a:	4770      	bx	lr
	return NULL;
   15d5c:	2000      	movs	r0, #0
}
   15d5e:	4770      	bx	lr
   15d60:	200020c4 	.word	0x200020c4

00015d64 <ull_filter_rl_find>:
{
   15d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d68:	468b      	mov	fp, r1
	if (free) {
   15d6a:	4617      	mov	r7, r2
   15d6c:	b10a      	cbz	r2, 15d72 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   15d6e:	23ff      	movs	r3, #255	; 0xff
   15d70:	7013      	strb	r3, [r2, #0]
   15d72:	4d1b      	ldr	r5, [pc, #108]	; (15de0 <ull_filter_rl_find+0x7c>)
{
   15d74:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15d76:	f000 0a01 	and.w	sl, r0, #1
   15d7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   15d7e:	e006      	b.n	15d8e <ull_filter_rl_find+0x2a>
   15d80:	4552      	cmp	r2, sl
   15d82:	d01f      	beq.n	15dc4 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15d84:	3401      	adds	r4, #1
   15d86:	2c08      	cmp	r4, #8
   15d88:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15d8c:	d015      	beq.n	15dba <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15d8e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   15d92:	fa5f f884 	uxtb.w	r8, r4
   15d96:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   15d9a:	07d9      	lsls	r1, r3, #31
   15d9c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15da0:	d4ee      	bmi.n	15d80 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15da2:	2f00      	cmp	r7, #0
   15da4:	d0ee      	beq.n	15d84 <ull_filter_rl_find+0x20>
   15da6:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15da8:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15daa:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   15dac:	bf08      	it	eq
   15dae:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15db2:	2c08      	cmp	r4, #8
   15db4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15db8:	d1e9      	bne.n	15d8e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   15dba:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   15dbe:	4640      	mov	r0, r8
   15dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15dc4:	4628      	mov	r0, r5
   15dc6:	2206      	movs	r2, #6
   15dc8:	4659      	mov	r1, fp
   15dca:	f007 fd0c 	bl	1d7e6 <memcmp>
   15dce:	2800      	cmp	r0, #0
   15dd0:	d0f5      	beq.n	15dbe <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15dd2:	2f00      	cmp	r7, #0
   15dd4:	d0d6      	beq.n	15d84 <ull_filter_rl_find+0x20>
   15dd6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   15dda:	07db      	lsls	r3, r3, #31
   15ddc:	d4d2      	bmi.n	15d84 <ull_filter_rl_find+0x20>
   15dde:	e7e2      	b.n	15da6 <ull_filter_rl_find+0x42>
   15de0:	200020c5 	.word	0x200020c5

00015de4 <ll_rl_add>:
{
   15de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15de8:	4680      	mov	r8, r0
   15dea:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15dec:	2000      	movs	r0, #0
{
   15dee:	460e      	mov	r6, r1
   15df0:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15df2:	f7f9 fa91 	bl	f318 <ull_adv_is_enabled>
		? 0 : 1;
   15df6:	b118      	cbz	r0, 15e00 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15df8:	200c      	movs	r0, #12
}
   15dfa:	b005      	add	sp, #20
   15dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   15e00:	4604      	mov	r4, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   15e02:	f7f9 fc29 	bl	f658 <ull_scan_is_enabled>
		? 0 : 1;
   15e06:	2800      	cmp	r0, #0
   15e08:	d1f6      	bne.n	15df8 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   15e0a:	46c2      	mov	sl, r8
   15e0c:	f10d 020f 	add.w	r2, sp, #15
   15e10:	f81a 0b01 	ldrb.w	r0, [sl], #1
   15e14:	4651      	mov	r1, sl
   15e16:	f7ff ffa5 	bl	15d64 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15e1a:	2807      	cmp	r0, #7
   15e1c:	f240 80b1 	bls.w	15f82 <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   15e20:	f89d 700f 	ldrb.w	r7, [sp, #15]
   15e24:	2f07      	cmp	r7, #7
   15e26:	f200 80a8 	bhi.w	15f7a <ll_rl_add+0x196>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15e2a:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   15e2e:	4d57      	ldr	r5, [pc, #348]	; (15f8c <ll_rl_add+0x1a8>)
   15e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   15e34:	1c58      	adds	r0, r3, #1
   15e36:	2206      	movs	r2, #6
   15e38:	4651      	mov	r1, sl
   15e3a:	4428      	add	r0, r5
   15e3c:	9300      	str	r3, [sp, #0]
   15e3e:	f007 fce3 	bl	1d808 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   15e42:	f898 3000 	ldrb.w	r3, [r8]
   15e46:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   15e4a:	465a      	mov	r2, fp
   15e4c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   15e50:	f363 1186 	bfi	r1, r3, #6, #1
   15e54:	f805 100b 	strb.w	r1, [r5, fp]
   15e58:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15e5c:	2110      	movs	r1, #16
   15e5e:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   15e60:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15e62:	f7f4 fa87 	bl	a374 <mem_nz>
   15e66:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15e6a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15e6c:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15e70:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15e72:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15e76:	f7f4 fa7d 	bl	a374 <mem_nz>
   15e7a:	f815 200b 	ldrb.w	r2, [r5, fp]
   15e7e:	f000 0001 	and.w	r0, r0, #1
   15e82:	f360 02c3 	bfi	r2, r0, #3, #1
   15e86:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   15e8a:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   15e8c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   15e90:	d44b      	bmi.n	15f2a <ll_rl_add+0x146>
	if (rl[i].lirk) {
   15e92:	2800      	cmp	r0, #0
   15e94:	d163      	bne.n	15f5e <ll_rl_add+0x17a>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   15e96:	9800      	ldr	r0, [sp, #0]
   15e98:	4e3d      	ldr	r6, [pc, #244]	; (15f90 <ll_rl_add+0x1ac>)
   15e9a:	3018      	adds	r0, #24
   15e9c:	2206      	movs	r2, #6
   15e9e:	2100      	movs	r1, #0
   15ea0:	4428      	add	r0, r5
   15ea2:	f007 fcdc 	bl	1d85e <memset>
	rl[i].dev = 0U;
   15ea6:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   15eaa:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   15eae:	f021 0112 	bic.w	r1, r1, #18
   15eb2:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15eb6:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   15eba:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15ebe:	f009 0901 	and.w	r9, r9, #1
   15ec2:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   15ec6:	07d3      	lsls	r3, r2, #31
   15ec8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   15ecc:	d501      	bpl.n	15ed2 <ll_rl_add+0xee>
   15ece:	4549      	cmp	r1, r9
   15ed0:	d018      	beq.n	15f04 <ll_rl_add+0x120>
	for (i = 0; i < WL_SIZE; i++) {
   15ed2:	3401      	adds	r4, #1
   15ed4:	2c08      	cmp	r4, #8
   15ed6:	f106 0608 	add.w	r6, r6, #8
   15eda:	d1f2      	bne.n	15ec2 <ll_rl_add+0xde>
		rl[i].wl = 0U;
   15edc:	eb0b 0207 	add.w	r2, fp, r7
   15ee0:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   15ee4:	f36f 1145 	bfc	r1, #5, #1
   15ee8:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   15eec:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   15ef0:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   15ef2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   15ef6:	f042 0201 	orr.w	r2, r2, #1
   15efa:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   15efe:	b005      	add	sp, #20
   15f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15f04:	2206      	movs	r2, #6
   15f06:	4630      	mov	r0, r6
   15f08:	4651      	mov	r1, sl
   15f0a:	f007 fc6c 	bl	1d7e6 <memcmp>
   15f0e:	2800      	cmp	r0, #0
   15f10:	d1df      	bne.n	15ed2 <ll_rl_add+0xee>
		rl[i].wl = 1U;
   15f12:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   15f16:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   15f1a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   15f1e:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   15f20:	f041 0120 	orr.w	r1, r1, #32
   15f24:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   15f28:	e7e0      	b.n	15eec <ll_rl_add+0x108>
		rl[i].pirk_idx = peer_irk_count;
   15f2a:	4b1a      	ldr	r3, [pc, #104]	; (15f94 <ll_rl_add+0x1b0>)
		peer_irk_rl_ids[peer_irk_count] = i;
   15f2c:	4a1a      	ldr	r2, [pc, #104]	; (15f98 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   15f2e:	7819      	ldrb	r1, [r3, #0]
   15f30:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   15f34:	5457      	strb	r7, [r2, r1]
   15f36:	4a19      	ldr	r2, [pc, #100]	; (15f9c <ll_rl_add+0x1b8>)
		rl[i].pirk_idx = peer_irk_count;
   15f38:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   15f3c:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   15f40:	3101      	adds	r1, #1
	psrc += length - 1;
   15f42:	f106 020f 	add.w	r2, r6, #15
   15f46:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   15f48:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   15f4c:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   15f4e:	f812 1901 	ldrb.w	r1, [r2], #-1
   15f52:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   15f56:	4296      	cmp	r6, r2
   15f58:	d1f9      	bne.n	15f4e <ll_rl_add+0x16a>
	if (rl[i].lirk) {
   15f5a:	2800      	cmp	r0, #0
   15f5c:	d09b      	beq.n	15e96 <ll_rl_add+0xb2>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   15f5e:	9b00      	ldr	r3, [sp, #0]
   15f60:	1dd8      	adds	r0, r3, #7
   15f62:	4649      	mov	r1, r9
   15f64:	2210      	movs	r2, #16
   15f66:	4428      	add	r0, r5
   15f68:	f007 fc4e 	bl	1d808 <memcpy>
		rl[i].local_rpa = NULL;
   15f6c:	eb0b 0207 	add.w	r2, fp, r7
   15f70:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   15f74:	2100      	movs	r1, #0
   15f76:	6251      	str	r1, [r2, #36]	; 0x24
   15f78:	e78d      	b.n	15e96 <ll_rl_add+0xb2>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   15f7a:	2007      	movs	r0, #7
}
   15f7c:	b005      	add	sp, #20
   15f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   15f82:	2012      	movs	r0, #18
}
   15f84:	b005      	add	sp, #20
   15f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f8a:	bf00      	nop
   15f8c:	200020c4 	.word	0x200020c4
   15f90:	2000223e 	.word	0x2000223e
   15f94:	20002904 	.word	0x20002904
   15f98:	2000203c 	.word	0x2000203c
   15f9c:	20002044 	.word	0x20002044

00015fa0 <ull_filter_reset>:
	wl_anon = 0U;
   15fa0:	4a31      	ldr	r2, [pc, #196]	; (16068 <ull_filter_reset+0xc8>)
   15fa2:	4932      	ldr	r1, [pc, #200]	; (1606c <ull_filter_reset+0xcc>)
{
   15fa4:	b4d0      	push	{r4, r6, r7}
	wl_anon = 0U;
   15fa6:	2300      	movs	r3, #0
   15fa8:	4c31      	ldr	r4, [pc, #196]	; (16070 <ull_filter_reset+0xd0>)
   15faa:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   15fac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   15fb0:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   15fb2:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   15fb4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   15fb8:	d805      	bhi.n	15fc6 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   15fba:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   15fbe:	f36f 1245 	bfc	r2, #5, #1
   15fc2:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		wl[i].taken = 0U;
   15fc6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   15fca:	f36f 0200 	bfc	r2, #0, #1
   15fce:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15fd2:	3301      	adds	r3, #1
   15fd4:	2b08      	cmp	r3, #8
   15fd6:	d1e9      	bne.n	15fac <ull_filter_reset+0xc>
	rl_enable = 0U;
   15fd8:	4a26      	ldr	r2, [pc, #152]	; (16074 <ull_filter_reset+0xd4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15fda:	4c27      	ldr	r4, [pc, #156]	; (16078 <ull_filter_reset+0xd8>)
	rl_enable = 0U;
   15fdc:	2300      	movs	r3, #0
   15fde:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   15fe0:	780a      	ldrb	r2, [r1, #0]
   15fe2:	f363 0200 	bfi	r2, r3, #0, #1
   15fe6:	700a      	strb	r2, [r1, #0]
   15fe8:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   15fec:	f363 0200 	bfi	r2, r3, #0, #1
   15ff0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   15ff4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   15ff8:	f363 0200 	bfi	r2, r3, #0, #1
   15ffc:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   16000:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   16004:	f363 0200 	bfi	r2, r3, #0, #1
   16008:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1600c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   16010:	f363 0200 	bfi	r2, r3, #0, #1
   16014:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   16018:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1601c:	f363 0200 	bfi	r2, r3, #0, #1
   16020:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   16024:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   16028:	f363 0200 	bfi	r2, r3, #0, #1
   1602c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   16030:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   16034:	f363 0200 	bfi	r2, r3, #0, #1
   16038:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1603c:	4a0f      	ldr	r2, [pc, #60]	; (1607c <ull_filter_reset+0xdc>)
   1603e:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   16040:	4b0f      	ldr	r3, [pc, #60]	; (16080 <ull_filter_reset+0xe0>)
   16042:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   16046:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1604a:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1604e:	4b0d      	ldr	r3, [pc, #52]	; (16084 <ull_filter_reset+0xe4>)
   16050:	6023      	str	r3, [r4, #0]
	if (init) {
   16052:	b120      	cbz	r0, 1605e <ull_filter_reset+0xbe>
}
   16054:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   16056:	490c      	ldr	r1, [pc, #48]	; (16088 <ull_filter_reset+0xe8>)
   16058:	480c      	ldr	r0, [pc, #48]	; (1608c <ull_filter_reset+0xec>)
   1605a:	f009 bb2f 	b.w	1f6bc <k_work_init_delayable>
}
   1605e:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   16060:	480a      	ldr	r0, [pc, #40]	; (1608c <ull_filter_reset+0xec>)
   16062:	f009 bb37 	b.w	1f6d4 <k_work_cancel_delayable>
   16066:	bf00      	nop
   16068:	20002906 	.word	0x20002906
   1606c:	200020c4 	.word	0x200020c4
   16070:	2000223c 	.word	0x2000223c
   16074:	20002905 	.word	0x20002905
   16078:	20002238 	.word	0x20002238
   1607c:	20002904 	.word	0x20002904
   16080:	20000fc0 	.word	0x20000fc0
   16084:	000dbba0 	.word	0x000dbba0
   16088:	00015ca1 	.word	0x00015ca1
   1608c:	20000fc8 	.word	0x20000fc8

00016090 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   16090:	2807      	cmp	r0, #7
   16092:	d807      	bhi.n	160a4 <ull_filter_lll_lrpa_used+0x14>
   16094:	4b04      	ldr	r3, [pc, #16]	; (160a8 <ull_filter_lll_lrpa_used+0x18>)
   16096:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1609a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1609e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   160a2:	4770      	bx	lr
   160a4:	2000      	movs	r0, #0
}
   160a6:	4770      	bx	lr
   160a8:	200020c4 	.word	0x200020c4

000160ac <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   160ac:	2807      	cmp	r0, #7
   160ae:	d812      	bhi.n	160d6 <ull_filter_lll_lrpa_get+0x2a>
   160b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   160b4:	4a09      	ldr	r2, [pc, #36]	; (160dc <ull_filter_lll_lrpa_get+0x30>)
   160b6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   160ba:	f013 0f08 	tst.w	r3, #8
   160be:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   160c2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   160c6:	d007      	beq.n	160d8 <ull_filter_lll_lrpa_get+0x2c>
   160c8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   160cc:	079b      	lsls	r3, r3, #30
   160ce:	d503      	bpl.n	160d8 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   160d0:	440a      	add	r2, r1
   160d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
   160d4:	4770      	bx	lr
		return NULL;
   160d6:	2000      	movs	r0, #0
}
   160d8:	4770      	bx	lr
   160da:	bf00      	nop
   160dc:	200020c4 	.word	0x200020c4

000160e0 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   160e0:	4b02      	ldr	r3, [pc, #8]	; (160ec <ull_filter_lll_irks_get+0xc>)
   160e2:	781b      	ldrb	r3, [r3, #0]
   160e4:	7003      	strb	r3, [r0, #0]
}
   160e6:	4802      	ldr	r0, [pc, #8]	; (160f0 <ull_filter_lll_irks_get+0x10>)
   160e8:	4770      	bx	lr
   160ea:	bf00      	nop
   160ec:	20002904 	.word	0x20002904
   160f0:	20002044 	.word	0x20002044

000160f4 <ull_filter_lll_rl_idx>:
{
   160f4:	b538      	push	{r3, r4, r5, lr}
   160f6:	460c      	mov	r4, r1
	if (whitelist) {
   160f8:	b150      	cbz	r0, 16110 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   160fa:	2907      	cmp	r1, #7
   160fc:	d822      	bhi.n	16144 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   160fe:	4d2a      	ldr	r5, [pc, #168]	; (161a8 <ull_filter_lll_rl_idx+0xb4>)
   16100:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   16104:	07da      	lsls	r2, r3, #31
   16106:	d52f      	bpl.n	16168 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   16108:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1610c:	7860      	ldrb	r0, [r4, #1]
}
   1610e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   16110:	2907      	cmp	r1, #7
   16112:	d83a      	bhi.n	1618a <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   16114:	4b25      	ldr	r3, [pc, #148]	; (161ac <ull_filter_lll_rl_idx+0xb8>)
   16116:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1611a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1611e:	07db      	lsls	r3, r3, #31
   16120:	d501      	bpl.n	16126 <ull_filter_lll_rl_idx+0x32>
   16122:	4620      	mov	r0, r4
}
   16124:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   16126:	4a22      	ldr	r2, [pc, #136]	; (161b0 <ull_filter_lll_rl_idx+0xbc>)
   16128:	4922      	ldr	r1, [pc, #136]	; (161b4 <ull_filter_lll_rl_idx+0xc0>)
   1612a:	4823      	ldr	r0, [pc, #140]	; (161b8 <ull_filter_lll_rl_idx+0xc4>)
   1612c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   16130:	f006 f8b4 	bl	1c29c <printk>
   16134:	4040      	eors	r0, r0
   16136:	f380 8811 	msr	BASEPRI, r0
   1613a:	f04f 0003 	mov.w	r0, #3
   1613e:	df02      	svc	2
   16140:	4620      	mov	r0, r4
}
   16142:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   16144:	4a1a      	ldr	r2, [pc, #104]	; (161b0 <ull_filter_lll_rl_idx+0xbc>)
   16146:	491d      	ldr	r1, [pc, #116]	; (161bc <ull_filter_lll_rl_idx+0xc8>)
   16148:	481b      	ldr	r0, [pc, #108]	; (161b8 <ull_filter_lll_rl_idx+0xc4>)
   1614a:	f240 23b6 	movw	r3, #694	; 0x2b6
   1614e:	f006 f8a5 	bl	1c29c <printk>
   16152:	4040      	eors	r0, r0
   16154:	f380 8811 	msr	BASEPRI, r0
   16158:	f04f 0003 	mov.w	r0, #3
   1615c:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1615e:	4d12      	ldr	r5, [pc, #72]	; (161a8 <ull_filter_lll_rl_idx+0xb4>)
   16160:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   16164:	07da      	lsls	r2, r3, #31
   16166:	d4cf      	bmi.n	16108 <ull_filter_lll_rl_idx+0x14>
   16168:	4a11      	ldr	r2, [pc, #68]	; (161b0 <ull_filter_lll_rl_idx+0xbc>)
   1616a:	4915      	ldr	r1, [pc, #84]	; (161c0 <ull_filter_lll_rl_idx+0xcc>)
   1616c:	4812      	ldr	r0, [pc, #72]	; (161b8 <ull_filter_lll_rl_idx+0xc4>)
   1616e:	f240 23b7 	movw	r3, #695	; 0x2b7
   16172:	f006 f893 	bl	1c29c <printk>
   16176:	4040      	eors	r0, r0
   16178:	f380 8811 	msr	BASEPRI, r0
   1617c:	f04f 0003 	mov.w	r0, #3
   16180:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   16182:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   16186:	7860      	ldrb	r0, [r4, #1]
   16188:	e7c1      	b.n	1610e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1618a:	4a09      	ldr	r2, [pc, #36]	; (161b0 <ull_filter_lll_rl_idx+0xbc>)
   1618c:	490d      	ldr	r1, [pc, #52]	; (161c4 <ull_filter_lll_rl_idx+0xd0>)
   1618e:	480a      	ldr	r0, [pc, #40]	; (161b8 <ull_filter_lll_rl_idx+0xc4>)
   16190:	f240 23ba 	movw	r3, #698	; 0x2ba
   16194:	f006 f882 	bl	1c29c <printk>
   16198:	4040      	eors	r0, r0
   1619a:	f380 8811 	msr	BASEPRI, r0
   1619e:	f04f 0003 	mov.w	r0, #3
   161a2:	df02      	svc	2
   161a4:	e7b6      	b.n	16114 <ull_filter_lll_rl_idx+0x20>
   161a6:	bf00      	nop
   161a8:	2000223c 	.word	0x2000223c
   161ac:	200020c4 	.word	0x200020c4
   161b0:	00020f94 	.word	0x00020f94
   161b4:	0002116c 	.word	0x0002116c
   161b8:	0002060c 	.word	0x0002060c
   161bc:	0002100c 	.word	0x0002100c
   161c0:	000210b0 	.word	0x000210b0
   161c4:	000210c8 	.word	0x000210c8

000161c8 <ull_filter_lll_rl_irk_idx>:
{
   161c8:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   161ca:	4b20      	ldr	r3, [pc, #128]	; (1624c <ull_filter_lll_rl_irk_idx+0x84>)
   161cc:	781b      	ldrb	r3, [r3, #0]
   161ce:	4283      	cmp	r3, r0
{
   161d0:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   161d2:	d90c      	bls.n	161ee <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   161d4:	4b1e      	ldr	r3, [pc, #120]	; (16250 <ull_filter_lll_rl_irk_idx+0x88>)
   161d6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   161d8:	2c07      	cmp	r4, #7
   161da:	d819      	bhi.n	16210 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   161dc:	4b1d      	ldr	r3, [pc, #116]	; (16254 <ull_filter_lll_rl_irk_idx+0x8c>)
   161de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   161e2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   161e6:	07db      	lsls	r3, r3, #31
   161e8:	d520      	bpl.n	1622c <ull_filter_lll_rl_irk_idx+0x64>
}
   161ea:	4620      	mov	r0, r4
   161ec:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   161ee:	4a1a      	ldr	r2, [pc, #104]	; (16258 <ull_filter_lll_rl_irk_idx+0x90>)
   161f0:	491a      	ldr	r1, [pc, #104]	; (1625c <ull_filter_lll_rl_irk_idx+0x94>)
   161f2:	481b      	ldr	r0, [pc, #108]	; (16260 <ull_filter_lll_rl_irk_idx+0x98>)
   161f4:	f240 23c6 	movw	r3, #710	; 0x2c6
   161f8:	f006 f850 	bl	1c29c <printk>
   161fc:	4040      	eors	r0, r0
   161fe:	f380 8811 	msr	BASEPRI, r0
   16202:	f04f 0003 	mov.w	r0, #3
   16206:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   16208:	4b11      	ldr	r3, [pc, #68]	; (16250 <ull_filter_lll_rl_irk_idx+0x88>)
   1620a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1620c:	2c07      	cmp	r4, #7
   1620e:	d9e5      	bls.n	161dc <ull_filter_lll_rl_irk_idx+0x14>
   16210:	4a11      	ldr	r2, [pc, #68]	; (16258 <ull_filter_lll_rl_irk_idx+0x90>)
   16212:	4914      	ldr	r1, [pc, #80]	; (16264 <ull_filter_lll_rl_irk_idx+0x9c>)
   16214:	4812      	ldr	r0, [pc, #72]	; (16260 <ull_filter_lll_rl_irk_idx+0x98>)
   16216:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1621a:	f006 f83f 	bl	1c29c <printk>
   1621e:	4040      	eors	r0, r0
   16220:	f380 8811 	msr	BASEPRI, r0
   16224:	f04f 0003 	mov.w	r0, #3
   16228:	df02      	svc	2
   1622a:	e7d7      	b.n	161dc <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1622c:	4a0a      	ldr	r2, [pc, #40]	; (16258 <ull_filter_lll_rl_irk_idx+0x90>)
   1622e:	490e      	ldr	r1, [pc, #56]	; (16268 <ull_filter_lll_rl_irk_idx+0xa0>)
   16230:	480b      	ldr	r0, [pc, #44]	; (16260 <ull_filter_lll_rl_irk_idx+0x98>)
   16232:	f240 23c9 	movw	r3, #713	; 0x2c9
   16236:	f006 f831 	bl	1c29c <printk>
   1623a:	4040      	eors	r0, r0
   1623c:	f380 8811 	msr	BASEPRI, r0
   16240:	f04f 0003 	mov.w	r0, #3
   16244:	df02      	svc	2
}
   16246:	4620      	mov	r0, r4
   16248:	bd10      	pop	{r4, pc}
   1624a:	bf00      	nop
   1624c:	20002904 	.word	0x20002904
   16250:	2000203c 	.word	0x2000203c
   16254:	200020c4 	.word	0x200020c4
   16258:	00020f94 	.word	0x00020f94
   1625c:	00021178 	.word	0x00021178
   16260:	0002060c 	.word	0x0002060c
   16264:	00021198 	.word	0x00021198
   16268:	0002116c 	.word	0x0002116c

0001626c <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1626c:	2807      	cmp	r0, #7
   1626e:	d823      	bhi.n	162b8 <ull_filter_lll_irk_whitelisted+0x4c>
{
   16270:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   16272:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16276:	4e11      	ldr	r6, [pc, #68]	; (162bc <ull_filter_lll_irk_whitelisted+0x50>)
   16278:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1627c:	07db      	lsls	r3, r3, #31
   1627e:	4604      	mov	r4, r0
   16280:	ea4f 0580 	mov.w	r5, r0, lsl #2
   16284:	d505      	bpl.n	16292 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   16286:	442c      	add	r4, r5
   16288:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1628c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   16290:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   16292:	4a0b      	ldr	r2, [pc, #44]	; (162c0 <ull_filter_lll_irk_whitelisted+0x54>)
   16294:	490b      	ldr	r1, [pc, #44]	; (162c4 <ull_filter_lll_irk_whitelisted+0x58>)
   16296:	480c      	ldr	r0, [pc, #48]	; (162c8 <ull_filter_lll_irk_whitelisted+0x5c>)
   16298:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1629c:	f005 fffe 	bl	1c29c <printk>
   162a0:	4040      	eors	r0, r0
   162a2:	f380 8811 	msr	BASEPRI, r0
   162a6:	f04f 0003 	mov.w	r0, #3
   162aa:	df02      	svc	2
	return rl[rl_idx].wl;
   162ac:	442c      	add	r4, r5
   162ae:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   162b2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   162b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   162b8:	2000      	movs	r0, #0
}
   162ba:	4770      	bx	lr
   162bc:	200020c4 	.word	0x200020c4
   162c0:	00020f94 	.word	0x00020f94
   162c4:	00020fe4 	.word	0x00020fe4
   162c8:	0002060c 	.word	0x0002060c

000162cc <ull_filter_lll_get>:
		return &wl_filter;
   162cc:	4a03      	ldr	r2, [pc, #12]	; (162dc <ull_filter_lll_get+0x10>)
   162ce:	4b04      	ldr	r3, [pc, #16]	; (162e0 <ull_filter_lll_get+0x14>)
}
   162d0:	2800      	cmp	r0, #0
   162d2:	bf0c      	ite	eq
   162d4:	4610      	moveq	r0, r2
   162d6:	4618      	movne	r0, r3
   162d8:	4770      	bx	lr
   162da:	bf00      	nop
   162dc:	20002204 	.word	0x20002204
   162e0:	2000227c 	.word	0x2000227c

000162e4 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   162e4:	4b14      	ldr	r3, [pc, #80]	; (16338 <ull_filter_lll_rl_idx_allowed+0x54>)
   162e6:	781b      	ldrb	r3, [r3, #0]
   162e8:	b19b      	cbz	r3, 16312 <ull_filter_lll_rl_idx_allowed+0x2e>
   162ea:	2907      	cmp	r1, #7
{
   162ec:	b570      	push	{r4, r5, r6, lr}
   162ee:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   162f0:	d80d      	bhi.n	1630e <ull_filter_lll_rl_idx_allowed+0x2a>
   162f2:	b960      	cbnz	r0, 1630e <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   162f4:	4e11      	ldr	r6, [pc, #68]	; (1633c <ull_filter_lll_rl_idx_allowed+0x58>)
   162f6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   162fa:	008d      	lsls	r5, r1, #2
   162fc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   16300:	07da      	lsls	r2, r3, #31
   16302:	d50b      	bpl.n	1631c <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   16304:	442c      	add	r4, r5
   16306:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1630a:	0743      	lsls	r3, r0, #29
   1630c:	d403      	bmi.n	16316 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1630e:	2001      	movs	r0, #1
}
   16310:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   16312:	2001      	movs	r0, #1
}
   16314:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   16316:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1631a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1631c:	4a08      	ldr	r2, [pc, #32]	; (16340 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1631e:	4909      	ldr	r1, [pc, #36]	; (16344 <ull_filter_lll_rl_idx_allowed+0x60>)
   16320:	4809      	ldr	r0, [pc, #36]	; (16348 <ull_filter_lll_rl_idx_allowed+0x64>)
   16322:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   16326:	f005 ffb9 	bl	1c29c <printk>
   1632a:	4040      	eors	r0, r0
   1632c:	f380 8811 	msr	BASEPRI, r0
   16330:	f04f 0003 	mov.w	r0, #3
   16334:	df02      	svc	2
   16336:	e7e5      	b.n	16304 <ull_filter_lll_rl_idx_allowed+0x20>
   16338:	20002905 	.word	0x20002905
   1633c:	200020c4 	.word	0x200020c4
   16340:	00020f94 	.word	0x00020f94
   16344:	00020fe4 	.word	0x00020fe4
   16348:	0002060c 	.word	0x0002060c

0001634c <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1634c:	7813      	ldrb	r3, [r2, #0]
   1634e:	2bff      	cmp	r3, #255	; 0xff
   16350:	d11b      	bne.n	1638a <ull_filter_lll_rl_addr_allowed+0x3e>
{
   16352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16356:	4d19      	ldr	r5, [pc, #100]	; (163bc <ull_filter_lll_rl_addr_allowed+0x70>)
   16358:	4604      	mov	r4, r0
   1635a:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1635c:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1635e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   16362:	b2df      	uxtb	r7, r3
   16364:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   16368:	f01c 0001 	ands.w	r0, ip, #1
   1636c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   16370:	d003      	beq.n	1637a <ull_filter_lll_rl_addr_allowed+0x2e>
   16372:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   16376:	45a4      	cmp	ip, r4
   16378:	d009      	beq.n	1638e <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1637a:	3301      	adds	r3, #1
   1637c:	2b08      	cmp	r3, #8
   1637e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   16382:	d1ec      	bne.n	1635e <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   16384:	2001      	movs	r0, #1
}
   16386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1638a:	2001      	movs	r0, #1
}
   1638c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1638e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16392:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   16394:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   16398:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1639c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   163a0:	45ca      	cmp	sl, r9
   163a2:	d1ea      	bne.n	1637a <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   163a4:	45dc      	cmp	ip, fp
   163a6:	d1f7      	bne.n	16398 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   163a8:	4433      	add	r3, r6
				*rl_idx = i;
   163aa:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   163ac:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   163b0:	075a      	lsls	r2, r3, #29
   163b2:	d5e8      	bpl.n	16386 <ull_filter_lll_rl_addr_allowed+0x3a>
   163b4:	f3c3 1000 	ubfx	r0, r3, #4, #1
   163b8:	e7e5      	b.n	16386 <ull_filter_lll_rl_addr_allowed+0x3a>
   163ba:	bf00      	nop
   163bc:	200020c4 	.word	0x200020c4

000163c0 <ull_filter_lll_rl_addr_resolve>:
{
   163c0:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   163c2:	4b0e      	ldr	r3, [pc, #56]	; (163fc <ull_filter_lll_rl_addr_resolve+0x3c>)
   163c4:	781c      	ldrb	r4, [r3, #0]
   163c6:	b17c      	cbz	r4, 163e8 <ull_filter_lll_rl_addr_resolve+0x28>
   163c8:	2a07      	cmp	r2, #7
   163ca:	d80d      	bhi.n	163e8 <ull_filter_lll_rl_addr_resolve+0x28>
   163cc:	4c0c      	ldr	r4, [pc, #48]	; (16400 <ull_filter_lll_rl_addr_resolve+0x40>)
   163ce:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   163d2:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   163d6:	f01c 0f08 	tst.w	ip, #8
   163da:	d005      	beq.n	163e8 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   163dc:	b120      	cbz	r0, 163e8 <ull_filter_lll_rl_addr_resolve+0x28>
   163de:	794b      	ldrb	r3, [r1, #5]
   163e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   163e4:	2b40      	cmp	r3, #64	; 0x40
   163e6:	d002      	beq.n	163ee <ull_filter_lll_rl_addr_resolve+0x2e>
}
   163e8:	2000      	movs	r0, #0
   163ea:	bc10      	pop	{r4}
   163ec:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   163ee:	2028      	movs	r0, #40	; 0x28
   163f0:	fb00 4002 	mla	r0, r0, r2, r4
   163f4:	3007      	adds	r0, #7
}
   163f6:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   163f8:	f007 ba94 	b.w	1d924 <bt_rpa_irk_matches>
   163fc:	20002905 	.word	0x20002905
   16400:	200020c4 	.word	0x200020c4

00016404 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   16404:	4b02      	ldr	r3, [pc, #8]	; (16410 <ull_filter_lll_rl_enabled+0xc>)
   16406:	7818      	ldrb	r0, [r3, #0]
}
   16408:	3800      	subs	r0, #0
   1640a:	bf18      	it	ne
   1640c:	2001      	movne	r0, #1
   1640e:	4770      	bx	lr
   16410:	20002905 	.word	0x20002905

00016414 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16414:	4668      	mov	r0, sp
   16416:	f020 0107 	bic.w	r1, r0, #7
   1641a:	468d      	mov	sp, r1
   1641c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1641e:	f002 fc65 	bl	18cec <isr_radio>

	ISR_DIRECT_PM();
   16422:	f7ee f977 	bl	4714 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   16426:	f7ee fc73 	bl	4d10 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1642a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1642e:	4685      	mov	sp, r0
   16430:	4770      	bx	lr
   16432:	bf00      	nop

00016434 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   16434:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   16436:	4b09      	ldr	r3, [pc, #36]	; (1645c <rtc0_nrf5_isr+0x28>)
   16438:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1643c:	b93a      	cbnz	r2, 1644e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1643e:	2001      	movs	r0, #1
   16440:	f7f4 f87a 	bl	a538 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   16444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   16448:	2002      	movs	r0, #2
   1644a:	f7f4 b875 	b.w	a538 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1644e:	2000      	movs	r0, #0
   16450:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   16454:	f7f5 f98c 	bl	b770 <ticker_trigger>
   16458:	e7f1      	b.n	1643e <rtc0_nrf5_isr+0xa>
   1645a:	bf00      	nop
   1645c:	4000b000 	.word	0x4000b000

00016460 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   16460:	2000      	movs	r0, #0
   16462:	f7f4 b869 	b.w	a538 <mayfly_run>
   16466:	bf00      	nop

00016468 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   16468:	f002 bd66 	b.w	18f38 <radio_status_reset>

0001646c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1646c:	2801      	cmp	r0, #1
   1646e:	d800      	bhi.n	16472 <ticker_stop_op_cb+0x6>
   16470:	4770      	bx	lr
{
   16472:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   16474:	4a06      	ldr	r2, [pc, #24]	; (16490 <ticker_stop_op_cb+0x24>)
   16476:	4907      	ldr	r1, [pc, #28]	; (16494 <ticker_stop_op_cb+0x28>)
   16478:	4807      	ldr	r0, [pc, #28]	; (16498 <ticker_stop_op_cb+0x2c>)
   1647a:	f240 23eb 	movw	r3, #747	; 0x2eb
   1647e:	f005 ff0d 	bl	1c29c <printk>
   16482:	4040      	eors	r0, r0
   16484:	f380 8811 	msr	BASEPRI, r0
   16488:	f04f 0003 	mov.w	r0, #3
   1648c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1648e:	bd08      	pop	{r3, pc}
   16490:	000211b4 	.word	0x000211b4
   16494:	000211fc 	.word	0x000211fc
   16498:	0002060c 	.word	0x0002060c

0001649c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1649c:	2801      	cmp	r0, #1
   1649e:	d800      	bhi.n	164a2 <ticker_start_op_cb+0x6>
   164a0:	4770      	bx	lr
{
   164a2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   164a4:	4a06      	ldr	r2, [pc, #24]	; (164c0 <ticker_start_op_cb+0x24>)
   164a6:	4907      	ldr	r1, [pc, #28]	; (164c4 <ticker_start_op_cb+0x28>)
   164a8:	4807      	ldr	r0, [pc, #28]	; (164c8 <ticker_start_op_cb+0x2c>)
   164aa:	f240 23f6 	movw	r3, #758	; 0x2f6
   164ae:	f005 fef5 	bl	1c29c <printk>
   164b2:	4040      	eors	r0, r0
   164b4:	f380 8811 	msr	BASEPRI, r0
   164b8:	f04f 0003 	mov.w	r0, #3
   164bc:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   164be:	bd08      	pop	{r3, pc}
   164c0:	000211b4 	.word	0x000211b4
   164c4:	000211fc 	.word	0x000211fc
   164c8:	0002060c 	.word	0x0002060c

000164cc <preempt_ticker_cb>:
	return ret;
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
			       uint16_t lazy, uint8_t force, void *param)
{
   164cc:	b508      	push	{r3, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	mfy.param = param;
   164ce:	4b0c      	ldr	r3, [pc, #48]	; (16500 <preempt_ticker_cb+0x34>)
{
   164d0:	9802      	ldr	r0, [sp, #8]
	mfy.param = param;
   164d2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   164d4:	2200      	movs	r2, #0
   164d6:	4611      	mov	r1, r2
   164d8:	2001      	movs	r0, #1
   164da:	f7f3 ffd9 	bl	a490 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   164de:	b900      	cbnz	r0, 164e2 <preempt_ticker_cb+0x16>
}
   164e0:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   164e2:	4a08      	ldr	r2, [pc, #32]	; (16504 <preempt_ticker_cb+0x38>)
   164e4:	4908      	ldr	r1, [pc, #32]	; (16508 <preempt_ticker_cb+0x3c>)
   164e6:	4809      	ldr	r0, [pc, #36]	; (1650c <preempt_ticker_cb+0x40>)
   164e8:	f240 3325 	movw	r3, #805	; 0x325
   164ec:	f005 fed6 	bl	1c29c <printk>
   164f0:	4040      	eors	r0, r0
   164f2:	f380 8811 	msr	BASEPRI, r0
   164f6:	f04f 0003 	mov.w	r0, #3
   164fa:	df02      	svc	2
}
   164fc:	bd08      	pop	{r3, pc}
   164fe:	bf00      	nop
   16500:	200004f8 	.word	0x200004f8
   16504:	000211b4 	.word	0x000211b4
   16508:	000209f8 	.word	0x000209f8
   1650c:	0002060c 	.word	0x0002060c

00016510 <preempt_ticker_start.constprop.0>:
static uint32_t preempt_ticker_start(struct lll_event *event,
   16510:	b530      	push	{r4, r5, lr}
	ull = HDR_LLL2ULL(p->param);
   16512:	68c3      	ldr	r3, [r0, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   16514:	4c0e      	ldr	r4, [pc, #56]	; (16550 <preempt_ticker_start.constprop.0+0x40>)
   16516:	490f      	ldr	r1, [pc, #60]	; (16554 <preempt_ticker_start.constprop.0+0x44>)
	ull = HDR_LLL2ULL(p->param);
   16518:	681b      	ldr	r3, [r3, #0]
static uint32_t preempt_ticker_start(struct lll_event *event,
   1651a:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1651c:	2200      	movs	r2, #0
   1651e:	e9cd 4007 	strd	r4, r0, [sp, #28]
   16522:	e9cd 1005 	strd	r1, r0, [sp, #20]
   16526:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1652a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(ull->ticks_active_to_start,
   1652e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
   16532:	68d9      	ldr	r1, [r3, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   16534:	6803      	ldr	r3, [r0, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   16536:	42a5      	cmp	r5, r4
   16538:	bf2c      	ite	cs
   1653a:	ebc1 0105 	rsbcs	r1, r1, r5
   1653e:	ebc1 0104 	rsbcc	r1, r1, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   16542:	9100      	str	r1, [sp, #0]
   16544:	4610      	mov	r0, r2
   16546:	4611      	mov	r1, r2
   16548:	f7f5 f980 	bl	b84c <ticker_start>
}
   1654c:	b00b      	add	sp, #44	; 0x2c
   1654e:	bd30      	pop	{r4, r5, pc}
   16550:	0001649d 	.word	0x0001649d
   16554:	000164cd 	.word	0x000164cd

00016558 <preempt>:

static void preempt(void *param)
{
   16558:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1655a:	4e4a      	ldr	r6, [pc, #296]	; (16684 <preempt+0x12c>)
   1655c:	68b3      	ldr	r3, [r6, #8]
{
   1655e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   16560:	b1b3      	cbz	r3, 16590 <preempt+0x38>
   16562:	6833      	ldr	r3, [r6, #0]
   16564:	b1a3      	cbz	r3, 16590 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   16566:	23ff      	movs	r3, #255	; 0xff
   16568:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1656a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1656e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   16572:	f7f8 f9d9 	bl	e928 <ull_prepare_dequeue_iter>
	if (!next) {
   16576:	4603      	mov	r3, r0
   16578:	b150      	cbz	r0, 16590 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1657a:	7f1a      	ldrb	r2, [r3, #28]
   1657c:	f012 0403 	ands.w	r4, r2, #3
		next = ull_prepare_dequeue_iter(&idx);
   16580:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   16584:	d006      	beq.n	16594 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   16586:	f7f8 f9cf 	bl	e928 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1658a:	4603      	mov	r3, r0
   1658c:	2800      	cmp	r0, #0
   1658e:	d1f4      	bne.n	1657a <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   16590:	b009      	add	sp, #36	; 0x24
   16592:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   16594:	429d      	cmp	r5, r3
   16596:	d126      	bne.n	165e6 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   16598:	6873      	ldr	r3, [r6, #4]
   1659a:	6831      	ldr	r1, [r6, #0]
   1659c:	68e8      	ldr	r0, [r5, #12]
   1659e:	aa03      	add	r2, sp, #12
   165a0:	4798      	blx	r3
	if (!err) {
   165a2:	4607      	mov	r7, r0
   165a4:	b1b0      	cbz	r0, 165d4 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   165a6:	68b3      	ldr	r3, [r6, #8]
   165a8:	6831      	ldr	r1, [r6, #0]
   165aa:	4620      	mov	r0, r4
   165ac:	4798      	blx	r3
	if (err == -EAGAIN) {
   165ae:	f117 0f0b 	cmn.w	r7, #11
   165b2:	d02b      	beq.n	1660c <preempt+0xb4>
		LL_ASSERT(err == -ECANCELED);
   165b4:	378c      	adds	r7, #140	; 0x8c
   165b6:	d0eb      	beq.n	16590 <preempt+0x38>
   165b8:	4a33      	ldr	r2, [pc, #204]	; (16688 <preempt+0x130>)
   165ba:	4934      	ldr	r1, [pc, #208]	; (1668c <preempt+0x134>)
   165bc:	4834      	ldr	r0, [pc, #208]	; (16690 <preempt+0x138>)
   165be:	f44f 7360 	mov.w	r3, #896	; 0x380
   165c2:	f005 fe6b 	bl	1c29c <printk>
   165c6:	4040      	eors	r0, r0
   165c8:	f380 8811 	msr	BASEPRI, r0
   165cc:	f04f 0003 	mov.w	r0, #3
   165d0:	df02      	svc	2
   165d2:	e7dd      	b.n	16590 <preempt+0x38>
		next->is_aborted = 1;
   165d4:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   165d6:	69aa      	ldr	r2, [r5, #24]
   165d8:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   165da:	f043 0302 	orr.w	r3, r3, #2
   165de:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   165e0:	4628      	mov	r0, r5
   165e2:	4790      	blx	r2
		return;
   165e4:	e7d4      	b.n	16590 <preempt+0x38>
		ret = preempt_ticker_start(next, ticker_start_op_cb);
   165e6:	4618      	mov	r0, r3
   165e8:	f7ff ff92 	bl	16510 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   165ec:	2802      	cmp	r0, #2
   165ee:	d9cf      	bls.n	16590 <preempt+0x38>
   165f0:	4a25      	ldr	r2, [pc, #148]	; (16688 <preempt+0x130>)
   165f2:	4928      	ldr	r1, [pc, #160]	; (16694 <preempt+0x13c>)
   165f4:	4826      	ldr	r0, [pc, #152]	; (16690 <preempt+0x138>)
   165f6:	f240 334b 	movw	r3, #843	; 0x34b
   165fa:	f005 fe4f 	bl	1c29c <printk>
   165fe:	4040      	eors	r0, r0
   16600:	f380 8811 	msr	BASEPRI, r0
   16604:	f04f 0003 	mov.w	r0, #3
   16608:	df02      	svc	2
   1660a:	e7c1      	b.n	16590 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1660c:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1660e:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   16612:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   16616:	f7f8 f987 	bl	e928 <ull_prepare_dequeue_iter>
		while (iter) {
   1661a:	b928      	cbnz	r0, 16628 <preempt+0xd0>
   1661c:	e013      	b.n	16646 <preempt+0xee>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1661e:	f10d 000b 	add.w	r0, sp, #11
   16622:	f7f8 f981 	bl	e928 <ull_prepare_dequeue_iter>
		while (iter) {
   16626:	b170      	cbz	r0, 16646 <preempt+0xee>
			if (!iter->is_aborted &&
   16628:	7f03      	ldrb	r3, [r0, #28]
   1662a:	079a      	lsls	r2, r3, #30
   1662c:	d4f7      	bmi.n	1661e <preempt+0xc6>
			    event.curr.param == iter->prepare_param.param) {
   1662e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   16630:	6831      	ldr	r1, [r6, #0]
   16632:	4291      	cmp	r1, r2
   16634:	d1f3      	bne.n	1661e <preempt+0xc6>
				iter->is_aborted = 1;
   16636:	f043 0302 	orr.w	r3, r3, #2
   1663a:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1663c:	6983      	ldr	r3, [r0, #24]
   1663e:	4798      	blx	r3
				idx = UINT8_MAX;
   16640:	f88d 400a 	strb.w	r4, [sp, #10]
   16644:	e7eb      	b.n	1661e <preempt+0xc6>
	struct lll_prepare_param prepare_param = {0};
   16646:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   16648:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1664a:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1664c:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1664e:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16652:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   16654:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   16656:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16658:	9b03      	ldr	r3, [sp, #12]
   1665a:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1665e:	aa04      	add	r2, sp, #16
   16660:	f7f8 f922 	bl	e8a8 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   16664:	2800      	cmp	r0, #0
   16666:	d193      	bne.n	16590 <preempt+0x38>
   16668:	4a07      	ldr	r2, [pc, #28]	; (16688 <preempt+0x130>)
   1666a:	490b      	ldr	r1, [pc, #44]	; (16698 <preempt+0x140>)
   1666c:	4808      	ldr	r0, [pc, #32]	; (16690 <preempt+0x138>)
   1666e:	f240 337e 	movw	r3, #894	; 0x37e
   16672:	f005 fe13 	bl	1c29c <printk>
   16676:	4040      	eors	r0, r0
   16678:	f380 8811 	msr	BASEPRI, r0
   1667c:	f04f 0003 	mov.w	r0, #3
   16680:	df02      	svc	2
   16682:	e785      	b.n	16590 <preempt+0x38>
   16684:	200022b4 	.word	0x200022b4
   16688:	000211b4 	.word	0x000211b4
   1668c:	0002124c 	.word	0x0002124c
   16690:	0002060c 	.word	0x0002060c
   16694:	0002121c 	.word	0x0002121c
   16698:	00021244 	.word	0x00021244

0001669c <lll_init>:
{
   1669c:	b510      	push	{r4, lr}
   1669e:	4816      	ldr	r0, [pc, #88]	; (166f8 <lll_init+0x5c>)
   166a0:	f004 fa2e 	bl	1ab00 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   166a4:	4b15      	ldr	r3, [pc, #84]	; (166fc <lll_init+0x60>)
   166a6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   166a8:	b310      	cbz	r0, 166f0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   166aa:	4b15      	ldr	r3, [pc, #84]	; (16700 <lll_init+0x64>)
   166ac:	2400      	movs	r4, #0
   166ae:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   166b0:	f000 fb02 	bl	16cb8 <lll_clock_init>
	if (err < 0) {
   166b4:	2800      	cmp	r0, #0
   166b6:	db1a      	blt.n	166ee <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   166b8:	4621      	mov	r1, r4
   166ba:	2001      	movs	r0, #1
   166bc:	4622      	mov	r2, r4
   166be:	f7ee f811 	bl	46e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   166c2:	4622      	mov	r2, r4
   166c4:	200b      	movs	r0, #11
   166c6:	2101      	movs	r1, #1
   166c8:	f7ee f80c 	bl	46e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   166cc:	4622      	mov	r2, r4
   166ce:	4621      	mov	r1, r4
   166d0:	2018      	movs	r0, #24
   166d2:	f7ee f807 	bl	46e4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   166d6:	2001      	movs	r0, #1
   166d8:	f7ed ffd2 	bl	4680 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   166dc:	200b      	movs	r0, #11
   166de:	f7ed ffcf 	bl	4680 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   166e2:	2018      	movs	r0, #24
   166e4:	f7ed ffcc 	bl	4680 <arch_irq_enable>
	radio_setup();
   166e8:	f002 fb30 	bl	18d4c <radio_setup>
	return 0;
   166ec:	4620      	mov	r0, r4
}
   166ee:	bd10      	pop	{r4, pc}
		return -ENODEV;
   166f0:	f06f 0012 	mvn.w	r0, #18
}
   166f4:	bd10      	pop	{r4, pc}
   166f6:	bf00      	nop
   166f8:	00021258 	.word	0x00021258
   166fc:	200022b0 	.word	0x200022b0
   16700:	200022b4 	.word	0x200022b4

00016704 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   16704:	4a05      	ldr	r2, [pc, #20]	; (1671c <lll_csrand_get+0x18>)
{
   16706:	b410      	push	{r4}
   16708:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1670a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1670c:	6884      	ldr	r4, [r0, #8]
   1670e:	6824      	ldr	r4, [r4, #0]
   16710:	b28a      	uxth	r2, r1
   16712:	4619      	mov	r1, r3
   16714:	4623      	mov	r3, r4
}
   16716:	bc10      	pop	{r4}
   16718:	4718      	bx	r3
   1671a:	bf00      	nop
   1671c:	200022b0 	.word	0x200022b0

00016720 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   16720:	4b08      	ldr	r3, [pc, #32]	; (16744 <lll_csrand_isr_get+0x24>)
{
   16722:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   16724:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   16726:	68ab      	ldr	r3, [r5, #8]
   16728:	685c      	ldr	r4, [r3, #4]
   1672a:	b13c      	cbz	r4, 1673c <lll_csrand_isr_get+0x1c>
   1672c:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1672e:	46a4      	mov	ip, r4
   16730:	4601      	mov	r1, r0
   16732:	b292      	uxth	r2, r2
   16734:	4628      	mov	r0, r5
   16736:	2300      	movs	r3, #0
}
   16738:	bc30      	pop	{r4, r5}
   1673a:	4760      	bx	ip
   1673c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16740:	bc30      	pop	{r4, r5}
   16742:	4770      	bx	lr
   16744:	200022b0 	.word	0x200022b0

00016748 <lll_rand_isr_get>:
   16748:	4b08      	ldr	r3, [pc, #32]	; (1676c <lll_rand_isr_get+0x24>)
   1674a:	b430      	push	{r4, r5}
   1674c:	681d      	ldr	r5, [r3, #0]
   1674e:	68ab      	ldr	r3, [r5, #8]
   16750:	685c      	ldr	r4, [r3, #4]
   16752:	b13c      	cbz	r4, 16764 <lll_rand_isr_get+0x1c>
   16754:	460a      	mov	r2, r1
   16756:	46a4      	mov	ip, r4
   16758:	4601      	mov	r1, r0
   1675a:	b292      	uxth	r2, r2
   1675c:	4628      	mov	r0, r5
   1675e:	2300      	movs	r3, #0
   16760:	bc30      	pop	{r4, r5}
   16762:	4760      	bx	ip
   16764:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16768:	bc30      	pop	{r4, r5}
   1676a:	4770      	bx	lr
   1676c:	200022b0 	.word	0x200022b0

00016770 <lll_reset>:
}
   16770:	2000      	movs	r0, #0
   16772:	4770      	bx	lr

00016774 <lll_disable>:
{
   16774:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   16776:	4604      	mov	r4, r0
{
   16778:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1677a:	2800      	cmp	r0, #0
   1677c:	d032      	beq.n	167e4 <lll_disable+0x70>
   1677e:	4b25      	ldr	r3, [pc, #148]	; (16814 <lll_disable+0xa0>)
   16780:	681a      	ldr	r2, [r3, #0]
   16782:	4282      	cmp	r2, r0
   16784:	d028      	beq.n	167d8 <lll_disable+0x64>
		idx = UINT8_MAX;
   16786:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   16788:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1678c:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   16790:	f7f8 f8ca 	bl	e928 <ull_prepare_dequeue_iter>
		while (next) {
   16794:	b940      	cbnz	r0, 167a8 <lll_disable+0x34>
   16796:	e01b      	b.n	167d0 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   16798:	68c3      	ldr	r3, [r0, #12]
   1679a:	42a3      	cmp	r3, r4
   1679c:	d01a      	beq.n	167d4 <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   1679e:	f10d 0007 	add.w	r0, sp, #7
   167a2:	f7f8 f8c1 	bl	e928 <ull_prepare_dequeue_iter>
		while (next) {
   167a6:	b198      	cbz	r0, 167d0 <lll_disable+0x5c>
			if (!next->is_aborted &&
   167a8:	7f03      	ldrb	r3, [r0, #28]
   167aa:	079b      	lsls	r3, r3, #30
   167ac:	d4f7      	bmi.n	1679e <lll_disable+0x2a>
   167ae:	2c00      	cmp	r4, #0
   167b0:	d1f2      	bne.n	16798 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   167b2:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   167b4:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   167b6:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   167b8:	f043 0302 	orr.w	r3, r3, #2
   167bc:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   167be:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   167c0:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   167c4:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   167c8:	f7f8 f8ae 	bl	e928 <ull_prepare_dequeue_iter>
		while (next) {
   167cc:	2800      	cmp	r0, #0
   167ce:	d1eb      	bne.n	167a8 <lll_disable+0x34>
}
   167d0:	b003      	add	sp, #12
   167d2:	bd30      	pop	{r4, r5, pc}
   167d4:	4621      	mov	r1, r4
   167d6:	e7ed      	b.n	167b4 <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   167d8:	689b      	ldr	r3, [r3, #8]
   167da:	b16b      	cbz	r3, 167f8 <lll_disable+0x84>
   167dc:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   167de:	2000      	movs	r0, #0
   167e0:	4798      	blx	r3
   167e2:	e7d0      	b.n	16786 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   167e4:	4a0b      	ldr	r2, [pc, #44]	; (16814 <lll_disable+0xa0>)
   167e6:	6893      	ldr	r3, [r2, #8]
   167e8:	2b00      	cmp	r3, #0
   167ea:	d0cc      	beq.n	16786 <lll_disable+0x12>
   167ec:	6811      	ldr	r1, [r2, #0]
   167ee:	2900      	cmp	r1, #0
   167f0:	d0c9      	beq.n	16786 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   167f2:	2000      	movs	r0, #0
   167f4:	4798      	blx	r3
   167f6:	e7c6      	b.n	16786 <lll_disable+0x12>
			LL_ASSERT(!param);
   167f8:	4a07      	ldr	r2, [pc, #28]	; (16818 <lll_disable+0xa4>)
   167fa:	4908      	ldr	r1, [pc, #32]	; (1681c <lll_disable+0xa8>)
   167fc:	4808      	ldr	r0, [pc, #32]	; (16820 <lll_disable+0xac>)
   167fe:	23fd      	movs	r3, #253	; 0xfd
   16800:	f005 fd4c 	bl	1c29c <printk>
   16804:	4040      	eors	r0, r0
   16806:	f380 8811 	msr	BASEPRI, r0
   1680a:	f04f 0003 	mov.w	r0, #3
   1680e:	df02      	svc	2
   16810:	e7b9      	b.n	16786 <lll_disable+0x12>
   16812:	bf00      	nop
   16814:	200022b4 	.word	0x200022b4
   16818:	000211b4 	.word	0x000211b4
   1681c:	0002125c 	.word	0x0002125c
   16820:	0002060c 	.word	0x0002060c

00016824 <lll_prepare_done>:
}
   16824:	2000      	movs	r0, #0
   16826:	4770      	bx	lr

00016828 <lll_done>:
{
   16828:	b538      	push	{r3, r4, r5, lr}
   1682a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1682c:	f7f8 f86e 	bl	e90c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   16830:	b154      	cbz	r4, 16848 <lll_done+0x20>
   16832:	b310      	cbz	r0, 1687a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   16834:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   16836:	2000      	movs	r0, #0
   16838:	f7f8 f896 	bl	e968 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1683c:	4620      	mov	r0, r4
   1683e:	f7f8 f8ff 	bl	ea40 <ull_event_done>
	LL_ASSERT(evdone);
   16842:	b158      	cbz	r0, 1685c <lll_done+0x34>
}
   16844:	2000      	movs	r0, #0
   16846:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   16848:	4d1a      	ldr	r5, [pc, #104]	; (168b4 <lll_done+0x8c>)
   1684a:	68ab      	ldr	r3, [r5, #8]
   1684c:	b31b      	cbz	r3, 16896 <lll_done+0x6e>
		param = event.curr.param;
   1684e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   16850:	2300      	movs	r3, #0
   16852:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   16854:	602b      	str	r3, [r5, #0]
		if (param) {
   16856:	2c00      	cmp	r4, #0
   16858:	d1ec      	bne.n	16834 <lll_done+0xc>
   1685a:	e7ec      	b.n	16836 <lll_done+0xe>
	LL_ASSERT(evdone);
   1685c:	4a16      	ldr	r2, [pc, #88]	; (168b8 <lll_done+0x90>)
   1685e:	4917      	ldr	r1, [pc, #92]	; (168bc <lll_done+0x94>)
   16860:	4817      	ldr	r0, [pc, #92]	; (168c0 <lll_done+0x98>)
   16862:	f240 1361 	movw	r3, #353	; 0x161
   16866:	f005 fd19 	bl	1c29c <printk>
   1686a:	4040      	eors	r0, r0
   1686c:	f380 8811 	msr	BASEPRI, r0
   16870:	f04f 0003 	mov.w	r0, #3
   16874:	df02      	svc	2
}
   16876:	2000      	movs	r0, #0
   16878:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1687a:	4a0f      	ldr	r2, [pc, #60]	; (168b8 <lll_done+0x90>)
   1687c:	4911      	ldr	r1, [pc, #68]	; (168c4 <lll_done+0x9c>)
   1687e:	4810      	ldr	r0, [pc, #64]	; (168c0 <lll_done+0x98>)
   16880:	f240 1337 	movw	r3, #311	; 0x137
   16884:	f005 fd0a 	bl	1c29c <printk>
   16888:	4040      	eors	r0, r0
   1688a:	f380 8811 	msr	BASEPRI, r0
   1688e:	f04f 0003 	mov.w	r0, #3
   16892:	df02      	svc	2
   16894:	e7ce      	b.n	16834 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   16896:	4a08      	ldr	r2, [pc, #32]	; (168b8 <lll_done+0x90>)
   16898:	490b      	ldr	r1, [pc, #44]	; (168c8 <lll_done+0xa0>)
   1689a:	4809      	ldr	r0, [pc, #36]	; (168c0 <lll_done+0x98>)
   1689c:	f240 133d 	movw	r3, #317	; 0x13d
   168a0:	f005 fcfc 	bl	1c29c <printk>
   168a4:	4040      	eors	r0, r0
   168a6:	f380 8811 	msr	BASEPRI, r0
   168aa:	f04f 0003 	mov.w	r0, #3
   168ae:	df02      	svc	2
   168b0:	e7cd      	b.n	1684e <lll_done+0x26>
   168b2:	bf00      	nop
   168b4:	200022b4 	.word	0x200022b4
   168b8:	000211b4 	.word	0x000211b4
   168bc:	00021288 	.word	0x00021288
   168c0:	0002060c 	.word	0x0002060c
   168c4:	00021264 	.word	0x00021264
   168c8:	00021274 	.word	0x00021274

000168cc <lll_is_done>:
	return !event.curr.abort_cb;
   168cc:	4b02      	ldr	r3, [pc, #8]	; (168d8 <lll_is_done+0xc>)
   168ce:	6898      	ldr	r0, [r3, #8]
}
   168d0:	fab0 f080 	clz	r0, r0
   168d4:	0940      	lsrs	r0, r0, #5
   168d6:	4770      	bx	lr
   168d8:	200022b4 	.word	0x200022b4

000168dc <lll_is_abort_cb>:
}
   168dc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   168e0:	4770      	bx	lr
   168e2:	bf00      	nop

000168e4 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   168e4:	6883      	ldr	r3, [r0, #8]
   168e6:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   168e8:	bfb8      	it	lt
   168ea:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   168ec:	6840      	ldr	r0, [r0, #4]
   168ee:	4298      	cmp	r0, r3
   168f0:	bf38      	it	cc
   168f2:	4618      	movcc	r0, r3
}
   168f4:	4770      	bx	lr
   168f6:	bf00      	nop

000168f8 <lll_preempt_calc>:
{
   168f8:	b510      	push	{r4, lr}
   168fa:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   168fc:	f7f5 f8d0 	bl	baa0 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   16900:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   16902:	0203      	lsls	r3, r0, #8
   16904:	d405      	bmi.n	16912 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   16906:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   16908:	2809      	cmp	r0, #9
   1690a:	bf94      	ite	ls
   1690c:	2000      	movls	r0, #0
   1690e:	2001      	movhi	r0, #1
}
   16910:	bd10      	pop	{r4, pc}
		return 0;
   16912:	2000      	movs	r0, #0
}
   16914:	bd10      	pop	{r4, pc}
   16916:	bf00      	nop

00016918 <lll_chan_set>:
	switch (chan) {
   16918:	2826      	cmp	r0, #38	; 0x26
{
   1691a:	b510      	push	{r4, lr}
   1691c:	4604      	mov	r4, r0
	switch (chan) {
   1691e:	d01c      	beq.n	1695a <lll_chan_set+0x42>
   16920:	2827      	cmp	r0, #39	; 0x27
   16922:	d012      	beq.n	1694a <lll_chan_set+0x32>
   16924:	2825      	cmp	r0, #37	; 0x25
   16926:	d008      	beq.n	1693a <lll_chan_set+0x22>
		if (chan < 11) {
   16928:	280a      	cmp	r0, #10
   1692a:	d91e      	bls.n	1696a <lll_chan_set+0x52>
		} else if (chan < 40) {
   1692c:	2827      	cmp	r0, #39	; 0x27
   1692e:	d821      	bhi.n	16974 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   16930:	3003      	adds	r0, #3
   16932:	0040      	lsls	r0, r0, #1
   16934:	f002 fa66 	bl	18e04 <radio_freq_chan_set>
   16938:	e002      	b.n	16940 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1693a:	2002      	movs	r0, #2
   1693c:	f002 fa62 	bl	18e04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16940:	4620      	mov	r0, r4
}
   16942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16946:	f002 ba63 	b.w	18e10 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1694a:	2050      	movs	r0, #80	; 0x50
   1694c:	f002 fa5a 	bl	18e04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16950:	4620      	mov	r0, r4
}
   16952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16956:	f002 ba5b 	b.w	18e10 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1695a:	201a      	movs	r0, #26
   1695c:	f002 fa52 	bl	18e04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16960:	4620      	mov	r0, r4
}
   16962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16966:	f002 ba53 	b.w	18e10 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1696a:	3002      	adds	r0, #2
   1696c:	0040      	lsls	r0, r0, #1
   1696e:	f002 fa49 	bl	18e04 <radio_freq_chan_set>
   16972:	e7e5      	b.n	16940 <lll_chan_set+0x28>
			LL_ASSERT(0);
   16974:	4a06      	ldr	r2, [pc, #24]	; (16990 <lll_chan_set+0x78>)
   16976:	4907      	ldr	r1, [pc, #28]	; (16994 <lll_chan_set+0x7c>)
   16978:	4807      	ldr	r0, [pc, #28]	; (16998 <lll_chan_set+0x80>)
   1697a:	f240 13cd 	movw	r3, #461	; 0x1cd
   1697e:	f005 fc8d 	bl	1c29c <printk>
   16982:	4040      	eors	r0, r0
   16984:	f380 8811 	msr	BASEPRI, r0
   16988:	f04f 0003 	mov.w	r0, #3
   1698c:	df02      	svc	2
   1698e:	e7d7      	b.n	16940 <lll_chan_set+0x28>
   16990:	000211b4 	.word	0x000211b4
   16994:	000206a4 	.word	0x000206a4
   16998:	0002060c 	.word	0x0002060c

0001699c <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1699c:	f002 ba9c 	b.w	18ed8 <radio_tx_ready_delay_get>

000169a0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   169a0:	f002 baa2 	b.w	18ee8 <radio_rx_ready_delay_get>

000169a4 <lll_isr_tx_status_reset>:
{
   169a4:	b508      	push	{r3, lr}
	radio_status_reset();
   169a6:	f002 fac7 	bl	18f38 <radio_status_reset>
}
   169aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   169ae:	f002 bc25 	b.w	191fc <radio_tmr_status_reset>
   169b2:	bf00      	nop

000169b4 <lll_isr_rx_status_reset>:
{
   169b4:	b508      	push	{r3, lr}
	radio_status_reset();
   169b6:	f002 fabf 	bl	18f38 <radio_status_reset>
	radio_tmr_status_reset();
   169ba:	f002 fc1f 	bl	191fc <radio_tmr_status_reset>
}
   169be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   169c2:	f002 bbc7 	b.w	19154 <radio_rssi_status_reset>
   169c6:	bf00      	nop

000169c8 <lll_isr_status_reset>:
{
   169c8:	b508      	push	{r3, lr}
	radio_status_reset();
   169ca:	f002 fab5 	bl	18f38 <radio_status_reset>
	radio_tmr_status_reset();
   169ce:	f002 fc15 	bl	191fc <radio_tmr_status_reset>
	radio_filter_status_reset();
   169d2:	f002 fbfb 	bl	191cc <radio_filter_status_reset>
	radio_ar_status_reset();
   169d6:	f002 fe0d 	bl	195f4 <radio_ar_status_reset>
}
   169da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   169de:	f002 bbb9 	b.w	19154 <radio_rssi_status_reset>
   169e2:	bf00      	nop

000169e4 <lll_isr_cleanup>:
{
   169e4:	b508      	push	{r3, lr}
   169e6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   169e8:	4815      	ldr	r0, [pc, #84]	; (16a40 <lll_isr_cleanup+0x5c>)
   169ea:	f002 f98f 	bl	18d0c <radio_isr_set>
	if (!radio_is_idle()) {
   169ee:	f002 fac3 	bl	18f78 <radio_is_idle>
   169f2:	b150      	cbz	r0, 16a0a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   169f4:	f002 fcd8 	bl	193a8 <radio_tmr_stop>
	err = lll_hfclock_off();
   169f8:	f000 f9a2 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   169fc:	2800      	cmp	r0, #0
   169fe:	db0c      	blt.n	16a1a <lll_isr_cleanup+0x36>
}
   16a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16a04:	2000      	movs	r0, #0
   16a06:	f7ff bf0f 	b.w	16828 <lll_done>
		radio_disable();
   16a0a:	f002 fa81 	bl	18f10 <radio_disable>
	radio_tmr_stop();
   16a0e:	f002 fccb 	bl	193a8 <radio_tmr_stop>
	err = lll_hfclock_off();
   16a12:	f000 f995 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16a16:	2800      	cmp	r0, #0
   16a18:	daf2      	bge.n	16a00 <lll_isr_cleanup+0x1c>
   16a1a:	4a0a      	ldr	r2, [pc, #40]	; (16a44 <lll_isr_cleanup+0x60>)
   16a1c:	490a      	ldr	r1, [pc, #40]	; (16a48 <lll_isr_cleanup+0x64>)
   16a1e:	480b      	ldr	r0, [pc, #44]	; (16a4c <lll_isr_cleanup+0x68>)
   16a20:	f44f 730c 	mov.w	r3, #560	; 0x230
   16a24:	f005 fc3a 	bl	1c29c <printk>
   16a28:	4040      	eors	r0, r0
   16a2a:	f380 8811 	msr	BASEPRI, r0
   16a2e:	f04f 0003 	mov.w	r0, #3
   16a32:	df02      	svc	2
	lll_done(NULL);
   16a34:	2000      	movs	r0, #0
}
   16a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16a3a:	f7ff bef5 	b.w	16828 <lll_done>
   16a3e:	bf00      	nop
   16a40:	00016469 	.word	0x00016469
   16a44:	000211b4 	.word	0x000211b4
   16a48:	00021290 	.word	0x00021290
   16a4c:	0002060c 	.word	0x0002060c

00016a50 <lll_isr_abort>:
{
   16a50:	b510      	push	{r4, lr}
   16a52:	4604      	mov	r4, r0
	radio_status_reset();
   16a54:	f002 fa70 	bl	18f38 <radio_status_reset>
	radio_tmr_status_reset();
   16a58:	f002 fbd0 	bl	191fc <radio_tmr_status_reset>
	radio_filter_status_reset();
   16a5c:	f002 fbb6 	bl	191cc <radio_filter_status_reset>
	radio_ar_status_reset();
   16a60:	f002 fdc8 	bl	195f4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   16a64:	f002 fb76 	bl	19154 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   16a68:	4620      	mov	r0, r4
}
   16a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   16a6e:	f7ff bfb9 	b.w	169e4 <lll_isr_cleanup>
   16a72:	bf00      	nop

00016a74 <lll_isr_early_abort>:
{
   16a74:	b508      	push	{r3, lr}
   16a76:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   16a78:	4813      	ldr	r0, [pc, #76]	; (16ac8 <lll_isr_early_abort+0x54>)
   16a7a:	f002 f947 	bl	18d0c <radio_isr_set>
	if (!radio_is_idle()) {
   16a7e:	f002 fa7b 	bl	18f78 <radio_is_idle>
   16a82:	b140      	cbz	r0, 16a96 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   16a84:	f000 f95c 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16a88:	2800      	cmp	r0, #0
   16a8a:	db0a      	blt.n	16aa2 <lll_isr_early_abort+0x2e>
}
   16a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16a90:	2000      	movs	r0, #0
   16a92:	f7ff bec9 	b.w	16828 <lll_done>
		radio_disable();
   16a96:	f002 fa3b 	bl	18f10 <radio_disable>
	err = lll_hfclock_off();
   16a9a:	f000 f951 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16a9e:	2800      	cmp	r0, #0
   16aa0:	daf4      	bge.n	16a8c <lll_isr_early_abort+0x18>
   16aa2:	4a0a      	ldr	r2, [pc, #40]	; (16acc <lll_isr_early_abort+0x58>)
   16aa4:	490a      	ldr	r1, [pc, #40]	; (16ad0 <lll_isr_early_abort+0x5c>)
   16aa6:	480b      	ldr	r0, [pc, #44]	; (16ad4 <lll_isr_early_abort+0x60>)
   16aa8:	f240 233f 	movw	r3, #575	; 0x23f
   16aac:	f005 fbf6 	bl	1c29c <printk>
   16ab0:	4040      	eors	r0, r0
   16ab2:	f380 8811 	msr	BASEPRI, r0
   16ab6:	f04f 0003 	mov.w	r0, #3
   16aba:	df02      	svc	2
	lll_done(NULL);
   16abc:	2000      	movs	r0, #0
}
   16abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16ac2:	f7ff beb1 	b.w	16828 <lll_done>
   16ac6:	bf00      	nop
   16ac8:	00016469 	.word	0x00016469
   16acc:	000211b4 	.word	0x000211b4
   16ad0:	00021290 	.word	0x00021290
   16ad4:	0002060c 	.word	0x0002060c

00016ad8 <lll_prepare_resolve>:
{
   16ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16adc:	b085      	sub	sp, #20
   16ade:	4605      	mov	r5, r0
   16ae0:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   16ae2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   16ae6:	23ff      	movs	r3, #255	; 0xff
{
   16ae8:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   16aec:	f88d 300f 	strb.w	r3, [sp, #15]
{
   16af0:	460e      	mov	r6, r1
   16af2:	4617      	mov	r7, r2
	p = ull_prepare_dequeue_iter(&idx);
   16af4:	f7f7 ff18 	bl	e928 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   16af8:	4684      	mov	ip, r0
   16afa:	b920      	cbnz	r0, 16b06 <lll_prepare_resolve+0x2e>
   16afc:	e021      	b.n	16b42 <lll_prepare_resolve+0x6a>
		p = ull_prepare_dequeue_iter(&idx);
   16afe:	f7f7 ff13 	bl	e928 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   16b02:	4684      	mov	ip, r0
   16b04:	b1e8      	cbz	r0, 16b42 <lll_prepare_resolve+0x6a>
   16b06:	f89c 301c 	ldrb.w	r3, [ip, #28]
   16b0a:	079a      	lsls	r2, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   16b0c:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   16b10:	d1f5      	bne.n	16afe <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   16b12:	f8df 912c 	ldr.w	r9, [pc, #300]	; 16c40 <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   16b16:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16b1a:	b9bb      	cbnz	r3, 16b4c <lll_prepare_resolve+0x74>
	    (p && is_resume)) {
   16b1c:	f1b8 0f00 	cmp.w	r8, #0
   16b20:	d033      	beq.n	16b8a <lll_prepare_resolve+0xb2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   16b22:	f8cd 8000 	str.w	r8, [sp]
   16b26:	463b      	mov	r3, r7
   16b28:	4622      	mov	r2, r4
   16b2a:	4631      	mov	r1, r6
   16b2c:	4628      	mov	r0, r5
   16b2e:	f7f7 febb 	bl	e8a8 <ull_prepare_enqueue>
		LL_ASSERT(next);
   16b32:	2800      	cmp	r0, #0
   16b34:	d064      	beq.n	16c00 <lll_prepare_resolve+0x128>
		return -EINPROGRESS;
   16b36:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   16b3a:	4620      	mov	r0, r4
   16b3c:	b005      	add	sp, #20
   16b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    event.curr.abort_cb ||
   16b42:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 16c40 <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   16b46:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16b4a:	b36b      	cbz	r3, 16ba8 <lll_prepare_resolve+0xd0>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   16b4c:	f8cd 8000 	str.w	r8, [sp]
   16b50:	463b      	mov	r3, r7
   16b52:	4622      	mov	r2, r4
   16b54:	4631      	mov	r1, r6
   16b56:	4628      	mov	r0, r5
   16b58:	f7f7 fea6 	bl	e8a8 <ull_prepare_enqueue>
		LL_ASSERT(next);
   16b5c:	2800      	cmp	r0, #0
   16b5e:	d04f      	beq.n	16c00 <lll_prepare_resolve+0x128>
		if (is_resume) {
   16b60:	f1b8 0f00 	cmp.w	r8, #0
   16b64:	d1e7      	bne.n	16b36 <lll_prepare_resolve+0x5e>
		ret  = preempt_ticker_start(next, ticker_start_op_cb);
   16b66:	f7ff fcd3 	bl	16510 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16b6a:	2802      	cmp	r0, #2
   16b6c:	d9e3      	bls.n	16b36 <lll_prepare_resolve+0x5e>
   16b6e:	4a35      	ldr	r2, [pc, #212]	; (16c44 <lll_prepare_resolve+0x16c>)
   16b70:	4935      	ldr	r1, [pc, #212]	; (16c48 <lll_prepare_resolve+0x170>)
   16b72:	4836      	ldr	r0, [pc, #216]	; (16c4c <lll_prepare_resolve+0x174>)
   16b74:	f240 2385 	movw	r3, #645	; 0x285
   16b78:	f005 fb90 	bl	1c29c <printk>
   16b7c:	4040      	eors	r0, r0
   16b7e:	f380 8811 	msr	BASEPRI, r0
   16b82:	f04f 0003 	mov.w	r0, #3
   16b86:	df02      	svc	2
   16b88:	e7d5      	b.n	16b36 <lll_prepare_resolve+0x5e>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   16b8a:	45a4      	cmp	ip, r4
   16b8c:	d00c      	beq.n	16ba8 <lll_prepare_resolve+0xd0>
   16b8e:	4a2d      	ldr	r2, [pc, #180]	; (16c44 <lll_prepare_resolve+0x16c>)
   16b90:	492f      	ldr	r1, [pc, #188]	; (16c50 <lll_prepare_resolve+0x178>)
   16b92:	482e      	ldr	r0, [pc, #184]	; (16c4c <lll_prepare_resolve+0x174>)
   16b94:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   16b98:	f005 fb80 	bl	1c29c <printk>
   16b9c:	4040      	eors	r0, r0
   16b9e:	f380 8811 	msr	BASEPRI, r0
   16ba2:	f04f 0003 	mov.w	r0, #3
   16ba6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   16ba8:	68e3      	ldr	r3, [r4, #12]
   16baa:	f8c9 3000 	str.w	r3, [r9]
	err = prepare_cb(prepare_param);
   16bae:	4620      	mov	r0, r4
	event.curr.abort_cb = abort_cb;
   16bb0:	e9c9 5601 	strd	r5, r6, [r9, #4]
	err = prepare_cb(prepare_param);
   16bb4:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   16bb6:	2200      	movs	r2, #0
   16bb8:	4b26      	ldr	r3, [pc, #152]	; (16c54 <lll_prepare_resolve+0x17c>)
   16bba:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   16bbc:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   16bbe:	4611      	mov	r1, r2
   16bc0:	4610      	mov	r0, r2
   16bc2:	f7f4 fecd 	bl	b960 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16bc6:	2802      	cmp	r0, #2
   16bc8:	d82c      	bhi.n	16c24 <lll_prepare_resolve+0x14c>
		p = ull_prepare_dequeue_iter(&idx);
   16bca:	f10d 000f 	add.w	r0, sp, #15
   16bce:	f7f7 feab 	bl	e928 <ull_prepare_dequeue_iter>
		if (!p) {
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d0b1      	beq.n	16b3a <lll_prepare_resolve+0x62>
	} while (p->is_aborted || p->is_resume);
   16bd6:	7f03      	ldrb	r3, [r0, #28]
   16bd8:	079b      	lsls	r3, r3, #30
   16bda:	d1f6      	bne.n	16bca <lll_prepare_resolve+0xf2>
	ret = preempt_ticker_start(p, ticker_start_op_cb);
   16bdc:	f7ff fc98 	bl	16510 <preempt_ticker_start.constprop.0>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16be0:	2802      	cmp	r0, #2
   16be2:	d9aa      	bls.n	16b3a <lll_prepare_resolve+0x62>
   16be4:	4a17      	ldr	r2, [pc, #92]	; (16c44 <lll_prepare_resolve+0x16c>)
   16be6:	4918      	ldr	r1, [pc, #96]	; (16c48 <lll_prepare_resolve+0x170>)
   16be8:	4818      	ldr	r0, [pc, #96]	; (16c4c <lll_prepare_resolve+0x174>)
   16bea:	f240 23ca 	movw	r3, #714	; 0x2ca
   16bee:	f005 fb55 	bl	1c29c <printk>
   16bf2:	4040      	eors	r0, r0
   16bf4:	f380 8811 	msr	BASEPRI, r0
   16bf8:	f04f 0003 	mov.w	r0, #3
   16bfc:	df02      	svc	2
   16bfe:	e79c      	b.n	16b3a <lll_prepare_resolve+0x62>
		LL_ASSERT(next);
   16c00:	4a10      	ldr	r2, [pc, #64]	; (16c44 <lll_prepare_resolve+0x16c>)
   16c02:	4915      	ldr	r1, [pc, #84]	; (16c58 <lll_prepare_resolve+0x180>)
   16c04:	4811      	ldr	r0, [pc, #68]	; (16c4c <lll_prepare_resolve+0x174>)
   16c06:	f240 237a 	movw	r3, #634	; 0x27a
   16c0a:	f005 fb47 	bl	1c29c <printk>
   16c0e:	4040      	eors	r0, r0
   16c10:	f380 8811 	msr	BASEPRI, r0
   16c14:	f04f 0003 	mov.w	r0, #3
   16c18:	df02      	svc	2
   16c1a:	2000      	movs	r0, #0
		if (is_resume) {
   16c1c:	f1b8 0f00 	cmp.w	r8, #0
   16c20:	d189      	bne.n	16b36 <lll_prepare_resolve+0x5e>
   16c22:	e7a0      	b.n	16b66 <lll_prepare_resolve+0x8e>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16c24:	4a07      	ldr	r2, [pc, #28]	; (16c44 <lll_prepare_resolve+0x16c>)
   16c26:	4908      	ldr	r1, [pc, #32]	; (16c48 <lll_prepare_resolve+0x170>)
   16c28:	4808      	ldr	r0, [pc, #32]	; (16c4c <lll_prepare_resolve+0x174>)
   16c2a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   16c2e:	f005 fb35 	bl	1c29c <printk>
   16c32:	4040      	eors	r0, r0
   16c34:	f380 8811 	msr	BASEPRI, r0
   16c38:	f04f 0003 	mov.w	r0, #3
   16c3c:	df02      	svc	2
   16c3e:	e7c4      	b.n	16bca <lll_prepare_resolve+0xf2>
   16c40:	200022b4 	.word	0x200022b4
   16c44:	000211b4 	.word	0x000211b4
   16c48:	0002121c 	.word	0x0002121c
   16c4c:	0002060c 	.word	0x0002060c
   16c50:	000212a4 	.word	0x000212a4
   16c54:	0001646d 	.word	0x0001646d
   16c58:	0002129c 	.word	0x0002129c

00016c5c <clock_ready>:
	z_impl_k_sem_give(sem);
   16c5c:	f101 0010 	add.w	r0, r1, #16
   16c60:	f004 baba 	b.w	1b1d8 <z_impl_k_sem_give>

00016c64 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   16c64:	b570      	push	{r4, r5, r6, lr}
   16c66:	4605      	mov	r5, r0
   16c68:	b08a      	sub	sp, #40	; 0x28
   16c6a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   16c6c:	2201      	movs	r2, #1
   16c6e:	2100      	movs	r1, #0
   16c70:	a804      	add	r0, sp, #16
   16c72:	f008 fc7d 	bl	1f570 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   16c76:	4b0f      	ldr	r3, [pc, #60]	; (16cb4 <blocking_on+0x50>)
   16c78:	9301      	str	r3, [sp, #4]
   16c7a:	2600      	movs	r6, #0
   16c7c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   16c7e:	4669      	mov	r1, sp
   16c80:	4628      	mov	r0, r5
   16c82:	9603      	str	r6, [sp, #12]
   16c84:	9302      	str	r3, [sp, #8]
   16c86:	f005 fb85 	bl	1c394 <onoff_request>
	if (err < 0) {
   16c8a:	2800      	cmp	r0, #0
   16c8c:	db10      	blt.n	16cb0 <blocking_on+0x4c>
   16c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16c92:	4631      	mov	r1, r6
   16c94:	f240 30e7 	movw	r0, #999	; 0x3e7
   16c98:	fbe4 0103 	umlal	r0, r1, r4, r3
   16c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16ca0:	2300      	movs	r3, #0
   16ca2:	f7e9 fa2d 	bl	100 <__aeabi_uldivmod>
   16ca6:	4602      	mov	r2, r0
   16ca8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16caa:	a804      	add	r0, sp, #16
   16cac:	f004 faba 	bl	1b224 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   16cb0:	b00a      	add	sp, #40	; 0x28
   16cb2:	bd70      	pop	{r4, r5, r6, pc}
   16cb4:	00016c5d 	.word	0x00016c5d

00016cb8 <lll_clock_init>:

int lll_clock_init(void)
{
   16cb8:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16cba:	2001      	movs	r0, #1
   16cbc:	f7ed fa82 	bl	41c4 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   16cc0:	4904      	ldr	r1, [pc, #16]	; (16cd4 <lll_clock_init+0x1c>)
   16cc2:	2300      	movs	r3, #0
   16cc4:	2401      	movs	r4, #1
   16cc6:	608c      	str	r4, [r1, #8]
   16cc8:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   16cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16cce:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   16cd0:	f005 bb60 	b.w	1c394 <onoff_request>
   16cd4:	200022cc 	.word	0x200022cc

00016cd8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   16cd8:	4b0c      	ldr	r3, [pc, #48]	; (16d0c <lll_clock_wait+0x34>)
   16cda:	781a      	ldrb	r2, [r3, #0]
   16cdc:	b10a      	cbz	r2, 16ce2 <lll_clock_wait+0xa>
		return 0;
   16cde:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   16ce0:	4770      	bx	lr
{
   16ce2:	b510      	push	{r4, lr}
	done = true;
   16ce4:	2001      	movs	r0, #1
   16ce6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16ce8:	f7ed fa6c 	bl	41c4 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16cec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16cf0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16cf2:	f7ff ffb7 	bl	16c64 <blocking_on>
	if (err) {
   16cf6:	b938      	cbnz	r0, 16d08 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   16cf8:	4620      	mov	r0, r4
   16cfa:	f005 fb94 	bl	1c426 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   16cfe:	2802      	cmp	r0, #2
		return 0;
   16d00:	bf0c      	ite	eq
   16d02:	2000      	moveq	r0, #0
		return -EIO;
   16d04:	f06f 0004 	mvnne.w	r0, #4
}
   16d08:	bd10      	pop	{r4, pc}
   16d0a:	bf00      	nop
   16d0c:	20002907 	.word	0x20002907

00016d10 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   16d10:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16d12:	4b0a      	ldr	r3, [pc, #40]	; (16d3c <lll_hfclock_on+0x2c>)
   16d14:	f3bf 8f5b 	dmb	ish
   16d18:	e853 2f00 	ldrex	r2, [r3]
   16d1c:	1c51      	adds	r1, r2, #1
   16d1e:	e843 1000 	strex	r0, r1, [r3]
   16d22:	2800      	cmp	r0, #0
   16d24:	d1f8      	bne.n	16d18 <lll_hfclock_on+0x8>
   16d26:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   16d2a:	2a00      	cmp	r2, #0
   16d2c:	dd01      	ble.n	16d32 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   16d2e:	2000      	movs	r0, #0
   16d30:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   16d32:	f7ed fa4f 	bl	41d4 <z_nrf_clock_bt_ctlr_hf_request>
}
   16d36:	2000      	movs	r0, #0
   16d38:	bd08      	pop	{r3, pc}
   16d3a:	bf00      	nop
   16d3c:	200022c8 	.word	0x200022c8

00016d40 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   16d40:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   16d42:	4b0d      	ldr	r3, [pc, #52]	; (16d78 <lll_hfclock_off+0x38>)
   16d44:	681a      	ldr	r2, [r3, #0]
   16d46:	2a00      	cmp	r2, #0
   16d48:	dd12      	ble.n	16d70 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16d4a:	f3bf 8f5b 	dmb	ish
   16d4e:	e853 2f00 	ldrex	r2, [r3]
   16d52:	1e51      	subs	r1, r2, #1
   16d54:	e843 1000 	strex	r0, r1, [r3]
   16d58:	2800      	cmp	r0, #0
   16d5a:	d1f8      	bne.n	16d4e <lll_hfclock_off+0xe>
   16d5c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   16d60:	2a01      	cmp	r2, #1
   16d62:	dd01      	ble.n	16d68 <lll_hfclock_off+0x28>
		return 0;
   16d64:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   16d66:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   16d68:	f7ed fa4a 	bl	4200 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   16d6c:	2000      	movs	r0, #0
}
   16d6e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   16d70:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   16d74:	bd08      	pop	{r3, pc}
   16d76:	bf00      	nop
   16d78:	200022c8 	.word	0x200022c8

00016d7c <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   16d7c:	2007      	movs	r0, #7
   16d7e:	4770      	bx	lr

00016d80 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   16d80:	2014      	movs	r0, #20
   16d82:	4770      	bx	lr

00016d84 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   16d84:	4b01      	ldr	r3, [pc, #4]	; (16d8c <lll_clock_ppm_get+0x8>)
}
   16d86:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   16d8a:	4770      	bx	lr
   16d8c:	000212f0 	.word	0x000212f0

00016d90 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   16d90:	b510      	push	{r4, lr}
   16d92:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   16d94:	f7ff fe18 	bl	169c8 <lll_isr_status_reset>

	radio_filter_disable();
   16d98:	f002 fa0e 	bl	191b8 <radio_filter_disable>

	lll_isr_cleanup(param);
   16d9c:	4620      	mov	r0, r4
}
   16d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   16da2:	f7ff be1f 	b.w	169e4 <lll_isr_cleanup>
   16da6:	bf00      	nop

00016da8 <isr_tx>:
{
   16da8:	b530      	push	{r4, r5, lr}
   16daa:	b083      	sub	sp, #12
   16dac:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   16dae:	f7ff fdf9 	bl	169a4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   16db2:	2096      	movs	r0, #150	; 0x96
   16db4:	f002 fa32 	bl	1921c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   16db8:	2300      	movs	r3, #0
   16dba:	461a      	mov	r2, r3
   16dbc:	4619      	mov	r1, r3
   16dbe:	4618      	mov	r0, r3
   16dc0:	f002 f94a 	bl	19058 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   16dc4:	f002 f8fc 	bl	18fc0 <radio_pkt_scratch_get>
   16dc8:	f002 f87a 	bl	18ec0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   16dcc:	f002 f8c0 	bl	18f50 <radio_is_ready>
   16dd0:	b9e0      	cbnz	r0, 16e0c <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   16dd2:	481e      	ldr	r0, [pc, #120]	; (16e4c <isr_tx+0xa4>)
   16dd4:	4621      	mov	r1, r4
   16dd6:	f001 ff99 	bl	18d0c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16dda:	f7ff fb13 	bl	16404 <ull_filter_lll_rl_enabled>
   16dde:	bb50      	cbnz	r0, 16e36 <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16de0:	f002 fb36 	bl	19450 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16de4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16de6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16de8:	4608      	mov	r0, r1
   16dea:	f002 f87f 	bl	18eec <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16dee:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16df0:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16df2:	4608      	mov	r0, r1
   16df4:	f002 f876 	bl	18ee4 <radio_tx_chain_delay_get>
   16df8:	442c      	add	r4, r5
   16dfa:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   16dfc:	1a20      	subs	r0, r4, r0
   16dfe:	f002 fadf 	bl	193c0 <radio_tmr_hcto_configure>
}
   16e02:	b003      	add	sp, #12
   16e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   16e08:	f002 bb14 	b.w	19434 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   16e0c:	4a10      	ldr	r2, [pc, #64]	; (16e50 <isr_tx+0xa8>)
   16e0e:	4911      	ldr	r1, [pc, #68]	; (16e54 <isr_tx+0xac>)
   16e10:	4811      	ldr	r0, [pc, #68]	; (16e58 <isr_tx+0xb0>)
   16e12:	f240 33b9 	movw	r3, #953	; 0x3b9
   16e16:	f005 fa41 	bl	1c29c <printk>
   16e1a:	4040      	eors	r0, r0
   16e1c:	f380 8811 	msr	BASEPRI, r0
   16e20:	f04f 0003 	mov.w	r0, #3
   16e24:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   16e26:	4809      	ldr	r0, [pc, #36]	; (16e4c <isr_tx+0xa4>)
   16e28:	4621      	mov	r1, r4
   16e2a:	f001 ff6f 	bl	18d0c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16e2e:	f7ff fae9 	bl	16404 <ull_filter_lll_rl_enabled>
   16e32:	2800      	cmp	r0, #0
   16e34:	d0d4      	beq.n	16de0 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   16e36:	f10d 0007 	add.w	r0, sp, #7
   16e3a:	f7ff f951 	bl	160e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   16e3e:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   16e40:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   16e42:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16e46:	f002 fb9b 	bl	19580 <radio_ar_configure>
   16e4a:	e7c9      	b.n	16de0 <isr_tx+0x38>
   16e4c:	000175c1 	.word	0x000175c1
   16e50:	00021300 	.word	0x00021300
   16e54:	0002134c 	.word	0x0002134c
   16e58:	0002060c 	.word	0x0002060c

00016e5c <is_abort_cb>:
	if (next != curr) {
   16e5c:	4281      	cmp	r1, r0
{
   16e5e:	b508      	push	{r3, lr}
	if (next != curr) {
   16e60:	d00e      	beq.n	16e80 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   16e62:	7a0b      	ldrb	r3, [r1, #8]
   16e64:	07db      	lsls	r3, r3, #31
   16e66:	d402      	bmi.n	16e6e <is_abort_cb+0x12>
			return -ECANCELED;
   16e68:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   16e6c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   16e6e:	4b13      	ldr	r3, [pc, #76]	; (16ebc <is_abort_cb+0x60>)
   16e70:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   16e72:	f7ff ff4d 	bl	16d10 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   16e76:	2800      	cmp	r0, #0
   16e78:	db0f      	blt.n	16e9a <is_abort_cb+0x3e>
   16e7a:	f06f 000a 	mvn.w	r0, #10
}
   16e7e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   16e80:	7b0b      	ldrb	r3, [r1, #12]
   16e82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16e86:	690b      	ldr	r3, [r1, #16]
   16e88:	781b      	ldrb	r3, [r3, #0]
   16e8a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   16e8e:	2b01      	cmp	r3, #1
   16e90:	bf14      	ite	ne
   16e92:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   16e96:	2000      	moveq	r0, #0
}
   16e98:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   16e9a:	4a09      	ldr	r2, [pc, #36]	; (16ec0 <is_abort_cb+0x64>)
   16e9c:	4909      	ldr	r1, [pc, #36]	; (16ec4 <is_abort_cb+0x68>)
   16e9e:	480a      	ldr	r0, [pc, #40]	; (16ec8 <is_abort_cb+0x6c>)
   16ea0:	f240 3377 	movw	r3, #887	; 0x377
   16ea4:	f005 f9fa 	bl	1c29c <printk>
   16ea8:	4040      	eors	r0, r0
   16eaa:	f380 8811 	msr	BASEPRI, r0
   16eae:	f04f 0003 	mov.w	r0, #3
   16eb2:	df02      	svc	2
   16eb4:	f06f 000a 	mvn.w	r0, #10
}
   16eb8:	bd08      	pop	{r3, pc}
   16eba:	bf00      	nop
   16ebc:	000173dd 	.word	0x000173dd
   16ec0:	00021300 	.word	0x00021300
   16ec4:	00021290 	.word	0x00021290
   16ec8:	0002060c 	.word	0x0002060c

00016ecc <abort_cb>:
{
   16ecc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   16ece:	b1d8      	cbz	r0, 16f08 <abort_cb+0x3c>
	err = lll_hfclock_off();
   16ed0:	460c      	mov	r4, r1
   16ed2:	f7ff ff35 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16ed6:	2800      	cmp	r0, #0
   16ed8:	db04      	blt.n	16ee4 <abort_cb+0x18>
	lll_done(param);
   16eda:	4620      	mov	r0, r4
}
   16edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16ee0:	f7ff bca2 	b.w	16828 <lll_done>
	LL_ASSERT(err >= 0);
   16ee4:	4a0c      	ldr	r2, [pc, #48]	; (16f18 <abort_cb+0x4c>)
   16ee6:	490d      	ldr	r1, [pc, #52]	; (16f1c <abort_cb+0x50>)
   16ee8:	480d      	ldr	r0, [pc, #52]	; (16f20 <abort_cb+0x54>)
   16eea:	f240 339d 	movw	r3, #925	; 0x39d
   16eee:	f005 f9d5 	bl	1c29c <printk>
   16ef2:	4040      	eors	r0, r0
   16ef4:	f380 8811 	msr	BASEPRI, r0
   16ef8:	f04f 0003 	mov.w	r0, #3
   16efc:	df02      	svc	2
	lll_done(param);
   16efe:	4620      	mov	r0, r4
}
   16f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16f04:	f7ff bc90 	b.w	16828 <lll_done>
		radio_isr_set(isr_abort, param);
   16f08:	4806      	ldr	r0, [pc, #24]	; (16f24 <abort_cb+0x58>)
   16f0a:	f001 feff 	bl	18d0c <radio_isr_set>
}
   16f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   16f12:	f001 bffd 	b.w	18f10 <radio_disable>
   16f16:	bf00      	nop
   16f18:	00021300 	.word	0x00021300
   16f1c:	00021290 	.word	0x00021290
   16f20:	0002060c 	.word	0x0002060c
   16f24:	00016d91 	.word	0x00016d91

00016f28 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   16f28:	4b08      	ldr	r3, [pc, #32]	; (16f4c <lll_adv_init+0x24>)
{
   16f2a:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   16f2c:	1d18      	adds	r0, r3, #4
   16f2e:	2205      	movs	r2, #5
   16f30:	2128      	movs	r1, #40	; 0x28
   16f32:	f7f3 f9a5 	bl	a280 <mem_init>
	MFIFO_INIT(pdu_free);
   16f36:	4b06      	ldr	r3, [pc, #24]	; (16f50 <lll_adv_init+0x28>)
   16f38:	2400      	movs	r4, #0
   16f3a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16f3c:	2203      	movs	r2, #3
   16f3e:	4621      	mov	r1, r4
   16f40:	4804      	ldr	r0, [pc, #16]	; (16f54 <lll_adv_init+0x2c>)
   16f42:	f008 fb15 	bl	1f570 <z_impl_k_sem_init>
}
   16f46:	4620      	mov	r0, r4
   16f48:	bd10      	pop	{r4, pc}
   16f4a:	bf00      	nop
   16f4c:	200022dc 	.word	0x200022dc
   16f50:	20000508 	.word	0x20000508
   16f54:	200023a8 	.word	0x200023a8

00016f58 <lll_adv_reset>:
   16f58:	4b08      	ldr	r3, [pc, #32]	; (16f7c <lll_adv_reset+0x24>)
   16f5a:	b510      	push	{r4, lr}
   16f5c:	1d18      	adds	r0, r3, #4
   16f5e:	2205      	movs	r2, #5
   16f60:	2128      	movs	r1, #40	; 0x28
   16f62:	f7f3 f98d 	bl	a280 <mem_init>
   16f66:	4b06      	ldr	r3, [pc, #24]	; (16f80 <lll_adv_reset+0x28>)
   16f68:	2400      	movs	r4, #0
   16f6a:	805c      	strh	r4, [r3, #2]
   16f6c:	2203      	movs	r2, #3
   16f6e:	4621      	mov	r1, r4
   16f70:	4804      	ldr	r0, [pc, #16]	; (16f84 <lll_adv_reset+0x2c>)
   16f72:	f008 fafd 	bl	1f570 <z_impl_k_sem_init>
   16f76:	4620      	mov	r0, r4
   16f78:	bd10      	pop	{r4, pc}
   16f7a:	bf00      	nop
   16f7c:	200022dc 	.word	0x200022dc
   16f80:	20000508 	.word	0x20000508
   16f84:	200023a8 	.word	0x200023a8

00016f88 <lll_adv_data_init>:
{
   16f88:	b510      	push	{r4, lr}
   16f8a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   16f8c:	4805      	ldr	r0, [pc, #20]	; (16fa4 <lll_adv_data_init+0x1c>)
   16f8e:	f7f3 f9a7 	bl	a2e0 <mem_acquire>
	if (!p) {
   16f92:	b120      	cbz	r0, 16f9e <lll_adv_data_init+0x16>
   16f94:	4603      	mov	r3, r0
	p->len = 0U;
   16f96:	2000      	movs	r0, #0
   16f98:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   16f9a:	6063      	str	r3, [r4, #4]
}
   16f9c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   16f9e:	f06f 000b 	mvn.w	r0, #11
}
   16fa2:	bd10      	pop	{r4, pc}
   16fa4:	200022dc 	.word	0x200022dc

00016fa8 <lll_adv_data_reset>:
{
   16fa8:	4603      	mov	r3, r0
	pdu->first = 0U;
   16faa:	2000      	movs	r0, #0
   16fac:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   16fae:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   16fb0:	6098      	str	r0, [r3, #8]
}
   16fb2:	4770      	bx	lr

00016fb4 <lll_adv_pdu_alloc>:
{
   16fb4:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   16fb6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   16fb8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   16fba:	429a      	cmp	r2, r3
   16fbc:	d004      	beq.n	16fc8 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   16fbe:	b2d4      	uxtb	r4, r2
   16fc0:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   16fc2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   16fc4:	4294      	cmp	r4, r2
   16fc6:	d003      	beq.n	16fd0 <lll_adv_pdu_alloc+0x1c>
		last++;
   16fc8:	3301      	adds	r3, #1
   16fca:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   16fcc:	2b02      	cmp	r3, #2
   16fce:	d007      	beq.n	16fe0 <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   16fd0:	461c      	mov	r4, r3
   16fd2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   16fd6:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   16fd8:	6865      	ldr	r5, [r4, #4]
	if (p) {
   16fda:	b14d      	cbz	r5, 16ff0 <lll_adv_pdu_alloc+0x3c>
}
   16fdc:	4628      	mov	r0, r5
   16fde:	bd70      	pop	{r4, r5, r6, pc}
{
   16fe0:	2400      	movs	r4, #0
			last = 0U;
   16fe2:	4623      	mov	r3, r4
	*idx = last;
   16fe4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   16fe8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   16fea:	6865      	ldr	r5, [r4, #4]
	if (p) {
   16fec:	2d00      	cmp	r5, #0
   16fee:	d1f5      	bne.n	16fdc <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   16ff0:	4e34      	ldr	r6, [pc, #208]	; (170c4 <lll_adv_pdu_alloc+0x110>)
   16ff2:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   16ff4:	78f1      	ldrb	r1, [r6, #3]
   16ff6:	7833      	ldrb	r3, [r6, #0]
   16ff8:	4291      	cmp	r1, r2
   16ffa:	d003      	beq.n	17004 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   16ffc:	fb02 6303 	mla	r3, r2, r3, r6
   17000:	685d      	ldr	r5, [r3, #4]
	if (p) {
   17002:	b93d      	cbnz	r5, 17014 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   17004:	4830      	ldr	r0, [pc, #192]	; (170c8 <lll_adv_pdu_alloc+0x114>)
   17006:	f7f3 f96b 	bl	a2e0 <mem_acquire>
	if (p) {
   1700a:	4605      	mov	r5, r0
   1700c:	b1a8      	cbz	r0, 1703a <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1700e:	6065      	str	r5, [r4, #4]
}
   17010:	4628      	mov	r0, r5
   17012:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   17014:	482d      	ldr	r0, [pc, #180]	; (170cc <lll_adv_pdu_alloc+0x118>)
   17016:	2200      	movs	r2, #0
   17018:	2300      	movs	r3, #0
   1701a:	f004 f903 	bl	1b224 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1701e:	2800      	cmp	r0, #0
   17020:	d134      	bne.n	1708c <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   17022:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   17024:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   17026:	7871      	ldrb	r1, [r6, #1]
   17028:	429a      	cmp	r2, r3
   1702a:	d0f0      	beq.n	1700e <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1702c:	3301      	adds	r3, #1
   1702e:	b2db      	uxtb	r3, r3
		_first = 0U;
   17030:	4299      	cmp	r1, r3
   17032:	bf08      	it	eq
   17034:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17036:	70b3      	strb	r3, [r6, #2]
	return mem;
   17038:	e7e9      	b.n	1700e <lll_adv_pdu_alloc+0x5a>
   1703a:	4824      	ldr	r0, [pc, #144]	; (170cc <lll_adv_pdu_alloc+0x118>)
   1703c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17044:	f004 f8ee 	bl	1b224 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   17048:	2800      	cmp	r0, #0
   1704a:	d12d      	bne.n	170a8 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   1704c:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1704e:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   17050:	7832      	ldrb	r2, [r6, #0]
   17052:	7870      	ldrb	r0, [r6, #1]
   17054:	4299      	cmp	r1, r3
   17056:	d00a      	beq.n	1706e <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   17058:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1705c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1705e:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   17060:	b2db      	uxtb	r3, r3
		_first = 0U;
   17062:	4298      	cmp	r0, r3
   17064:	bf08      	it	eq
   17066:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17068:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1706a:	2d00      	cmp	r5, #0
   1706c:	d1cf      	bne.n	1700e <lll_adv_pdu_alloc+0x5a>
   1706e:	4a18      	ldr	r2, [pc, #96]	; (170d0 <lll_adv_pdu_alloc+0x11c>)
   17070:	4918      	ldr	r1, [pc, #96]	; (170d4 <lll_adv_pdu_alloc+0x120>)
   17072:	4819      	ldr	r0, [pc, #100]	; (170d8 <lll_adv_pdu_alloc+0x124>)
   17074:	f240 2382 	movw	r3, #642	; 0x282
   17078:	f005 f910 	bl	1c29c <printk>
   1707c:	4040      	eors	r0, r0
   1707e:	f380 8811 	msr	BASEPRI, r0
   17082:	f04f 0003 	mov.w	r0, #3
   17086:	df02      	svc	2
   17088:	2500      	movs	r5, #0
   1708a:	e7c0      	b.n	1700e <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1708c:	4a10      	ldr	r2, [pc, #64]	; (170d0 <lll_adv_pdu_alloc+0x11c>)
   1708e:	4913      	ldr	r1, [pc, #76]	; (170dc <lll_adv_pdu_alloc+0x128>)
   17090:	4811      	ldr	r0, [pc, #68]	; (170d8 <lll_adv_pdu_alloc+0x124>)
   17092:	f240 236f 	movw	r3, #623	; 0x26f
   17096:	f005 f901 	bl	1c29c <printk>
   1709a:	4040      	eors	r0, r0
   1709c:	f380 8811 	msr	BASEPRI, r0
   170a0:	f04f 0003 	mov.w	r0, #3
   170a4:	df02      	svc	2
   170a6:	e7bc      	b.n	17022 <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   170a8:	4a09      	ldr	r2, [pc, #36]	; (170d0 <lll_adv_pdu_alloc+0x11c>)
   170aa:	490c      	ldr	r1, [pc, #48]	; (170dc <lll_adv_pdu_alloc+0x128>)
   170ac:	480a      	ldr	r0, [pc, #40]	; (170d8 <lll_adv_pdu_alloc+0x124>)
   170ae:	f240 237f 	movw	r3, #639	; 0x27f
   170b2:	f005 f8f3 	bl	1c29c <printk>
   170b6:	4040      	eors	r0, r0
   170b8:	f380 8811 	msr	BASEPRI, r0
   170bc:	f04f 0003 	mov.w	r0, #3
   170c0:	df02      	svc	2
   170c2:	e7c3      	b.n	1704c <lll_adv_pdu_alloc+0x98>
   170c4:	20000508 	.word	0x20000508
   170c8:	200022dc 	.word	0x200022dc
   170cc:	200023a8 	.word	0x200023a8
   170d0:	00021300 	.word	0x00021300
   170d4:	00021360 	.word	0x00021360
   170d8:	0002060c 	.word	0x0002060c
   170dc:	000208f8 	.word	0x000208f8

000170e0 <lll_adv_pdu_latest_get>:
{
   170e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170e2:	4604      	mov	r4, r0
	first = pdu->first;
   170e4:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   170e6:	7840      	ldrb	r0, [r0, #1]
   170e8:	4298      	cmp	r0, r3
   170ea:	d028      	beq.n	1713e <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   170ec:	4d16      	ldr	r5, [pc, #88]	; (17148 <lll_adv_pdu_latest_get+0x68>)
   170ee:	b2da      	uxtb	r2, r3
	last = last + 1;
   170f0:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   170f2:	786e      	ldrb	r6, [r5, #1]
   170f4:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   170f6:	3301      	adds	r3, #1
   170f8:	b2db      	uxtb	r3, r3
		last = 0U;
   170fa:	429e      	cmp	r6, r3
   170fc:	bf08      	it	eq
   170fe:	2300      	moveq	r3, #0
	if (last == first) {
   17100:	4298      	cmp	r0, r3
   17102:	d01e      	beq.n	17142 <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   17104:	1c50      	adds	r0, r2, #1
   17106:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   17108:	2802      	cmp	r0, #2
   1710a:	bf04      	itt	eq
   1710c:	2600      	moveq	r6, #0
			first = 0U;
   1710e:	4630      	moveq	r0, r6
		pdu->first = first;
   17110:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   17112:	bf18      	it	ne
   17114:	4606      	movne	r6, r0
		*is_modified = 1U;
   17116:	2001      	movs	r0, #1
   17118:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1711a:	78e8      	ldrb	r0, [r5, #3]
   1711c:	7829      	ldrb	r1, [r5, #0]
   1711e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   17122:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   17126:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   17128:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1712a:	6057      	str	r7, [r2, #4]
   1712c:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1712e:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   17130:	4806      	ldr	r0, [pc, #24]	; (1714c <lll_adv_pdu_latest_get+0x6c>)
   17132:	f004 f851 	bl	1b1d8 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   17136:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1713a:	6860      	ldr	r0, [r4, #4]
}
   1713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   1713e:	4606      	mov	r6, r0
   17140:	e7f9      	b.n	17136 <lll_adv_pdu_latest_get+0x56>
			return NULL;
   17142:	2000      	movs	r0, #0
}
   17144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17146:	bf00      	nop
   17148:	20000508 	.word	0x20000508
   1714c:	200023a8 	.word	0x200023a8

00017150 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   17150:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   17152:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   17154:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17158:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1715a:	4604      	mov	r4, r0
   1715c:	fa93 f0a3 	rbit	r0, r3
   17160:	fab0 f080 	clz	r0, r0
   17164:	bf08      	it	eq
   17166:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1716a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1716c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1716e:	d043      	beq.n	171f8 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17170:	7a22      	ldrb	r2, [r4, #8]
   17172:	1e59      	subs	r1, r3, #1
   17174:	400b      	ands	r3, r1
   17176:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1717a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1717e:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   17180:	f7ff fbca 	bl	16918 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   17184:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   17186:	f10d 0107 	add.w	r1, sp, #7
   1718a:	f104 000c 	add.w	r0, r4, #12
   1718e:	f88d 3007 	strb.w	r3, [sp, #7]
   17192:	f7ff ffa5 	bl	170e0 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   17196:	4605      	mov	r5, r0
   17198:	2800      	cmp	r0, #0
   1719a:	d03e      	beq.n	1721a <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   1719c:	4628      	mov	r0, r5
   1719e:	f001 fe95 	bl	18ecc <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   171a2:	782b      	ldrb	r3, [r5, #0]
   171a4:	f003 030f 	and.w	r3, r3, #15
   171a8:	2b02      	cmp	r3, #2
   171aa:	d01d      	beq.n	171e8 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   171ac:	f10d 0107 	add.w	r1, sp, #7
   171b0:	f104 0018 	add.w	r0, r4, #24
   171b4:	f7ff ff94 	bl	170e0 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   171b8:	4606      	mov	r6, r0
   171ba:	2800      	cmp	r0, #0
   171bc:	d03b      	beq.n	17236 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   171be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   171c2:	b95b      	cbnz	r3, 171dc <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   171c4:	4621      	mov	r1, r4
   171c6:	4823      	ldr	r0, [pc, #140]	; (17254 <chan_prepare.isra.0+0x104>)
   171c8:	f001 fda0 	bl	18d0c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   171cc:	2096      	movs	r0, #150	; 0x96
   171ce:	f002 f825 	bl	1921c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   171d2:	2000      	movs	r0, #0
   171d4:	f001 fef8 	bl	18fc8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   171d8:	b002      	add	sp, #8
   171da:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   171dc:	2206      	movs	r2, #6
   171de:	1ca9      	adds	r1, r5, #2
   171e0:	1cb0      	adds	r0, r6, #2
   171e2:	f006 fb11 	bl	1d808 <memcpy>
   171e6:	e7ed      	b.n	171c4 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   171e8:	481b      	ldr	r0, [pc, #108]	; (17258 <chan_prepare.isra.0+0x108>)
   171ea:	4621      	mov	r1, r4
   171ec:	f001 fd8e 	bl	18d0c <radio_isr_set>
		radio_switch_complete_and_disable();
   171f0:	f001 ff92 	bl	19118 <radio_switch_complete_and_disable>
}
   171f4:	b002      	add	sp, #8
   171f6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   171f8:	4a18      	ldr	r2, [pc, #96]	; (1725c <chan_prepare.isra.0+0x10c>)
   171fa:	4919      	ldr	r1, [pc, #100]	; (17260 <chan_prepare.isra.0+0x110>)
   171fc:	4819      	ldr	r0, [pc, #100]	; (17264 <chan_prepare.isra.0+0x114>)
   171fe:	f240 43a6 	movw	r3, #1190	; 0x4a6
   17202:	f005 f84b 	bl	1c29c <printk>
   17206:	4040      	eors	r0, r0
   17208:	f380 8811 	msr	BASEPRI, r0
   1720c:	f04f 0003 	mov.w	r0, #3
   17210:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17212:	7a23      	ldrb	r3, [r4, #8]
   17214:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17218:	e7aa      	b.n	17170 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   1721a:	4a10      	ldr	r2, [pc, #64]	; (1725c <chan_prepare.isra.0+0x10c>)
   1721c:	4912      	ldr	r1, [pc, #72]	; (17268 <chan_prepare.isra.0+0x118>)
   1721e:	4811      	ldr	r0, [pc, #68]	; (17264 <chan_prepare.isra.0+0x114>)
   17220:	f240 43af 	movw	r3, #1199	; 0x4af
   17224:	f005 f83a 	bl	1c29c <printk>
   17228:	4040      	eors	r0, r0
   1722a:	f380 8811 	msr	BASEPRI, r0
   1722e:	f04f 0003 	mov.w	r0, #3
   17232:	df02      	svc	2
   17234:	e7b2      	b.n	1719c <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   17236:	4a09      	ldr	r2, [pc, #36]	; (1725c <chan_prepare.isra.0+0x10c>)
   17238:	490c      	ldr	r1, [pc, #48]	; (1726c <chan_prepare.isra.0+0x11c>)
   1723a:	480a      	ldr	r0, [pc, #40]	; (17264 <chan_prepare.isra.0+0x114>)
   1723c:	f240 43b9 	movw	r3, #1209	; 0x4b9
   17240:	f005 f82c 	bl	1c29c <printk>
   17244:	4040      	eors	r0, r0
   17246:	f380 8811 	msr	BASEPRI, r0
   1724a:	f04f 0003 	mov.w	r0, #3
   1724e:	df02      	svc	2
   17250:	e7b5      	b.n	171be <chan_prepare.isra.0+0x6e>
   17252:	bf00      	nop
   17254:	00016da9 	.word	0x00016da9
   17258:	00017271 	.word	0x00017271
   1725c:	00021300 	.word	0x00021300
   17260:	00020f8c 	.word	0x00020f8c
   17264:	0002060c 	.word	0x0002060c
   17268:	00021364 	.word	0x00021364
   1726c:	00021368 	.word	0x00021368

00017270 <isr_done>:
{
   17270:	b510      	push	{r4, lr}
   17272:	4604      	mov	r4, r0
	lll_isr_status_reset();
   17274:	f7ff fba8 	bl	169c8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   17278:	7a23      	ldrb	r3, [r4, #8]
   1727a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1727e:	2a01      	cmp	r2, #1
   17280:	d105      	bne.n	1728e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   17282:	f3c3 0242 	ubfx	r2, r3, #1, #3
   17286:	f362 1306 	bfi	r3, r2, #4, #3
   1728a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1728c:	b2db      	uxtb	r3, r3
   1728e:	f013 0f70 	tst.w	r3, #112	; 0x70
   17292:	d005      	beq.n	172a0 <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   17294:	6863      	ldr	r3, [r4, #4]
   17296:	b153      	cbz	r3, 172ae <isr_done+0x3e>
   17298:	f893 3020 	ldrb.w	r3, [r3, #32]
   1729c:	079b      	lsls	r3, r3, #30
   1729e:	d506      	bpl.n	172ae <isr_done+0x3e>
	radio_filter_disable();
   172a0:	f001 ff8a 	bl	191b8 <radio_filter_disable>
	lll_isr_cleanup(param);
   172a4:	4620      	mov	r0, r4
}
   172a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   172aa:	f7ff bb9b 	b.w	169e4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   172ae:	4620      	mov	r0, r4
   172b0:	f7ff ff4e 	bl	17150 <chan_prepare.isra.0>
		radio_tx_enable();
   172b4:	f001 fe26 	bl	18f04 <radio_tx_enable>
}
   172b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   172bc:	f002 b8ba 	b.w	19434 <radio_tmr_end_capture>

000172c0 <prepare_cb>:
{
   172c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   172c2:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   172c4:	6863      	ldr	r3, [r4, #4]
{
   172c6:	b083      	sub	sp, #12
   172c8:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   172ca:	2b00      	cmp	r3, #0
   172cc:	d16d      	bne.n	173aa <prepare_cb+0xea>
	radio_reset();
   172ce:	f001 fd5f 	bl	18d90 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   172d2:	2000      	movs	r0, #0
   172d4:	f001 fd90 	bl	18df8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   172d8:	2100      	movs	r1, #0
   172da:	4608      	mov	r0, r1
   172dc:	f001 fd7c 	bl	18dd8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   172e0:	2200      	movs	r2, #0
   172e2:	2125      	movs	r1, #37	; 0x25
   172e4:	2008      	movs	r0, #8
   172e6:	f001 fdbd 	bl	18e64 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   172ea:	4b35      	ldr	r3, [pc, #212]	; (173c0 <prepare_cb+0x100>)
   172ec:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   172ee:	a801      	add	r0, sp, #4
   172f0:	f001 fda0 	bl	18e34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   172f4:	4933      	ldr	r1, [pc, #204]	; (173c4 <prepare_cb+0x104>)
   172f6:	f240 605b 	movw	r0, #1627	; 0x65b
   172fa:	f001 fe47 	bl	18f8c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   172fe:	7a23      	ldrb	r3, [r4, #8]
   17300:	f3c3 0242 	ubfx	r2, r3, #1, #3
   17304:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   17308:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1730a:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1730c:	f7ff ff20 	bl	17150 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   17310:	f7ff f878 	bl	16404 <ull_filter_lll_rl_enabled>
   17314:	bb98      	cbnz	r0, 1737e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   17316:	7a63      	ldrb	r3, [r4, #9]
   17318:	079b      	lsls	r3, r3, #30
   1731a:	d127      	bne.n	1736c <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   1731c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1731e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   17320:	4638      	mov	r0, r7
   17322:	f7ff fadf 	bl	168e4 <lll_event_offset_get>
   17326:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   17328:	686a      	ldr	r2, [r5, #4]
   1732a:	f106 0109 	add.w	r1, r6, #9
   1732e:	2001      	movs	r0, #1
   17330:	f001 ff80 	bl	19234 <radio_tmr_start>
	radio_tmr_end_capture();
   17334:	f002 f87e 	bl	19434 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   17338:	4620      	mov	r0, r4
   1733a:	f7f7 ffd1 	bl	f2e0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1733e:	1c81      	adds	r1, r0, #2
   17340:	4632      	mov	r2, r6
   17342:	b2c9      	uxtb	r1, r1
   17344:	4638      	mov	r0, r7
   17346:	f7ff fad7 	bl	168f8 <lll_preempt_calc>
   1734a:	b930      	cbnz	r0, 1735a <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   1734c:	4620      	mov	r0, r4
   1734e:	f7ff fa69 	bl	16824 <lll_prepare_done>
		LL_ASSERT(!ret);
   17352:	b9d0      	cbnz	r0, 1738a <prepare_cb+0xca>
}
   17354:	2000      	movs	r0, #0
   17356:	b003      	add	sp, #12
   17358:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1735a:	481b      	ldr	r0, [pc, #108]	; (173c8 <prepare_cb+0x108>)
   1735c:	4621      	mov	r1, r4
   1735e:	f001 fcd5 	bl	18d0c <radio_isr_set>
		radio_disable();
   17362:	f001 fdd5 	bl	18f10 <radio_disable>
}
   17366:	2000      	movs	r0, #0
   17368:	b003      	add	sp, #12
   1736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1736c:	2001      	movs	r0, #1
   1736e:	f7fe ffad 	bl	162cc <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   17372:	7841      	ldrb	r1, [r0, #1]
   17374:	1c82      	adds	r2, r0, #2
   17376:	7800      	ldrb	r0, [r0, #0]
   17378:	f001 fefe 	bl	19178 <radio_filter_configure>
   1737c:	e7ce      	b.n	1731c <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1737e:	7a60      	ldrb	r0, [r4, #9]
   17380:	f010 0003 	ands.w	r0, r0, #3
   17384:	bf18      	it	ne
   17386:	2001      	movne	r0, #1
   17388:	e7f1      	b.n	1736e <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1738a:	4a10      	ldr	r2, [pc, #64]	; (173cc <prepare_cb+0x10c>)
   1738c:	4910      	ldr	r1, [pc, #64]	; (173d0 <prepare_cb+0x110>)
   1738e:	4811      	ldr	r0, [pc, #68]	; (173d4 <prepare_cb+0x114>)
   17390:	f240 334e 	movw	r3, #846	; 0x34e
   17394:	f004 ff82 	bl	1c29c <printk>
   17398:	4040      	eors	r0, r0
   1739a:	f380 8811 	msr	BASEPRI, r0
   1739e:	f04f 0003 	mov.w	r0, #3
   173a2:	df02      	svc	2
}
   173a4:	2000      	movs	r0, #0
   173a6:	b003      	add	sp, #12
   173a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   173aa:	f893 3020 	ldrb.w	r3, [r3, #32]
   173ae:	079a      	lsls	r2, r3, #30
   173b0:	d08d      	beq.n	172ce <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   173b2:	4809      	ldr	r0, [pc, #36]	; (173d8 <prepare_cb+0x118>)
   173b4:	4621      	mov	r1, r4
   173b6:	f001 fca9 	bl	18d0c <radio_isr_set>
		radio_disable();
   173ba:	f001 fda9 	bl	18f10 <radio_disable>
		return 0;
   173be:	e7c9      	b.n	17354 <prepare_cb+0x94>
   173c0:	8e89bed6 	.word	0x8e89bed6
   173c4:	00555555 	.word	0x00555555
   173c8:	00016d91 	.word	0x00016d91
   173cc:	00021300 	.word	0x00021300
   173d0:	000209f8 	.word	0x000209f8
   173d4:	0002060c 	.word	0x0002060c
   173d8:	00016a75 	.word	0x00016a75

000173dc <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   173dc:	68c3      	ldr	r3, [r0, #12]
{
   173de:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   173e0:	681e      	ldr	r6, [r3, #0]
{
   173e2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   173e4:	f7f4 fb5c 	bl	baa0 <ticker_ticks_now_get>
   173e8:	4605      	mov	r5, r0
   173ea:	4630      	mov	r0, r6
   173ec:	f7ff fa7a 	bl	168e4 <lll_event_offset_get>
	p->remainder = 0;
   173f0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   173f2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   173f4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   173f8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   173fa:	4620      	mov	r0, r4
}
   173fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   17400:	f7ff bf5e 	b.w	172c0 <prepare_cb>

00017404 <lll_adv_prepare>:
{
   17404:	b510      	push	{r4, lr}
   17406:	b082      	sub	sp, #8
   17408:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1740a:	f7ff fc81 	bl	16d10 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1740e:	2800      	cmp	r0, #0
   17410:	db1a      	blt.n	17448 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   17412:	4a14      	ldr	r2, [pc, #80]	; (17464 <lll_adv_prepare+0x60>)
   17414:	4914      	ldr	r1, [pc, #80]	; (17468 <lll_adv_prepare+0x64>)
   17416:	4815      	ldr	r0, [pc, #84]	; (1746c <lll_adv_prepare+0x68>)
   17418:	9400      	str	r4, [sp, #0]
   1741a:	2300      	movs	r3, #0
   1741c:	f7f7 fb3e 	bl	ea9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   17420:	b108      	cbz	r0, 17426 <lll_adv_prepare+0x22>
   17422:	3077      	adds	r0, #119	; 0x77
   17424:	d101      	bne.n	1742a <lll_adv_prepare+0x26>
}
   17426:	b002      	add	sp, #8
   17428:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1742a:	4a11      	ldr	r2, [pc, #68]	; (17470 <lll_adv_prepare+0x6c>)
   1742c:	4911      	ldr	r1, [pc, #68]	; (17474 <lll_adv_prepare+0x70>)
   1742e:	4812      	ldr	r0, [pc, #72]	; (17478 <lll_adv_prepare+0x74>)
   17430:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   17434:	f004 ff32 	bl	1c29c <printk>
   17438:	4040      	eors	r0, r0
   1743a:	f380 8811 	msr	BASEPRI, r0
   1743e:	f04f 0003 	mov.w	r0, #3
   17442:	df02      	svc	2
}
   17444:	b002      	add	sp, #8
   17446:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   17448:	4a09      	ldr	r2, [pc, #36]	; (17470 <lll_adv_prepare+0x6c>)
   1744a:	490c      	ldr	r1, [pc, #48]	; (1747c <lll_adv_prepare+0x78>)
   1744c:	480a      	ldr	r0, [pc, #40]	; (17478 <lll_adv_prepare+0x74>)
   1744e:	f240 13e5 	movw	r3, #485	; 0x1e5
   17452:	f004 ff23 	bl	1c29c <printk>
   17456:	4040      	eors	r0, r0
   17458:	f380 8811 	msr	BASEPRI, r0
   1745c:	f04f 0003 	mov.w	r0, #3
   17460:	df02      	svc	2
   17462:	e7d6      	b.n	17412 <lll_adv_prepare+0xe>
   17464:	000172c1 	.word	0x000172c1
   17468:	00016ecd 	.word	0x00016ecd
   1746c:	00016e5d 	.word	0x00016e5d
   17470:	00021300 	.word	0x00021300
   17474:	00021374 	.word	0x00021374
   17478:	0002060c 	.word	0x0002060c
   1747c:	00021290 	.word	0x00021290

00017480 <lll_adv_scan_req_check>:
{
   17480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   17484:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   17488:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1748c:	f01c 0f01 	tst.w	ip, #1
{
   17490:	460f      	mov	r7, r1
   17492:	4616      	mov	r6, r2
   17494:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   17496:	d009      	beq.n	174ac <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   17498:	f1b8 0f00 	cmp.w	r8, #0
   1749c:	d016      	beq.n	174cc <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1749e:	783b      	ldrb	r3, [r7, #0]
   174a0:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   174a4:	d019      	beq.n	174da <lll_adv_scan_req_check+0x5a>
{
   174a6:	2000      	movs	r0, #0
}
   174a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174ac:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   174ae:	f811 0b02 	ldrb.w	r0, [r1], #2
   174b2:	9a07      	ldr	r2, [sp, #28]
   174b4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   174b8:	f7fe ff48 	bl	1634c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   174bc:	2800      	cmp	r0, #0
   174be:	d1ee      	bne.n	1749e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   174c0:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   174c2:	07db      	lsls	r3, r3, #31
   174c4:	d5ef      	bpl.n	174a6 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   174c6:	f1b8 0f00 	cmp.w	r8, #0
   174ca:	d1e8      	bne.n	1749e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   174cc:	9b07      	ldr	r3, [sp, #28]
   174ce:	7818      	ldrb	r0, [r3, #0]
   174d0:	f7fe fecc 	bl	1626c <ull_filter_lll_irk_whitelisted>
   174d4:	2800      	cmp	r0, #0
   174d6:	d1e2      	bne.n	1749e <lll_adv_scan_req_check+0x1e>
   174d8:	e7e5      	b.n	174a6 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   174da:	2206      	movs	r2, #6
   174dc:	f107 0108 	add.w	r1, r7, #8
   174e0:	4628      	mov	r0, r5
   174e2:	f006 f980 	bl	1d7e6 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   174e6:	fab0 f080 	clz	r0, r0
   174ea:	0940      	lsrs	r0, r0, #5
}
   174ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000174f0 <lll_adv_connect_ind_check>:
{
   174f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174f4:	461f      	mov	r7, r3
	if (tgt_addr) {
   174f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   174f8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   174fc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   17500:	4605      	mov	r5, r0
   17502:	460c      	mov	r4, r1
   17504:	4690      	mov	r8, r2
	if (tgt_addr) {
   17506:	b9fb      	cbnz	r3, 17548 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   17508:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1750a:	079a      	lsls	r2, r3, #30
   1750c:	d507      	bpl.n	1751e <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1750e:	b1a6      	cbz	r6, 1753a <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   17510:	7823      	ldrb	r3, [r4, #0]
   17512:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   17516:	d03a      	beq.n	1758e <lll_adv_connect_ind_check+0x9e>
   17518:	2000      	movs	r0, #0
}
   1751a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1751e:	f811 0b02 	ldrb.w	r0, [r1], #2
   17522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17524:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17528:	f7fe ff10 	bl	1634c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1752c:	2800      	cmp	r0, #0
   1752e:	d1ef      	bne.n	17510 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   17530:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   17532:	079b      	lsls	r3, r3, #30
   17534:	d5f0      	bpl.n	17518 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   17536:	2e00      	cmp	r6, #0
   17538:	d1ea      	bne.n	17510 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1753c:	7818      	ldrb	r0, [r3, #0]
   1753e:	f7fe fe95 	bl	1626c <ull_filter_lll_irk_whitelisted>
   17542:	2800      	cmp	r0, #0
   17544:	d1e4      	bne.n	17510 <lll_adv_connect_ind_check+0x20>
   17546:	e7e7      	b.n	17518 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   17548:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1754a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1754c:	f81a 0b02 	ldrb.w	r0, [sl], #2
   17550:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17554:	4651      	mov	r1, sl
   17556:	f7fe fef9 	bl	1634c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1755a:	2800      	cmp	r0, #0
   1755c:	d0dc      	beq.n	17518 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1755e:	7823      	ldrb	r3, [r4, #0]
   17560:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   17564:	d1d8      	bne.n	17518 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   17566:	4638      	mov	r0, r7
   17568:	2206      	movs	r2, #6
   1756a:	f104 0108 	add.w	r1, r4, #8
   1756e:	f006 f93a 	bl	1d7e6 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   17572:	2800      	cmp	r0, #0
   17574:	d1d0      	bne.n	17518 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   17576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17578:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1757a:	28ff      	cmp	r0, #255	; 0xff
   1757c:	d011      	beq.n	175a2 <lll_adv_connect_ind_check+0xb2>
   1757e:	7aab      	ldrb	r3, [r5, #10]
   17580:	2bff      	cmp	r3, #255	; 0xff
   17582:	d00e      	beq.n	175a2 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   17584:	1ac0      	subs	r0, r0, r3
   17586:	fab0 f080 	clz	r0, r0
   1758a:	0940      	lsrs	r0, r0, #5
   1758c:	e7c5      	b.n	1751a <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1758e:	2206      	movs	r2, #6
   17590:	f104 0108 	add.w	r1, r4, #8
   17594:	4638      	mov	r0, r7
   17596:	f006 f926 	bl	1d7e6 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1759a:	fab0 f080 	clz	r0, r0
   1759e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   175a0:	e7bb      	b.n	1751a <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   175a2:	7823      	ldrb	r3, [r4, #0]
   175a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   175a8:	454b      	cmp	r3, r9
   175aa:	d1b5      	bne.n	17518 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   175ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   175ae:	2206      	movs	r2, #6
   175b0:	4651      	mov	r1, sl
   175b2:	f006 f918 	bl	1d7e6 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   175b6:	fab0 f080 	clz	r0, r0
   175ba:	0940      	lsrs	r0, r0, #5
   175bc:	e7ad      	b.n	1751a <lll_adv_connect_ind_check+0x2a>
   175be:	bf00      	nop

000175c0 <isr_rx>:
{
   175c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   175c4:	b089      	sub	sp, #36	; 0x24
   175c6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   175c8:	f001 fccc 	bl	18f64 <radio_is_done>
	if (trx_done) {
   175cc:	b2c0      	uxtb	r0, r0
   175ce:	b950      	cbnz	r0, 175e6 <isr_rx+0x26>
	lll_isr_status_reset();
   175d0:	f7ff f9fa 	bl	169c8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   175d4:	4874      	ldr	r0, [pc, #464]	; (177a8 <isr_rx+0x1e8>)
   175d6:	4621      	mov	r1, r4
   175d8:	f001 fb98 	bl	18d0c <radio_isr_set>
}
   175dc:	b009      	add	sp, #36	; 0x24
   175de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   175e2:	f001 bc95 	b.w	18f10 <radio_disable>
		crc_ok = radio_crc_is_valid();
   175e6:	f001 fcdd 	bl	18fa4 <radio_crc_is_valid>
   175ea:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   175ec:	f001 fdf6 	bl	191dc <radio_filter_has_match>
   175f0:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   175f2:	f001 fdfd 	bl	191f0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   175f6:	f002 f813 	bl	19620 <radio_ar_has_match>
   175fa:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   175fc:	f001 fff4 	bl	195e8 <radio_ar_match_get>
	if (crc_ok) {
   17600:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   17602:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   17604:	f001 fdae 	bl	19164 <radio_rssi_is_ready>
	lll_isr_status_reset();
   17608:	f7ff f9de 	bl	169c8 <lll_isr_status_reset>
	if (crc_ok) {
   1760c:	2d00      	cmp	r5, #0
   1760e:	d0e1      	beq.n	175d4 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   17610:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   17614:	d17a      	bne.n	1770c <isr_rx+0x14c>
   17616:	20ff      	movs	r0, #255	; 0xff
   17618:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1761c:	f001 fcd0 	bl	18fc0 <radio_pkt_scratch_get>
   17620:	7b23      	ldrb	r3, [r4, #12]
   17622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   17626:	4680      	mov	r8, r0
   17628:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   1762a:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1762c:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   1762e:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17632:	f005 000f 	and.w	r0, r5, #15
   17636:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   17638:	bf08      	it	eq
   1763a:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1763e:	f898 1000 	ldrb.w	r1, [r8]
   17642:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   17646:	bf18      	it	ne
   17648:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1764c:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1764e:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   17652:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17656:	d060      	beq.n	1771a <isr_rx+0x15a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17658:	2905      	cmp	r1, #5
   1765a:	d1bb      	bne.n	175d4 <isr_rx+0x14>
   1765c:	f898 1001 	ldrb.w	r1, [r8, #1]
   17660:	2922      	cmp	r1, #34	; 0x22
   17662:	d1b7      	bne.n	175d4 <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   17664:	6861      	ldr	r1, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   17666:	2900      	cmp	r1, #0
   17668:	d0b4      	beq.n	175d4 <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   1766a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1766e:	0789      	lsls	r1, r1, #30
   17670:	d4b0      	bmi.n	175d4 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   17672:	f10d 011f 	add.w	r1, sp, #31
   17676:	9103      	str	r1, [sp, #12]
   17678:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1767c:	9500      	str	r5, [sp, #0]
   1767e:	4641      	mov	r1, r8
   17680:	4620      	mov	r0, r4
   17682:	f7ff ff35 	bl	174f0 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   17686:	2800      	cmp	r0, #0
   17688:	d0a4      	beq.n	175d4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1768a:	2004      	movs	r0, #4
   1768c:	f7f7 f8c0 	bl	e810 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   17690:	2800      	cmp	r0, #0
   17692:	d09f      	beq.n	175d4 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   17694:	4845      	ldr	r0, [pc, #276]	; (177ac <isr_rx+0x1ec>)
   17696:	4621      	mov	r1, r4
   17698:	f001 fb38 	bl	18d0c <radio_isr_set>
		radio_disable();
   1769c:	f001 fc38 	bl	18f10 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   176a0:	f001 fc56 	bl	18f50 <radio_is_ready>
   176a4:	2800      	cmp	r0, #0
   176a6:	d153      	bne.n	17750 <isr_rx+0x190>
		lll->conn->slave.initiated = 1;
   176a8:	6862      	ldr	r2, [r4, #4]
   176aa:	f892 3020 	ldrb.w	r3, [r2, #32]
   176ae:	f043 0301 	orr.w	r3, r3, #1
   176b2:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   176b6:	f7f7 f8c9 	bl	e84c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   176ba:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
   176bc:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   176be:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   176c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   176c4:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   176c6:	4641      	mov	r1, r8
   176c8:	2224      	movs	r2, #36	; 0x24
   176ca:	301c      	adds	r0, #28
   176cc:	f006 f89c 	bl	1d808 <memcpy>
		ftr->param = lll;
   176d0:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   176d2:	f001 fe63 	bl	1939c <radio_tmr_start_get>
   176d6:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   176d8:	f001 feb4 	bl	19444 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   176dc:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   176de:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   176e0:	4608      	mov	r0, r1
   176e2:	f001 fbff 	bl	18ee4 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   176e6:	1a24      	subs	r4, r4, r0
   176e8:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   176ea:	b1a6      	cbz	r6, 17716 <isr_rx+0x156>
   176ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
   176f0:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   176f2:	f7f7 f8ab 	bl	e84c <ull_pdu_rx_alloc>
   176f6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   176f8:	4629      	mov	r1, r5
   176fa:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   176fc:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   176fe:	f7f7 f8bb 	bl	e878 <ull_rx_put>
		ull_rx_sched();
   17702:	f7f7 f8c9 	bl	e898 <ull_rx_sched>
}
   17706:	b009      	add	sp, #36	; 0x24
   17708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1770c:	fa5f f088 	uxtb.w	r0, r8
   17710:	f7fe fd5a 	bl	161c8 <ull_filter_lll_rl_irk_idx>
   17714:	e780      	b.n	17618 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   17716:	23ff      	movs	r3, #255	; 0xff
   17718:	e7ea      	b.n	176f0 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1771a:	f898 1001 	ldrb.w	r1, [r8, #1]
   1771e:	290c      	cmp	r1, #12
   17720:	f47f af58 	bne.w	175d4 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   17724:	f1b9 0f00 	cmp.w	r9, #0
   17728:	f47f af54 	bne.w	175d4 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1772c:	f10d 011f 	add.w	r1, sp, #31
   17730:	9101      	str	r1, [sp, #4]
   17732:	9700      	str	r7, [sp, #0]
   17734:	4641      	mov	r1, r8
   17736:	4620      	mov	r0, r4
   17738:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1773c:	f7ff fea0 	bl	17480 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   17740:	b9a0      	cbnz	r0, 1776c <isr_rx+0x1ac>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17742:	f898 1000 	ldrb.w	r1, [r8]
   17746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1774a:	f001 010f 	and.w	r1, r1, #15
   1774e:	e783      	b.n	17658 <isr_rx+0x98>
		LL_ASSERT(!radio_is_ready());
   17750:	4a17      	ldr	r2, [pc, #92]	; (177b0 <isr_rx+0x1f0>)
   17752:	4918      	ldr	r1, [pc, #96]	; (177b4 <isr_rx+0x1f4>)
   17754:	4818      	ldr	r0, [pc, #96]	; (177b8 <isr_rx+0x1f8>)
   17756:	f240 5345 	movw	r3, #1349	; 0x545
   1775a:	f004 fd9f 	bl	1c29c <printk>
   1775e:	4040      	eors	r0, r0
   17760:	f380 8811 	msr	BASEPRI, r0
   17764:	f04f 0003 	mov.w	r0, #3
   17768:	df02      	svc	2
   1776a:	e79d      	b.n	176a8 <isr_rx+0xe8>
		radio_isr_set(isr_done, lll);
   1776c:	4621      	mov	r1, r4
   1776e:	480e      	ldr	r0, [pc, #56]	; (177a8 <isr_rx+0x1e8>)
   17770:	f001 facc 	bl	18d0c <radio_isr_set>
		radio_switch_complete_and_disable();
   17774:	f001 fcd0 	bl	19118 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   17778:	7e23      	ldrb	r3, [r4, #24]
   1777a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1777e:	69e0      	ldr	r0, [r4, #28]
   17780:	f001 fba4 	bl	18ecc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17784:	f001 fbe4 	bl	18f50 <radio_is_ready>
   17788:	2800      	cmp	r0, #0
   1778a:	d0bc      	beq.n	17706 <isr_rx+0x146>
   1778c:	4a08      	ldr	r2, [pc, #32]	; (177b0 <isr_rx+0x1f0>)
   1778e:	4909      	ldr	r1, [pc, #36]	; (177b4 <isr_rx+0x1f4>)
   17790:	4809      	ldr	r0, [pc, #36]	; (177b8 <isr_rx+0x1f8>)
   17792:	f240 43fe 	movw	r3, #1278	; 0x4fe
   17796:	f004 fd81 	bl	1c29c <printk>
   1779a:	4040      	eors	r0, r0
   1779c:	f380 8811 	msr	BASEPRI, r0
   177a0:	f04f 0003 	mov.w	r0, #3
   177a4:	df02      	svc	2
		if (!err) {
   177a6:	e7ae      	b.n	17706 <isr_rx+0x146>
   177a8:	00017271 	.word	0x00017271
   177ac:	00016d91 	.word	0x00016d91
   177b0:	00021300 	.word	0x00021300
   177b4:	0002134c 	.word	0x0002134c
   177b8:	0002060c 	.word	0x0002060c

000177bc <ticker_stop_cb>:
{
   177bc:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   177be:	9902      	ldr	r1, [sp, #8]
   177c0:	4803      	ldr	r0, [pc, #12]	; (177d0 <ticker_stop_cb+0x14>)
   177c2:	f001 faa3 	bl	18d0c <radio_isr_set>
}
   177c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   177ca:	f001 bba1 	b.w	18f10 <radio_disable>
   177ce:	bf00      	nop
   177d0:	00017a2d 	.word	0x00017a2d

000177d4 <prepare_cb>:
{
   177d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   177d6:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   177d8:	f994 3016 	ldrsb.w	r3, [r4, #22]
   177dc:	2b00      	cmp	r3, #0
{
   177de:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll->is_stop ||
   177e0:	f2c0 80fe 	blt.w	179e0 <prepare_cb+0x20c>
   177e4:	6863      	ldr	r3, [r4, #4]
   177e6:	4605      	mov	r5, r0
   177e8:	2b00      	cmp	r3, #0
   177ea:	f040 80ee 	bne.w	179ca <prepare_cb+0x1f6>
	lll->state = 0U;
   177ee:	7da3      	ldrb	r3, [r4, #22]
   177f0:	f36f 0300 	bfc	r3, #0, #1
   177f4:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   177f6:	f001 facb 	bl	18d90 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   177fa:	2000      	movs	r0, #0
   177fc:	f001 fafc 	bl	18df8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   17800:	2100      	movs	r1, #0
   17802:	4608      	mov	r0, r1
   17804:	f001 fae8 	bl	18dd8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   17808:	2200      	movs	r2, #0
   1780a:	2125      	movs	r1, #37	; 0x25
   1780c:	2008      	movs	r0, #8
   1780e:	f001 fb29 	bl	18e64 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17812:	2001      	movs	r0, #1
   17814:	f7f6 fffc 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17818:	4606      	mov	r6, r0
   1781a:	2800      	cmp	r0, #0
   1781c:	f000 80c8 	beq.w	179b0 <prepare_cb+0x1dc>
	radio_pkt_rx_set(node_rx->pdu);
   17820:	f106 001c 	add.w	r0, r6, #28
   17824:	f001 fb4c 	bl	18ec0 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17828:	4b72      	ldr	r3, [pc, #456]	; (179f4 <prepare_cb+0x220>)
   1782a:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1782c:	a80b      	add	r0, sp, #44	; 0x2c
   1782e:	f001 fb01 	bl	18e34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   17832:	4971      	ldr	r1, [pc, #452]	; (179f8 <prepare_cb+0x224>)
   17834:	f240 605b 	movw	r0, #1627	; 0x65b
   17838:	f001 fba8 	bl	18f8c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1783c:	7da0      	ldrb	r0, [r4, #22]
   1783e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   17842:	3025      	adds	r0, #37	; 0x25
   17844:	f7ff f868 	bl	16918 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   17848:	4621      	mov	r1, r4
   1784a:	486c      	ldr	r0, [pc, #432]	; (179fc <prepare_cb+0x228>)
   1784c:	f001 fa5e 	bl	18d0c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17850:	2096      	movs	r0, #150	; 0x96
   17852:	f001 fce3 	bl	1921c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   17856:	2300      	movs	r3, #0
   17858:	461a      	mov	r2, r3
   1785a:	4619      	mov	r1, r3
   1785c:	4618      	mov	r0, r3
   1785e:	f001 fbfb 	bl	19058 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   17862:	f7fe fdcf 	bl	16404 <ull_filter_lll_rl_enabled>
   17866:	2800      	cmp	r0, #0
   17868:	d13d      	bne.n	178e6 <prepare_cb+0x112>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1786a:	7da3      	ldrb	r3, [r4, #22]
   1786c:	f013 0f18 	tst.w	r3, #24
   17870:	f040 8082 	bne.w	17978 <prepare_cb+0x1a4>
	ull = HDR_LLL2ULL(lll);
   17874:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   17876:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   17878:	4638      	mov	r0, r7
   1787a:	f7ff f833 	bl	168e4 <lll_event_offset_get>
   1787e:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   17880:	686a      	ldr	r2, [r5, #4]
   17882:	f106 0109 	add.w	r1, r6, #9
   17886:	2000      	movs	r0, #0
   17888:	f001 fcd4 	bl	19234 <radio_tmr_start>
	radio_tmr_end_capture();
   1788c:	f001 fdd2 	bl	19434 <radio_tmr_end_capture>
	radio_rssi_measure();
   17890:	f001 fc50 	bl	19134 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   17894:	4620      	mov	r0, r4
   17896:	f7f7 feb7 	bl	f608 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1789a:	1d01      	adds	r1, r0, #4
   1789c:	b2c9      	uxtb	r1, r1
   1789e:	4638      	mov	r0, r7
   178a0:	4632      	mov	r2, r6
   178a2:	f7ff f829 	bl	168f8 <lll_preempt_calc>
   178a6:	4601      	mov	r1, r0
   178a8:	b9a0      	cbnz	r0, 178d4 <prepare_cb+0x100>
		if (lll->ticks_window) {
   178aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   178ac:	bb93      	cbnz	r3, 17914 <prepare_cb+0x140>
		if (lll->conn) {
   178ae:	6863      	ldr	r3, [r4, #4]
   178b0:	b143      	cbz	r3, 178c4 <prepare_cb+0xf0>
			mfy_after_mstr_offset_get.param = p;
   178b2:	4b53      	ldr	r3, [pc, #332]	; (17a00 <prepare_cb+0x22c>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   178b4:	2201      	movs	r2, #1
   178b6:	2102      	movs	r1, #2
   178b8:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   178ba:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   178bc:	f7f2 fde8 	bl	a490 <mayfly_enqueue>
			LL_ASSERT(!retval);
   178c0:	2800      	cmp	r0, #0
   178c2:	d162      	bne.n	1798a <prepare_cb+0x1b6>
		ret = lll_prepare_done(lll);
   178c4:	4620      	mov	r0, r4
   178c6:	f7fe ffad 	bl	16824 <lll_prepare_done>
		LL_ASSERT(!ret);
   178ca:	2800      	cmp	r0, #0
   178cc:	d144      	bne.n	17958 <prepare_cb+0x184>
}
   178ce:	2000      	movs	r0, #0
   178d0:	b00d      	add	sp, #52	; 0x34
   178d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   178d4:	484b      	ldr	r0, [pc, #300]	; (17a04 <prepare_cb+0x230>)
   178d6:	4621      	mov	r1, r4
   178d8:	f001 fa18 	bl	18d0c <radio_isr_set>
		radio_disable();
   178dc:	f001 fb18 	bl	18f10 <radio_disable>
}
   178e0:	2000      	movs	r0, #0
   178e2:	b00d      	add	sp, #52	; 0x34
   178e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   178e6:	7da0      	ldrb	r0, [r4, #22]
   178e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   178ec:	f7fe fcee 	bl	162cc <ull_filter_lll_get>
   178f0:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   178f2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   178f6:	f7fe fbf3 	bl	160e0 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   178fa:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   178fc:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   178fe:	1cb2      	adds	r2, r6, #2
   17900:	7830      	ldrb	r0, [r6, #0]
   17902:	f001 fc39 	bl	19178 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   17906:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1790a:	2200      	movs	r2, #0
   1790c:	4639      	mov	r1, r7
   1790e:	f001 fe37 	bl	19580 <radio_ar_configure>
   17912:	e7af      	b.n	17874 <prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17914:	4a3c      	ldr	r2, [pc, #240]	; (17a08 <prepare_cb+0x234>)
   17916:	9207      	str	r2, [sp, #28]
   17918:	4a3c      	ldr	r2, [pc, #240]	; (17a0c <prepare_cb+0x238>)
   1791a:	9205      	str	r2, [sp, #20]
   1791c:	f44f 72af 	mov.w	r2, #350	; 0x15e
   17920:	9300      	str	r3, [sp, #0]
   17922:	9208      	str	r2, [sp, #32]
   17924:	4633      	mov	r3, r6
   17926:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1792a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1792e:	9406      	str	r4, [sp, #24]
   17930:	2203      	movs	r2, #3
   17932:	f7f3 ff8b 	bl	b84c <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17936:	f030 0302 	bics.w	r3, r0, #2
   1793a:	d0b8      	beq.n	178ae <prepare_cb+0xda>
   1793c:	4a34      	ldr	r2, [pc, #208]	; (17a10 <prepare_cb+0x23c>)
   1793e:	4935      	ldr	r1, [pc, #212]	; (17a14 <prepare_cb+0x240>)
   17940:	4835      	ldr	r0, [pc, #212]	; (17a18 <prepare_cb+0x244>)
   17942:	f240 135f 	movw	r3, #351	; 0x15f
   17946:	f004 fca9 	bl	1c29c <printk>
   1794a:	4040      	eors	r0, r0
   1794c:	f380 8811 	msr	BASEPRI, r0
   17950:	f04f 0003 	mov.w	r0, #3
   17954:	df02      	svc	2
   17956:	e7aa      	b.n	178ae <prepare_cb+0xda>
		LL_ASSERT(!ret);
   17958:	4a2d      	ldr	r2, [pc, #180]	; (17a10 <prepare_cb+0x23c>)
   1795a:	4930      	ldr	r1, [pc, #192]	; (17a1c <prepare_cb+0x248>)
   1795c:	482e      	ldr	r0, [pc, #184]	; (17a18 <prepare_cb+0x244>)
   1795e:	f44f 73bc 	mov.w	r3, #376	; 0x178
   17962:	f004 fc9b 	bl	1c29c <printk>
   17966:	4040      	eors	r0, r0
   17968:	f380 8811 	msr	BASEPRI, r0
   1796c:	f04f 0003 	mov.w	r0, #3
   17970:	df02      	svc	2
}
   17972:	2000      	movs	r0, #0
   17974:	b00d      	add	sp, #52	; 0x34
   17976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   17978:	2001      	movs	r0, #1
   1797a:	f7fe fca7 	bl	162cc <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1797e:	7841      	ldrb	r1, [r0, #1]
   17980:	1c82      	adds	r2, r0, #2
   17982:	7800      	ldrb	r0, [r0, #0]
   17984:	f001 fbf8 	bl	19178 <radio_filter_configure>
   17988:	e774      	b.n	17874 <prepare_cb+0xa0>
			LL_ASSERT(!retval);
   1798a:	4a21      	ldr	r2, [pc, #132]	; (17a10 <prepare_cb+0x23c>)
   1798c:	4924      	ldr	r1, [pc, #144]	; (17a20 <prepare_cb+0x24c>)
   1798e:	4822      	ldr	r0, [pc, #136]	; (17a18 <prepare_cb+0x244>)
   17990:	f240 1373 	movw	r3, #371	; 0x173
   17994:	f004 fc82 	bl	1c29c <printk>
   17998:	4040      	eors	r0, r0
   1799a:	f380 8811 	msr	BASEPRI, r0
   1799e:	f04f 0003 	mov.w	r0, #3
   179a2:	df02      	svc	2
		ret = lll_prepare_done(lll);
   179a4:	4620      	mov	r0, r4
   179a6:	f7fe ff3d 	bl	16824 <lll_prepare_done>
		LL_ASSERT(!ret);
   179aa:	2800      	cmp	r0, #0
   179ac:	d08f      	beq.n	178ce <prepare_cb+0xfa>
   179ae:	e7d3      	b.n	17958 <prepare_cb+0x184>
	LL_ASSERT(node_rx);
   179b0:	4a17      	ldr	r2, [pc, #92]	; (17a10 <prepare_cb+0x23c>)
   179b2:	491c      	ldr	r1, [pc, #112]	; (17a24 <prepare_cb+0x250>)
   179b4:	4818      	ldr	r0, [pc, #96]	; (17a18 <prepare_cb+0x244>)
   179b6:	23fe      	movs	r3, #254	; 0xfe
   179b8:	f004 fc70 	bl	1c29c <printk>
   179bc:	4040      	eors	r0, r0
   179be:	f380 8811 	msr	BASEPRI, r0
   179c2:	f04f 0003 	mov.w	r0, #3
   179c6:	df02      	svc	2
   179c8:	e72a      	b.n	17820 <prepare_cb+0x4c>
	if (unlikely(lll->is_stop ||
   179ca:	6863      	ldr	r3, [r4, #4]
   179cc:	f893 3020 	ldrb.w	r3, [r3, #32]
   179d0:	07da      	lsls	r2, r3, #31
   179d2:	d405      	bmi.n	179e0 <prepare_cb+0x20c>
   179d4:	6863      	ldr	r3, [r4, #4]
   179d6:	f893 3020 	ldrb.w	r3, [r3, #32]
   179da:	079b      	lsls	r3, r3, #30
   179dc:	f57f af07 	bpl.w	177ee <prepare_cb+0x1a>
		radio_isr_set(lll_isr_early_abort, lll);
   179e0:	4811      	ldr	r0, [pc, #68]	; (17a28 <prepare_cb+0x254>)
   179e2:	4621      	mov	r1, r4
   179e4:	f001 f992 	bl	18d0c <radio_isr_set>
		radio_disable();
   179e8:	f001 fa92 	bl	18f10 <radio_disable>
}
   179ec:	2000      	movs	r0, #0
   179ee:	b00d      	add	sp, #52	; 0x34
   179f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179f2:	bf00      	nop
   179f4:	8e89bed6 	.word	0x8e89bed6
   179f8:	00555555 	.word	0x00555555
   179fc:	00002189 	.word	0x00002189
   17a00:	2000051c 	.word	0x2000051c
   17a04:	00017cf1 	.word	0x00017cf1
   17a08:	00017c09 	.word	0x00017c09
   17a0c:	000177bd 	.word	0x000177bd
   17a10:	00021398 	.word	0x00021398
   17a14:	00020ae4 	.word	0x00020ae4
   17a18:	0002060c 	.word	0x0002060c
   17a1c:	000209f8 	.word	0x000209f8
   17a20:	0002092c 	.word	0x0002092c
   17a24:	000213e4 	.word	0x000213e4
   17a28:	00016a75 	.word	0x00016a75

00017a2c <isr_done_cleanup>:
{
   17a2c:	b538      	push	{r3, r4, r5, lr}
   17a2e:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   17a30:	f7fe ff4c 	bl	168cc <lll_is_done>
   17a34:	b100      	cbz	r0, 17a38 <isr_done_cleanup+0xc>
}
   17a36:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   17a38:	4605      	mov	r5, r0
   17a3a:	f001 fbbd 	bl	191b8 <radio_filter_disable>
	if (++lll->chan == 3U) {
   17a3e:	7da2      	ldrb	r2, [r4, #22]
   17a40:	f3c2 0341 	ubfx	r3, r2, #1, #2
   17a44:	3301      	adds	r3, #1
   17a46:	f003 0303 	and.w	r3, r3, #3
   17a4a:	2b03      	cmp	r3, #3
   17a4c:	bf14      	ite	ne
   17a4e:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   17a52:	f365 0242 	bfieq	r2, r5, #1, #2
   17a56:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   17a58:	4620      	mov	r0, r4
}
   17a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   17a5e:	f7fe bfc1 	b.w	169e4 <lll_isr_cleanup>
   17a62:	bf00      	nop

00017a64 <isr_common_done>:
{
   17a64:	b530      	push	{r4, r5, lr}
   17a66:	4604      	mov	r4, r0
   17a68:	b083      	sub	sp, #12
	lll_isr_status_reset();
   17a6a:	f7fe ffad 	bl	169c8 <lll_isr_status_reset>
	lll->state = 0U;
   17a6e:	7da3      	ldrb	r3, [r4, #22]
   17a70:	f36f 0300 	bfc	r3, #0, #1
	radio_tmr_tifs_set(EVENT_IFS_US);
   17a74:	2096      	movs	r0, #150	; 0x96
	lll->state = 0U;
   17a76:	75a3      	strb	r3, [r4, #22]
	radio_tmr_tifs_set(EVENT_IFS_US);
   17a78:	f001 fbd0 	bl	1921c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   17a7c:	2300      	movs	r3, #0
   17a7e:	4618      	mov	r0, r3
   17a80:	461a      	mov	r2, r3
   17a82:	4619      	mov	r1, r3
   17a84:	f001 fae8 	bl	19058 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17a88:	2001      	movs	r0, #1
   17a8a:	f7f6 fec1 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17a8e:	4605      	mov	r5, r0
   17a90:	b1d0      	cbz	r0, 17ac8 <isr_common_done+0x64>
	radio_pkt_rx_set(node_rx->pdu);
   17a92:	f105 001c 	add.w	r0, r5, #28
   17a96:	f001 fa13 	bl	18ec0 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   17a9a:	f7fe fcb3 	bl	16404 <ull_filter_lll_rl_enabled>
   17a9e:	b940      	cbnz	r0, 17ab2 <isr_common_done+0x4e>
	radio_rssi_measure();
   17aa0:	f001 fb48 	bl	19134 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   17aa4:	480f      	ldr	r0, [pc, #60]	; (17ae4 <isr_common_done+0x80>)
   17aa6:	4621      	mov	r1, r4
}
   17aa8:	b003      	add	sp, #12
   17aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   17aae:	f001 b92d 	b.w	18d0c <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17ab2:	f10d 0007 	add.w	r0, sp, #7
   17ab6:	f7fe fb13 	bl	160e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17aba:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17abc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17abe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17ac2:	f001 fd5d 	bl	19580 <radio_ar_configure>
   17ac6:	e7eb      	b.n	17aa0 <isr_common_done+0x3c>
	LL_ASSERT(node_rx);
   17ac8:	4a07      	ldr	r2, [pc, #28]	; (17ae8 <isr_common_done+0x84>)
   17aca:	4908      	ldr	r1, [pc, #32]	; (17aec <isr_common_done+0x88>)
   17acc:	4808      	ldr	r0, [pc, #32]	; (17af0 <isr_common_done+0x8c>)
   17ace:	f240 2383 	movw	r3, #643	; 0x283
   17ad2:	f004 fbe3 	bl	1c29c <printk>
   17ad6:	4040      	eors	r0, r0
   17ad8:	f380 8811 	msr	BASEPRI, r0
   17adc:	f04f 0003 	mov.w	r0, #3
   17ae0:	df02      	svc	2
   17ae2:	e7d6      	b.n	17a92 <isr_common_done+0x2e>
   17ae4:	00002189 	.word	0x00002189
   17ae8:	00021398 	.word	0x00021398
   17aec:	000213e4 	.word	0x000213e4
   17af0:	0002060c 	.word	0x0002060c

00017af4 <isr_done>:
{
   17af4:	b508      	push	{r3, lr}
	isr_common_done(param);
   17af6:	f7ff ffb5 	bl	17a64 <isr_common_done>
	radio_rx_enable();
   17afa:	f001 f9fd 	bl	18ef8 <radio_rx_enable>
}
   17afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   17b02:	f001 bc97 	b.w	19434 <radio_tmr_end_capture>
   17b06:	bf00      	nop

00017b08 <isr_tx>:
{
   17b08:	b570      	push	{r4, r5, r6, lr}
   17b0a:	b082      	sub	sp, #8
   17b0c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   17b0e:	f7fe ff49 	bl	169a4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17b12:	2096      	movs	r0, #150	; 0x96
   17b14:	f001 fb82 	bl	1921c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   17b18:	2300      	movs	r3, #0
   17b1a:	4618      	mov	r0, r3
   17b1c:	461a      	mov	r2, r3
   17b1e:	4619      	mov	r1, r3
   17b20:	f001 fa9a 	bl	19058 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17b24:	2001      	movs	r0, #1
   17b26:	f7f6 fe73 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17b2a:	4604      	mov	r4, r0
   17b2c:	2800      	cmp	r0, #0
   17b2e:	d03f      	beq.n	17bb0 <isr_tx+0xa8>
	radio_pkt_rx_set(node_rx->pdu);
   17b30:	f104 001c 	add.w	r0, r4, #28
   17b34:	f001 f9c4 	bl	18ec0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   17b38:	f001 fa0a 	bl	18f50 <radio_is_ready>
   17b3c:	b9e0      	cbnz	r0, 17b78 <isr_tx+0x70>
	if (ull_filter_lll_rl_enabled()) {
   17b3e:	f7fe fc61 	bl	16404 <ull_filter_lll_rl_enabled>
   17b42:	bb50      	cbnz	r0, 17b9a <isr_tx+0x92>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17b44:	f001 fc84 	bl	19450 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   17b48:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17b4a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   17b4c:	4608      	mov	r0, r1
   17b4e:	f001 f9cd 	bl	18eec <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   17b52:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   17b54:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   17b56:	4608      	mov	r0, r1
   17b58:	f001 f9c4 	bl	18ee4 <radio_tx_chain_delay_get>
   17b5c:	4434      	add	r4, r6
   17b5e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   17b60:	1a20      	subs	r0, r4, r0
   17b62:	f001 fc2d 	bl	193c0 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   17b66:	f001 fae5 	bl	19134 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   17b6a:	4818      	ldr	r0, [pc, #96]	; (17bcc <isr_tx+0xc4>)
   17b6c:	4629      	mov	r1, r5
}
   17b6e:	b002      	add	sp, #8
   17b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   17b74:	f001 b8ca 	b.w	18d0c <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   17b78:	4a15      	ldr	r2, [pc, #84]	; (17bd0 <isr_tx+0xc8>)
   17b7a:	4916      	ldr	r1, [pc, #88]	; (17bd4 <isr_tx+0xcc>)
   17b7c:	4816      	ldr	r0, [pc, #88]	; (17bd8 <isr_tx+0xd0>)
   17b7e:	f44f 7313 	mov.w	r3, #588	; 0x24c
   17b82:	f004 fb8b 	bl	1c29c <printk>
   17b86:	4040      	eors	r0, r0
   17b88:	f380 8811 	msr	BASEPRI, r0
   17b8c:	f04f 0003 	mov.w	r0, #3
   17b90:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   17b92:	f7fe fc37 	bl	16404 <ull_filter_lll_rl_enabled>
   17b96:	2800      	cmp	r0, #0
   17b98:	d0d4      	beq.n	17b44 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17b9a:	f10d 0007 	add.w	r0, sp, #7
   17b9e:	f7fe fa9f 	bl	160e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17ba2:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17ba4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17ba6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17baa:	f001 fce9 	bl	19580 <radio_ar_configure>
   17bae:	e7c9      	b.n	17b44 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   17bb0:	4a07      	ldr	r2, [pc, #28]	; (17bd0 <isr_tx+0xc8>)
   17bb2:	490a      	ldr	r1, [pc, #40]	; (17bdc <isr_tx+0xd4>)
   17bb4:	4808      	ldr	r0, [pc, #32]	; (17bd8 <isr_tx+0xd0>)
   17bb6:	f44f 7312 	mov.w	r3, #584	; 0x248
   17bba:	f004 fb6f 	bl	1c29c <printk>
   17bbe:	4040      	eors	r0, r0
   17bc0:	f380 8811 	msr	BASEPRI, r0
   17bc4:	f04f 0003 	mov.w	r0, #3
   17bc8:	df02      	svc	2
   17bca:	e7b1      	b.n	17b30 <isr_tx+0x28>
   17bcc:	00002189 	.word	0x00002189
   17bd0:	00021398 	.word	0x00021398
   17bd4:	0002134c 	.word	0x0002134c
   17bd8:	0002060c 	.word	0x0002060c
   17bdc:	000213e4 	.word	0x000213e4

00017be0 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   17be0:	68c3      	ldr	r3, [r0, #12]
{
   17be2:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   17be4:	681e      	ldr	r6, [r3, #0]
{
   17be6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   17be8:	f7f3 ff5a 	bl	baa0 <ticker_ticks_now_get>
   17bec:	4605      	mov	r5, r0
   17bee:	4630      	mov	r0, r6
   17bf0:	f7fe fe78 	bl	168e4 <lll_event_offset_get>
	p->remainder = 0;
   17bf4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   17bf6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   17bf8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   17bfc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   17bfe:	4620      	mov	r0, r4
}
   17c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   17c04:	f7ff bde6 	b.w	177d4 <prepare_cb>

00017c08 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c08:	b900      	cbnz	r0, 17c0c <ticker_op_start_cb+0x4>
   17c0a:	4770      	bx	lr
{
   17c0c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c0e:	4a07      	ldr	r2, [pc, #28]	; (17c2c <ticker_op_start_cb+0x24>)
   17c10:	4907      	ldr	r1, [pc, #28]	; (17c30 <ticker_op_start_cb+0x28>)
   17c12:	4808      	ldr	r0, [pc, #32]	; (17c34 <ticker_op_start_cb+0x2c>)
   17c14:	f240 13e1 	movw	r3, #481	; 0x1e1
   17c18:	f004 fb40 	bl	1c29c <printk>
   17c1c:	4040      	eors	r0, r0
   17c1e:	f380 8811 	msr	BASEPRI, r0
   17c22:	f04f 0003 	mov.w	r0, #3
   17c26:	df02      	svc	2
}
   17c28:	bd08      	pop	{r3, pc}
   17c2a:	bf00      	nop
   17c2c:	00021398 	.word	0x00021398
   17c30:	00020c58 	.word	0x00020c58
   17c34:	0002060c 	.word	0x0002060c

00017c38 <is_abort_cb>:
	if (next != curr) {
   17c38:	4281      	cmp	r1, r0
{
   17c3a:	b508      	push	{r3, lr}
	if (next != curr) {
   17c3c:	d106      	bne.n	17c4c <is_abort_cb+0x14>
		radio_isr_set(isr_window, lll);
   17c3e:	4810      	ldr	r0, [pc, #64]	; (17c80 <is_abort_cb+0x48>)
   17c40:	f001 f864 	bl	18d0c <radio_isr_set>
	radio_disable();
   17c44:	f001 f964 	bl	18f10 <radio_disable>
	return 0;
   17c48:	2000      	movs	r0, #0
}
   17c4a:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   17c4c:	4b0d      	ldr	r3, [pc, #52]	; (17c84 <is_abort_cb+0x4c>)
   17c4e:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   17c50:	f7ff f85e 	bl	16d10 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   17c54:	2800      	cmp	r0, #0
   17c56:	db02      	blt.n	17c5e <is_abort_cb+0x26>
   17c58:	f06f 000a 	mvn.w	r0, #10
}
   17c5c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   17c5e:	4a0a      	ldr	r2, [pc, #40]	; (17c88 <is_abort_cb+0x50>)
   17c60:	490a      	ldr	r1, [pc, #40]	; (17c8c <is_abort_cb+0x54>)
   17c62:	480b      	ldr	r0, [pc, #44]	; (17c90 <is_abort_cb+0x58>)
   17c64:	f240 139d 	movw	r3, #413	; 0x19d
   17c68:	f004 fb18 	bl	1c29c <printk>
   17c6c:	4040      	eors	r0, r0
   17c6e:	f380 8811 	msr	BASEPRI, r0
   17c72:	f04f 0003 	mov.w	r0, #3
   17c76:	df02      	svc	2
   17c78:	f06f 000a 	mvn.w	r0, #10
}
   17c7c:	bd08      	pop	{r3, pc}
   17c7e:	bf00      	nop
   17c80:	000020e9 	.word	0x000020e9
   17c84:	00017be1 	.word	0x00017be1
   17c88:	00021398 	.word	0x00021398
   17c8c:	00021290 	.word	0x00021290
   17c90:	0002060c 	.word	0x0002060c

00017c94 <abort_cb>:
{
   17c94:	b510      	push	{r4, lr}
	if (!prepare_param) {
   17c96:	b1d8      	cbz	r0, 17cd0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   17c98:	460c      	mov	r4, r1
   17c9a:	f7ff f851 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17c9e:	2800      	cmp	r0, #0
   17ca0:	db04      	blt.n	17cac <abort_cb+0x18>
	lll_done(param);
   17ca2:	4620      	mov	r0, r4
}
   17ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17ca8:	f7fe bdbe 	b.w	16828 <lll_done>
	LL_ASSERT(err >= 0);
   17cac:	4a0c      	ldr	r2, [pc, #48]	; (17ce0 <abort_cb+0x4c>)
   17cae:	490d      	ldr	r1, [pc, #52]	; (17ce4 <abort_cb+0x50>)
   17cb0:	480d      	ldr	r0, [pc, #52]	; (17ce8 <abort_cb+0x54>)
   17cb2:	f240 13d1 	movw	r3, #465	; 0x1d1
   17cb6:	f004 faf1 	bl	1c29c <printk>
   17cba:	4040      	eors	r0, r0
   17cbc:	f380 8811 	msr	BASEPRI, r0
   17cc0:	f04f 0003 	mov.w	r0, #3
   17cc4:	df02      	svc	2
	lll_done(param);
   17cc6:	4620      	mov	r0, r4
}
   17cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17ccc:	f7fe bdac 	b.w	16828 <lll_done>
			radio_isr_set(isr_abort, param);
   17cd0:	4806      	ldr	r0, [pc, #24]	; (17cec <abort_cb+0x58>)
   17cd2:	f001 f81b 	bl	18d0c <radio_isr_set>
}
   17cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   17cda:	f001 b919 	b.w	18f10 <radio_disable>
   17cde:	bf00      	nop
   17ce0:	00021398 	.word	0x00021398
   17ce4:	00021290 	.word	0x00021290
   17ce8:	0002060c 	.word	0x0002060c
   17cec:	00017cf1 	.word	0x00017cf1

00017cf0 <isr_abort>:
{
   17cf0:	b530      	push	{r4, r5, lr}
   17cf2:	b083      	sub	sp, #12
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   17cf4:	2500      	movs	r5, #0
{
   17cf6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   17cf8:	f7fe fe66 	bl	169c8 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   17cfc:	462b      	mov	r3, r5
   17cfe:	2203      	movs	r2, #3
   17d00:	4629      	mov	r1, r5
   17d02:	9500      	str	r5, [sp, #0]
   17d04:	4628      	mov	r0, r5
   17d06:	f7f3 fe2b 	bl	b960 <ticker_stop>
	radio_disable();
   17d0a:	f001 f901 	bl	18f10 <radio_disable>
	radio_filter_disable();
   17d0e:	f001 fa53 	bl	191b8 <radio_filter_disable>
	if (++lll->chan == 3U) {
   17d12:	7da0      	ldrb	r0, [r4, #22]
   17d14:	f3c0 0241 	ubfx	r2, r0, #1, #2
   17d18:	3201      	adds	r2, #1
   17d1a:	f002 0203 	and.w	r2, r2, #3
   17d1e:	2a03      	cmp	r2, #3
   17d20:	bf14      	ite	ne
   17d22:	f362 0042 	bfine	r0, r2, #1, #2
		lll->chan = 0U;
   17d26:	f365 0042 	bfieq	r0, r5, #1, #2
   17d2a:	75a0      	strb	r0, [r4, #22]
	lll_isr_cleanup(param);
   17d2c:	4620      	mov	r0, r4
}
   17d2e:	b003      	add	sp, #12
   17d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   17d34:	f7fe be56 	b.w	169e4 <lll_isr_cleanup>

00017d38 <lll_scan_init>:
}
   17d38:	2000      	movs	r0, #0
   17d3a:	4770      	bx	lr

00017d3c <lll_scan_reset>:
   17d3c:	2000      	movs	r0, #0
   17d3e:	4770      	bx	lr

00017d40 <lll_scan_prepare>:
{
   17d40:	b510      	push	{r4, lr}
   17d42:	b082      	sub	sp, #8
   17d44:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   17d46:	f7fe ffe3 	bl	16d10 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   17d4a:	2800      	cmp	r0, #0
   17d4c:	db19      	blt.n	17d82 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   17d4e:	4a13      	ldr	r2, [pc, #76]	; (17d9c <lll_scan_prepare+0x5c>)
   17d50:	4913      	ldr	r1, [pc, #76]	; (17da0 <lll_scan_prepare+0x60>)
   17d52:	4814      	ldr	r0, [pc, #80]	; (17da4 <lll_scan_prepare+0x64>)
   17d54:	9400      	str	r4, [sp, #0]
   17d56:	2300      	movs	r3, #0
   17d58:	f7f6 fea0 	bl	ea9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   17d5c:	b108      	cbz	r0, 17d62 <lll_scan_prepare+0x22>
   17d5e:	3077      	adds	r0, #119	; 0x77
   17d60:	d101      	bne.n	17d66 <lll_scan_prepare+0x26>
}
   17d62:	b002      	add	sp, #8
   17d64:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   17d66:	4a10      	ldr	r2, [pc, #64]	; (17da8 <lll_scan_prepare+0x68>)
   17d68:	4910      	ldr	r1, [pc, #64]	; (17dac <lll_scan_prepare+0x6c>)
   17d6a:	4811      	ldr	r0, [pc, #68]	; (17db0 <lll_scan_prepare+0x70>)
   17d6c:	2371      	movs	r3, #113	; 0x71
   17d6e:	f004 fa95 	bl	1c29c <printk>
   17d72:	4040      	eors	r0, r0
   17d74:	f380 8811 	msr	BASEPRI, r0
   17d78:	f04f 0003 	mov.w	r0, #3
   17d7c:	df02      	svc	2
}
   17d7e:	b002      	add	sp, #8
   17d80:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   17d82:	4a09      	ldr	r2, [pc, #36]	; (17da8 <lll_scan_prepare+0x68>)
   17d84:	490b      	ldr	r1, [pc, #44]	; (17db4 <lll_scan_prepare+0x74>)
   17d86:	480a      	ldr	r0, [pc, #40]	; (17db0 <lll_scan_prepare+0x70>)
   17d88:	236e      	movs	r3, #110	; 0x6e
   17d8a:	f004 fa87 	bl	1c29c <printk>
   17d8e:	4040      	eors	r0, r0
   17d90:	f380 8811 	msr	BASEPRI, r0
   17d94:	f04f 0003 	mov.w	r0, #3
   17d98:	df02      	svc	2
   17d9a:	e7d8      	b.n	17d4e <lll_scan_prepare+0xe>
   17d9c:	000177d5 	.word	0x000177d5
   17da0:	00017c95 	.word	0x00017c95
   17da4:	00017c39 	.word	0x00017c39
   17da8:	00021398 	.word	0x00021398
   17dac:	00021374 	.word	0x00021374
   17db0:	0002060c 	.word	0x0002060c
   17db4:	00021290 	.word	0x00021290

00017db8 <lll_scan_prepare_connect_req>:
{
   17db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dbc:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   17dc0:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   17dc2:	01ad      	lsls	r5, r5, #6
   17dc4:	f005 0540 	and.w	r5, r5, #64	; 0x40
   17dc8:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   17dcc:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   17dd0:	780b      	ldrb	r3, [r1, #0]
   17dd2:	f003 0310 	and.w	r3, r3, #16
{
   17dd6:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   17dd8:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   17dda:	2322      	movs	r3, #34	; 0x22
   17ddc:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   17dde:	700d      	strb	r5, [r1, #0]
{
   17de0:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   17de2:	9908      	ldr	r1, [sp, #32]
   17de4:	2206      	movs	r2, #6
{
   17de6:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   17de8:	1ca0      	adds	r0, r4, #2
   17dea:	f005 fd0d 	bl	1d808 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   17dee:	9906      	ldr	r1, [sp, #24]
   17df0:	2206      	movs	r2, #6
   17df2:	f104 0008 	add.w	r0, r4, #8
   17df6:	f005 fd07 	bl	1d808 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   17dfa:	2204      	movs	r2, #4
   17dfc:	18b1      	adds	r1, r6, r2
   17dfe:	f104 000e 	add.w	r0, r4, #14
   17e02:	f005 fd01 	bl	1d808 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   17e06:	2203      	movs	r2, #3
   17e08:	f106 0108 	add.w	r1, r6, #8
   17e0c:	f104 0012 	add.w	r0, r4, #18
   17e10:	f005 fcfa 	bl	1d808 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   17e14:	2301      	movs	r3, #1
   17e16:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   17e18:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   17e1a:	f001 fb13 	bl	19444 <radio_tmr_end_get>
			 PKT_AC_US(sizeof(struct pdu_adv_connect_ind), 0,
   17e1e:	f1b8 0f00 	cmp.w	r8, #0
   17e22:	d044      	beq.n	17eae <lll_scan_prepare_connect_req+0xf6>
   17e24:	f008 0203 	and.w	r2, r8, #3
   17e28:	322b      	adds	r2, #43	; 0x2b
   17e2a:	00d2      	lsls	r2, r2, #3
   17e2c:	f3c8 0840 	ubfx	r8, r8, #1, #1
   17e30:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   17e34:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   17e36:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   17e3a:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   17e3c:	b393      	cbz	r3, 17ea4 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   17e3e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17e42:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   17e46:	2b00      	cmp	r3, #0
   17e48:	db01      	blt.n	17e4e <lll_scan_prepare_connect_req+0x96>
   17e4a:	4293      	cmp	r3, r2
   17e4c:	d201      	bcs.n	17e52 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   17e4e:	442b      	add	r3, r5
   17e50:	e7f9      	b.n	17e46 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   17e52:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   17e54:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   17e56:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   17e58:	4b16      	ldr	r3, [pc, #88]	; (17eb4 <lll_scan_prepare_connect_req+0xfc>)
   17e5a:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   17e5e:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   17e60:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   17e62:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   17e64:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   17e66:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   17e68:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   17e6a:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   17e6c:	8abb      	ldrh	r3, [r7, #20]
   17e6e:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   17e70:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   17e72:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   17e74:	f106 0118 	add.w	r1, r6, #24
   17e78:	2205      	movs	r2, #5
   17e7a:	f104 001e 	add.w	r0, r4, #30
   17e7e:	f005 fcc3 	bl	1d808 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   17e82:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   17e86:	7fb2      	ldrb	r2, [r6, #30]
   17e88:	f362 0304 	bfi	r3, r2, #0, #5
   17e8c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   17e90:	f7fe ff74 	bl	16d7c <lll_clock_sca_local_get>
   17e94:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   17e98:	f360 1347 	bfi	r3, r0, #5, #3
   17e9c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   17ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   17ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
   17ea6:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   17ea8:	75a3      	strb	r3, [r4, #22]
   17eaa:	75e3      	strb	r3, [r4, #23]
   17eac:	e7dc      	b.n	17e68 <lll_scan_prepare_connect_req+0xb0>
   17eae:	f44f 78b0 	mov.w	r8, #352	; 0x160
   17eb2:	e7bf      	b.n	17e34 <lll_scan_prepare_connect_req+0x7c>
   17eb4:	d1b71759 	.word	0xd1b71759

00017eb8 <lll_scan_tgta_check>:
{
   17eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ebc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   17ec0:	4616      	mov	r6, r2
   17ec2:	4680      	mov	r8, r0
   17ec4:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   17ec6:	464a      	mov	r2, r9
   17ec8:	4619      	mov	r1, r3
   17eca:	4630      	mov	r0, r6
{
   17ecc:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   17ece:	f7fe fa77 	bl	163c0 <ull_filter_lll_rl_addr_resolve>
   17ed2:	4604      	mov	r4, r0
   17ed4:	b9a0      	cbnz	r0, 17f00 <lll_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   17ed6:	b11d      	cbz	r5, 17ee0 <lll_scan_tgta_check+0x28>
   17ed8:	f898 3017 	ldrb.w	r3, [r8, #23]
   17edc:	079a      	lsls	r2, r3, #30
   17ede:	d41c      	bmi.n	17f1a <lll_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   17ee0:	f898 5016 	ldrb.w	r5, [r8, #22]
   17ee4:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   17ee8:	42b3      	cmp	r3, r6
   17eea:	d00c      	beq.n	17f06 <lll_scan_tgta_check+0x4e>
	if (((lll->filter_policy & 0x02) != 0U) && (addr_type != 0) &&
   17eec:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   17ef0:	07ab      	lsls	r3, r5, #30
   17ef2:	d505      	bpl.n	17f00 <lll_scan_tgta_check+0x48>
   17ef4:	b126      	cbz	r6, 17f00 <lll_scan_tgta_check+0x48>
   17ef6:	797b      	ldrb	r3, [r7, #5]
   17ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17efc:	2b40      	cmp	r3, #64	; 0x40
   17efe:	d014      	beq.n	17f2a <lll_scan_tgta_check+0x72>
}
   17f00:	4620      	mov	r0, r4
   17f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   17f06:	2206      	movs	r2, #6
   17f08:	4639      	mov	r1, r7
   17f0a:	f108 0019 	add.w	r0, r8, #25
   17f0e:	f005 fc6a 	bl	1d7e6 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   17f12:	b140      	cbz	r0, 17f26 <lll_scan_tgta_check+0x6e>
   17f14:	f898 5016 	ldrb.w	r5, [r8, #22]
   17f18:	e7e8      	b.n	17eec <lll_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   17f1a:	4648      	mov	r0, r9
   17f1c:	f7fe f8c6 	bl	160ac <ull_filter_lll_lrpa_get>
   17f20:	2800      	cmp	r0, #0
   17f22:	d1ed      	bne.n	17f00 <lll_scan_tgta_check+0x48>
   17f24:	e7dc      	b.n	17ee0 <lll_scan_tgta_check+0x28>
			*dir_report = true;
   17f26:	2401      	movs	r4, #1
   17f28:	e7ea      	b.n	17f00 <lll_scan_tgta_check+0x48>
		if (dir_report) {
   17f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17f2c:	2b00      	cmp	r3, #0
   17f2e:	d0fa      	beq.n	17f26 <lll_scan_tgta_check+0x6e>
			*dir_report = true;
   17f30:	2401      	movs	r4, #1
   17f32:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   17f34:	e7e4      	b.n	17f00 <lll_scan_tgta_check+0x48>
   17f36:	bf00      	nop

00017f38 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   17f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f3a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   17f3c:	f7fe fd44 	bl	169c8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   17f40:	f7f6 fd6e 	bl	ea20 <ull_event_done_extra_get>
	LL_ASSERT(e);
   17f44:	4604      	mov	r4, r0
   17f46:	2800      	cmp	r0, #0
   17f48:	d033      	beq.n	17fb2 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   17f4a:	4b21      	ldr	r3, [pc, #132]	; (17fd0 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   17f4c:	4921      	ldr	r1, [pc, #132]	; (17fd4 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   17f4e:	4a22      	ldr	r2, [pc, #136]	; (17fd8 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   17f50:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   17f52:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   17f54:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   17f56:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   17f58:	2001      	movs	r0, #1
   17f5a:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   17f5c:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   17f5e:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   17f60:	b11b      	cbz	r3, 17f6a <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   17f62:	f995 301d 	ldrsb.w	r3, [r5, #29]
   17f66:	2b00      	cmp	r3, #0
   17f68:	db04      	blt.n	17f74 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   17f6a:	4628      	mov	r0, r5
}
   17f6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   17f70:	f7fe bd38 	b.w	169e4 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   17f74:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   17f78:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   17f7c:	2b02      	cmp	r3, #2
   17f7e:	d016      	beq.n	17fae <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   17f80:	2b04      	cmp	r3, #4
   17f82:	bf14      	ite	ne
   17f84:	2728      	movne	r7, #40	; 0x28
   17f86:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   17f8a:	f001 fa47 	bl	1941c <radio_tmr_aa_restore>
   17f8e:	4606      	mov	r6, r0
   17f90:	f001 fa4a 	bl	19428 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   17f94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   17f96:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   17f98:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   17f9a:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   17f9e:	2300      	movs	r3, #0
   17fa0:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   17fa2:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   17fa4:	4628      	mov	r0, r5
}
   17fa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   17faa:	f7fe bd1b 	b.w	169e4 <lll_isr_cleanup>
	switch (phy) {
   17fae:	2718      	movs	r7, #24
   17fb0:	e7eb      	b.n	17f8a <isr_done+0x52>
	LL_ASSERT(e);
   17fb2:	4a0a      	ldr	r2, [pc, #40]	; (17fdc <isr_done+0xa4>)
   17fb4:	490a      	ldr	r1, [pc, #40]	; (17fe0 <isr_done+0xa8>)
   17fb6:	480b      	ldr	r0, [pc, #44]	; (17fe4 <isr_done+0xac>)
   17fb8:	f240 2379 	movw	r3, #633	; 0x279
   17fbc:	f004 f96e 	bl	1c29c <printk>
   17fc0:	4040      	eors	r0, r0
   17fc2:	f380 8811 	msr	BASEPRI, r0
   17fc6:	f04f 0003 	mov.w	r0, #3
   17fca:	df02      	svc	2
   17fcc:	e7bd      	b.n	17f4a <isr_done+0x12>
   17fce:	bf00      	nop
   17fd0:	2000282a 	.word	0x2000282a
   17fd4:	20002909 	.word	0x20002909
   17fd8:	2000290a 	.word	0x2000290a
   17fdc:	00021400 	.word	0x00021400
   17fe0:	00020b10 	.word	0x00020b10
   17fe4:	0002060c 	.word	0x0002060c

00017fe8 <lll_conn_init>:
{
   17fe8:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   17fea:	f000 ffe5 	bl	18fb8 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17fee:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   17ff0:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17ff2:	2101      	movs	r1, #1
   17ff4:	f361 0201 	bfi	r2, r1, #0, #2
}
   17ff8:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17ffa:	701a      	strb	r2, [r3, #0]
}
   17ffc:	bd08      	pop	{r3, pc}
   17ffe:	bf00      	nop

00018000 <lll_conn_reset>:
}
   18000:	2000      	movs	r0, #0
   18002:	4770      	bx	lr

00018004 <lll_conn_flush>:
}
   18004:	4770      	bx	lr
   18006:	bf00      	nop

00018008 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   18008:	4805      	ldr	r0, [pc, #20]	; (18020 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1800a:	4906      	ldr	r1, [pc, #24]	; (18024 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1800c:	4a06      	ldr	r2, [pc, #24]	; (18028 <lll_conn_prepare_reset+0x20>)
{
   1800e:	b410      	push	{r4}
	trx_cnt = 0U;
   18010:	2300      	movs	r3, #0
   18012:	4c06      	ldr	r4, [pc, #24]	; (1802c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   18014:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   18016:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   18018:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1801a:	8023      	strh	r3, [r4, #0]
}
   1801c:	bc10      	pop	{r4}
   1801e:	4770      	bx	lr
   18020:	20002909 	.word	0x20002909
   18024:	20002908 	.word	0x20002908
   18028:	2000290a 	.word	0x2000290a
   1802c:	2000282a 	.word	0x2000282a

00018030 <lll_conn_abort_cb>:
{
   18030:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   18032:	b1e8      	cbz	r0, 18070 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   18034:	460d      	mov	r5, r1
   18036:	4604      	mov	r4, r0
   18038:	f7fe fe82 	bl	16d40 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1803c:	2800      	cmp	r0, #0
   1803e:	db0a      	blt.n	18056 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   18040:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   18042:	8921      	ldrh	r1, [r4, #8]
   18044:	8a53      	ldrh	r3, [r2, #18]
   18046:	440b      	add	r3, r1
   18048:	3301      	adds	r3, #1
	lll_done(param);
   1804a:	4628      	mov	r0, r5
	lll->latency_prepare += (prepare_param->lazy + 1);
   1804c:	8253      	strh	r3, [r2, #18]
}
   1804e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   18052:	f7fe bbe9 	b.w	16828 <lll_done>
	LL_ASSERT(err >= 0);
   18056:	4a0a      	ldr	r2, [pc, #40]	; (18080 <lll_conn_abort_cb+0x50>)
   18058:	490a      	ldr	r1, [pc, #40]	; (18084 <lll_conn_abort_cb+0x54>)
   1805a:	480b      	ldr	r0, [pc, #44]	; (18088 <lll_conn_abort_cb+0x58>)
   1805c:	239d      	movs	r3, #157	; 0x9d
   1805e:	f004 f91d 	bl	1c29c <printk>
   18062:	4040      	eors	r0, r0
   18064:	f380 8811 	msr	BASEPRI, r0
   18068:	f04f 0003 	mov.w	r0, #3
   1806c:	df02      	svc	2
   1806e:	e7e7      	b.n	18040 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   18070:	4806      	ldr	r0, [pc, #24]	; (1808c <lll_conn_abort_cb+0x5c>)
   18072:	f000 fe4b 	bl	18d0c <radio_isr_set>
}
   18076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1807a:	f000 bf49 	b.w	18f10 <radio_disable>
   1807e:	bf00      	nop
   18080:	00021400 	.word	0x00021400
   18084:	00021290 	.word	0x00021290
   18088:	0002060c 	.word	0x0002060c
   1808c:	00017f39 	.word	0x00017f39

00018090 <lll_conn_rx_pkt_set>:
{
   18090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18092:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   18094:	2001      	movs	r0, #1
   18096:	f7f6 fbbb 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1809a:	4606      	mov	r6, r0
   1809c:	b360      	cbz	r0, 180f8 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   1809e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   180a2:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   180a4:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   180a8:	2100      	movs	r1, #0
   180aa:	4620      	mov	r0, r4
   180ac:	f000 fe94 	bl	18dd8 <radio_phy_set>
	} else if (lll->enc_rx) {
   180b0:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   180b4:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   180b6:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   180ba:	d511      	bpl.n	180e0 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   180bc:	1d39      	adds	r1, r7, #4
   180be:	f042 0201 	orr.w	r2, r2, #1
   180c2:	b2c9      	uxtb	r1, r1
   180c4:	2008      	movs	r0, #8
   180c6:	f000 fecd 	bl	18e64 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   180ca:	f106 021c 	add.w	r2, r6, #28
   180ce:	4621      	mov	r1, r4
   180d0:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   180d4:	f001 f9c2 	bl	1945c <radio_ccm_rx_pkt_set>
}
   180d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   180dc:	f000 bef0 	b.w	18ec0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   180e0:	2008      	movs	r0, #8
   180e2:	b2f9      	uxtb	r1, r7
   180e4:	f042 0201 	orr.w	r2, r2, #1
   180e8:	f000 febc 	bl	18e64 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   180ec:	f106 001c 	add.w	r0, r6, #28
}
   180f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   180f4:	f000 bee4 	b.w	18ec0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   180f8:	4a06      	ldr	r2, [pc, #24]	; (18114 <lll_conn_rx_pkt_set+0x84>)
   180fa:	4907      	ldr	r1, [pc, #28]	; (18118 <lll_conn_rx_pkt_set+0x88>)
   180fc:	4807      	ldr	r0, [pc, #28]	; (1811c <lll_conn_rx_pkt_set+0x8c>)
   180fe:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   18102:	f004 f8cb 	bl	1c29c <printk>
   18106:	4040      	eors	r0, r0
   18108:	f380 8811 	msr	BASEPRI, r0
   1810c:	f04f 0003 	mov.w	r0, #3
   18110:	df02      	svc	2
   18112:	e7c4      	b.n	1809e <lll_conn_rx_pkt_set+0xe>
   18114:	00021400 	.word	0x00021400
   18118:	000213e4 	.word	0x000213e4
   1811c:	0002060c 	.word	0x0002060c

00018120 <lll_conn_isr_tx>:
{
   18120:	b538      	push	{r3, r4, r5, lr}
   18122:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18124:	f7fe fc3e 	bl	169a4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18128:	2096      	movs	r0, #150	; 0x96
   1812a:	f001 f877 	bl	1921c <radio_tmr_tifs_set>
				     lll->phy_flags);
   1812e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   18132:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18136:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1813a:	f000 0007 	and.w	r0, r0, #7
   1813e:	f002 0207 	and.w	r2, r2, #7
   18142:	2100      	movs	r1, #0
   18144:	f000 ff88 	bl	19058 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   18148:	4620      	mov	r0, r4
   1814a:	f7ff ffa1 	bl	18090 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1814e:	f000 feff 	bl	18f50 <radio_is_ready>
   18152:	bb58      	cbnz	r0, 181ac <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   18154:	f001 f97c 	bl	19450 <radio_tmr_tifs_base_get>
   18158:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1815a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1815e:	2101      	movs	r1, #1
   18160:	f000 0007 	and.w	r0, r0, #7
   18164:	f000 fec2 	bl	18eec <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18168:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1816c:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18170:	4405      	add	r5, r0
   18172:	2b02      	cmp	r3, #2
   18174:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   18178:	d016      	beq.n	181a8 <lll_conn_isr_tx+0x88>
		return 376;
   1817a:	2b04      	cmp	r3, #4
   1817c:	bf14      	ite	ne
   1817e:	2328      	movne	r3, #40	; 0x28
   18180:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18184:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   18188:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1818c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18190:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18192:	f000 fea7 	bl	18ee4 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   18196:	1a28      	subs	r0, r5, r0
   18198:	f001 f912 	bl	193c0 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1819c:	4621      	mov	r1, r4
   1819e:	480a      	ldr	r0, [pc, #40]	; (181c8 <lll_conn_isr_tx+0xa8>)
}
   181a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   181a4:	f000 bdb2 	b.w	18d0c <radio_isr_set>
	switch (phy) {
   181a8:	2318      	movs	r3, #24
   181aa:	e7eb      	b.n	18184 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   181ac:	4a07      	ldr	r2, [pc, #28]	; (181cc <lll_conn_isr_tx+0xac>)
   181ae:	4908      	ldr	r1, [pc, #32]	; (181d0 <lll_conn_isr_tx+0xb0>)
   181b0:	4808      	ldr	r0, [pc, #32]	; (181d4 <lll_conn_isr_tx+0xb4>)
   181b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   181b6:	f004 f871 	bl	1c29c <printk>
   181ba:	4040      	eors	r0, r0
   181bc:	f380 8811 	msr	BASEPRI, r0
   181c0:	f04f 0003 	mov.w	r0, #3
   181c4:	df02      	svc	2
   181c6:	e7c5      	b.n	18154 <lll_conn_isr_tx+0x34>
   181c8:	00018315 	.word	0x00018315
   181cc:	00021400 	.word	0x00021400
   181d0:	0002134c 	.word	0x0002134c
   181d4:	0002060c 	.word	0x0002060c

000181d8 <lll_conn_tx_pkt_set>:
{
   181d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181da:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   181dc:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   181e0:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   181e2:	f001 0507 	and.w	r5, r1, #7
{
   181e6:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   181e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   181ec:	4628      	mov	r0, r5
   181ee:	f000 fdf3 	bl	18dd8 <radio_phy_set>
	} else if (lll->enc_tx) {
   181f2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   181f6:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   181f8:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   181fc:	d50f      	bpl.n	1821e <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   181fe:	1d39      	adds	r1, r7, #4
   18200:	f042 0201 	orr.w	r2, r2, #1
   18204:	b2c9      	uxtb	r1, r1
   18206:	2008      	movs	r0, #8
   18208:	f000 fe2c 	bl	18e64 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1820c:	4631      	mov	r1, r6
   1820e:	f104 0080 	add.w	r0, r4, #128	; 0x80
   18212:	f001 f961 	bl	194d8 <radio_ccm_tx_pkt_set>
}
   18216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1821a:	f000 be57 	b.w	18ecc <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1821e:	b2f9      	uxtb	r1, r7
   18220:	2008      	movs	r0, #8
   18222:	f042 0201 	orr.w	r2, r2, #1
   18226:	f000 fe1d 	bl	18e64 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1822a:	4630      	mov	r0, r6
}
   1822c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   18230:	f000 be4c 	b.w	18ecc <radio_pkt_tx_set>

00018234 <lll_conn_pdu_tx_prep>:
{
   18234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18238:	4604      	mov	r4, r0
   1823a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1823c:	aa01      	add	r2, sp, #4
   1823e:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   18240:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18242:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   18244:	f7f2 f8ba 	bl	a3bc <memq_peek>
	if (lll->empty || !link) {
   18248:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1824c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1824e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   18250:	d432      	bmi.n	182b8 <lll_conn_pdu_tx_prep+0x84>
   18252:	2800      	cmp	r0, #0
   18254:	d04e      	beq.n	182f4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18256:	9b01      	ldr	r3, [sp, #4]
   18258:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1825c:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   18260:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18264:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   18268:	b913      	cbnz	r3, 18270 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1826a:	786b      	ldrb	r3, [r5, #1]
   1826c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   18270:	b137      	cbz	r7, 18280 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18272:	f818 2007 	ldrb.w	r2, [r8, r7]
   18276:	2101      	movs	r1, #1
   18278:	f361 0201 	bfi	r2, r1, #0, #2
   1827c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   18280:	1bdb      	subs	r3, r3, r7
   18282:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   18284:	4620      	mov	r0, r4
   18286:	f7fc fa45 	bl	14714 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1828a:	786b      	ldrb	r3, [r5, #1]
   1828c:	4283      	cmp	r3, r0
   1828e:	d924      	bls.n	182da <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   18290:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   18292:	f818 3007 	ldrb.w	r3, [r8, r7]
   18296:	f043 0310 	orr.w	r3, r3, #16
   1829a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1829e:	f818 3007 	ldrb.w	r3, [r8, r7]
   182a2:	f36f 1347 	bfc	r3, #5, #3
   182a6:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   182aa:	2300      	movs	r3, #0
   182ac:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   182ae:	f8c9 5000 	str.w	r5, [r9]
}
   182b2:	b003      	add	sp, #12
   182b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   182b8:	f043 0304 	orr.w	r3, r3, #4
   182bc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   182c0:	f000 fe7a 	bl	18fb8 <radio_pkt_empty_get>
   182c4:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   182c6:	b1e6      	cbz	r6, 18302 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   182c8:	7803      	ldrb	r3, [r0, #0]
   182ca:	f043 0310 	orr.w	r3, r3, #16
   182ce:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   182d0:	f8c9 5000 	str.w	r5, [r9]
}
   182d4:	b003      	add	sp, #12
   182d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   182da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   182dc:	6832      	ldr	r2, [r6, #0]
   182de:	429a      	cmp	r2, r3
			p->md = 1U;
   182e0:	f818 3007 	ldrb.w	r3, [r8, r7]
   182e4:	bf14      	ite	ne
   182e6:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   182ea:	f36f 1304 	bfceq	r3, #4, #1
   182ee:	f808 3007 	strb.w	r3, [r8, r7]
   182f2:	e7d4      	b.n	1829e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   182f4:	f043 0304 	orr.w	r3, r3, #4
   182f8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   182fc:	f000 fe5c 	bl	18fb8 <radio_pkt_empty_get>
   18300:	4605      	mov	r5, r0
			p->md = 0U;
   18302:	782b      	ldrb	r3, [r5, #0]
   18304:	f36f 1304 	bfc	r3, #4, #1
   18308:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1830a:	f8c9 5000 	str.w	r5, [r9]
}
   1830e:	b003      	add	sp, #12
   18310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018314 <lll_conn_isr_rx>:
{
   18314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18318:	b083      	sub	sp, #12
   1831a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1831c:	f000 fe22 	bl	18f64 <radio_is_done>
	if (trx_done) {
   18320:	b2c0      	uxtb	r0, r0
   18322:	b950      	cbnz	r0, 1833a <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   18324:	f7fe fb46 	bl	169b4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   18328:	48bd      	ldr	r0, [pc, #756]	; (18620 <lll_conn_isr_rx+0x30c>)
   1832a:	4621      	mov	r1, r4
   1832c:	f000 fcee 	bl	18d0c <radio_isr_set>
}
   18330:	b003      	add	sp, #12
   18332:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   18336:	f000 bdeb 	b.w	18f10 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1833a:	f000 fe33 	bl	18fa4 <radio_crc_is_valid>
   1833e:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   18340:	f000 ff10 	bl	19164 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   18344:	f7fe fb36 	bl	169b4 <lll_isr_rx_status_reset>
	trx_cnt++;
   18348:	4ab6      	ldr	r2, [pc, #728]	; (18624 <lll_conn_isr_rx+0x310>)
   1834a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1834c:	2001      	movs	r0, #1
	trx_cnt++;
   1834e:	4403      	add	r3, r0
   18350:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18352:	f7f6 fa5d 	bl	e810 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18356:	4606      	mov	r6, r0
   18358:	2800      	cmp	r0, #0
   1835a:	f000 80e7 	beq.w	1852c <lll_conn_isr_rx+0x218>
	if (crc_ok) {
   1835e:	b9f5      	cbnz	r5, 1839e <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   18360:	4bb1      	ldr	r3, [pc, #708]	; (18628 <lll_conn_isr_rx+0x314>)
   18362:	781f      	ldrb	r7, [r3, #0]
   18364:	2f00      	cmp	r7, #0
   18366:	f000 8083 	beq.w	18470 <lll_conn_isr_rx+0x15c>
		crc_expire--;
   1836a:	3f01      	subs	r7, #1
   1836c:	b2ff      	uxtb	r7, r7
   1836e:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   18370:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18374:	a901      	add	r1, sp, #4
   18376:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   18378:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1837c:	f7ff ff5a 	bl	18234 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18380:	2f00      	cmp	r7, #0
   18382:	f040 814a 	bne.w	1861a <lll_conn_isr_rx+0x306>
		radio_isr_set(isr_done, param);
   18386:	48a6      	ldr	r0, [pc, #664]	; (18620 <lll_conn_isr_rx+0x30c>)
   18388:	4621      	mov	r1, r4
   1838a:	f000 fcbf 	bl	18d0c <radio_isr_set>
		} else if (!lll->role) {
   1838e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   18392:	2b00      	cmp	r3, #0
   18394:	f280 80bc 	bge.w	18510 <lll_conn_isr_rx+0x1fc>
			radio_switch_complete_and_disable();
   18398:	f000 febe 	bl	19118 <radio_switch_complete_and_disable>
   1839c:	e07d      	b.n	1849a <lll_conn_isr_rx+0x186>
	if (pdu_data_rx->nesn != lll->sn) {
   1839e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   183a2:	7f32      	ldrb	r2, [r6, #28]
   183a4:	f003 0101 	and.w	r1, r3, #1
   183a8:	f3c2 0080 	ubfx	r0, r2, #2, #1
   183ac:	4288      	cmp	r0, r1
   183ae:	f000 80cd 	beq.w	1854c <lll_conn_isr_rx+0x238>
		if (lll->role) {
   183b2:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   183b6:	f081 0101 	eor.w	r1, r1, #1
   183ba:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   183be:	2a00      	cmp	r2, #0
		lll->sn++;
   183c0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   183c4:	da05      	bge.n	183d2 <lll_conn_isr_rx+0xbe>
			lll->slave.latency_enabled = 1;
   183c6:	f894 3020 	ldrb.w	r3, [r4, #32]
   183ca:	f043 0304 	orr.w	r3, r3, #4
   183ce:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   183d2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   183d6:	f013 0804 	ands.w	r8, r3, #4
   183da:	f040 80fc 	bne.w	185d6 <lll_conn_isr_rx+0x2c2>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   183de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   183e2:	aa01      	add	r2, sp, #4
   183e4:	f7f1 ffea 	bl	a3bc <memq_peek>
		if (link) {
   183e8:	4605      	mov	r5, r0
   183ea:	2800      	cmp	r0, #0
   183ec:	f000 810a 	beq.w	18604 <lll_conn_isr_rx+0x2f0>
			pdu_data_tx = (void *)(tx->pdu +
   183f0:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   183f2:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   183f6:	3704      	adds	r7, #4
   183f8:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   183fc:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   183fe:	b172      	cbz	r2, 1841e <lll_conn_isr_rx+0x10a>
				if (lll->enc_tx) {
   18400:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18404:	06d9      	lsls	r1, r3, #27
   18406:	d50a      	bpl.n	1841e <lll_conn_isr_rx+0x10a>
					lll->ccm_tx.counter++;
   18408:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1840c:	3301      	adds	r3, #1
   1840e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   18412:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   18416:	f143 0300 	adc.w	r3, r3, #0
   1841a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1841e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   18422:	444a      	add	r2, r9
   18424:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   18426:	429a      	cmp	r2, r3
   18428:	f0c0 80f3 	bcc.w	18612 <lll_conn_isr_rx+0x2fe>
			} else if (offset == lll->packet_tx_head_len) {
   1842c:	f000 8135 	beq.w	1869a <lll_conn_isr_rx+0x386>
				LL_ASSERT(0);
   18430:	4a7e      	ldr	r2, [pc, #504]	; (1862c <lll_conn_isr_rx+0x318>)
   18432:	497f      	ldr	r1, [pc, #508]	; (18630 <lll_conn_isr_rx+0x31c>)
   18434:	487f      	ldr	r0, [pc, #508]	; (18634 <lll_conn_isr_rx+0x320>)
   18436:	f240 3305 	movw	r3, #773	; 0x305
   1843a:	f003 ff2f 	bl	1c29c <printk>
   1843e:	4040      	eors	r0, r0
   18440:	f380 8811 	msr	BASEPRI, r0
   18444:	f04f 0003 	mov.w	r0, #3
   18448:	df02      	svc	2
	tx_release = NULL;
   1844a:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1844c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   18450:	2b00      	cmp	r3, #0
   18452:	f2c0 811e 	blt.w	18692 <lll_conn_isr_rx+0x37e>
			    !pdu_data_rx->md) {
   18456:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   18458:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1845a:	bf58      	it	pl
   1845c:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   18460:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18464:	bf5c      	itt	pl
   18466:	f088 0810 	eorpl.w	r8, r8, #16
   1846a:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1846e:	e070      	b.n	18552 <lll_conn_isr_rx+0x23e>
		crc_expire--;
   18470:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18472:	a901      	add	r1, sp, #4
   18474:	4620      	mov	r0, r4
		crc_expire--;
   18476:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18478:	f7ff fedc 	bl	18234 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1847c:	2096      	movs	r0, #150	; 0x96
   1847e:	f000 fecd 	bl	1921c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   18482:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18486:	f000 0007 	and.w	r0, r0, #7
   1848a:	f000 fd9d 	bl	18fc8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1848e:	486a      	ldr	r0, [pc, #424]	; (18638 <lll_conn_isr_rx+0x324>)
   18490:	4621      	mov	r1, r4
   18492:	f000 fc3b 	bl	18d0c <radio_isr_set>
		radio_tmr_end_capture();
   18496:	f000 ffcd 	bl	19434 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1849a:	9901      	ldr	r1, [sp, #4]
   1849c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   184a0:	780b      	ldrb	r3, [r1, #0]
   184a2:	f023 000c 	bic.w	r0, r3, #12
   184a6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   184aa:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   184ac:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   184b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   184b4:	4303      	orrs	r3, r0
   184b6:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   184b8:	4620      	mov	r0, r4
   184ba:	f7ff fe8d 	bl	181d8 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   184be:	f000 fd47 	bl	18f50 <radio_is_ready>
   184c2:	2800      	cmp	r0, #0
   184c4:	d16a      	bne.n	1859c <lll_conn_isr_rx+0x288>
	if (!radio_tmr_aa_restore()) {
   184c6:	f000 ffa9 	bl	1941c <radio_tmr_aa_restore>
   184ca:	b170      	cbz	r0, 184ea <lll_conn_isr_rx+0x1d6>
	if (tx_release) {
   184cc:	b19d      	cbz	r5, 184f6 <lll_conn_isr_rx+0x1e2>
		LL_ASSERT(lll->handle != 0xFFFF);
   184ce:	89a0      	ldrh	r0, [r4, #12]
   184d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   184d4:	4298      	cmp	r0, r3
   184d6:	d06f      	beq.n	185b8 <lll_conn_isr_rx+0x2a4>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   184d8:	4629      	mov	r1, r5
   184da:	f7fb fee7 	bl	142ac <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   184de:	b967      	cbnz	r7, 184fa <lll_conn_isr_rx+0x1e6>
		ull_rx_sched();
   184e0:	f7f6 f9da 	bl	e898 <ull_rx_sched>
}
   184e4:	b003      	add	sp, #12
   184e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   184ea:	f000 ff8b 	bl	19404 <radio_tmr_aa_get>
   184ee:	f000 ff8f 	bl	19410 <radio_tmr_aa_save>
	if (tx_release) {
   184f2:	2d00      	cmp	r5, #0
   184f4:	d1eb      	bne.n	184ce <lll_conn_isr_rx+0x1ba>
	if (is_rx_enqueue) {
   184f6:	2f00      	cmp	r7, #0
   184f8:	d0f4      	beq.n	184e4 <lll_conn_isr_rx+0x1d0>
		ull_pdu_rx_alloc();
   184fa:	f7f6 f9a7 	bl	e84c <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   184fe:	2303      	movs	r3, #3
   18500:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   18502:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18504:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   18506:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18508:	4631      	mov	r1, r6
   1850a:	f7f6 f9b5 	bl	e878 <ull_rx_put>
	if (is_ull_rx) {
   1850e:	e7e7      	b.n	184e0 <lll_conn_isr_rx+0x1cc>
			radio_disable();
   18510:	f000 fcfe 	bl	18f10 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   18514:	f000 fd1c 	bl	18f50 <radio_is_ready>
   18518:	2800      	cmp	r0, #0
   1851a:	f040 80a9 	bne.w	18670 <lll_conn_isr_rx+0x35c>
			lll->empty = is_empty_pdu_tx_retry;
   1851e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18522:	f369 0382 	bfi	r3, r9, #2, #1
   18526:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   1852a:	e7cc      	b.n	184c6 <lll_conn_isr_rx+0x1b2>
	LL_ASSERT(node_rx);
   1852c:	4a3f      	ldr	r2, [pc, #252]	; (1862c <lll_conn_isr_rx+0x318>)
   1852e:	4943      	ldr	r1, [pc, #268]	; (1863c <lll_conn_isr_rx+0x328>)
   18530:	4840      	ldr	r0, [pc, #256]	; (18634 <lll_conn_isr_rx+0x320>)
   18532:	23d6      	movs	r3, #214	; 0xd6
   18534:	f003 feb2 	bl	1c29c <printk>
   18538:	4040      	eors	r0, r0
   1853a:	f380 8811 	msr	BASEPRI, r0
   1853e:	f04f 0003 	mov.w	r0, #3
   18542:	df02      	svc	2
	if (crc_ok) {
   18544:	2d00      	cmp	r5, #0
   18546:	f43f af0b 	beq.w	18360 <lll_conn_isr_rx+0x4c>
   1854a:	e728      	b.n	1839e <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   1854c:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   18550:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   18552:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18556:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1855a:	428a      	cmp	r2, r1
   1855c:	d076      	beq.n	1864c <lll_conn_isr_rx+0x338>
	is_rx_enqueue = 0U;
   1855e:	2700      	movs	r7, #0
		crc_expire = 0U;
   18560:	4a31      	ldr	r2, [pc, #196]	; (18628 <lll_conn_isr_rx+0x314>)
   18562:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   18564:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   18568:	4b35      	ldr	r3, [pc, #212]	; (18640 <lll_conn_isr_rx+0x32c>)
		crc_expire = 0U;
   1856a:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1856c:	4620      	mov	r0, r4
		crc_valid = 1U;
   1856e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18570:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   18572:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18574:	f7ff fe5e 	bl	18234 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18578:	f1b8 0f00 	cmp.w	r8, #0
   1857c:	f47f af03 	bne.w	18386 <lll_conn_isr_rx+0x72>
   18580:	7f33      	ldrb	r3, [r6, #28]
   18582:	06d9      	lsls	r1, r3, #27
   18584:	f53f af7a 	bmi.w	1847c <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   18588:	9b01      	ldr	r3, [sp, #4]
   1858a:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1858c:	06d2      	lsls	r2, r2, #27
   1858e:	f53f af75 	bmi.w	1847c <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   18592:	785b      	ldrb	r3, [r3, #1]
   18594:	2b00      	cmp	r3, #0
   18596:	f43f aef6 	beq.w	18386 <lll_conn_isr_rx+0x72>
   1859a:	e76f      	b.n	1847c <lll_conn_isr_rx+0x168>
	LL_ASSERT(!radio_is_ready());
   1859c:	4a23      	ldr	r2, [pc, #140]	; (1862c <lll_conn_isr_rx+0x318>)
   1859e:	4929      	ldr	r1, [pc, #164]	; (18644 <lll_conn_isr_rx+0x330>)
   185a0:	4824      	ldr	r0, [pc, #144]	; (18634 <lll_conn_isr_rx+0x320>)
   185a2:	f44f 73a1 	mov.w	r3, #322	; 0x142
   185a6:	f003 fe79 	bl	1c29c <printk>
   185aa:	4040      	eors	r0, r0
   185ac:	f380 8811 	msr	BASEPRI, r0
   185b0:	f04f 0003 	mov.w	r0, #3
   185b4:	df02      	svc	2
   185b6:	e786      	b.n	184c6 <lll_conn_isr_rx+0x1b2>
		LL_ASSERT(lll->handle != 0xFFFF);
   185b8:	4a1c      	ldr	r2, [pc, #112]	; (1862c <lll_conn_isr_rx+0x318>)
   185ba:	4923      	ldr	r1, [pc, #140]	; (18648 <lll_conn_isr_rx+0x334>)
   185bc:	481d      	ldr	r0, [pc, #116]	; (18634 <lll_conn_isr_rx+0x320>)
   185be:	f240 1351 	movw	r3, #337	; 0x151
   185c2:	f003 fe6b 	bl	1c29c <printk>
   185c6:	4040      	eors	r0, r0
   185c8:	f380 8811 	msr	BASEPRI, r0
   185cc:	f04f 0003 	mov.w	r0, #3
   185d0:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   185d2:	89a0      	ldrh	r0, [r4, #12]
   185d4:	e780      	b.n	184d8 <lll_conn_isr_rx+0x1c4>
			lll->empty = 0;
   185d6:	f36f 0382 	bfc	r3, #2, #1
   185da:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   185de:	f000 fceb 	bl	18fb8 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   185e2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   185e6:	2b00      	cmp	r3, #0
   185e8:	db0c      	blt.n	18604 <lll_conn_isr_rx+0x2f0>
			    !pdu_data_rx->md) {
   185ea:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   185ec:	f012 0510 	ands.w	r5, r2, #16
   185f0:	d109      	bne.n	18606 <lll_conn_isr_rx+0x2f2>
				*is_done = !pdu_data_tx->md;
   185f2:	f890 8000 	ldrb.w	r8, [r0]
   185f6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   185fa:	f088 0810 	eor.w	r8, r8, #16
   185fe:	f3c8 1800 	ubfx	r8, r8, #4, #1
   18602:	e7a6      	b.n	18552 <lll_conn_isr_rx+0x23e>
   18604:	7f32      	ldrb	r2, [r6, #28]
   18606:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   1860a:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1860e:	4645      	mov	r5, r8
   18610:	e79f      	b.n	18552 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_offset = offset;
   18612:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   18616:	2500      	movs	r5, #0
   18618:	e718      	b.n	1844c <lll_conn_isr_rx+0x138>
	is_rx_enqueue = 0U;
   1861a:	462f      	mov	r7, r5
   1861c:	e72e      	b.n	1847c <lll_conn_isr_rx+0x168>
   1861e:	bf00      	nop
   18620:	00017f39 	.word	0x00017f39
   18624:	2000282a 	.word	0x2000282a
   18628:	20002908 	.word	0x20002908
   1862c:	00021400 	.word	0x00021400
   18630:	000206a4 	.word	0x000206a4
   18634:	0002060c 	.word	0x0002060c
   18638:	00018121 	.word	0x00018121
   1863c:	000213e4 	.word	0x000213e4
   18640:	20002909 	.word	0x20002909
   18644:	0002134c 	.word	0x0002134c
   18648:	00021454 	.word	0x00021454
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1864c:	2003      	movs	r0, #3
   1864e:	f7f6 f8df 	bl	e810 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   18652:	b1d8      	cbz	r0, 1868c <lll_conn_isr_rx+0x378>
		lll->nesn++;
   18654:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18658:	f083 0302 	eor.w	r3, r3, #2
   1865c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   18660:	7f73      	ldrb	r3, [r6, #29]
   18662:	b19b      	cbz	r3, 1868c <lll_conn_isr_rx+0x378>
			if (lll->enc_rx) {
   18664:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18668:	0718      	lsls	r0, r3, #28
   1866a:	d424      	bmi.n	186b6 <lll_conn_isr_rx+0x3a2>
			*is_rx_enqueue = 1U;
   1866c:	2701      	movs	r7, #1
   1866e:	e777      	b.n	18560 <lll_conn_isr_rx+0x24c>
			LL_ASSERT(!radio_is_ready());
   18670:	4a38      	ldr	r2, [pc, #224]	; (18754 <lll_conn_isr_rx+0x440>)
   18672:	4939      	ldr	r1, [pc, #228]	; (18758 <lll_conn_isr_rx+0x444>)
   18674:	4839      	ldr	r0, [pc, #228]	; (1875c <lll_conn_isr_rx+0x448>)
   18676:	f44f 7384 	mov.w	r3, #264	; 0x108
   1867a:	f003 fe0f 	bl	1c29c <printk>
   1867e:	4040      	eors	r0, r0
   18680:	f380 8811 	msr	BASEPRI, r0
   18684:	f04f 0003 	mov.w	r0, #3
   18688:	df02      	svc	2
   1868a:	e748      	b.n	1851e <lll_conn_isr_rx+0x20a>
   1868c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18690:	e765      	b.n	1855e <lll_conn_isr_rx+0x24a>
   18692:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18696:	7f32      	ldrb	r2, [r6, #28]
   18698:	e75b      	b.n	18552 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_len = 0;
   1869a:	2200      	movs	r2, #0
   1869c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   186a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   186a2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   186a6:	f7f1 fe91 	bl	a3cc <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   186aa:	9b01      	ldr	r3, [sp, #4]
   186ac:	681a      	ldr	r2, [r3, #0]
   186ae:	602a      	str	r2, [r5, #0]
				tx->next = link;
   186b0:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   186b2:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   186b4:	e6ca      	b.n	1844c <lll_conn_isr_rx+0x138>
				done = radio_ccm_is_done();
   186b6:	f000 ff37 	bl	19528 <radio_ccm_is_done>
				LL_ASSERT(done);
   186ba:	2800      	cmp	r0, #0
   186bc:	d03b      	beq.n	18736 <lll_conn_isr_rx+0x422>
				bool mic_failure = !radio_ccm_mic_is_valid();
   186be:	f000 ff55 	bl	1956c <radio_ccm_mic_is_valid>
				if (mic_failure &&
   186c2:	bb30      	cbnz	r0, 18712 <lll_conn_isr_rx+0x3fe>
				    lll->ccm_rx.counter == 0 &&
   186c4:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   186c8:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   186cc:	4313      	orrs	r3, r2
   186ce:	d104      	bne.n	186da <lll_conn_isr_rx+0x3c6>
				    (pdu_data_rx->ll_id ==
   186d0:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   186d2:	f003 0303 	and.w	r3, r3, #3
   186d6:	2b03      	cmp	r3, #3
   186d8:	d004      	beq.n	186e4 <lll_conn_isr_rx+0x3d0>
					mic_state = LLL_CONN_MIC_FAIL;
   186da:	4b21      	ldr	r3, [pc, #132]	; (18760 <lll_conn_isr_rx+0x44c>)
   186dc:	2202      	movs	r2, #2
   186de:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   186e0:	2700      	movs	r7, #0
   186e2:	e6f0      	b.n	184c6 <lll_conn_isr_rx+0x1b2>
						radio_pkt_scratch_get();
   186e4:	f000 fc6c 	bl	18fc0 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   186e8:	7843      	ldrb	r3, [r0, #1]
   186ea:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   186ec:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   186ee:	d8f4      	bhi.n	186da <lll_conn_isr_rx+0x3c6>
						memcpy(pdu_data_rx,
   186f0:	3303      	adds	r3, #3
   186f2:	b2da      	uxtb	r2, r3
   186f4:	f106 001c 	add.w	r0, r6, #28
   186f8:	f005 f886 	bl	1d808 <memcpy>
						lll->ccm_rx.counter--;
   186fc:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18700:	3b01      	subs	r3, #1
   18702:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18706:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1870a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1870e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   18712:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18716:	3301      	adds	r3, #1
   18718:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1871c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   18720:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   18724:	f143 0300 	adc.w	r3, r3, #0
   18728:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1872a:	4b0d      	ldr	r3, [pc, #52]	; (18760 <lll_conn_isr_rx+0x44c>)
   1872c:	2701      	movs	r7, #1
   1872e:	701f      	strb	r7, [r3, #0]
		if (err) {
   18730:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18734:	e714      	b.n	18560 <lll_conn_isr_rx+0x24c>
				LL_ASSERT(done);
   18736:	4a07      	ldr	r2, [pc, #28]	; (18754 <lll_conn_isr_rx+0x440>)
   18738:	490a      	ldr	r1, [pc, #40]	; (18764 <lll_conn_isr_rx+0x450>)
   1873a:	4808      	ldr	r0, [pc, #32]	; (1875c <lll_conn_isr_rx+0x448>)
   1873c:	f44f 7348 	mov.w	r3, #800	; 0x320
   18740:	f003 fdac 	bl	1c29c <printk>
   18744:	4040      	eors	r0, r0
   18746:	f380 8811 	msr	BASEPRI, r0
   1874a:	f04f 0003 	mov.w	r0, #3
   1874e:	df02      	svc	2
   18750:	e7b5      	b.n	186be <lll_conn_isr_rx+0x3aa>
   18752:	bf00      	nop
   18754:	00021400 	.word	0x00021400
   18758:	0002134c 	.word	0x0002134c
   1875c:	0002060c 	.word	0x0002060c
   18760:	2000290a 	.word	0x2000290a
   18764:	0002144c 	.word	0x0002144c

00018768 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   18768:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1876a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1876c:	89a2      	ldrh	r2, [r4, #12]
   1876e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18772:	429a      	cmp	r2, r3
{
   18774:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   18776:	f000 80d2 	beq.w	1891e <prepare_cb+0x1b6>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1877a:	4605      	mov	r5, r0
   1877c:	f7ff fc44 	bl	18008 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   18780:	892b      	ldrh	r3, [r5, #8]
   18782:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   18784:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   18786:	441a      	add	r2, r3
   18788:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1878a:	4410      	add	r0, r2
   1878c:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   1878e:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   18790:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   18792:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   18794:	2100      	movs	r1, #0
   18796:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   18798:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   1879a:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   1879c:	f100 8091 	bmi.w	188c2 <prepare_cb+0x15a>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   187a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   187a4:	7fa1      	ldrb	r1, [r4, #30]
   187a6:	9300      	str	r3, [sp, #0]
   187a8:	f104 001f 	add.w	r0, r4, #31
   187ac:	f104 0318 	add.w	r3, r4, #24
   187b0:	f7fc fc7a 	bl	150a8 <lll_chan_sel_1>
   187b4:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   187b6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   187ba:	4419      	add	r1, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   187bc:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   187c0:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   187c2:	2200      	movs	r2, #0
	lll->slave.window_size_event_us +=
   187c4:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   187c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->slave.window_widening_prepare_us = 0;
   187c8:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   187ca:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   187cc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->slave.window_widening_event_us =
   187d0:	428b      	cmp	r3, r1
   187d2:	bf28      	it	cs
   187d4:	460b      	movcs	r3, r1
	if (!lll->empty) {
   187d6:	f012 0204 	ands.w	r2, r2, #4
		lll->slave.window_widening_event_us =
   187da:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   187dc:	f000 8091 	beq.w	18902 <prepare_cb+0x19a>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   187e0:	f000 fad6 	bl	18d90 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   187e4:	2000      	movs	r0, #0
   187e6:	f000 fb07 	bl	18df8 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   187ea:	4620      	mov	r0, r4
   187ec:	f7ff fc50 	bl	18090 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   187f0:	1d20      	adds	r0, r4, #4
   187f2:	f000 fb1f 	bl	18e34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   187f6:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   187f8:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   187fa:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   187fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   18800:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18802:	f240 605b 	movw	r0, #1627	; 0x65b
   18806:	4319      	orrs	r1, r3
   18808:	f000 fbc0 	bl	18f8c <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1880c:	4630      	mov	r0, r6
   1880e:	f7fe f883 	bl	16918 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   18812:	4621      	mov	r1, r4
   18814:	4846      	ldr	r0, [pc, #280]	; (18930 <prepare_cb+0x1c8>)
   18816:	f000 fa79 	bl	18d0c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1881a:	2096      	movs	r0, #150	; 0x96
   1881c:	f000 fcfe 	bl	1921c <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   18820:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   18824:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18828:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1882c:	2100      	movs	r1, #0
   1882e:	f002 0207 	and.w	r2, r2, #7
   18832:	f000 0007 	and.w	r0, r0, #7
   18836:	f000 fc0f 	bl	19058 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1883a:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1883c:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1883e:	4638      	mov	r0, r7
   18840:	f7fe f850 	bl	168e4 <lll_event_offset_get>
   18844:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   18846:	686a      	ldr	r2, [r5, #4]
   18848:	f106 0109 	add.w	r1, r6, #9
   1884c:	2000      	movs	r0, #0
   1884e:	f000 fcf1 	bl	19234 <radio_tmr_start>
   18852:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   18854:	f000 fdc2 	bl	193dc <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   18858:	2000      	movs	r0, #0
   1885a:	f000 fdd9 	bl	19410 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1885e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18860:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   18864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18866:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1886a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1886e:	2101      	movs	r1, #1
   18870:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   18874:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18876:	f000 fb37 	bl	18ee8 <radio_rx_ready_delay_get>
   1887a:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1887c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18880:	f000 0007 	and.w	r0, r0, #7
   18884:	2802      	cmp	r0, #2
   18886:	d03a      	beq.n	188fe <prepare_cb+0x196>
		return 40;
   18888:	2804      	cmp	r0, #4
   1888a:	bf0c      	ite	eq
   1888c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   18890:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18892:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   18894:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18896:	f000 fb29 	bl	18eec <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1889a:	4428      	add	r0, r5
   1889c:	f000 fd90 	bl	193c0 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   188a0:	89a1      	ldrh	r1, [r4, #12]
   188a2:	3105      	adds	r1, #5
   188a4:	4632      	mov	r2, r6
   188a6:	b2c9      	uxtb	r1, r1
   188a8:	4638      	mov	r0, r7
   188aa:	f7fe f825 	bl	168f8 <lll_preempt_calc>
   188ae:	b188      	cbz	r0, 188d4 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   188b0:	4820      	ldr	r0, [pc, #128]	; (18934 <prepare_cb+0x1cc>)
   188b2:	4621      	mov	r1, r4
   188b4:	f000 fa2a 	bl	18d0c <radio_isr_set>
		radio_disable();
   188b8:	f000 fb2a 	bl	18f10 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   188bc:	2000      	movs	r0, #0
   188be:	b003      	add	sp, #12
   188c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   188c2:	8be1      	ldrh	r1, [r4, #30]
   188c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   188c8:	f104 0218 	add.w	r2, r4, #24
   188cc:	f7fc fc30 	bl	15130 <lll_chan_sel_2>
   188d0:	4606      	mov	r6, r0
   188d2:	e770      	b.n	187b6 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   188d4:	4620      	mov	r0, r4
   188d6:	f7fd ffa5 	bl	16824 <lll_prepare_done>
		LL_ASSERT(!ret);
   188da:	2800      	cmp	r0, #0
   188dc:	d0ee      	beq.n	188bc <prepare_cb+0x154>
   188de:	4a16      	ldr	r2, [pc, #88]	; (18938 <prepare_cb+0x1d0>)
   188e0:	4916      	ldr	r1, [pc, #88]	; (1893c <prepare_cb+0x1d4>)
   188e2:	4817      	ldr	r0, [pc, #92]	; (18940 <prepare_cb+0x1d8>)
   188e4:	f240 1319 	movw	r3, #281	; 0x119
   188e8:	f003 fcd8 	bl	1c29c <printk>
   188ec:	4040      	eors	r0, r0
   188ee:	f380 8811 	msr	BASEPRI, r0
   188f2:	f04f 0003 	mov.w	r0, #3
   188f6:	df02      	svc	2
}
   188f8:	2000      	movs	r0, #0
   188fa:	b003      	add	sp, #12
   188fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   188fe:	2318      	movs	r3, #24
   18900:	e7c7      	b.n	18892 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   18902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   18906:	f7f1 fd59 	bl	a3bc <memq_peek>
		if (!link) {
   1890a:	2800      	cmp	r0, #0
   1890c:	f47f af68 	bne.w	187e0 <prepare_cb+0x78>
			lll->empty = 1U;
   18910:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18914:	f043 0304 	orr.w	r3, r3, #4
   18918:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   1891c:	e760      	b.n	187e0 <prepare_cb+0x78>
		radio_isr_set(lll_isr_early_abort, lll);
   1891e:	4809      	ldr	r0, [pc, #36]	; (18944 <prepare_cb+0x1dc>)
   18920:	4621      	mov	r1, r4
   18922:	f000 f9f3 	bl	18d0c <radio_isr_set>
		radio_disable();
   18926:	f000 faf3 	bl	18f10 <radio_disable>
}
   1892a:	2000      	movs	r0, #0
   1892c:	b003      	add	sp, #12
   1892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18930:	00018315 	.word	0x00018315
   18934:	00016a51 	.word	0x00016a51
   18938:	00021480 	.word	0x00021480
   1893c:	000209f8 	.word	0x000209f8
   18940:	0002060c 	.word	0x0002060c
   18944:	00016a75 	.word	0x00016a75

00018948 <lll_slave_prepare>:
{
   18948:	b510      	push	{r4, lr}
   1894a:	b082      	sub	sp, #8
   1894c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1894e:	f7fe f9df 	bl	16d10 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   18952:	2800      	cmp	r0, #0
   18954:	db25      	blt.n	189a2 <lll_slave_prepare+0x5a>
	lll = p->param;
   18956:	68e1      	ldr	r1, [r4, #12]
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   18958:	8920      	ldrh	r0, [r4, #8]
   1895a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   1895c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   1895e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->slave.window_widening_max_us) {
   18962:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   18964:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us =
   18966:	4283      	cmp	r3, r0
   18968:	bf28      	it	cs
   1896a:	4603      	movcs	r3, r0
   1896c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1896e:	4a13      	ldr	r2, [pc, #76]	; (189bc <lll_slave_prepare+0x74>)
   18970:	4913      	ldr	r1, [pc, #76]	; (189c0 <lll_slave_prepare+0x78>)
   18972:	4814      	ldr	r0, [pc, #80]	; (189c4 <lll_slave_prepare+0x7c>)
   18974:	9400      	str	r4, [sp, #0]
   18976:	2300      	movs	r3, #0
   18978:	f7f6 f890 	bl	ea9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1897c:	b108      	cbz	r0, 18982 <lll_slave_prepare+0x3a>
   1897e:	3077      	adds	r0, #119	; 0x77
   18980:	d101      	bne.n	18986 <lll_slave_prepare+0x3e>
}
   18982:	b002      	add	sp, #8
   18984:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18986:	4a10      	ldr	r2, [pc, #64]	; (189c8 <lll_slave_prepare+0x80>)
   18988:	4910      	ldr	r1, [pc, #64]	; (189cc <lll_slave_prepare+0x84>)
   1898a:	4811      	ldr	r0, [pc, #68]	; (189d0 <lll_slave_prepare+0x88>)
   1898c:	2358      	movs	r3, #88	; 0x58
   1898e:	f003 fc85 	bl	1c29c <printk>
   18992:	4040      	eors	r0, r0
   18994:	f380 8811 	msr	BASEPRI, r0
   18998:	f04f 0003 	mov.w	r0, #3
   1899c:	df02      	svc	2
}
   1899e:	b002      	add	sp, #8
   189a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   189a2:	4a09      	ldr	r2, [pc, #36]	; (189c8 <lll_slave_prepare+0x80>)
   189a4:	490b      	ldr	r1, [pc, #44]	; (189d4 <lll_slave_prepare+0x8c>)
   189a6:	480a      	ldr	r0, [pc, #40]	; (189d0 <lll_slave_prepare+0x88>)
   189a8:	2347      	movs	r3, #71	; 0x47
   189aa:	f003 fc77 	bl	1c29c <printk>
   189ae:	4040      	eors	r0, r0
   189b0:	f380 8811 	msr	BASEPRI, r0
   189b4:	f04f 0003 	mov.w	r0, #3
   189b8:	df02      	svc	2
   189ba:	e7cc      	b.n	18956 <lll_slave_prepare+0xe>
   189bc:	00018769 	.word	0x00018769
   189c0:	00018031 	.word	0x00018031
   189c4:	000168dd 	.word	0x000168dd
   189c8:	00021480 	.word	0x00021480
   189cc:	00021374 	.word	0x00021374
   189d0:	0002060c 	.word	0x0002060c
   189d4:	00021290 	.word	0x00021290

000189d8 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   189d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ull_hdr *ull;
	uint32_t remainder;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   189da:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   189dc:	89a2      	ldrh	r2, [r4, #12]
   189de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   189e2:	429a      	cmp	r2, r3
{
   189e4:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   189e6:	f000 8093 	beq.w	18b10 <prepare_cb+0x138>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   189ea:	4605      	mov	r5, r0
   189ec:	f7ff fb0c 	bl	18008 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   189f0:	892b      	ldrh	r3, [r5, #8]
   189f2:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   189f4:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   189f6:	441a      	add	r2, r3
   189f8:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   189fa:	4410      	add	r0, r2
   189fc:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   189fe:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   18a00:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   18a02:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   18a04:	2100      	movs	r1, #0
   18a06:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   18a08:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   18a0a:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   18a0c:	d463      	bmi.n	18ad6 <prepare_cb+0xfe>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   18a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18a12:	7fa1      	ldrb	r1, [r4, #30]
   18a14:	9300      	str	r3, [sp, #0]
   18a16:	f104 001f 	add.w	r0, r4, #31
   18a1a:	f104 0318 	add.w	r3, r4, #24
   18a1e:	f7fc fb43 	bl	150a8 <lll_chan_sel_1>
   18a22:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a24:	4620      	mov	r0, r4
   18a26:	a903      	add	r1, sp, #12
   18a28:	f7ff fc04 	bl	18234 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   18a2c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   18a30:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   18a32:	f3c2 0340 	ubfx	r3, r2, #1, #1
   18a36:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   18a38:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18a3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18a40:	780a      	ldrb	r2, [r1, #0]
   18a42:	f022 020c 	bic.w	r2, r2, #12
   18a46:	4313      	orrs	r3, r2
   18a48:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   18a4a:	f000 f9a1 	bl	18d90 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18a4e:	2000      	movs	r0, #0
   18a50:	f000 f9d2 	bl	18df8 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   18a54:	1d20      	adds	r0, r4, #4
   18a56:	f000 f9ed 	bl	18e34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   18a5a:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   18a5c:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   18a5e:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   18a60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   18a64:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18a66:	f240 605b 	movw	r0, #1627	; 0x65b
   18a6a:	4319      	orrs	r1, r3
   18a6c:	f000 fa8e 	bl	18f8c <radio_crc_configure>
	lll_chan_set(data_chan_use);
   18a70:	4630      	mov	r0, r6
   18a72:	f7fd ff51 	bl	16918 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   18a76:	9903      	ldr	r1, [sp, #12]
   18a78:	4620      	mov	r0, r4
   18a7a:	f7ff fbad 	bl	181d8 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   18a7e:	4621      	mov	r1, r4
   18a80:	4828      	ldr	r0, [pc, #160]	; (18b24 <prepare_cb+0x14c>)
   18a82:	f000 f943 	bl	18d0c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   18a86:	2096      	movs	r0, #150	; 0x96
   18a88:	f000 fbc8 	bl	1921c <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   18a8c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18a90:	f000 0007 	and.w	r0, r0, #7
   18a94:	f000 fa98 	bl	18fc8 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   18a98:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   18a9a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   18a9c:	4638      	mov	r0, r7
   18a9e:	f7fd ff21 	bl	168e4 <lll_event_offset_get>
   18aa2:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   18aa4:	686a      	ldr	r2, [r5, #4]
   18aa6:	f106 0109 	add.w	r1, r6, #9
   18aaa:	2001      	movs	r0, #1
   18aac:	f000 fbc2 	bl	19234 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   18ab0:	f000 fcc0 	bl	19434 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   18ab4:	89a1      	ldrh	r1, [r4, #12]
   18ab6:	3105      	adds	r1, #5
   18ab8:	4632      	mov	r2, r6
   18aba:	b2c9      	uxtb	r1, r1
   18abc:	4638      	mov	r0, r7
   18abe:	f7fd ff1b 	bl	168f8 <lll_preempt_calc>
   18ac2:	b188      	cbz	r0, 18ae8 <prepare_cb+0x110>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   18ac4:	4818      	ldr	r0, [pc, #96]	; (18b28 <prepare_cb+0x150>)
   18ac6:	4621      	mov	r1, r4
   18ac8:	f000 f920 	bl	18d0c <radio_isr_set>
		radio_disable();
   18acc:	f000 fa20 	bl	18f10 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   18ad0:	2000      	movs	r0, #0
   18ad2:	b005      	add	sp, #20
   18ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   18ad6:	8be1      	ldrh	r1, [r4, #30]
   18ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18adc:	f104 0218 	add.w	r2, r4, #24
   18ae0:	f7fc fb26 	bl	15130 <lll_chan_sel_2>
   18ae4:	4606      	mov	r6, r0
   18ae6:	e79d      	b.n	18a24 <prepare_cb+0x4c>
		ret = lll_prepare_done(lll);
   18ae8:	4620      	mov	r0, r4
   18aea:	f7fd fe9b 	bl	16824 <lll_prepare_done>
		LL_ASSERT(!ret);
   18aee:	2800      	cmp	r0, #0
   18af0:	d0ee      	beq.n	18ad0 <prepare_cb+0xf8>
   18af2:	4a0e      	ldr	r2, [pc, #56]	; (18b2c <prepare_cb+0x154>)
   18af4:	490e      	ldr	r1, [pc, #56]	; (18b30 <prepare_cb+0x158>)
   18af6:	480f      	ldr	r0, [pc, #60]	; (18b34 <prepare_cb+0x15c>)
   18af8:	23d8      	movs	r3, #216	; 0xd8
   18afa:	f003 fbcf 	bl	1c29c <printk>
   18afe:	4040      	eors	r0, r0
   18b00:	f380 8811 	msr	BASEPRI, r0
   18b04:	f04f 0003 	mov.w	r0, #3
   18b08:	df02      	svc	2
}
   18b0a:	2000      	movs	r0, #0
   18b0c:	b005      	add	sp, #20
   18b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   18b10:	4809      	ldr	r0, [pc, #36]	; (18b38 <prepare_cb+0x160>)
   18b12:	4621      	mov	r1, r4
   18b14:	f000 f8fa 	bl	18d0c <radio_isr_set>
		radio_disable();
   18b18:	f000 f9fa 	bl	18f10 <radio_disable>
}
   18b1c:	2000      	movs	r0, #0
   18b1e:	b005      	add	sp, #20
   18b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18b22:	bf00      	nop
   18b24:	00018121 	.word	0x00018121
   18b28:	00016a51 	.word	0x00016a51
   18b2c:	000214e0 	.word	0x000214e0
   18b30:	000209f8 	.word	0x000209f8
   18b34:	0002060c 	.word	0x0002060c
   18b38:	00016a75 	.word	0x00016a75

00018b3c <lll_master_prepare>:
{
   18b3c:	b510      	push	{r4, lr}
   18b3e:	b082      	sub	sp, #8
   18b40:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   18b42:	f7fe f8e5 	bl	16d10 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   18b46:	2800      	cmp	r0, #0
   18b48:	db19      	blt.n	18b7e <lll_master_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   18b4a:	4a13      	ldr	r2, [pc, #76]	; (18b98 <lll_master_prepare+0x5c>)
   18b4c:	4913      	ldr	r1, [pc, #76]	; (18b9c <lll_master_prepare+0x60>)
   18b4e:	4814      	ldr	r0, [pc, #80]	; (18ba0 <lll_master_prepare+0x64>)
   18b50:	9400      	str	r4, [sp, #0]
   18b52:	2300      	movs	r3, #0
   18b54:	f7f5 ffa2 	bl	ea9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18b58:	b108      	cbz	r0, 18b5e <lll_master_prepare+0x22>
   18b5a:	3077      	adds	r0, #119	; 0x77
   18b5c:	d101      	bne.n	18b62 <lll_master_prepare+0x26>
}
   18b5e:	b002      	add	sp, #8
   18b60:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18b62:	4a10      	ldr	r2, [pc, #64]	; (18ba4 <lll_master_prepare+0x68>)
   18b64:	4910      	ldr	r1, [pc, #64]	; (18ba8 <lll_master_prepare+0x6c>)
   18b66:	4811      	ldr	r0, [pc, #68]	; (18bac <lll_master_prepare+0x70>)
   18b68:	234b      	movs	r3, #75	; 0x4b
   18b6a:	f003 fb97 	bl	1c29c <printk>
   18b6e:	4040      	eors	r0, r0
   18b70:	f380 8811 	msr	BASEPRI, r0
   18b74:	f04f 0003 	mov.w	r0, #3
   18b78:	df02      	svc	2
}
   18b7a:	b002      	add	sp, #8
   18b7c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   18b7e:	4a09      	ldr	r2, [pc, #36]	; (18ba4 <lll_master_prepare+0x68>)
   18b80:	490b      	ldr	r1, [pc, #44]	; (18bb0 <lll_master_prepare+0x74>)
   18b82:	480a      	ldr	r0, [pc, #40]	; (18bac <lll_master_prepare+0x70>)
   18b84:	2346      	movs	r3, #70	; 0x46
   18b86:	f003 fb89 	bl	1c29c <printk>
   18b8a:	4040      	eors	r0, r0
   18b8c:	f380 8811 	msr	BASEPRI, r0
   18b90:	f04f 0003 	mov.w	r0, #3
   18b94:	df02      	svc	2
   18b96:	e7d8      	b.n	18b4a <lll_master_prepare+0xe>
   18b98:	000189d9 	.word	0x000189d9
   18b9c:	00018031 	.word	0x00018031
   18ba0:	000168dd 	.word	0x000168dd
   18ba4:	000214e0 	.word	0x000214e0
   18ba8:	00021374 	.word	0x00021374
   18bac:	0002060c 	.word	0x0002060c
   18bb0:	00021290 	.word	0x00021290

00018bb4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   18bb4:	4b05      	ldr	r3, [pc, #20]	; (18bcc <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   18bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18bba:	2100      	movs	r1, #0
   18bbc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   18bc0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   18bc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   18bc8:	4770      	bx	lr
   18bca:	bf00      	nop
   18bcc:	4000b000 	.word	0x4000b000

00018bd0 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   18bd0:	4b05      	ldr	r3, [pc, #20]	; (18be8 <cntr_start+0x18>)
   18bd2:	7818      	ldrb	r0, [r3, #0]
   18bd4:	1c42      	adds	r2, r0, #1
   18bd6:	701a      	strb	r2, [r3, #0]
   18bd8:	b918      	cbnz	r0, 18be2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18bda:	4b04      	ldr	r3, [pc, #16]	; (18bec <cntr_start+0x1c>)
   18bdc:	2201      	movs	r2, #1
   18bde:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   18be0:	4770      	bx	lr
		return 1;
   18be2:	2001      	movs	r0, #1
}
   18be4:	4770      	bx	lr
   18be6:	bf00      	nop
   18be8:	2000290b 	.word	0x2000290b
   18bec:	4000b000 	.word	0x4000b000

00018bf0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   18bf0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   18bf2:	4c0d      	ldr	r4, [pc, #52]	; (18c28 <cntr_stop+0x38>)
   18bf4:	7820      	ldrb	r0, [r4, #0]
   18bf6:	b148      	cbz	r0, 18c0c <cntr_stop+0x1c>

	if (--_refcount) {
   18bf8:	3801      	subs	r0, #1
   18bfa:	b2c0      	uxtb	r0, r0
   18bfc:	7020      	strb	r0, [r4, #0]
   18bfe:	b918      	cbnz	r0, 18c08 <cntr_stop+0x18>
   18c00:	4b0a      	ldr	r3, [pc, #40]	; (18c2c <cntr_stop+0x3c>)
   18c02:	2201      	movs	r2, #1
   18c04:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   18c06:	bd10      	pop	{r4, pc}
		return 1;
   18c08:	2001      	movs	r0, #1
}
   18c0a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   18c0c:	4a08      	ldr	r2, [pc, #32]	; (18c30 <cntr_stop+0x40>)
   18c0e:	4909      	ldr	r1, [pc, #36]	; (18c34 <cntr_stop+0x44>)
   18c10:	4809      	ldr	r0, [pc, #36]	; (18c38 <cntr_stop+0x48>)
   18c12:	232d      	movs	r3, #45	; 0x2d
   18c14:	f003 fb42 	bl	1c29c <printk>
   18c18:	4040      	eors	r0, r0
   18c1a:	f380 8811 	msr	BASEPRI, r0
   18c1e:	f04f 0003 	mov.w	r0, #3
   18c22:	df02      	svc	2
	if (--_refcount) {
   18c24:	7820      	ldrb	r0, [r4, #0]
   18c26:	e7e7      	b.n	18bf8 <cntr_stop+0x8>
   18c28:	2000290b 	.word	0x2000290b
   18c2c:	4000b000 	.word	0x4000b000
   18c30:	00021544 	.word	0x00021544
   18c34:	00021590 	.word	0x00021590
   18c38:	0002060c 	.word	0x0002060c

00018c3c <cntr_cnt_get>:
     return p_reg->COUNTER;
   18c3c:	4b01      	ldr	r3, [pc, #4]	; (18c44 <cntr_cnt_get+0x8>)
   18c3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   18c42:	4770      	bx	lr
   18c44:	4000b000 	.word	0x4000b000

00018c48 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   18c48:	4b02      	ldr	r3, [pc, #8]	; (18c54 <cntr_cmp_set+0xc>)
   18c4a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   18c4e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   18c52:	4770      	bx	lr
   18c54:	4000b000 	.word	0x4000b000

00018c58 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c58:	4b12      	ldr	r3, [pc, #72]	; (18ca4 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   18c5a:	b430      	push	{r4, r5}
   18c5c:	2101      	movs	r1, #1
   18c5e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   18c60:	2000      	movs	r0, #0
   18c62:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   18c64:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   18c68:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   18c6c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   18c70:	6019      	str	r1, [r3, #0]
}
   18c72:	e005      	b.n	18c80 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   18c74:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18c78:	b932      	cbnz	r2, 18c88 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   18c7a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   18c7e:	b11a      	cbz	r2, 18c88 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18c80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   18c84:	2a00      	cmp	r2, #0
   18c86:	d0f5      	beq.n	18c74 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c88:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   18c8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   18c8e:	2a00      	cmp	r2, #0
   18c90:	d1e7      	bne.n	18c62 <do_ecb+0xa>
   18c92:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   18c96:	2d00      	cmp	r5, #0
   18c98:	d0e3      	beq.n	18c62 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   18c9a:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   18c9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   18ca0:	4770      	bx	lr
   18ca2:	bf00      	nop
   18ca4:	4000e000 	.word	0x4000e000

00018ca8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   18ca8:	b570      	push	{r4, r5, r6, lr}
   18caa:	b08c      	sub	sp, #48	; 0x30
   18cac:	460e      	mov	r6, r1
   18cae:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18cb0:	4601      	mov	r1, r0
   18cb2:	2210      	movs	r2, #16
   18cb4:	4668      	mov	r0, sp
{
   18cb6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18cb8:	f7f1 fb4e 	bl	a358 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   18cbc:	2210      	movs	r2, #16
   18cbe:	eb0d 0002 	add.w	r0, sp, r2
   18cc2:	4631      	mov	r1, r6
   18cc4:	f7f1 fb48 	bl	a358 <mem_rcopy>

	do_ecb(&ecb);
   18cc8:	4668      	mov	r0, sp
   18cca:	f7ff ffc5 	bl	18c58 <do_ecb>

	if (cipher_text_le) {
   18cce:	b125      	cbz	r5, 18cda <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   18cd0:	2210      	movs	r2, #16
   18cd2:	a908      	add	r1, sp, #32
   18cd4:	4628      	mov	r0, r5
   18cd6:	f7f1 fb3f 	bl	a358 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   18cda:	b124      	cbz	r4, 18ce6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   18cdc:	2210      	movs	r2, #16
   18cde:	a908      	add	r1, sp, #32
   18ce0:	4620      	mov	r0, r4
   18ce2:	f004 fd91 	bl	1d808 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   18ce6:	b00c      	add	sp, #48	; 0x30
   18ce8:	bd70      	pop	{r4, r5, r6, pc}
   18cea:	bf00      	nop

00018cec <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   18cec:	4b04      	ldr	r3, [pc, #16]	; (18d00 <isr_radio+0x14>)
   18cee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   18cf2:	b123      	cbz	r3, 18cfe <isr_radio+0x12>
		isr_cb(isr_cb_param);
   18cf4:	4a03      	ldr	r2, [pc, #12]	; (18d04 <isr_radio+0x18>)
   18cf6:	4b04      	ldr	r3, [pc, #16]	; (18d08 <isr_radio+0x1c>)
   18cf8:	6810      	ldr	r0, [r2, #0]
   18cfa:	681b      	ldr	r3, [r3, #0]
   18cfc:	4718      	bx	r3
}
   18cfe:	4770      	bx	lr
   18d00:	40001000 	.word	0x40001000
   18d04:	200025e4 	.word	0x200025e4
   18d08:	200025e0 	.word	0x200025e0

00018d0c <radio_isr_set>:
{
   18d0c:	b538      	push	{r3, r4, r5, lr}
   18d0e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   18d10:	2001      	movs	r0, #1
{
   18d12:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   18d14:	f7eb fcc4 	bl	46a0 <arch_irq_disable>
	isr_cb = cb;
   18d18:	4b08      	ldr	r3, [pc, #32]	; (18d3c <radio_isr_set+0x30>)
	isr_cb_param = param;
   18d1a:	4a09      	ldr	r2, [pc, #36]	; (18d40 <radio_isr_set+0x34>)
	isr_cb = cb;
   18d1c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   18d1e:	4909      	ldr	r1, [pc, #36]	; (18d44 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18d20:	4b09      	ldr	r3, [pc, #36]	; (18d48 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   18d22:	6015      	str	r5, [r2, #0]
   18d24:	2010      	movs	r0, #16
   18d26:	2202      	movs	r2, #2
   18d28:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   18d2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   18d30:	2001      	movs	r0, #1
}
   18d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   18d36:	f7eb bca3 	b.w	4680 <arch_irq_enable>
   18d3a:	bf00      	nop
   18d3c:	200025e0 	.word	0x200025e0
   18d40:	200025e4 	.word	0x200025e4
   18d44:	40001000 	.word	0x40001000
   18d48:	e000e100 	.word	0xe000e100

00018d4c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   18d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   18d54:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   18d56:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   18d5a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   18d5e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   18d62:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   18d66:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   18d6a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   18d6e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   18d72:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   18d76:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   18d7a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   18d7e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   18d82:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   18d86:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   18d8a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   18d8e:	4770      	bx	lr

00018d90 <radio_reset>:
{
   18d90:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   18d92:	2001      	movs	r0, #1
   18d94:	f7eb fc84 	bl	46a0 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   18d98:	4a0d      	ldr	r2, [pc, #52]	; (18dd0 <radio_reset+0x40>)
   18d9a:	2100      	movs	r1, #0
   18d9c:	2301      	movs	r3, #1
   18d9e:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   18da2:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   18da6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   18daa:	490a      	ldr	r1, [pc, #40]	; (18dd4 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   18dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18db0:	f023 0301 	bic.w	r3, r3, #1
   18db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18db8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   18dbc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   18dc0:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   18dc4:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   18dc8:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   18dcc:	bd10      	pop	{r4, pc}
   18dce:	bf00      	nop
   18dd0:	40001000 	.word	0x40001000
   18dd4:	4001f000 	.word	0x4001f000

00018dd8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   18dd8:	4b06      	ldr	r3, [pc, #24]	; (18df4 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   18dda:	2802      	cmp	r0, #2
   18ddc:	bf14      	ite	ne
   18dde:	2203      	movne	r2, #3
   18de0:	2204      	moveq	r2, #4
   18de2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   18de6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   18dea:	f042 0201 	orr.w	r2, r2, #1
   18dee:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   18df2:	4770      	bx	lr
   18df4:	40001000 	.word	0x40001000

00018df8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   18df8:	4b01      	ldr	r3, [pc, #4]	; (18e00 <radio_tx_power_set+0x8>)
   18dfa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18dfe:	4770      	bx	lr
   18e00:	40001000 	.word	0x40001000

00018e04 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   18e04:	4b01      	ldr	r3, [pc, #4]	; (18e0c <radio_freq_chan_set+0x8>)
   18e06:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   18e0a:	4770      	bx	lr
   18e0c:	40001000 	.word	0x40001000

00018e10 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   18e10:	4b07      	ldr	r3, [pc, #28]	; (18e30 <radio_whiten_iv_set+0x20>)
   18e12:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   18e16:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   18e1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   18e1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   18e22:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   18e26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   18e2a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   18e2e:	4770      	bx	lr
   18e30:	40001000 	.word	0x40001000

00018e34 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   18e34:	4a0a      	ldr	r2, [pc, #40]	; (18e60 <radio_aa_set+0x2c>)
   18e36:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   18e38:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   18e3a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   18e3e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   18e42:	78c3      	ldrb	r3, [r0, #3]
   18e44:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   18e48:	7843      	ldrb	r3, [r0, #1]
   18e4a:	f890 c002 	ldrb.w	ip, [r0, #2]
   18e4e:	7801      	ldrb	r1, [r0, #0]
   18e50:	041b      	lsls	r3, r3, #16
   18e52:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   18e56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   18e5a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   18e5e:	4770      	bx	lr
   18e60:	40001000 	.word	0x40001000

00018e64 <radio_pkt_configure>:
	switch (phy) {
   18e64:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   18e68:	2b02      	cmp	r3, #2
   18e6a:	bf14      	ite	ne
   18e6c:	f04f 0c00 	movne.w	ip, #0
   18e70:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   18e74:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   18e76:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   18e7a:	bf48      	it	mi
   18e7c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   18e80:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   18e82:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   18e86:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   18e8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   18e8e:	4a0a      	ldr	r2, [pc, #40]	; (18eb8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   18e90:	4303      	orrs	r3, r0
   18e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   18e96:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   18e9a:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   18e9e:	4b07      	ldr	r3, [pc, #28]	; (18ebc <radio_pkt_configure+0x58>)
   18ea0:	4003      	ands	r3, r0
   18ea2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   18ea6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   18eaa:	4319      	orrs	r1, r3
   18eac:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   18eb0:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   18eb4:	4770      	bx	lr
   18eb6:	bf00      	nop
   18eb8:	40001000 	.word	0x40001000
   18ebc:	fef80000 	.word	0xfef80000

00018ec0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   18ec0:	4b01      	ldr	r3, [pc, #4]	; (18ec8 <radio_pkt_rx_set+0x8>)
   18ec2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   18ec6:	4770      	bx	lr
   18ec8:	40001000 	.word	0x40001000

00018ecc <radio_pkt_tx_set>:
   18ecc:	4b01      	ldr	r3, [pc, #4]	; (18ed4 <radio_pkt_tx_set+0x8>)
   18ece:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   18ed2:	4770      	bx	lr
   18ed4:	40001000 	.word	0x40001000

00018ed8 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   18ed8:	2802      	cmp	r0, #2
}
   18eda:	bf14      	ite	ne
   18edc:	2029      	movne	r0, #41	; 0x29
   18ede:	2028      	moveq	r0, #40	; 0x28
   18ee0:	4770      	bx	lr
   18ee2:	bf00      	nop

00018ee4 <radio_tx_chain_delay_get>:
}
   18ee4:	2001      	movs	r0, #1
   18ee6:	4770      	bx	lr

00018ee8 <radio_rx_ready_delay_get>:
}
   18ee8:	2029      	movs	r0, #41	; 0x29
   18eea:	4770      	bx	lr

00018eec <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   18eec:	2802      	cmp	r0, #2
}
   18eee:	bf14      	ite	ne
   18ef0:	200a      	movne	r0, #10
   18ef2:	2005      	moveq	r0, #5
   18ef4:	4770      	bx	lr
   18ef6:	bf00      	nop

00018ef8 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ef8:	4b01      	ldr	r3, [pc, #4]	; (18f00 <radio_rx_enable+0x8>)
   18efa:	2201      	movs	r2, #1
   18efc:	605a      	str	r2, [r3, #4]
}
   18efe:	4770      	bx	lr
   18f00:	40001000 	.word	0x40001000

00018f04 <radio_tx_enable>:
   18f04:	4b01      	ldr	r3, [pc, #4]	; (18f0c <radio_tx_enable+0x8>)
   18f06:	2201      	movs	r2, #1
   18f08:	601a      	str	r2, [r3, #0]
}
   18f0a:	4770      	bx	lr
   18f0c:	40001000 	.word	0x40001000

00018f10 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   18f10:	4a07      	ldr	r2, [pc, #28]	; (18f30 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   18f12:	4908      	ldr	r1, [pc, #32]	; (18f34 <radio_disable+0x24>)
{
   18f14:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   18f16:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   18f18:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   18f1c:	2000      	movs	r0, #0
   18f1e:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   18f22:	6053      	str	r3, [r2, #4]
}
   18f24:	bc10      	pop	{r4}
   18f26:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   18f28:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   18f2c:	610b      	str	r3, [r1, #16]
}
   18f2e:	4770      	bx	lr
   18f30:	4001f000 	.word	0x4001f000
   18f34:	40001000 	.word	0x40001000

00018f38 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   18f38:	4b04      	ldr	r3, [pc, #16]	; (18f4c <radio_status_reset+0x14>)
   18f3a:	2200      	movs	r2, #0
   18f3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   18f40:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   18f44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   18f48:	4770      	bx	lr
   18f4a:	bf00      	nop
   18f4c:	40001000 	.word	0x40001000

00018f50 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   18f50:	4b03      	ldr	r3, [pc, #12]	; (18f60 <radio_is_ready+0x10>)
   18f52:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   18f56:	3800      	subs	r0, #0
   18f58:	bf18      	it	ne
   18f5a:	2001      	movne	r0, #1
   18f5c:	4770      	bx	lr
   18f5e:	bf00      	nop
   18f60:	40001000 	.word	0x40001000

00018f64 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   18f64:	4b03      	ldr	r3, [pc, #12]	; (18f74 <radio_is_done+0x10>)
   18f66:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   18f6a:	3800      	subs	r0, #0
   18f6c:	bf18      	it	ne
   18f6e:	2001      	movne	r0, #1
   18f70:	4770      	bx	lr
   18f72:	bf00      	nop
   18f74:	40001000 	.word	0x40001000

00018f78 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   18f78:	4b03      	ldr	r3, [pc, #12]	; (18f88 <radio_is_idle+0x10>)
   18f7a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   18f7e:	fab0 f080 	clz	r0, r0
   18f82:	0940      	lsrs	r0, r0, #5
   18f84:	4770      	bx	lr
   18f86:	bf00      	nop
   18f88:	40001000 	.word	0x40001000

00018f8c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   18f8c:	4b04      	ldr	r3, [pc, #16]	; (18fa0 <radio_crc_configure+0x14>)
   18f8e:	f240 1203 	movw	r2, #259	; 0x103
   18f92:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   18f96:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   18f9a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   18f9e:	4770      	bx	lr
   18fa0:	40001000 	.word	0x40001000

00018fa4 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   18fa4:	4b03      	ldr	r3, [pc, #12]	; (18fb4 <radio_crc_is_valid+0x10>)
   18fa6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18faa:	3800      	subs	r0, #0
   18fac:	bf18      	it	ne
   18fae:	2001      	movne	r0, #1
   18fb0:	4770      	bx	lr
   18fb2:	bf00      	nop
   18fb4:	40001000 	.word	0x40001000

00018fb8 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   18fb8:	4800      	ldr	r0, [pc, #0]	; (18fbc <radio_pkt_empty_get+0x4>)
   18fba:	4770      	bx	lr
   18fbc:	200024d8 	.word	0x200024d8

00018fc0 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   18fc0:	4800      	ldr	r0, [pc, #0]	; (18fc4 <radio_pkt_scratch_get+0x4>)
   18fc2:	4770      	bx	lr
   18fc4:	200024dc 	.word	0x200024dc

00018fc8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18fc8:	4b1d      	ldr	r3, [pc, #116]	; (19040 <radio_switch_complete_and_rx+0x78>)
{
   18fca:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18fcc:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18fce:	4d1d      	ldr	r5, [pc, #116]	; (19044 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18fd4:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18fd6:	4e1c      	ldr	r6, [pc, #112]	; (19048 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18fd8:	4c1c      	ldr	r4, [pc, #112]	; (1904c <radio_switch_complete_and_rx+0x84>)
   18fda:	4f1d      	ldr	r7, [pc, #116]	; (19050 <radio_switch_complete_and_rx+0x88>)
   18fdc:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   18fe0:	f102 030c 	add.w	r3, r2, #12
   18fe4:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18fe6:	00d0      	lsls	r0, r2, #3
   18fe8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18fea:	0091      	lsls	r1, r2, #2
   18fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18ff0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   18ff4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   18ff8:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18ffc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19000:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   19004:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   19008:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1900c:	4811      	ldr	r0, [pc, #68]	; (19054 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1900e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19012:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   19016:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1901a:	2b28      	cmp	r3, #40	; 0x28
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1901c:	bf8a      	itet	hi
   1901e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   19022:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   19024:	3b28      	subhi	r3, #40	; 0x28
   19026:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1902a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1902c:	4b06      	ldr	r3, [pc, #24]	; (19048 <radio_switch_complete_and_rx+0x80>)
   1902e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   19032:	f002 0201 	and.w	r2, r2, #1
   19036:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1903a:	702a      	strb	r2, [r5, #0]
	 */
	sw_switch(SW_SWITCH_PREV_TX, SW_SWITCH_NEXT_RX,
		  SW_SWITCH_PREV_PHY_1M, SW_SWITCH_PREV_FLAGS_DONTCARE,
		  phy_rx, SW_SWITCH_NEXT_FLAGS_DONTCARE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1903c:	bcf0      	pop	{r4, r5, r6, r7}
   1903e:	4770      	bx	lr
   19040:	40001000 	.word	0x40001000
   19044:	2000290c 	.word	0x2000290c
   19048:	4001f000 	.word	0x4001f000
   1904c:	40009140 	.word	0x40009140
   19050:	4000110c 	.word	0x4000110c
   19054:	40001004 	.word	0x40001004

00019058 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   19058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1905c:	4e28      	ldr	r6, [pc, #160]	; (19100 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1905e:	4c29      	ldr	r4, [pc, #164]	; (19104 <radio_switch_complete_and_tx+0xac>)
   19060:	4f29      	ldr	r7, [pc, #164]	; (19108 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19062:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1910c <radio_switch_complete_and_tx+0xb4>
   19066:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 19110 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1906a:	2303      	movs	r3, #3
   1906c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19070:	7821      	ldrb	r1, [r4, #0]
   19072:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   19076:	f101 030c 	add.w	r3, r1, #12
   1907a:	b2db      	uxtb	r3, r3
   1907c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1907e:	00cd      	lsls	r5, r1, #3
   19080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19084:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   19088:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1908c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   19090:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19094:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19098:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1909c:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   190a0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   190a4:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   190a8:	2a02      	cmp	r2, #2
   190aa:	bf08      	it	eq
   190ac:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   190ae:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   190b2:	f242 42b8 	movw	r2, #9400	; 0x24b8
   190b6:	f241 3588 	movw	r5, #5000	; 0x1388
   190ba:	2802      	cmp	r0, #2
   190bc:	bf08      	it	eq
   190be:	462a      	moveq	r2, r5
   190c0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   190c4:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   190c8:	4413      	add	r3, r2
   190ca:	4a12      	ldr	r2, [pc, #72]	; (19114 <radio_switch_complete_and_tx+0xbc>)
   190cc:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   190d0:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   190d4:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   190d8:	bf85      	ittet	hi
   190da:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   190dc:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   190e0:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   190e2:	1a1b      	subhi	r3, r3, r0
   190e4:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   190e8:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   190ea:	4b08      	ldr	r3, [pc, #32]	; (1910c <radio_switch_complete_and_tx+0xb4>)
   190ec:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   190f0:	f001 0101 	and.w	r1, r1, #1
   190f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   190f8:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_PREV_RX, SW_SWITCH_NEXT_TX,
		  phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   190fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   190fe:	bf00      	nop
   19100:	40001000 	.word	0x40001000
   19104:	2000290c 	.word	0x2000290c
   19108:	40009140 	.word	0x40009140
   1910c:	4001f000 	.word	0x4001f000
   19110:	4000110c 	.word	0x4000110c
   19114:	10624dd3 	.word	0x10624dd3

00019118 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   19118:	4904      	ldr	r1, [pc, #16]	; (1912c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1911a:	4b05      	ldr	r3, [pc, #20]	; (19130 <radio_switch_complete_and_disable+0x18>)
   1911c:	2003      	movs	r0, #3
   1911e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   19122:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   19126:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1912a:	4770      	bx	lr
   1912c:	40001000 	.word	0x40001000
   19130:	4001f000 	.word	0x4001f000

00019134 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   19134:	4a03      	ldr	r2, [pc, #12]	; (19144 <radio_rssi_measure+0x10>)
   19136:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1913a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1913e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   19142:	4770      	bx	lr
   19144:	40001000 	.word	0x40001000

00019148 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   19148:	4b01      	ldr	r3, [pc, #4]	; (19150 <radio_rssi_get+0x8>)
   1914a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1914e:	4770      	bx	lr
   19150:	40001000 	.word	0x40001000

00019154 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   19154:	4b02      	ldr	r3, [pc, #8]	; (19160 <radio_rssi_status_reset+0xc>)
   19156:	2200      	movs	r2, #0
   19158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1915c:	4770      	bx	lr
   1915e:	bf00      	nop
   19160:	40001000 	.word	0x40001000

00019164 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   19164:	4b03      	ldr	r3, [pc, #12]	; (19174 <radio_rssi_is_ready+0x10>)
   19166:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1916a:	3800      	subs	r0, #0
   1916c:	bf18      	it	ne
   1916e:	2001      	movne	r0, #1
   19170:	4770      	bx	lr
   19172:	bf00      	nop
   19174:	40001000 	.word	0x40001000

00019178 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   19178:	b410      	push	{r4}
   1917a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1917e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   19182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1918a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1918c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   19190:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   19194:	8894      	ldrh	r4, [r2, #4]
   19196:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1919a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1919e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   191a2:	d1ec      	bne.n	1917e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   191a4:	4b03      	ldr	r3, [pc, #12]	; (191b4 <radio_filter_configure+0x3c>)
}
   191a6:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   191a8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   191ac:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   191b0:	4770      	bx	lr
   191b2:	bf00      	nop
   191b4:	40001000 	.word	0x40001000

000191b8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   191b8:	4a03      	ldr	r2, [pc, #12]	; (191c8 <radio_filter_disable+0x10>)
   191ba:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   191be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   191c2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   191c6:	4770      	bx	lr
   191c8:	40001000 	.word	0x40001000

000191cc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   191cc:	4b02      	ldr	r3, [pc, #8]	; (191d8 <radio_filter_status_reset+0xc>)
   191ce:	2200      	movs	r2, #0
   191d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   191d4:	4770      	bx	lr
   191d6:	bf00      	nop
   191d8:	40001000 	.word	0x40001000

000191dc <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   191dc:	4b03      	ldr	r3, [pc, #12]	; (191ec <radio_filter_has_match+0x10>)
   191de:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   191e2:	3800      	subs	r0, #0
   191e4:	bf18      	it	ne
   191e6:	2001      	movne	r0, #1
   191e8:	4770      	bx	lr
   191ea:	bf00      	nop
   191ec:	40001000 	.word	0x40001000

000191f0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   191f0:	4b01      	ldr	r3, [pc, #4]	; (191f8 <radio_filter_match_get+0x8>)
   191f2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   191f6:	4770      	bx	lr
   191f8:	40001000 	.word	0x40001000

000191fc <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   191fc:	4904      	ldr	r1, [pc, #16]	; (19210 <radio_tmr_status_reset+0x14>)
   191fe:	4b05      	ldr	r3, [pc, #20]	; (19214 <radio_tmr_status_reset+0x18>)
   19200:	4a05      	ldr	r2, [pc, #20]	; (19218 <radio_tmr_status_reset+0x1c>)
   19202:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   19206:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1920a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1920e:	4770      	bx	lr
   19210:	4000b000 	.word	0x4000b000
   19214:	4001f000 	.word	0x4001f000
   19218:	0e7000c0 	.word	0x0e7000c0

0001921c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1921c:	4b03      	ldr	r3, [pc, #12]	; (1922c <radio_tmr_tifs_set+0x10>)
   1921e:	4a04      	ldr	r2, [pc, #16]	; (19230 <radio_tmr_tifs_set+0x14>)
   19220:	781b      	ldrb	r3, [r3, #0]
   19222:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   19226:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1922a:	4770      	bx	lr
   1922c:	2000290c 	.word	0x2000290c
   19230:	40009000 	.word	0x40009000

00019234 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   19234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19238:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1923c:	4d31      	ldr	r5, [pc, #196]	; (19304 <radio_tmr_start+0xd0>)
   1923e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   19242:	42ab      	cmp	r3, r5
{
   19244:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19246:	d906      	bls.n	19256 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   19248:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1924c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   19250:	3901      	subs	r1, #1
		remainder += 30517578UL;
   19252:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19256:	4b2c      	ldr	r3, [pc, #176]	; (19308 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   19258:	482c      	ldr	r0, [pc, #176]	; (1930c <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1925a:	4d2d      	ldr	r5, [pc, #180]	; (19310 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1925c:	4e2d      	ldr	r6, [pc, #180]	; (19314 <radio_tmr_start+0xe0>)
   1925e:	2701      	movs	r7, #1
   19260:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   19262:	2700      	movs	r7, #0
   19264:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   19268:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1926c:	2704      	movs	r7, #4
   1926e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   19272:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   19274:	2702      	movs	r7, #2
   19276:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1927a:	4a27      	ldr	r2, [pc, #156]	; (19318 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1927c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   19280:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19284:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19288:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1928c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1928e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19292:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19296:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1929a:	bb64      	cbnz	r4, 192f6 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1929c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   192a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   192a4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   192a8:	4b1b      	ldr	r3, [pc, #108]	; (19318 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192aa:	4a1c      	ldr	r2, [pc, #112]	; (1931c <radio_tmr_start+0xe8>)
   192ac:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   192b0:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   192b2:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192b4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 19320 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192b8:	f8df e068 	ldr.w	lr, [pc, #104]	; 19324 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192bc:	f8df c068 	ldr.w	ip, [pc, #104]	; 19328 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192c0:	4f1a      	ldr	r7, [pc, #104]	; (1932c <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192c2:	4e1b      	ldr	r6, [pc, #108]	; (19330 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192c4:	4d1b      	ldr	r5, [pc, #108]	; (19334 <radio_tmr_start+0x100>)
   192c6:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   192c8:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   192cc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   192d0:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   192d4:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   192d8:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192da:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192de:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192e2:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192e6:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192ea:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   192ee:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   192f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   192f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   192fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   192fe:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   19302:	e7d1      	b.n	192a8 <radio_tmr_start+0x74>
   19304:	7ff0bdbf 	.word	0x7ff0bdbf
   19308:	40008000 	.word	0x40008000
   1930c:	431bde83 	.word	0x431bde83
   19310:	4000b000 	.word	0x4000b000
   19314:	4000b148 	.word	0x4000b148
   19318:	4001f000 	.word	0x4001f000
   1931c:	40009000 	.word	0x40009000
   19320:	4000110c 	.word	0x4000110c
   19324:	4000900c 	.word	0x4000900c
   19328:	40009140 	.word	0x40009140
   1932c:	4001f004 	.word	0x4001f004
   19330:	40009144 	.word	0x40009144
   19334:	4001f00c 	.word	0x4001f00c

00019338 <radio_tmr_start_tick>:
   19338:	4a15      	ldr	r2, [pc, #84]	; (19390 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1933a:	b430      	push	{r4, r5}
   1933c:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1933e:	4c15      	ldr	r4, [pc, #84]	; (19394 <radio_tmr_start_tick+0x5c>)
   19340:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   19342:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   19346:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   19348:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1934c:	4b12      	ldr	r3, [pc, #72]	; (19398 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1934e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19352:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   19356:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19358:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1935c:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19360:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19364:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   19368:	b158      	cbz	r0, 19382 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1936a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1936e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19372:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   19376:	4a08      	ldr	r2, [pc, #32]	; (19398 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   19378:	2001      	movs	r0, #1
   1937a:	bc30      	pop	{r4, r5}
   1937c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   19380:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   19382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19386:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1938a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1938e:	e7f2      	b.n	19376 <radio_tmr_start_tick+0x3e>
   19390:	40008000 	.word	0x40008000
   19394:	4000b000 	.word	0x4000b000
   19398:	4001f000 	.word	0x4001f000

0001939c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1939c:	4b01      	ldr	r3, [pc, #4]	; (193a4 <radio_tmr_start_get+0x8>)
   1939e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   193a2:	4770      	bx	lr
   193a4:	4000b000 	.word	0x4000b000

000193a8 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   193a8:	4903      	ldr	r1, [pc, #12]	; (193b8 <radio_tmr_stop+0x10>)
   193aa:	4a04      	ldr	r2, [pc, #16]	; (193bc <radio_tmr_stop+0x14>)
   193ac:	2301      	movs	r3, #1
   193ae:	604b      	str	r3, [r1, #4]
   193b0:	610b      	str	r3, [r1, #16]
   193b2:	6053      	str	r3, [r2, #4]
   193b4:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   193b6:	4770      	bx	lr
   193b8:	40008000 	.word	0x40008000
   193bc:	40009000 	.word	0x40009000

000193c0 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   193c0:	4904      	ldr	r1, [pc, #16]	; (193d4 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   193c2:	4b05      	ldr	r3, [pc, #20]	; (193d8 <radio_tmr_hcto_configure+0x18>)
   193c4:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   193c8:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   193cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   193d0:	4770      	bx	lr
   193d2:	bf00      	nop
   193d4:	40008000 	.word	0x40008000
   193d8:	4001f000 	.word	0x4001f000

000193dc <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   193dc:	4b05      	ldr	r3, [pc, #20]	; (193f4 <radio_tmr_aa_capture+0x18>)
   193de:	4806      	ldr	r0, [pc, #24]	; (193f8 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   193e0:	4906      	ldr	r1, [pc, #24]	; (193fc <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   193e2:	4a07      	ldr	r2, [pc, #28]	; (19400 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   193e4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   193e8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   193ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   193f0:	4770      	bx	lr
   193f2:	bf00      	nop
   193f4:	4001f000 	.word	0x4001f000
   193f8:	40001100 	.word	0x40001100
   193fc:	40008040 	.word	0x40008040
   19400:	04000080 	.word	0x04000080

00019404 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   19404:	4b01      	ldr	r3, [pc, #4]	; (1940c <radio_tmr_aa_get+0x8>)
   19406:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1940a:	4770      	bx	lr
   1940c:	40008000 	.word	0x40008000

00019410 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   19410:	4b01      	ldr	r3, [pc, #4]	; (19418 <radio_tmr_aa_save+0x8>)
   19412:	6018      	str	r0, [r3, #0]
}
   19414:	4770      	bx	lr
   19416:	bf00      	nop
   19418:	200025e8 	.word	0x200025e8

0001941c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1941c:	4b01      	ldr	r3, [pc, #4]	; (19424 <radio_tmr_aa_restore+0x8>)
}
   1941e:	6818      	ldr	r0, [r3, #0]
   19420:	4770      	bx	lr
   19422:	bf00      	nop
   19424:	200025e8 	.word	0x200025e8

00019428 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   19428:	4b01      	ldr	r3, [pc, #4]	; (19430 <radio_tmr_ready_get+0x8>)
   1942a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1942e:	4770      	bx	lr
   19430:	40008000 	.word	0x40008000

00019434 <radio_tmr_end_capture>:
   19434:	4b02      	ldr	r3, [pc, #8]	; (19440 <radio_tmr_end_capture+0xc>)
   19436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1943a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   1943e:	4770      	bx	lr
   19440:	4001f000 	.word	0x4001f000

00019444 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19444:	4b01      	ldr	r3, [pc, #4]	; (1944c <radio_tmr_end_get+0x8>)
   19446:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1944a:	4770      	bx	lr
   1944c:	40008000 	.word	0x40008000

00019450 <radio_tmr_tifs_base_get>:
   19450:	4b01      	ldr	r3, [pc, #4]	; (19458 <radio_tmr_tifs_base_get+0x8>)
   19452:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19456:	4770      	bx	lr
   19458:	40008000 	.word	0x40008000

0001945c <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1945c:	4b17      	ldr	r3, [pc, #92]	; (194bc <radio_ccm_rx_pkt_set+0x60>)
{
   1945e:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19460:	2400      	movs	r4, #0
{
   19462:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19464:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19466:	4816      	ldr	r0, [pc, #88]	; (194c0 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19468:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1946c:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19470:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19474:	4e13      	ldr	r6, [pc, #76]	; (194c4 <radio_ccm_rx_pkt_set+0x68>)
   19476:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   19478:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1947c:	4812      	ldr	r0, [pc, #72]	; (194c8 <radio_ccm_rx_pkt_set+0x6c>)
   1947e:	2902      	cmp	r1, #2
   19480:	bf08      	it	eq
   19482:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   19484:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19488:	4810      	ldr	r0, [pc, #64]	; (194cc <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1948a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1948e:	4910      	ldr	r1, [pc, #64]	; (194d0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19490:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   19494:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   19498:	4a0e      	ldr	r2, [pc, #56]	; (194d4 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1949a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1949e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   194a2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   194a6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   194aa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   194ae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194b2:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   194b4:	bc70      	pop	{r4, r5, r6}
   194b6:	601a      	str	r2, [r3, #0]
   194b8:	4770      	bx	lr
   194ba:	bf00      	nop
   194bc:	4000f000 	.word	0x4000f000
   194c0:	40001000 	.word	0x40001000
   194c4:	01010001 	.word	0x01010001
   194c8:	01000001 	.word	0x01000001
   194cc:	200024dc 	.word	0x200024dc
   194d0:	200023cc 	.word	0x200023cc
   194d4:	4001f000 	.word	0x4001f000

000194d8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   194d8:	4b0f      	ldr	r3, [pc, #60]	; (19518 <radio_ccm_tx_pkt_set+0x40>)
{
   194da:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   194dc:	2200      	movs	r2, #0
{
   194de:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   194e0:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   194e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   194e6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   194ea:	480c      	ldr	r0, [pc, #48]	; (1951c <radio_ccm_tx_pkt_set+0x44>)
   194ec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   194f0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   194f4:	480a      	ldr	r0, [pc, #40]	; (19520 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   194f6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   194fa:	4c0a      	ldr	r4, [pc, #40]	; (19524 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   194fc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19500:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19502:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19506:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1950a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1950c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19510:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19514:	6019      	str	r1, [r3, #0]
}
   19516:	4770      	bx	lr
   19518:	4000f000 	.word	0x4000f000
   1951c:	01010000 	.word	0x01010000
   19520:	200024dc 	.word	0x200024dc
   19524:	200023cc 	.word	0x200023cc

00019528 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19528:	4a0e      	ldr	r2, [pc, #56]	; (19564 <radio_ccm_is_done+0x3c>)
   1952a:	2302      	movs	r3, #2
   1952c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19530:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19534:	b933      	cbnz	r3, 19544 <radio_ccm_is_done+0x1c>
		__WFE();
   19536:	bf20      	wfe
		__SEV();
   19538:	bf40      	sev
		__WFE();
   1953a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1953c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19540:	2b00      	cmp	r3, #0
   19542:	d0f8      	beq.n	19536 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19544:	4b07      	ldr	r3, [pc, #28]	; (19564 <radio_ccm_is_done+0x3c>)
   19546:	4a08      	ldr	r2, [pc, #32]	; (19568 <radio_ccm_is_done+0x40>)
   19548:	2002      	movs	r0, #2
   1954a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1954e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19552:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   19556:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1955a:	fab0 f080 	clz	r0, r0
   1955e:	0940      	lsrs	r0, r0, #5
   19560:	4770      	bx	lr
   19562:	bf00      	nop
   19564:	4000f000 	.word	0x4000f000
   19568:	e000e100 	.word	0xe000e100

0001956c <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1956c:	4b03      	ldr	r3, [pc, #12]	; (1957c <radio_ccm_mic_is_valid+0x10>)
   1956e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19572:	3800      	subs	r0, #0
   19574:	bf18      	it	ne
   19576:	2001      	movne	r0, #1
   19578:	4770      	bx	lr
   1957a:	bf00      	nop
   1957c:	4000f000 	.word	0x4000f000

00019580 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19580:	4a15      	ldr	r2, [pc, #84]	; (195d8 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19582:	4b16      	ldr	r3, [pc, #88]	; (195dc <radio_ar_configure+0x5c>)
{
   19584:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19586:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1958a:	4e15      	ldr	r6, [pc, #84]	; (195e0 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1958c:	2703      	movs	r7, #3
   1958e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   19592:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   19594:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19598:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1959a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1959e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   195a0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   195a4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   195a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   195ac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   195b0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   195b4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   195b8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   195bc:	4909      	ldr	r1, [pc, #36]	; (195e4 <radio_ar_configure+0x64>)
   195be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   195c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   195c6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   195ca:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   195ce:	bcf0      	pop	{r4, r5, r6, r7}
   195d0:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   195d4:	4770      	bx	lr
   195d6:	bf00      	nop
   195d8:	40001000 	.word	0x40001000
   195dc:	4000f000 	.word	0x4000f000
   195e0:	200023c8 	.word	0x200023c8
   195e4:	4001f000 	.word	0x4001f000

000195e8 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   195e8:	4b01      	ldr	r3, [pc, #4]	; (195f0 <radio_ar_match_get+0x8>)
   195ea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   195ee:	4770      	bx	lr
   195f0:	4000f000 	.word	0x4000f000

000195f4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   195f4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   195f6:	4807      	ldr	r0, [pc, #28]	; (19614 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   195f8:	4c07      	ldr	r4, [pc, #28]	; (19618 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   195fa:	4a08      	ldr	r2, [pc, #32]	; (1961c <radio_ar_status_reset+0x28>)
   195fc:	2300      	movs	r3, #0
   195fe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   19602:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19606:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1960a:	bc10      	pop	{r4}
   1960c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   19610:	4770      	bx	lr
   19612:	bf00      	nop
   19614:	4000f000 	.word	0x4000f000
   19618:	40001000 	.word	0x40001000
   1961c:	4001f000 	.word	0x4001f000

00019620 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19620:	4b08      	ldr	r3, [pc, #32]	; (19644 <radio_ar_has_match+0x24>)
   19622:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19626:	b160      	cbz	r0, 19642 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19628:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1962c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19630:	b138      	cbz	r0, 19642 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19632:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19636:	b120      	cbz	r0, 19642 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19638:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1963c:	fab0 f080 	clz	r0, r0
   19640:	0940      	lsrs	r0, r0, #5
}
   19642:	4770      	bx	lr
   19644:	40001000 	.word	0x40001000

00019648 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19648:	2902      	cmp	r1, #2
{
   1964a:	b510      	push	{r4, lr}
   1964c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1964e:	d00b      	beq.n	19668 <mayfly_enable_cb+0x20>
   19650:	4a0a      	ldr	r2, [pc, #40]	; (1967c <mayfly_enable_cb+0x34>)
   19652:	490b      	ldr	r1, [pc, #44]	; (19680 <mayfly_enable_cb+0x38>)
   19654:	480b      	ldr	r0, [pc, #44]	; (19684 <mayfly_enable_cb+0x3c>)
   19656:	231e      	movs	r3, #30
   19658:	f002 fe20 	bl	1c29c <printk>
   1965c:	4040      	eors	r0, r0
   1965e:	f380 8811 	msr	BASEPRI, r0
   19662:	f04f 0003 	mov.w	r0, #3
   19666:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19668:	200b      	movs	r0, #11
	if (enable) {
   1966a:	b11c      	cbz	r4, 19674 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1966c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19670:	f7eb b806 	b.w	4680 <arch_irq_enable>
}
   19674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19678:	f7eb b812 	b.w	46a0 <arch_irq_disable>
   1967c:	000215c0 	.word	0x000215c0
   19680:	00021610 	.word	0x00021610
   19684:	0002060c 	.word	0x0002060c

00019688 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19688:	b129      	cbz	r1, 19696 <mayfly_is_enabled+0xe>
   1968a:	3901      	subs	r1, #1
   1968c:	2901      	cmp	r1, #1
   1968e:	d805      	bhi.n	1969c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   19690:	200b      	movs	r0, #11
   19692:	f7eb b819 	b.w	46c8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   19696:	2018      	movs	r0, #24
   19698:	f7eb b816 	b.w	46c8 <arch_irq_is_enabled>
{
   1969c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1969e:	4a07      	ldr	r2, [pc, #28]	; (196bc <mayfly_is_enabled+0x34>)
   196a0:	4907      	ldr	r1, [pc, #28]	; (196c0 <mayfly_is_enabled+0x38>)
   196a2:	4808      	ldr	r0, [pc, #32]	; (196c4 <mayfly_is_enabled+0x3c>)
   196a4:	2336      	movs	r3, #54	; 0x36
   196a6:	f002 fdf9 	bl	1c29c <printk>
   196aa:	4040      	eors	r0, r0
   196ac:	f380 8811 	msr	BASEPRI, r0
   196b0:	f04f 0003 	mov.w	r0, #3
   196b4:	df02      	svc	2
		break;
	}

	return 0;
}
   196b6:	2000      	movs	r0, #0
   196b8:	bd08      	pop	{r3, pc}
   196ba:	bf00      	nop
   196bc:	000215c0 	.word	0x000215c0
   196c0:	000206a4 	.word	0x000206a4
   196c4:	0002060c 	.word	0x0002060c

000196c8 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   196c8:	4288      	cmp	r0, r1
   196ca:	d00b      	beq.n	196e4 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   196cc:	2801      	cmp	r0, #1
   196ce:	d003      	beq.n	196d8 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   196d0:	2802      	cmp	r0, #2
   196d2:	d009      	beq.n	196e8 <mayfly_prio_is_equal+0x20>
   196d4:	2000      	movs	r0, #0
#endif
	       0;
}
   196d6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   196d8:	f1a1 0002 	sub.w	r0, r1, #2
   196dc:	fab0 f080 	clz	r0, r0
   196e0:	0940      	lsrs	r0, r0, #5
   196e2:	4770      	bx	lr
   196e4:	2001      	movs	r0, #1
   196e6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   196e8:	f1a1 0001 	sub.w	r0, r1, #1
   196ec:	fab0 f080 	clz	r0, r0
   196f0:	0940      	lsrs	r0, r0, #5
   196f2:	4770      	bx	lr

000196f4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   196f4:	2901      	cmp	r1, #1
{
   196f6:	b508      	push	{r3, lr}
	switch (callee_id) {
   196f8:	d00f      	beq.n	1971a <mayfly_pend+0x26>
   196fa:	2902      	cmp	r1, #2
   196fc:	d00d      	beq.n	1971a <mayfly_pend+0x26>
   196fe:	b191      	cbz	r1, 19726 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19700:	4a0c      	ldr	r2, [pc, #48]	; (19734 <mayfly_pend+0x40>)
   19702:	490d      	ldr	r1, [pc, #52]	; (19738 <mayfly_pend+0x44>)
   19704:	480d      	ldr	r0, [pc, #52]	; (1973c <mayfly_pend+0x48>)
   19706:	2367      	movs	r3, #103	; 0x67
   19708:	f002 fdc8 	bl	1c29c <printk>
   1970c:	4040      	eors	r0, r0
   1970e:	f380 8811 	msr	BASEPRI, r0
   19712:	f04f 0003 	mov.w	r0, #3
   19716:	df02      	svc	2
		break;
	}
}
   19718:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1971a:	4b09      	ldr	r3, [pc, #36]	; (19740 <mayfly_pend+0x4c>)
   1971c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19720:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19724:	bd08      	pop	{r3, pc}
   19726:	4b06      	ldr	r3, [pc, #24]	; (19740 <mayfly_pend+0x4c>)
   19728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1972c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19730:	bd08      	pop	{r3, pc}
   19732:	bf00      	nop
   19734:	000215c0 	.word	0x000215c0
   19738:	000206a4 	.word	0x000206a4
   1973c:	0002060c 	.word	0x0002060c
   19740:	e000e100 	.word	0xe000e100

00019744 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19744:	2803      	cmp	r0, #3
{
   19746:	b510      	push	{r4, lr}
   19748:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1974a:	d804      	bhi.n	19756 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1974c:	4b11      	ldr	r3, [pc, #68]	; (19794 <hal_ticker_instance0_caller_id_get+0x50>)
   1974e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19750:	b18c      	cbz	r4, 19776 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19752:	4620      	mov	r0, r4
   19754:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19756:	4a10      	ldr	r2, [pc, #64]	; (19798 <hal_ticker_instance0_caller_id_get+0x54>)
   19758:	4910      	ldr	r1, [pc, #64]	; (1979c <hal_ticker_instance0_caller_id_get+0x58>)
   1975a:	4811      	ldr	r0, [pc, #68]	; (197a0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1975c:	232b      	movs	r3, #43	; 0x2b
   1975e:	f002 fd9d 	bl	1c29c <printk>
   19762:	4040      	eors	r0, r0
   19764:	f380 8811 	msr	BASEPRI, r0
   19768:	f04f 0003 	mov.w	r0, #3
   1976c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1976e:	4b09      	ldr	r3, [pc, #36]	; (19794 <hal_ticker_instance0_caller_id_get+0x50>)
   19770:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19772:	2c00      	cmp	r4, #0
   19774:	d1ed      	bne.n	19752 <hal_ticker_instance0_caller_id_get+0xe>
   19776:	4a08      	ldr	r2, [pc, #32]	; (19798 <hal_ticker_instance0_caller_id_get+0x54>)
   19778:	490a      	ldr	r1, [pc, #40]	; (197a4 <hal_ticker_instance0_caller_id_get+0x60>)
   1977a:	4809      	ldr	r0, [pc, #36]	; (197a0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1977c:	232e      	movs	r3, #46	; 0x2e
   1977e:	f002 fd8d 	bl	1c29c <printk>
   19782:	4040      	eors	r0, r0
   19784:	f380 8811 	msr	BASEPRI, r0
   19788:	f04f 0003 	mov.w	r0, #3
   1978c:	df02      	svc	2
}
   1978e:	4620      	mov	r0, r4
   19790:	bd10      	pop	{r4, pc}
   19792:	bf00      	nop
   19794:	000216c8 	.word	0x000216c8
   19798:	00021634 	.word	0x00021634
   1979c:	00021684 	.word	0x00021684
   197a0:	0002060c 	.word	0x0002060c
   197a4:	000216a4 	.word	0x000216a4

000197a8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   197a8:	3801      	subs	r0, #1
{
   197aa:	b510      	push	{r4, lr}
   197ac:	461c      	mov	r4, r3
   197ae:	2804      	cmp	r0, #4
   197b0:	f200 8082 	bhi.w	198b8 <hal_ticker_instance0_sched+0x110>
   197b4:	e8df f000 	tbb	[pc, r0]
   197b8:	3f302112 	.word	0x3f302112
   197bc:	03          	.byte	0x03
   197bd:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   197be:	2904      	cmp	r1, #4
   197c0:	d04a      	beq.n	19858 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   197c2:	4a44      	ldr	r2, [pc, #272]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   197c4:	4944      	ldr	r1, [pc, #272]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   197c6:	4845      	ldr	r0, [pc, #276]	; (198dc <hal_ticker_instance0_sched+0x134>)
   197c8:	23ba      	movs	r3, #186	; 0xba
   197ca:	f002 fd67 	bl	1c29c <printk>
   197ce:	4040      	eors	r0, r0
   197d0:	f380 8811 	msr	BASEPRI, r0
   197d4:	f04f 0003 	mov.w	r0, #3
   197d8:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   197da:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   197dc:	2904      	cmp	r1, #4
   197de:	d043      	beq.n	19868 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   197e0:	4a3c      	ldr	r2, [pc, #240]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   197e2:	493d      	ldr	r1, [pc, #244]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   197e4:	483d      	ldr	r0, [pc, #244]	; (198dc <hal_ticker_instance0_sched+0x134>)
   197e6:	234e      	movs	r3, #78	; 0x4e
   197e8:	f002 fd58 	bl	1c29c <printk>
   197ec:	4040      	eors	r0, r0
   197ee:	f380 8811 	msr	BASEPRI, r0
   197f2:	f04f 0003 	mov.w	r0, #3
   197f6:	df02      	svc	2
}
   197f8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   197fa:	2903      	cmp	r1, #3
   197fc:	d03c      	beq.n	19878 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   197fe:	4a35      	ldr	r2, [pc, #212]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   19800:	4935      	ldr	r1, [pc, #212]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   19802:	4836      	ldr	r0, [pc, #216]	; (198dc <hal_ticker_instance0_sched+0x134>)
   19804:	2365      	movs	r3, #101	; 0x65
   19806:	f002 fd49 	bl	1c29c <printk>
   1980a:	4040      	eors	r0, r0
   1980c:	f380 8811 	msr	BASEPRI, r0
   19810:	f04f 0003 	mov.w	r0, #3
   19814:	df02      	svc	2
}
   19816:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19818:	2904      	cmp	r1, #4
   1981a:	d035      	beq.n	19888 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1981c:	4a2d      	ldr	r2, [pc, #180]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   1981e:	492e      	ldr	r1, [pc, #184]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   19820:	482e      	ldr	r0, [pc, #184]	; (198dc <hal_ticker_instance0_sched+0x134>)
   19822:	237c      	movs	r3, #124	; 0x7c
   19824:	f002 fd3a 	bl	1c29c <printk>
   19828:	4040      	eors	r0, r0
   1982a:	f380 8811 	msr	BASEPRI, r0
   1982e:	f04f 0003 	mov.w	r0, #3
   19832:	df02      	svc	2
}
   19834:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19836:	2903      	cmp	r1, #3
   19838:	d036      	beq.n	198a8 <hal_ticker_instance0_sched+0x100>
   1983a:	2904      	cmp	r1, #4
   1983c:	d02c      	beq.n	19898 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1983e:	4a25      	ldr	r2, [pc, #148]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   19840:	4925      	ldr	r1, [pc, #148]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   19842:	4826      	ldr	r0, [pc, #152]	; (198dc <hal_ticker_instance0_sched+0x134>)
   19844:	23a2      	movs	r3, #162	; 0xa2
   19846:	f002 fd29 	bl	1c29c <printk>
   1984a:	4040      	eors	r0, r0
   1984c:	f380 8811 	msr	BASEPRI, r0
   19850:	f04f 0003 	mov.w	r0, #3
   19854:	df02      	svc	2
}
   19856:	bd10      	pop	{r4, pc}
			m.param = instance;
   19858:	4b21      	ldr	r3, [pc, #132]	; (198e0 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1985a:	2102      	movs	r1, #2
			m.param = instance;
   1985c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1985e:	2003      	movs	r0, #3
}
   19860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19864:	f7f0 be14 	b.w	a490 <mayfly_enqueue>
			m.param = instance;
   19868:	4b1e      	ldr	r3, [pc, #120]	; (198e4 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1986a:	2102      	movs	r1, #2
			m.param = instance;
   1986c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1986e:	2000      	movs	r0, #0
}
   19870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19874:	f7f0 be0c 	b.w	a490 <mayfly_enqueue>
			m.param = instance;
   19878:	4b1b      	ldr	r3, [pc, #108]	; (198e8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1987a:	2101      	movs	r1, #1
			m.param = instance;
   1987c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1987e:	4608      	mov	r0, r1
}
   19880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19884:	f7f0 be04 	b.w	a490 <mayfly_enqueue>
			m.param = instance;
   19888:	4b18      	ldr	r3, [pc, #96]	; (198ec <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1988a:	2102      	movs	r1, #2
			m.param = instance;
   1988c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1988e:	2001      	movs	r0, #1
}
   19890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19894:	f7f0 bdfc 	b.w	a490 <mayfly_enqueue>
			m.param = instance;
   19898:	4b15      	ldr	r3, [pc, #84]	; (198f0 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1989a:	2102      	movs	r1, #2
			m.param = instance;
   1989c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1989e:	4608      	mov	r0, r1
}
   198a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   198a4:	f7f0 bdf4 	b.w	a490 <mayfly_enqueue>
			m.param = instance;
   198a8:	4b12      	ldr	r3, [pc, #72]	; (198f4 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   198aa:	2101      	movs	r1, #1
			m.param = instance;
   198ac:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   198ae:	2002      	movs	r0, #2
}
   198b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   198b4:	f7f0 bdec 	b.w	a490 <mayfly_enqueue>
		LL_ASSERT(0);
   198b8:	4a06      	ldr	r2, [pc, #24]	; (198d4 <hal_ticker_instance0_sched+0x12c>)
   198ba:	4907      	ldr	r1, [pc, #28]	; (198d8 <hal_ticker_instance0_sched+0x130>)
   198bc:	4807      	ldr	r0, [pc, #28]	; (198dc <hal_ticker_instance0_sched+0x134>)
   198be:	23c0      	movs	r3, #192	; 0xc0
   198c0:	f002 fcec 	bl	1c29c <printk>
   198c4:	4040      	eors	r0, r0
   198c6:	f380 8811 	msr	BASEPRI, r0
   198ca:	f04f 0003 	mov.w	r0, #3
   198ce:	df02      	svc	2
}
   198d0:	bd10      	pop	{r4, pc}
   198d2:	bf00      	nop
   198d4:	00021634 	.word	0x00021634
   198d8:	000206a4 	.word	0x000206a4
   198dc:	0002060c 	.word	0x0002060c
   198e0:	2000054c 	.word	0x2000054c
   198e4:	2000053c 	.word	0x2000053c
   198e8:	2000052c 	.word	0x2000052c
   198ec:	2000057c 	.word	0x2000057c
   198f0:	2000055c 	.word	0x2000055c
   198f4:	2000056c 	.word	0x2000056c

000198f8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   198f8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   198fa:	2000      	movs	r0, #0
   198fc:	f7ff b9a4 	b.w	18c48 <cntr_cmp_set>

00019900 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   19900:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19902:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19906:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1990a:	3201      	adds	r2, #1
   1990c:	d008      	beq.n	19920 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1990e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19912:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19916:	f013 0301 	ands.w	r3, r3, #1
   1991a:	d10a      	bne.n	19932 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1991c:	4618      	mov	r0, r3
}
   1991e:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19920:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   19924:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19928:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1992a:	4293      	cmp	r3, r2
   1992c:	d1ef      	bne.n	1990e <hci_vendor_read_static_addr+0xe>
	return 0;
   1992e:	2000      	movs	r0, #0
}
   19930:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   19932:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   19936:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19938:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1993a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1993e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19942:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   19944:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   19946:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1994a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1994e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   19950:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   19954:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19958:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1995a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1995e:	3301      	adds	r3, #1
   19960:	d03b      	beq.n	199da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19962:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19966:	3301      	adds	r3, #1
   19968:	d037      	beq.n	199da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1996a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1996e:	3301      	adds	r3, #1
   19970:	d033      	beq.n	199da <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19972:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19976:	3301      	adds	r3, #1
   19978:	d02f      	beq.n	199da <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1997a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1997e:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   19980:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19982:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19986:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1998a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1998c:	f880 c009 	strb.w	ip, [r0, #9]
   19990:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   19992:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   19996:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   19998:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1999a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1999e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   199a2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   199a4:	f880 c00d 	strb.w	ip, [r0, #13]
   199a8:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   199aa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   199ae:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   199b0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   199b2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   199b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   199ba:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   199bc:	73c3      	strb	r3, [r0, #15]
   199be:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   199c2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   199c6:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   199c8:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   199ca:	0a11      	lsrs	r1, r2, #8
   199cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   199d0:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   199d2:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   199d4:	7541      	strb	r1, [r0, #21]
		return 1;
   199d6:	2001      	movs	r0, #1
}
   199d8:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   199da:	2210      	movs	r2, #16
   199dc:	2100      	movs	r1, #0
   199de:	3006      	adds	r0, #6
   199e0:	f003 ff3d 	bl	1d85e <memset>
		return 1;
   199e4:	2001      	movs	r0, #1
}
   199e6:	bd08      	pop	{r3, pc}

000199e8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   199e8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   199ea:	2210      	movs	r2, #16
{
   199ec:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   199ee:	2100      	movs	r1, #0
   199f0:	f003 ff35 	bl	1d85e <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   199f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   199f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   199fc:	3201      	adds	r2, #1
   199fe:	d034      	beq.n	19a6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19a00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19a04:	3201      	adds	r2, #1
   19a06:	d030      	beq.n	19a6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19a08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19a0c:	3201      	adds	r2, #1
   19a0e:	d02c      	beq.n	19a6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19a10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19a14:	3201      	adds	r2, #1
   19a16:	d028      	beq.n	19a6a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   19a18:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   19a1c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19a1e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19a20:	0a08      	lsrs	r0, r1, #8
   19a22:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19a26:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   19a28:	70e0      	strb	r0, [r4, #3]
   19a2a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   19a2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   19a30:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   19a32:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19a34:	0a08      	lsrs	r0, r1, #8
   19a36:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19a3a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   19a3c:	71e0      	strb	r0, [r4, #7]
   19a3e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   19a40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   19a44:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   19a46:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19a48:	0a08      	lsrs	r0, r1, #8
   19a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19a4e:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   19a50:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   19a52:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   19a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   19a58:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   19a5a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19a5c:	0a11      	lsrs	r1, r2, #8
   19a5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19a62:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   19a64:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   19a66:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   19a68:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   19a6a:	4620      	mov	r0, r4
   19a6c:	2210      	movs	r2, #16
}
   19a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   19a72:	2100      	movs	r1, #0
   19a74:	f003 bef3 	b.w	1d85e <memset>

00019a78 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19a78:	4b02      	ldr	r3, [pc, #8]	; (19a84 <net_buf_pool_get+0xc>)
   19a7a:	2228      	movs	r2, #40	; 0x28
   19a7c:	fb02 3000 	mla	r0, r2, r0, r3
   19a80:	4770      	bx	lr
   19a82:	bf00      	nop
   19a84:	20000760 	.word	0x20000760

00019a88 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19a88:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   19a8a:	4b05      	ldr	r3, [pc, #20]	; (19aa0 <net_buf_id+0x18>)
   19a8c:	2128      	movs	r1, #40	; 0x28
   19a8e:	fb01 3302 	mla	r3, r1, r2, r3
   19a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19a94:	1ac0      	subs	r0, r0, r3
}
   19a96:	4b03      	ldr	r3, [pc, #12]	; (19aa4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   19a98:	10c0      	asrs	r0, r0, #3
}
   19a9a:	4358      	muls	r0, r3
   19a9c:	4770      	bx	lr
   19a9e:	bf00      	nop
   19aa0:	20000760 	.word	0x20000760
   19aa4:	aaaaaaab 	.word	0xaaaaaaab

00019aa8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19aa8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19aaa:	4b0a      	ldr	r3, [pc, #40]	; (19ad4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19aac:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19aae:	2428      	movs	r4, #40	; 0x28
   19ab0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   19ab4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19ab6:	6a1b      	ldr	r3, [r3, #32]
   19ab8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19aba:	6823      	ldr	r3, [r4, #0]
   19abc:	429a      	cmp	r2, r3
   19abe:	bf94      	ite	ls
   19ac0:	600a      	strls	r2, [r1, #0]
   19ac2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19ac4:	f7ff ffe0 	bl	19a88 <net_buf_id>
   19ac8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19acc:	fb02 3000 	mla	r0, r2, r0, r3
   19ad0:	bd10      	pop	{r4, pc}
   19ad2:	bf00      	nop
   19ad4:	20000760 	.word	0x20000760

00019ad8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19adc:	4605      	mov	r5, r0
   19ade:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19ae0:	4610      	mov	r0, r2
   19ae2:	4619      	mov	r1, r3
{
   19ae4:	4691      	mov	r9, r2
   19ae6:	4698      	mov	r8, r3
   19ae8:	4617      	mov	r7, r2
   19aea:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19aec:	f005 ff91 	bl	1fa12 <sys_clock_timeout_end_calc>
   19af0:	4682      	mov	sl, r0
   19af2:	468b      	mov	fp, r1
	__asm__ volatile(
   19af4:	f04f 0320 	mov.w	r3, #32
   19af8:	f3ef 8111 	mrs	r1, BASEPRI
   19afc:	f383 8811 	msr	BASEPRI, r3
   19b00:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19b04:	8b6b      	ldrh	r3, [r5, #26]
   19b06:	2b00      	cmp	r3, #0
   19b08:	d055      	beq.n	19bb6 <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19b0a:	8b2a      	ldrh	r2, [r5, #24]
   19b0c:	429a      	cmp	r2, r3
   19b0e:	d93e      	bls.n	19b8e <net_buf_alloc_len+0xb6>
   19b10:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   19b12:	2200      	movs	r2, #0
   19b14:	2300      	movs	r3, #0
   19b16:	4628      	mov	r0, r5
   19b18:	f001 fb2a 	bl	1b170 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19b1c:	9900      	ldr	r1, [sp, #0]
   19b1e:	4604      	mov	r4, r0
   19b20:	2800      	cmp	r0, #0
   19b22:	d034      	beq.n	19b8e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   19b24:	f381 8811 	msr	BASEPRI, r1
   19b28:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19b2c:	9b01      	ldr	r3, [sp, #4]
   19b2e:	2b00      	cmp	r3, #0
   19b30:	d051      	beq.n	19bd6 <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19b32:	ea58 0309 	orrs.w	r3, r8, r9
   19b36:	d00f      	beq.n	19b58 <net_buf_alloc_len+0x80>
   19b38:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   19b3c:	bf08      	it	eq
   19b3e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   19b42:	d009      	beq.n	19b58 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   19b44:	f002 f9fc 	bl	1bf40 <sys_clock_tick_get>
   19b48:	ebba 0700 	subs.w	r7, sl, r0
   19b4c:	eb6b 0601 	sbc.w	r6, fp, r1
   19b50:	2e00      	cmp	r6, #0
   19b52:	bfbc      	itt	lt
   19b54:	2700      	movlt	r7, #0
   19b56:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19b58:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19b5a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 19bec <net_buf_alloc_len+0x114>
   19b5e:	2228      	movs	r2, #40	; 0x28
   19b60:	fb02 8303 	mla	r3, r2, r3, r8
   19b64:	a901      	add	r1, sp, #4
   19b66:	6a1b      	ldr	r3, [r3, #32]
   19b68:	681b      	ldr	r3, [r3, #0]
   19b6a:	463a      	mov	r2, r7
   19b6c:	681d      	ldr	r5, [r3, #0]
   19b6e:	4620      	mov	r0, r4
   19b70:	4633      	mov	r3, r6
   19b72:	47a8      	blx	r5
   19b74:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19b76:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19b78:	bb70      	cbnz	r0, 19bd8 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   19b7a:	79a0      	ldrb	r0, [r4, #6]
   19b7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19b80:	4621      	mov	r1, r4
   19b82:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19b86:	f005 fcad 	bl	1f4e4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19b8a:	462c      	mov	r4, r5
}
   19b8c:	e01f      	b.n	19bce <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   19b8e:	8b6b      	ldrh	r3, [r5, #26]
   19b90:	1e5a      	subs	r2, r3, #1
   19b92:	836a      	strh	r2, [r5, #26]
   19b94:	f381 8811 	msr	BASEPRI, r1
   19b98:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19b9c:	8b2c      	ldrh	r4, [r5, #24]
   19b9e:	1ae3      	subs	r3, r4, r3
   19ba0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   19ba2:	2018      	movs	r0, #24
   19ba4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   19ba8:	4810      	ldr	r0, [pc, #64]	; (19bec <net_buf_alloc_len+0x114>)
   19baa:	4b11      	ldr	r3, [pc, #68]	; (19bf0 <net_buf_alloc_len+0x118>)
   19bac:	1a2d      	subs	r5, r5, r0
   19bae:	10ed      	asrs	r5, r5, #3
   19bb0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   19bb2:	71a5      	strb	r5, [r4, #6]
		goto success;
   19bb4:	e7ba      	b.n	19b2c <net_buf_alloc_len+0x54>
   19bb6:	f381 8811 	msr	BASEPRI, r1
   19bba:	f3bf 8f6f 	isb	sy
   19bbe:	464a      	mov	r2, r9
   19bc0:	4643      	mov	r3, r8
   19bc2:	4628      	mov	r0, r5
   19bc4:	f001 fad4 	bl	1b170 <z_impl_k_queue_get>
	if (!buf) {
   19bc8:	4604      	mov	r4, r0
   19bca:	2800      	cmp	r0, #0
   19bcc:	d1ae      	bne.n	19b2c <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19bce:	4620      	mov	r0, r4
   19bd0:	b003      	add	sp, #12
   19bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   19bd6:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19bd8:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19bda:	2201      	movs	r2, #1
	buf->frags = NULL;
   19bdc:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   19bde:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   19be0:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   19be2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19be4:	6923      	ldr	r3, [r4, #16]
   19be6:	81e2      	strh	r2, [r4, #14]
   19be8:	60a3      	str	r3, [r4, #8]
	return buf;
   19bea:	e7f0      	b.n	19bce <net_buf_alloc_len+0xf6>
   19bec:	20000760 	.word	0x20000760
   19bf0:	cccccccd 	.word	0xcccccccd

00019bf4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bf8:	4d17      	ldr	r5, [pc, #92]	; (19c58 <net_buf_unref+0x64>)
   19bfa:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19bfc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   19bfe:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   19c00:	b90c      	cbnz	r4, 19c06 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19c06:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19c08:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   19c0c:	3b01      	subs	r3, #1
   19c0e:	b2db      	uxtb	r3, r3
   19c10:	7123      	strb	r3, [r4, #4]
   19c12:	2b00      	cmp	r3, #0
   19c14:	d1f5      	bne.n	19c02 <net_buf_unref+0xe>
		if (buf->__buf) {
   19c16:	6921      	ldr	r1, [r4, #16]
   19c18:	b159      	cbz	r1, 19c32 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19c1a:	7963      	ldrb	r3, [r4, #5]
   19c1c:	079b      	lsls	r3, r3, #30
   19c1e:	d407      	bmi.n	19c30 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19c20:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   19c22:	fb07 5303 	mla	r3, r7, r3, r5
   19c26:	4620      	mov	r0, r4
   19c28:	6a1b      	ldr	r3, [r3, #32]
   19c2a:	681b      	ldr	r3, [r3, #0]
   19c2c:	689b      	ldr	r3, [r3, #8]
   19c2e:	4798      	blx	r3
			buf->__buf = NULL;
   19c30:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   19c32:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19c34:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   19c36:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   19c3a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19c3c:	69db      	ldr	r3, [r3, #28]
   19c3e:	b11b      	cbz	r3, 19c48 <net_buf_unref+0x54>
			pool->destroy(buf);
   19c40:	4620      	mov	r0, r4
   19c42:	4798      	blx	r3
{
   19c44:	4644      	mov	r4, r8
   19c46:	e7db      	b.n	19c00 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19c4c:	4621      	mov	r1, r4
   19c4e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   19c52:	f005 fc47 	bl	1f4e4 <k_queue_prepend>
}
   19c56:	e7f5      	b.n	19c44 <net_buf_unref+0x50>
   19c58:	20000760 	.word	0x20000760

00019c5c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19c5c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   19c5e:	4b09      	ldr	r3, [pc, #36]	; (19c84 <gpio_nrfx_init+0x28>)
   19c60:	781a      	ldrb	r2, [r3, #0]
   19c62:	b96a      	cbnz	r2, 19c80 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   19c64:	2101      	movs	r1, #1
   19c66:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19c68:	2006      	movs	r0, #6
   19c6a:	2105      	movs	r1, #5
   19c6c:	f7ea fd3a 	bl	46e4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   19c70:	2006      	movs	r0, #6
   19c72:	f7ea fd05 	bl	4680 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19c76:	4b04      	ldr	r3, [pc, #16]	; (19c88 <gpio_nrfx_init+0x2c>)
   19c78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19c7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   19c80:	2000      	movs	r0, #0
   19c82:	bd08      	pop	{r3, pc}
   19c84:	2000290d 	.word	0x2000290d
   19c88:	40006000 	.word	0x40006000

00019c8c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c8c:	4b2b      	ldr	r3, [pc, #172]	; (19d3c <gpio_nrfx_config+0xb0>)
{
   19c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   19c90:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c92:	482b      	ldr	r0, [pc, #172]	; (19d40 <gpio_nrfx_config+0xb4>)
   19c94:	4013      	ands	r3, r2
   19c96:	4283      	cmp	r3, r0
   19c98:	d041      	beq.n	19d1e <gpio_nrfx_config+0x92>
   19c9a:	d80d      	bhi.n	19cb8 <gpio_nrfx_config+0x2c>
   19c9c:	2b06      	cmp	r3, #6
   19c9e:	d015      	beq.n	19ccc <gpio_nrfx_config+0x40>
   19ca0:	d805      	bhi.n	19cae <gpio_nrfx_config+0x22>
   19ca2:	b19b      	cbz	r3, 19ccc <gpio_nrfx_config+0x40>
   19ca4:	2b02      	cmp	r3, #2
   19ca6:	d03c      	beq.n	19d22 <gpio_nrfx_config+0x96>
   19ca8:	f06f 0015 	mvn.w	r0, #21
   19cac:	e036      	b.n	19d1c <gpio_nrfx_config+0x90>
   19cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19cb2:	d1f9      	bne.n	19ca8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   19cb4:	2301      	movs	r3, #1
   19cb6:	e009      	b.n	19ccc <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19cb8:	4822      	ldr	r0, [pc, #136]	; (19d44 <gpio_nrfx_config+0xb8>)
   19cba:	4283      	cmp	r3, r0
   19cbc:	d033      	beq.n	19d26 <gpio_nrfx_config+0x9a>
   19cbe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   19cc2:	d032      	beq.n	19d2a <gpio_nrfx_config+0x9e>
   19cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   19cc8:	d1ee      	bne.n	19ca8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   19cca:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   19ccc:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   19cce:	bf54      	ite	pl
   19cd0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   19cd4:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   19cd6:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   19cda:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   19cdc:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   19ce0:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   19ce4:	d507      	bpl.n	19cf6 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19ce6:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19cea:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19cec:	d01f      	beq.n	19d2e <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   19cee:	2201      	movs	r2, #1
   19cf0:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   19cf2:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   19cf6:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   19cf8:	4c13      	ldr	r4, [pc, #76]	; (19d48 <gpio_nrfx_config+0xbc>)
   19cfa:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   19cfc:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19d00:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   19d04:	bf18      	it	ne
   19d06:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19d0a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   19d0e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19d12:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   19d16:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   19d1a:	2000      	movs	r0, #0
}
   19d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   19d1e:	2307      	movs	r3, #7
   19d20:	e7d4      	b.n	19ccc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   19d22:	2304      	movs	r3, #4
   19d24:	e7d2      	b.n	19ccc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   19d26:	2305      	movs	r3, #5
   19d28:	e7d0      	b.n	19ccc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   19d2a:	2303      	movs	r3, #3
   19d2c:	e7ce      	b.n	19ccc <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19d2e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   19d30:	bf42      	ittt	mi
   19d32:	2201      	movmi	r2, #1
   19d34:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   19d36:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   19d3a:	e7dc      	b.n	19cf6 <gpio_nrfx_config+0x6a>
   19d3c:	00f00006 	.word	0x00f00006
   19d40:	00100006 	.word	0x00100006
   19d44:	00400002 	.word	0x00400002
   19d48:	50000300 	.word	0x50000300

00019d4c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   19d4c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   19d50:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   19d52:	4b08      	ldr	r3, [pc, #32]	; (19d74 <nrf_gpio_cfg_sense_set+0x28>)
   19d54:	2801      	cmp	r0, #1
   19d56:	bf18      	it	ne
   19d58:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19d5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   19d60:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   19d64:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19d6c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   19d70:	4770      	bx	lr
   19d72:	bf00      	nop
   19d74:	50000300 	.word	0x50000300

00019d78 <check_level_trigger_pins>:
{
   19d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
   19d7c:	6903      	ldr	r3, [r0, #16]
	return port->config;
   19d7e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   19d82:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   19d84:	f8df b07c 	ldr.w	fp, [pc, #124]	; 19e04 <check_level_trigger_pins+0x8c>
{
   19d88:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   19d8a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   19d8e:	430a      	orrs	r2, r1
   19d90:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   19d94:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   19d98:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   19d9a:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   19d9e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   19da0:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   19da4:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   19da6:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   19da8:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   19dac:	b917      	cbnz	r7, 19db4 <check_level_trigger_pins+0x3c>
}
   19dae:	4628      	mov	r0, r5
   19db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   19db4:	423c      	tst	r4, r7
   19db6:	d021      	beq.n	19dfc <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19db8:	f89a 3008 	ldrb.w	r3, [sl, #8]
   19dbc:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   19dc0:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19dc2:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   19dc6:	d114      	bne.n	19df2 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   19dc8:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   19dca:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   19dcc:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   19dd0:	bf14      	ite	ne
   19dd2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   19dd6:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19dd8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19de0:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   19de4:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   19de6:	bf02      	ittt	eq
   19de8:	f8d8 3000 	ldreq.w	r3, [r8]
   19dec:	4323      	orreq	r3, r4
   19dee:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   19df2:	2100      	movs	r1, #0
   19df4:	f7ff ffaa 	bl	19d4c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   19df8:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   19dfc:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   19e00:	0064      	lsls	r4, r4, #1
   19e02:	e7d3      	b.n	19dac <check_level_trigger_pins+0x34>
   19e04:	50000300 	.word	0x50000300

00019e08 <gpiote_event_handler>:
{
   19e08:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19e0a:	2400      	movs	r4, #0
{
   19e0c:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19e0e:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   19e12:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19e16:	4e28      	ldr	r6, [pc, #160]	; (19eb8 <gpiote_event_handler+0xb0>)
   19e18:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
   19e1c:	b16d      	cbz	r5, 19e3a <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   19e1e:	a902      	add	r1, sp, #8
   19e20:	4826      	ldr	r0, [pc, #152]	; (19ebc <gpiote_event_handler+0xb4>)
   19e22:	f7ff ffa9 	bl	19d78 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   19e26:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   19e28:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   19e2a:	4825      	ldr	r0, [pc, #148]	; (19ec0 <gpiote_event_handler+0xb8>)
   19e2c:	f7ff ffa4 	bl	19d78 <check_level_trigger_pins>
		fired_triggers[1] =
   19e30:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19e32:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
   19e36:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
   19e3a:	4922      	ldr	r1, [pc, #136]	; (19ec4 <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   19e3c:	4c1e      	ldr	r4, [pc, #120]	; (19eb8 <gpiote_event_handler+0xb0>)
   19e3e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   19e40:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19e42:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   19e44:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   19e48:	fa06 f002 	lsl.w	r0, r6, r2
   19e4c:	4218      	tst	r0, r3
   19e4e:	d016      	beq.n	19e7e <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19e50:	680b      	ldr	r3, [r1, #0]
   19e52:	b1a3      	cbz	r3, 19e7e <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19e54:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   19e58:	af04      	add	r7, sp, #16
   19e5a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19e5e:	f8c1 c000 	str.w	ip, [r1]
   19e62:	f3c3 3040 	ubfx	r0, r3, #13, #1
   19e66:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   19e6a:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19e6e:	f850 7c10 	ldr.w	r7, [r0, #-16]
   19e72:	fa06 f303 	lsl.w	r3, r6, r3
   19e76:	433b      	orrs	r3, r7
   19e78:	f840 3c10 	str.w	r3, [r0, #-16]
   19e7c:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19e7e:	3201      	adds	r2, #1
   19e80:	2a08      	cmp	r2, #8
   19e82:	f101 0104 	add.w	r1, r1, #4
   19e86:	d1dd      	bne.n	19e44 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
   19e88:	9a00      	ldr	r2, [sp, #0]
   19e8a:	b122      	cbz	r2, 19e96 <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
   19e8c:	4b0e      	ldr	r3, [pc, #56]	; (19ec8 <gpiote_event_handler+0xc0>)
   19e8e:	490b      	ldr	r1, [pc, #44]	; (19ebc <gpiote_event_handler+0xb4>)
   19e90:	6858      	ldr	r0, [r3, #4]
   19e92:	f005 f8f0 	bl	1f076 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   19e96:	9a01      	ldr	r2, [sp, #4]
   19e98:	b122      	cbz	r2, 19ea4 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   19e9a:	4b0c      	ldr	r3, [pc, #48]	; (19ecc <gpiote_event_handler+0xc4>)
   19e9c:	4908      	ldr	r1, [pc, #32]	; (19ec0 <gpiote_event_handler+0xb8>)
   19e9e:	6858      	ldr	r0, [r3, #4]
   19ea0:	f005 f8e9 	bl	1f076 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   19ea4:	b12d      	cbz	r5, 19eb2 <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   19ea6:	4805      	ldr	r0, [pc, #20]	; (19ebc <gpiote_event_handler+0xb4>)
   19ea8:	f005 f8f6 	bl	1f098 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   19eac:	4804      	ldr	r0, [pc, #16]	; (19ec0 <gpiote_event_handler+0xb8>)
   19eae:	f005 f8f3 	bl	1f098 <cfg_level_pins>
}
   19eb2:	b005      	add	sp, #20
   19eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19eb6:	bf00      	nop
   19eb8:	40006000 	.word	0x40006000
   19ebc:	20000668 	.word	0x20000668
   19ec0:	20000680 	.word	0x20000680
   19ec4:	40006100 	.word	0x40006100
   19ec8:	20002624 	.word	0x20002624
   19ecc:	20002640 	.word	0x20002640

00019ed0 <gpio_nrfx_pin_interrupt_configure>:
{
   19ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19ed2:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19ed4:	6842      	ldr	r2, [r0, #4]
	return port->data;
   19ed6:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19ed8:	7a12      	ldrb	r2, [r2, #8]
   19eda:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   19ede:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   19ee2:	460e      	mov	r6, r1
   19ee4:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   19ee8:	d110      	bne.n	19f0c <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   19eea:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   19eec:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   19eee:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   19ef2:	4961      	ldr	r1, [pc, #388]	; (1a078 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19ef4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   19ef8:	bf18      	it	ne
   19efa:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19efe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19f02:	07d0      	lsls	r0, r2, #31
   19f04:	d507      	bpl.n	19f16 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   19f06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19f0a:	e09a      	b.n	1a042 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19f0c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   19f10:	68f9      	ldr	r1, [r7, #12]
   19f12:	f000 8098 	beq.w	1a046 <gpio_nrfx_pin_interrupt_configure+0x176>
   19f16:	68fa      	ldr	r2, [r7, #12]
   19f18:	2101      	movs	r1, #1
   19f1a:	40b1      	lsls	r1, r6
   19f1c:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19f1e:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19f20:	60f9      	str	r1, [r7, #12]
   19f22:	2101      	movs	r1, #1
   19f24:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19f26:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   19f2a:	bf0c      	ite	eq
   19f2c:	430a      	orreq	r2, r1
   19f2e:	438a      	bicne	r2, r1
   19f30:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   19f32:	69ba      	ldr	r2, [r7, #24]
   19f34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   19f38:	bf0c      	ite	eq
   19f3a:	430a      	orreq	r2, r1
   19f3c:	438a      	bicne	r2, r1
   19f3e:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   19f40:	693a      	ldr	r2, [r7, #16]
   19f42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   19f46:	bf0c      	ite	eq
   19f48:	4311      	orreq	r1, r2
   19f4a:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   19f4e:	4a4b      	ldr	r2, [pc, #300]	; (1a07c <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   19f50:	6139      	str	r1, [r7, #16]
   19f52:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19f56:	2000      	movs	r0, #0
   19f58:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19f5a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   19f5e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   19f62:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   19f66:	428d      	cmp	r5, r1
   19f68:	d172      	bne.n	1a050 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   19f6a:	fa23 f100 	lsr.w	r1, r3, r0
   19f6e:	07c9      	lsls	r1, r1, #31
   19f70:	d56e      	bpl.n	1a050 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   19f72:	0083      	lsls	r3, r0, #2
   19f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19f78:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19f7c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   19f80:	f021 0101 	bic.w	r1, r1, #1
   19f84:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   19f88:	2301      	movs	r3, #1
   19f8a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   19f8c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   19f90:	b2c0      	uxtb	r0, r0
   19f92:	f000 fc87 	bl	1a8a4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   19f96:	4628      	mov	r0, r5
   19f98:	2100      	movs	r1, #0
   19f9a:	f7ff fed7 	bl	19d4c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   19f9e:	68f8      	ldr	r0, [r7, #12]
   19fa0:	40f0      	lsrs	r0, r6
   19fa2:	f010 0001 	ands.w	r0, r0, #1
   19fa6:	d04c      	beq.n	1a042 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   19fa8:	6978      	ldr	r0, [r7, #20]
   19faa:	40f0      	lsrs	r0, r6
   19fac:	f010 0401 	ands.w	r4, r0, #1
   19fb0:	d055      	beq.n	1a05e <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
   19fb2:	69bb      	ldr	r3, [r7, #24]
   19fb4:	40f3      	lsrs	r3, r6
   19fb6:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   19fb8:	bf5f      	itttt	pl
   19fba:	6939      	ldrpl	r1, [r7, #16]
   19fbc:	fa21 f606 	lsrpl.w	r6, r1, r6
   19fc0:	f006 0601 	andpl.w	r6, r6, #1
   19fc4:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   19fc8:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   19fcc:	bf54      	ite	pl
   19fce:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   19fd0:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   19fd2:	f000 fc87 	bl	1a8e4 <nrfx_gpiote_channel_alloc>
   19fd6:	4b2a      	ldr	r3, [pc, #168]	; (1a080 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   19fd8:	4298      	cmp	r0, r3
   19fda:	d13d      	bne.n	1a058 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   19fdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19fe0:	0093      	lsls	r3, r2, #2
   19fe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19fe6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19fea:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19fec:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   19ff0:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   19ff4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   19ff8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19ffc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a000:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1a004:	430d      	orrs	r5, r1
   1a006:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1a00a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1a00e:	0093      	lsls	r3, r2, #2
   1a010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a014:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a018:	2000      	movs	r0, #0
   1a01a:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1a01c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a020:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a022:	008b      	lsls	r3, r1, #2
   1a024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a028:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a02c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a030:	f042 0201 	orr.w	r2, r2, #1
   1a034:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a038:	4a10      	ldr	r2, [pc, #64]	; (1a07c <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a03a:	2301      	movs	r3, #1
   1a03c:	408b      	lsls	r3, r1
   1a03e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a042:	b003      	add	sp, #12
   1a044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a046:	2201      	movs	r2, #1
   1a048:	40b2      	lsls	r2, r6
   1a04a:	ea21 0102 	bic.w	r1, r1, r2
   1a04e:	e766      	b.n	19f1e <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a050:	3001      	adds	r0, #1
   1a052:	2808      	cmp	r0, #8
   1a054:	d181      	bne.n	19f5a <gpio_nrfx_pin_interrupt_configure+0x8a>
   1a056:	e79e      	b.n	19f96 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1a058:	f06f 0012 	mvn.w	r0, #18
   1a05c:	e7f1      	b.n	1a042 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a05e:	6939      	ldr	r1, [r7, #16]
   1a060:	40f1      	lsrs	r1, r6
   1a062:	f001 0101 	and.w	r1, r1, #1
   1a066:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a06a:	4628      	mov	r0, r5
   1a06c:	b2c9      	uxtb	r1, r1
   1a06e:	f7ff fe6d 	bl	19d4c <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a072:	4620      	mov	r0, r4
   1a074:	e7e5      	b.n	1a042 <gpio_nrfx_pin_interrupt_configure+0x172>
   1a076:	bf00      	nop
   1a078:	50000300 	.word	0x50000300
   1a07c:	40006000 	.word	0x40006000
   1a080:	0bad0000 	.word	0x0bad0000

0001a084 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a084:	4b07      	ldr	r3, [pc, #28]	; (1a0a4 <uart_nrfx_poll_in+0x20>)
   1a086:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1a08a:	b142      	cbz	r2, 1a09e <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a08c:	2000      	movs	r0, #0
   1a08e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   1a092:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1a096:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1a09a:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1a09c:	4770      	bx	lr
		return -1;
   1a09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a0a2:	4770      	bx	lr
   1a0a4:	40002000 	.word	0x40002000

0001a0a8 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a0a8:	4b02      	ldr	r3, [pc, #8]	; (1a0b4 <uart_nrfx_err_check+0xc>)
   1a0aa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a0ae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1a0b2:	4770      	bx	lr
   1a0b4:	40002000 	.word	0x40002000

0001a0b8 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1a0b8:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1a0ba:	794b      	ldrb	r3, [r1, #5]
   1a0bc:	2b01      	cmp	r3, #1
   1a0be:	d022      	beq.n	1a106 <uart_nrfx_configure+0x4e>
   1a0c0:	2b03      	cmp	r3, #3
   1a0c2:	d11d      	bne.n	1a100 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1a0c4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a0c6:	798b      	ldrb	r3, [r1, #6]
   1a0c8:	2b03      	cmp	r3, #3
   1a0ca:	d119      	bne.n	1a100 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a0cc:	79cb      	ldrb	r3, [r1, #7]
   1a0ce:	b9bb      	cbnz	r3, 1a100 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a0d0:	790a      	ldrb	r2, [r1, #4]
   1a0d2:	b112      	cbz	r2, 1a0da <uart_nrfx_configure+0x22>
   1a0d4:	2a02      	cmp	r2, #2
   1a0d6:	d113      	bne.n	1a100 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1a0d8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a0da:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1a0dc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1a0e0:	d061      	beq.n	1a1a6 <uart_nrfx_configure+0xee>
   1a0e2:	d82d      	bhi.n	1a140 <uart_nrfx_configure+0x88>
   1a0e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a0e8:	d05f      	beq.n	1a1aa <uart_nrfx_configure+0xf2>
   1a0ea:	d816      	bhi.n	1a11a <uart_nrfx_configure+0x62>
   1a0ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a0f0:	d05d      	beq.n	1a1ae <uart_nrfx_configure+0xf6>
   1a0f2:	d80a      	bhi.n	1a10a <uart_nrfx_configure+0x52>
   1a0f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a0f8:	d05c      	beq.n	1a1b4 <uart_nrfx_configure+0xfc>
   1a0fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a0fe:	d05c      	beq.n	1a1ba <uart_nrfx_configure+0x102>
   1a100:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a104:	e04e      	b.n	1a1a4 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1a106:	2500      	movs	r5, #0
   1a108:	e7dd      	b.n	1a0c6 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1a10a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a10e:	d057      	beq.n	1a1c0 <uart_nrfx_configure+0x108>
   1a110:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a114:	d1f4      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1a116:	4b34      	ldr	r3, [pc, #208]	; (1a1e8 <uart_nrfx_configure+0x130>)
   1a118:	e039      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a11a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a11e:	d052      	beq.n	1a1c6 <uart_nrfx_configure+0x10e>
   1a120:	d807      	bhi.n	1a132 <uart_nrfx_configure+0x7a>
   1a122:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a126:	d050      	beq.n	1a1ca <uart_nrfx_configure+0x112>
   1a128:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a12c:	d1e8      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1a12e:	4b2f      	ldr	r3, [pc, #188]	; (1a1ec <uart_nrfx_configure+0x134>)
   1a130:	e02d      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a132:	f647 2412 	movw	r4, #31250	; 0x7a12
   1a136:	42a3      	cmp	r3, r4
   1a138:	d1e2      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1a13a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a13e:	e026      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a140:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a144:	d044      	beq.n	1a1d0 <uart_nrfx_configure+0x118>
   1a146:	d811      	bhi.n	1a16c <uart_nrfx_configure+0xb4>
   1a148:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a14c:	d042      	beq.n	1a1d4 <uart_nrfx_configure+0x11c>
   1a14e:	d808      	bhi.n	1a162 <uart_nrfx_configure+0xaa>
   1a150:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1a154:	42a3      	cmp	r3, r4
   1a156:	d03f      	beq.n	1a1d8 <uart_nrfx_configure+0x120>
   1a158:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a15c:	d1d0      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1a15e:	4b24      	ldr	r3, [pc, #144]	; (1a1f0 <uart_nrfx_configure+0x138>)
   1a160:	e015      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a162:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a166:	d1cb      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1a168:	4b22      	ldr	r3, [pc, #136]	; (1a1f4 <uart_nrfx_configure+0x13c>)
   1a16a:	e010      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a16c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a170:	d035      	beq.n	1a1de <uart_nrfx_configure+0x126>
   1a172:	d807      	bhi.n	1a184 <uart_nrfx_configure+0xcc>
   1a174:	4c20      	ldr	r4, [pc, #128]	; (1a1f8 <uart_nrfx_configure+0x140>)
   1a176:	42a3      	cmp	r3, r4
   1a178:	d033      	beq.n	1a1e2 <uart_nrfx_configure+0x12a>
   1a17a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a17e:	d1bf      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1a180:	4b1e      	ldr	r3, [pc, #120]	; (1a1fc <uart_nrfx_configure+0x144>)
   1a182:	e004      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a184:	4c1e      	ldr	r4, [pc, #120]	; (1a200 <uart_nrfx_configure+0x148>)
   1a186:	42a3      	cmp	r3, r4
   1a188:	d1ba      	bne.n	1a100 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1a18a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a18e:	4c1d      	ldr	r4, [pc, #116]	; (1a204 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1a190:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   1a192:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a196:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a19a:	6903      	ldr	r3, [r0, #16]
   1a19c:	c903      	ldmia	r1, {r0, r1}
   1a19e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a1a2:	2000      	movs	r0, #0
}
   1a1a4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1a1a6:	4b18      	ldr	r3, [pc, #96]	; (1a208 <uart_nrfx_configure+0x150>)
   1a1a8:	e7f1      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1a1aa:	4b18      	ldr	r3, [pc, #96]	; (1a20c <uart_nrfx_configure+0x154>)
   1a1ac:	e7ef      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1a1ae:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a1b2:	e7ec      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1a1b4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a1b8:	e7e9      	b.n	1a18e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1a1ba:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a1be:	e7e6      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1a1c0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a1c4:	e7e3      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1a1c6:	4b12      	ldr	r3, [pc, #72]	; (1a210 <uart_nrfx_configure+0x158>)
   1a1c8:	e7e1      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1a1ca:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1a1ce:	e7de      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1a1d0:	4b10      	ldr	r3, [pc, #64]	; (1a214 <uart_nrfx_configure+0x15c>)
   1a1d2:	e7dc      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1a1d4:	4b10      	ldr	r3, [pc, #64]	; (1a218 <uart_nrfx_configure+0x160>)
   1a1d6:	e7da      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1a1d8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a1dc:	e7d7      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1a1de:	4b0f      	ldr	r3, [pc, #60]	; (1a21c <uart_nrfx_configure+0x164>)
   1a1e0:	e7d5      	b.n	1a18e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1a1e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a1e6:	e7d2      	b.n	1a18e <uart_nrfx_configure+0xd6>
   1a1e8:	0013b000 	.word	0x0013b000
   1a1ec:	004ea000 	.word	0x004ea000
   1a1f0:	00ebf000 	.word	0x00ebf000
   1a1f4:	01d7e000 	.word	0x01d7e000
   1a1f8:	0003d090 	.word	0x0003d090
   1a1fc:	075f7000 	.word	0x075f7000
   1a200:	000f4240 	.word	0x000f4240
   1a204:	40002000 	.word	0x40002000
   1a208:	009d5000 	.word	0x009d5000
   1a20c:	00275000 	.word	0x00275000
   1a210:	0075f000 	.word	0x0075f000
   1a214:	03afb000 	.word	0x03afb000
   1a218:	013a9000 	.word	0x013a9000
   1a21c:	0ebed000 	.word	0x0ebed000

0001a220 <uart_nrfx_poll_out>:
{
   1a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a222:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1a224:	f005 f8bb 	bl	1f39e <k_is_in_isr>
   1a228:	4d1a      	ldr	r5, [pc, #104]	; (1a294 <uart_nrfx_poll_out+0x74>)
   1a22a:	bb78      	cbnz	r0, 1a28c <uart_nrfx_poll_out+0x6c>
   1a22c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a22e:	2701      	movs	r7, #1
   1a230:	f3bf 8f5b 	dmb	ish
   1a234:	e855 3f00 	ldrex	r3, [r5]
   1a238:	2b00      	cmp	r3, #0
   1a23a:	d103      	bne.n	1a244 <uart_nrfx_poll_out+0x24>
   1a23c:	e845 7200 	strex	r2, r7, [r5]
   1a240:	2a00      	cmp	r2, #0
   1a242:	d1f7      	bne.n	1a234 <uart_nrfx_poll_out+0x14>
   1a244:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1a248:	d007      	beq.n	1a25a <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1a24a:	2021      	movs	r0, #33	; 0x21
   1a24c:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1a24e:	3c01      	subs	r4, #1
   1a250:	f001 fca6 	bl	1bba0 <z_impl_k_sleep>
   1a254:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a258:	d1ea      	bne.n	1a230 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a25a:	4c0f      	ldr	r4, [pc, #60]	; (1a298 <uart_nrfx_poll_out+0x78>)
   1a25c:	2300      	movs	r3, #0
   1a25e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1a262:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a266:	2301      	movs	r3, #1
   1a268:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1a26a:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1a26e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a272:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1a276:	b923      	cbnz	r3, 1a282 <uart_nrfx_poll_out+0x62>
   1a278:	2001      	movs	r0, #1
   1a27a:	f004 ff45 	bl	1f108 <nrfx_busy_wait>
   1a27e:	3e01      	subs	r6, #1
   1a280:	d1f7      	bne.n	1a272 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a282:	2301      	movs	r3, #1
   1a284:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1a286:	2300      	movs	r3, #0
   1a288:	602b      	str	r3, [r5, #0]
}
   1a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1a28c:	2301      	movs	r3, #1
   1a28e:	602b      	str	r3, [r5, #0]
   1a290:	e7e3      	b.n	1a25a <uart_nrfx_poll_out+0x3a>
   1a292:	bf00      	nop
   1a294:	20002660 	.word	0x20002660
   1a298:	40002000 	.word	0x40002000

0001a29c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1a29c:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1a29e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1a2a2:	4c13      	ldr	r4, [pc, #76]	; (1a2f0 <uart_nrfx_init+0x54>)
   1a2a4:	2200      	movs	r2, #0
   1a2a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1a2aa:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1a2ae:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1a2b2:	2103      	movs	r1, #3
   1a2b4:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
   1a2b8:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
   1a2bc:	2318      	movs	r3, #24
   1a2be:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1a2c2:	2319      	movs	r3, #25
   1a2c4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   1a2c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a2cc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1a2d0:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   1a2d2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1a2d6:	f7ff feef 	bl	1a0b8 <uart_nrfx_configure>
	if (err) {
   1a2da:	b940      	cbnz	r0, 1a2ee <uart_nrfx_init+0x52>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1a2dc:	2304      	movs	r3, #4
   1a2de:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a2e2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1a2e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a2ea:	2301      	movs	r3, #1
   1a2ec:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1a2ee:	bd10      	pop	{r4, pc}
   1a2f0:	40002000 	.word	0x40002000

0001a2f4 <random_byte_get>:
	__asm__ volatile(
   1a2f4:	f04f 0320 	mov.w	r3, #32
   1a2f8:	f3ef 8211 	mrs	r2, BASEPRI
   1a2fc:	f383 8811 	msr	BASEPRI, r3
   1a300:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a304:	4b09      	ldr	r3, [pc, #36]	; (1a32c <random_byte_get+0x38>)
   1a306:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1a30a:	b161      	cbz	r1, 1a326 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a30c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1a30e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a312:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1a316:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1a31a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1a31c:	f382 8811 	msr	BASEPRI, r2
   1a320:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1a324:	4770      	bx	lr
	int retval = -EAGAIN;
   1a326:	f06f 000a 	mvn.w	r0, #10
   1a32a:	e7f7      	b.n	1a31c <random_byte_get+0x28>
   1a32c:	4000d000 	.word	0x4000d000

0001a330 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1a330:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a332:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1a334:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1a336:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1a338:	f04f 0020 	mov.w	r0, #32
   1a33c:	f3ef 8e11 	mrs	lr, BASEPRI
   1a340:	f380 8811 	msr	BASEPRI, r0
   1a344:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1a348:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1a34a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1a34e:	1ba4      	subs	r4, r4, r6
   1a350:	403c      	ands	r4, r7
	if (available < len) {
   1a352:	42a2      	cmp	r2, r4
		len = available;
   1a354:	bf88      	it	hi
   1a356:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1a358:	18b0      	adds	r0, r6, r2
   1a35a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1a35c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1a35e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1a360:	f38e 8811 	msr	BASEPRI, lr
   1a364:	f3bf 8f6f 	isb	sy
   1a368:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1a36a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1a36c:	4290      	cmp	r0, r2
   1a36e:	d119      	bne.n	1a3a4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1a370:	4566      	cmp	r6, ip
   1a372:	d10d      	bne.n	1a390 <rng_pool_get+0x60>
	__asm__ volatile(
   1a374:	f04f 0520 	mov.w	r5, #32
   1a378:	f3ef 8011 	mrs	r0, BASEPRI
   1a37c:	f385 8811 	msr	BASEPRI, r5
   1a380:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1a384:	781d      	ldrb	r5, [r3, #0]
   1a386:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1a388:	f380 8811 	msr	BASEPRI, r0
   1a38c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1a390:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1a392:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1a394:	b290      	uxth	r0, r2
	available = available - len;
   1a396:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1a398:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a39a:	bf22      	ittt	cs
   1a39c:	4b06      	ldrcs	r3, [pc, #24]	; (1a3b8 <rng_pool_get+0x88>)
   1a39e:	2201      	movcs	r2, #1
   1a3a0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1a3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1a3a4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1a3a8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1a3aa:	f89e e005 	ldrb.w	lr, [lr, #5]
   1a3ae:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1a3b2:	403d      	ands	r5, r7
   1a3b4:	e7da      	b.n	1a36c <rng_pool_get+0x3c>
   1a3b6:	bf00      	nop
   1a3b8:	4000d000 	.word	0x4000d000

0001a3bc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a3bc:	43db      	mvns	r3, r3
{
   1a3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a3c2:	f013 0501 	ands.w	r5, r3, #1
{
   1a3c6:	460e      	mov	r6, r1
   1a3c8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a3ca:	d004      	beq.n	1a3d6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1a3cc:	4821      	ldr	r0, [pc, #132]	; (1a454 <entropy_nrf5_get_entropy_isr+0x98>)
   1a3ce:	f7ff ffaf 	bl	1a330 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1a3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1a3d6:	b3a2      	cbz	r2, 1a442 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1a3d8:	f04f 0320 	mov.w	r3, #32
   1a3dc:	f3ef 8811 	mrs	r8, BASEPRI
   1a3e0:	f383 8811 	msr	BASEPRI, r3
   1a3e4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1a3e8:	200d      	movs	r0, #13
   1a3ea:	f7ea f96d 	bl	46c8 <arch_irq_is_enabled>
   1a3ee:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1a3f0:	200d      	movs	r0, #13
   1a3f2:	f7ea f955 	bl	46a0 <arch_irq_disable>
	__asm__ volatile(
   1a3f6:	f388 8811 	msr	BASEPRI, r8
   1a3fa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a3fe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1a458 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a402:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1a45c <entropy_nrf5_get_entropy_isr+0xa0>
   1a406:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1a40a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1a40e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a412:	2301      	movs	r3, #1
   1a414:	f8c8 3000 	str.w	r3, [r8]
   1a418:	4625      	mov	r5, r4
   1a41a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a41e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1a422:	b183      	cbz	r3, 1a446 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1a424:	f7ff ff66 	bl	1a2f4 <random_byte_get>
			if (byte < 0) {
   1a428:	1e03      	subs	r3, r0, #0
   1a42a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1a42e:	dbf6      	blt.n	1a41e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1a430:	3d01      	subs	r5, #1
   1a432:	b2ad      	uxth	r5, r5
   1a434:	5573      	strb	r3, [r6, r5]
		} while (len);
   1a436:	2d00      	cmp	r5, #0
   1a438:	d1f1      	bne.n	1a41e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1a43a:	b117      	cbz	r7, 1a442 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1a43c:	200d      	movs	r0, #13
   1a43e:	f7ea f91f 	bl	4680 <arch_irq_enable>
	return cnt;
   1a442:	4620      	mov	r0, r4
   1a444:	e7c5      	b.n	1a3d2 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1a446:	f3bf 8f4f 	dsb	sy
				__WFE();
   1a44a:	bf20      	wfe
				__SEV();
   1a44c:	bf40      	sev
				__WFE();
   1a44e:	bf20      	wfe
   1a450:	e7e5      	b.n	1a41e <entropy_nrf5_get_entropy_isr+0x62>
   1a452:	bf00      	nop
   1a454:	20002698 	.word	0x20002698
   1a458:	4000d000 	.word	0x4000d000
   1a45c:	e000e100 	.word	0xe000e100

0001a460 <entropy_nrf5_get_entropy>:
{
   1a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1a464:	4f13      	ldr	r7, [pc, #76]	; (1a4b4 <entropy_nrf5_get_entropy+0x54>)
   1a466:	460d      	mov	r5, r1
   1a468:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1a46a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1a46e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1a472:	b914      	cbnz	r4, 1a47a <entropy_nrf5_get_entropy+0x1a>
}
   1a474:	4620      	mov	r0, r4
   1a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a47e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a482:	4638      	mov	r0, r7
   1a484:	f000 fece 	bl	1b224 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1a488:	4622      	mov	r2, r4
   1a48a:	4629      	mov	r1, r5
   1a48c:	4640      	mov	r0, r8
   1a48e:	f7ff ff4f 	bl	1a330 <rng_pool_get>
   1a492:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1a494:	4638      	mov	r0, r7
   1a496:	f000 fe9f 	bl	1b1d8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1a49a:	b93e      	cbnz	r6, 1a4ac <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1a49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a4a4:	4648      	mov	r0, r9
   1a4a6:	f000 febd 	bl	1b224 <z_impl_k_sem_take>
			continue;
   1a4aa:	e7e2      	b.n	1a472 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1a4ac:	1ba4      	subs	r4, r4, r6
   1a4ae:	b2a4      	uxth	r4, r4
		buf += bytes;
   1a4b0:	4435      	add	r5, r6
   1a4b2:	e7de      	b.n	1a472 <entropy_nrf5_get_entropy+0x12>
   1a4b4:	20002668 	.word	0x20002668

0001a4b8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1a4b8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a4ba:	4c19      	ldr	r4, [pc, #100]	; (1a520 <entropy_nrf5_init+0x68>)
   1a4bc:	2201      	movs	r2, #1
   1a4be:	4611      	mov	r1, r2
   1a4c0:	4620      	mov	r0, r4
   1a4c2:	f005 f855 	bl	1f570 <z_impl_k_sem_init>
   1a4c6:	2201      	movs	r2, #1
   1a4c8:	2100      	movs	r1, #0
   1a4ca:	f104 0018 	add.w	r0, r4, #24
   1a4ce:	f005 f84f 	bl	1f570 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1a4d2:	f240 4307 	movw	r3, #1031	; 0x407
   1a4d6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1a4da:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a4de:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1a4e0:	230c      	movs	r3, #12
   1a4e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1a4e6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1a4e8:	4b0e      	ldr	r3, [pc, #56]	; (1a524 <entropy_nrf5_init+0x6c>)
   1a4ea:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1a4ee:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1a4f2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1a4f6:	f042 0201 	orr.w	r2, r2, #1
   1a4fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1a4fe:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a500:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1a504:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1a508:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1a50c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a50e:	6019      	str	r1, [r3, #0]
   1a510:	200d      	movs	r0, #13
   1a512:	f7ea f8e7 	bl	46e4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1a516:	200d      	movs	r0, #13
   1a518:	f7ea f8b2 	bl	4680 <arch_irq_enable>

	return 0;
}
   1a51c:	4628      	mov	r0, r5
   1a51e:	bd38      	pop	{r3, r4, r5, pc}
   1a520:	20002668 	.word	0x20002668
   1a524:	4000d000 	.word	0x4000d000

0001a528 <isr>:
{
   1a528:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1a52a:	f7ff fee3 	bl	1a2f4 <random_byte_get>
	if (byte < 0) {
   1a52e:	2800      	cmp	r0, #0
   1a530:	db20      	blt.n	1a574 <isr+0x4c>
	uint8_t last  = rngp->last;
   1a532:	4b17      	ldr	r3, [pc, #92]	; (1a590 <isr+0x68>)
   1a534:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1a538:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1a53c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1a540:	1a51      	subs	r1, r2, r1
   1a542:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1a546:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1a548:	d10d      	bne.n	1a566 <isr+0x3e>
	uint8_t last  = rngp->last;
   1a54a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1a54e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1a552:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1a556:	1a51      	subs	r1, r2, r1
   1a558:	ea34 0101 	bics.w	r1, r4, r1
   1a55c:	d10b      	bne.n	1a576 <isr+0x4e>
   1a55e:	4b0d      	ldr	r3, [pc, #52]	; (1a594 <isr+0x6c>)
   1a560:	2201      	movs	r2, #1
   1a562:	605a      	str	r2, [r3, #4]
}
   1a564:	e00e      	b.n	1a584 <isr+0x5c>
	rngp->buffer[last] = byte;
   1a566:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1a568:	3201      	adds	r2, #1
   1a56a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1a56c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1a570:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1a574:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1a576:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1a578:	3201      	adds	r2, #1
   1a57a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1a57c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1a580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1a584:	4804      	ldr	r0, [pc, #16]	; (1a598 <isr+0x70>)
}
   1a586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a58a:	f000 be25 	b.w	1b1d8 <z_impl_k_sem_give>
   1a58e:	bf00      	nop
   1a590:	20002668 	.word	0x20002668
   1a594:	4000d000 	.word	0x4000d000
   1a598:	20002680 	.word	0x20002680

0001a59c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a5a0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1a5a4:	2a08      	cmp	r2, #8
   1a5a6:	d106      	bne.n	1a5b6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a5a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1a5ac:	2b05      	cmp	r3, #5
   1a5ae:	d802      	bhi.n	1a5b6 <nrf52_errata_103+0x1a>
   1a5b0:	4a02      	ldr	r2, [pc, #8]	; (1a5bc <nrf52_errata_103+0x20>)
   1a5b2:	5cd0      	ldrb	r0, [r2, r3]
   1a5b4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a5b6:	2000      	movs	r0, #0
    #endif
}
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop
   1a5bc:	00022ecf 	.word	0x00022ecf

0001a5c0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a5c0:	4a02      	ldr	r2, [pc, #8]	; (1a5cc <nvmc_wait+0xc>)
   1a5c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a5c6:	2b00      	cmp	r3, #0
   1a5c8:	d0fb      	beq.n	1a5c2 <nvmc_wait+0x2>
}
   1a5ca:	4770      	bx	lr
   1a5cc:	4001e000 	.word	0x4001e000

0001a5d0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1a5d0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1a5d2:	f004 fd8f 	bl	1f0f4 <nrf52_errata_136>
   1a5d6:	b140      	cbz	r0, 1a5ea <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1a5d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a5dc:	2200      	movs	r2, #0
   1a5de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a5e2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a5e6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1a5ea:	f004 fd83 	bl	1f0f4 <nrf52_errata_136>
   1a5ee:	2800      	cmp	r0, #0
   1a5f0:	d046      	beq.n	1a680 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a5f6:	4b60      	ldr	r3, [pc, #384]	; (1a778 <SystemInit+0x1a8>)
   1a5f8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a5fc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a600:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a604:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a608:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a60c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a610:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1a614:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a618:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1a61c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a620:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1a624:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a628:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1a62c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a630:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1a634:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a638:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1a63c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a640:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1a644:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a648:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1a64c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a650:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1a654:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a658:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1a65c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a660:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1a664:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a668:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1a66c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a670:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1a674:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a678:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1a67c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1a680:	f7ff ff8c 	bl	1a59c <nrf52_errata_103>
   1a684:	b118      	cbz	r0, 1a68e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1a686:	4b3d      	ldr	r3, [pc, #244]	; (1a77c <SystemInit+0x1ac>)
   1a688:	4a3d      	ldr	r2, [pc, #244]	; (1a780 <SystemInit+0x1b0>)
   1a68a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1a68e:	f7ff ff85 	bl	1a59c <nrf52_errata_103>
   1a692:	b118      	cbz	r0, 1a69c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1a694:	4b3b      	ldr	r3, [pc, #236]	; (1a784 <SystemInit+0x1b4>)
   1a696:	22fb      	movs	r2, #251	; 0xfb
   1a698:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1a69c:	f7ff ff7e 	bl	1a59c <nrf52_errata_103>
   1a6a0:	b170      	cbz	r0, 1a6c0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1a6a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1a6a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a6aa:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1a6ae:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1a6b2:	f022 020f 	bic.w	r2, r2, #15
   1a6b6:	f003 030f 	and.w	r3, r3, #15
   1a6ba:	4313      	orrs	r3, r2
   1a6bc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1a6c0:	f7ff ff6c 	bl	1a59c <nrf52_errata_103>
   1a6c4:	b120      	cbz	r0, 1a6d0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a6c6:	4b30      	ldr	r3, [pc, #192]	; (1a788 <SystemInit+0x1b8>)
   1a6c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a6cc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1a6d0:	f004 fd10 	bl	1f0f4 <nrf52_errata_136>
   1a6d4:	b148      	cbz	r0, 1a6ea <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a6d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a6da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a6de:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a6e0:	bf44      	itt	mi
   1a6e2:	f06f 0201 	mvnmi.w	r2, #1
   1a6e6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a6ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a6ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1a6f2:	2a08      	cmp	r2, #8
   1a6f4:	d10e      	bne.n	1a714 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a6f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1a6fa:	2b05      	cmp	r3, #5
   1a6fc:	d802      	bhi.n	1a704 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1a6fe:	4a23      	ldr	r2, [pc, #140]	; (1a78c <SystemInit+0x1bc>)
   1a700:	5cd3      	ldrb	r3, [r2, r3]
   1a702:	b13b      	cbz	r3, 1a714 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a704:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a708:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a70c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a710:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a714:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a718:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a71c:	2a00      	cmp	r2, #0
   1a71e:	db03      	blt.n	1a728 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a720:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a724:	2b00      	cmp	r3, #0
   1a726:	da22      	bge.n	1a76e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a728:	4919      	ldr	r1, [pc, #100]	; (1a790 <SystemInit+0x1c0>)
   1a72a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a72c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a730:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a734:	2412      	movs	r4, #18
    nvmc_wait();
   1a736:	f7ff ff43 	bl	1a5c0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a73a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1a73e:	f7ff ff3f 	bl	1a5c0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1a742:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1a746:	f7ff ff3b 	bl	1a5c0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a74a:	2300      	movs	r3, #0
   1a74c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1a750:	f7ff ff36 	bl	1a5c0 <nvmc_wait>
   1a754:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a758:	490e      	ldr	r1, [pc, #56]	; (1a794 <SystemInit+0x1c4>)
   1a75a:	4b0f      	ldr	r3, [pc, #60]	; (1a798 <SystemInit+0x1c8>)
   1a75c:	68ca      	ldr	r2, [r1, #12]
   1a75e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a762:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a764:	60cb      	str	r3, [r1, #12]
   1a766:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1a76a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a76c:	e7fd      	b.n	1a76a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a76e:	4b0b      	ldr	r3, [pc, #44]	; (1a79c <SystemInit+0x1cc>)
   1a770:	4a0b      	ldr	r2, [pc, #44]	; (1a7a0 <SystemInit+0x1d0>)
   1a772:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1a774:	bd10      	pop	{r4, pc}
   1a776:	bf00      	nop
   1a778:	4000c000 	.word	0x4000c000
   1a77c:	40005000 	.word	0x40005000
   1a780:	00038148 	.word	0x00038148
   1a784:	4000f000 	.word	0x4000f000
   1a788:	40029000 	.word	0x40029000
   1a78c:	00022ec9 	.word	0x00022ec9
   1a790:	4001e000 	.word	0x4001e000
   1a794:	e000ed00 	.word	0xe000ed00
   1a798:	05fa0004 	.word	0x05fa0004
   1a79c:	20000594 	.word	0x20000594
   1a7a0:	03d09000 	.word	0x03d09000

0001a7a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1a7a4:	4b04      	ldr	r3, [pc, #16]	; (1a7b8 <nrfx_clock_init+0x14>)
   1a7a6:	791a      	ldrb	r2, [r3, #4]
   1a7a8:	b922      	cbnz	r2, 1a7b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1a7aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1a7ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1a7ae:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a7b0:	4802      	ldr	r0, [pc, #8]	; (1a7bc <nrfx_clock_init+0x18>)
   1a7b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1a7b4:	4802      	ldr	r0, [pc, #8]	; (1a7c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a7b6:	4770      	bx	lr
   1a7b8:	200026bc 	.word	0x200026bc
   1a7bc:	0bad0000 	.word	0x0bad0000
   1a7c0:	0bad000c 	.word	0x0bad000c

0001a7c4 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1a7c4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1a7c6:	b110      	cbz	r0, 1a7ce <nrfx_clock_stop+0xa>
   1a7c8:	2801      	cmp	r0, #1
   1a7ca:	d017      	beq.n	1a7fc <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1a7cc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1a7ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1a7d2:	2302      	movs	r3, #2
   1a7d4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a7d8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1a7dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a7e0:	2301      	movs	r3, #1
   1a7e2:	60e3      	str	r3, [r4, #12]
   1a7e4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a7e8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1a7ec:	03db      	lsls	r3, r3, #15
   1a7ee:	d5ed      	bpl.n	1a7cc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1a7f0:	2001      	movs	r0, #1
   1a7f2:	f004 fc89 	bl	1f108 <nrfx_busy_wait>
   1a7f6:	3d01      	subs	r5, #1
   1a7f8:	d1f6      	bne.n	1a7e8 <nrfx_clock_stop+0x24>
   1a7fa:	e7e7      	b.n	1a7cc <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1a7fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a800:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1a802:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a806:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a80a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a80e:	6060      	str	r0, [r4, #4]
   1a810:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a814:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a818:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1a81c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a81e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a822:	d505      	bpl.n	1a830 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1a824:	b123      	cbz	r3, 1a830 <nrfx_clock_stop+0x6c>
   1a826:	2001      	movs	r0, #1
   1a828:	f004 fc6e 	bl	1f108 <nrfx_busy_wait>
   1a82c:	3d01      	subs	r5, #1
   1a82e:	d1f1      	bne.n	1a814 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1a830:	4b01      	ldr	r3, [pc, #4]	; (1a838 <nrfx_clock_stop+0x74>)
   1a832:	2200      	movs	r2, #0
   1a834:	715a      	strb	r2, [r3, #5]
   1a836:	e7c9      	b.n	1a7cc <nrfx_clock_stop+0x8>
   1a838:	200026bc 	.word	0x200026bc

0001a83c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a83c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1a840:	b510      	push	{r4, lr}
   1a842:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1a846:	b16a      	cbz	r2, 1a864 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a848:	2200      	movs	r2, #0
   1a84a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a84e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1a852:	2201      	movs	r2, #1
   1a854:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1a858:	4b11      	ldr	r3, [pc, #68]	; (1a8a0 <nrfx_power_clock_irq_handler+0x64>)
   1a85a:	7958      	ldrb	r0, [r3, #5]
   1a85c:	b910      	cbnz	r0, 1a864 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1a85e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a860:	681b      	ldr	r3, [r3, #0]
   1a862:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a868:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1a86c:	b172      	cbz	r2, 1a88c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a86e:	2200      	movs	r2, #0
   1a870:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a874:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a878:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a87c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1a880:	0792      	lsls	r2, r2, #30
   1a882:	d104      	bne.n	1a88e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a884:	2201      	movs	r2, #1
   1a886:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a88a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1a88c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1a88e:	2202      	movs	r2, #2
   1a890:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a894:	4b02      	ldr	r3, [pc, #8]	; (1a8a0 <nrfx_power_clock_irq_handler+0x64>)
}
   1a896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a89a:	681b      	ldr	r3, [r3, #0]
   1a89c:	2001      	movs	r0, #1
   1a89e:	4718      	bx	r3
   1a8a0:	200026bc 	.word	0x200026bc

0001a8a4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1a8a4:	2301      	movs	r3, #1
   1a8a6:	fa03 f000 	lsl.w	r0, r3, r0
   1a8aa:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1a8ac:	b193      	cbz	r3, 1a8d4 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1a8ae:	f04f 0320 	mov.w	r3, #32
   1a8b2:	f3ef 8111 	mrs	r1, BASEPRI
   1a8b6:	f383 8811 	msr	BASEPRI, r3
   1a8ba:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1a8be:	4a06      	ldr	r2, [pc, #24]	; (1a8d8 <nrfx_gpiote_channel_free+0x34>)
   1a8c0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1a8c2:	ea23 0000 	bic.w	r0, r3, r0
   1a8c6:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1a8c8:	f381 8811 	msr	BASEPRI, r1
   1a8cc:	f3bf 8f6f 	isb	sy
   1a8d0:	4802      	ldr	r0, [pc, #8]	; (1a8dc <nrfx_gpiote_channel_free+0x38>)
   1a8d2:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1a8d4:	4802      	ldr	r0, [pc, #8]	; (1a8e0 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a8d6:	4770      	bx	lr
   1a8d8:	200026c4 	.word	0x200026c4
   1a8dc:	0bad0000 	.word	0x0bad0000
   1a8e0:	0bad0004 	.word	0x0bad0004

0001a8e4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1a8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8e8:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1a8ea:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1a948 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a8ee:	4817      	ldr	r0, [pc, #92]	; (1a94c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1a8f0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1a950 <nrfx_gpiote_channel_alloc+0x6c>
{
   1a8f4:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1a8f6:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1a8f8:	2601      	movs	r6, #1
   1a8fa:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1a8fc:	f04f 0120 	mov.w	r1, #32
   1a900:	f3ef 8c11 	mrs	ip, BASEPRI
   1a904:	f381 8811 	msr	BASEPRI, r1
   1a908:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1a90c:	fa22 f103 	lsr.w	r1, r2, r3
   1a910:	07c9      	lsls	r1, r1, #31
   1a912:	d50a      	bpl.n	1a92a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1a914:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1a918:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1a91c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1a91e:	bf01      	itttt	eq
   1a920:	4339      	orreq	r1, r7
   1a922:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1a926:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1a928:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1a92a:	f38c 8811 	msr	BASEPRI, ip
   1a92e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1a932:	4540      	cmp	r0, r8
   1a934:	d005      	beq.n	1a942 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1a936:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a93a:	439a      	bics	r2, r3
   1a93c:	f104 0401 	add.w	r4, r4, #1
   1a940:	d1db      	bne.n	1a8fa <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a946:	bf00      	nop
   1a948:	200026c4 	.word	0x200026c4
   1a94c:	0bad0002 	.word	0x0bad0002
   1a950:	0bad0000 	.word	0x0bad0000

0001a954 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a954:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a956:	4c11      	ldr	r4, [pc, #68]	; (1a99c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a958:	4a11      	ldr	r2, [pc, #68]	; (1a9a0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a95a:	4912      	ldr	r1, [pc, #72]	; (1a9a4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a95c:	2303      	movs	r3, #3
   1a95e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a960:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a962:	4b11      	ldr	r3, [pc, #68]	; (1a9a8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1a964:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a966:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a968:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a96c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a96e:	2300      	movs	r3, #0
   1a970:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a972:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a974:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1a976:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a978:	4a0c      	ldr	r2, [pc, #48]	; (1a9ac <_DoInit+0x58>)
   1a97a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1a97c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a97e:	2210      	movs	r2, #16
   1a980:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a982:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a984:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a986:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1a988:	f002 fef5 	bl	1d776 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a98c:	4908      	ldr	r1, [pc, #32]	; (1a9b0 <_DoInit+0x5c>)
   1a98e:	4620      	mov	r0, r4
   1a990:	f002 fef1 	bl	1d776 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1a994:	2320      	movs	r3, #32
   1a996:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1a998:	bd10      	pop	{r4, pc}
   1a99a:	bf00      	nop
   1a99c:	20002724 	.word	0x20002724
   1a9a0:	00022ed5 	.word	0x00022ed5
   1a9a4:	00022ede 	.word	0x00022ede
   1a9a8:	2000291e 	.word	0x2000291e
   1a9ac:	2000290e 	.word	0x2000290e
   1a9b0:	00022ee2 	.word	0x00022ee2

0001a9b4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1a9b8:	4f23      	ldr	r7, [pc, #140]	; (1aa48 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1a9ba:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9be:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1a9c0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9c4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1a9c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a9c8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1a9ca:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a9cc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1a9ce:	d834      	bhi.n	1aa3a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1a9d0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1a9d4:	ebaa 0905 	sub.w	r9, sl, r5
   1a9d8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1a9dc:	4294      	cmp	r4, r2
   1a9de:	d811      	bhi.n	1aa04 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a9e0:	f04f 0918 	mov.w	r9, #24
   1a9e4:	fb06 9309 	mla	r3, r6, r9, r9
   1a9e8:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1a9ea:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a9ec:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1a9ee:	4641      	mov	r1, r8
   1a9f0:	4428      	add	r0, r5
   1a9f2:	f002 ff09 	bl	1d808 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1a9f6:	fb09 7606 	mla	r6, r9, r6, r7
   1a9fa:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1a9fc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1a9fe:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1aa00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1aa04:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1aa06:	429c      	cmp	r4, r3
   1aa08:	d81b      	bhi.n	1aa42 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1aa0a:	fb00 bb0b 	mla	fp, r0, fp, fp
   1aa0e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1aa10:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1aa12:	f8db 0004 	ldr.w	r0, [fp, #4]
   1aa16:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1aa18:	4428      	add	r0, r5
   1aa1a:	f002 fef5 	bl	1d808 <memcpy>
      if (NumBytes) {
   1aa1e:	ebb4 040a 	subs.w	r4, r4, sl
   1aa22:	d006      	beq.n	1aa32 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1aa24:	f8db 0004 	ldr.w	r0, [fp, #4]
   1aa28:	4622      	mov	r2, r4
   1aa2a:	eb08 0109 	add.w	r1, r8, r9
   1aa2e:	f002 feeb 	bl	1d808 <memcpy>
      pRing->WrOff = NumBytes;
   1aa32:	2018      	movs	r0, #24
   1aa34:	fb00 7606 	mla	r6, r0, r6, r7
   1aa38:	e7e0      	b.n	1a9fc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1aa3a:	3b01      	subs	r3, #1
   1aa3c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1aa3e:	42a3      	cmp	r3, r4
   1aa40:	d2ce      	bcs.n	1a9e0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1aa42:	2000      	movs	r0, #0
   1aa44:	e7dc      	b.n	1aa00 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1aa46:	bf00      	nop
   1aa48:	20002724 	.word	0x20002724

0001aa4c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1aa4c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1aa4e:	4b16      	ldr	r3, [pc, #88]	; (1aaa8 <SEGGER_RTT_WriteNoLock+0x5c>)
   1aa50:	2418      	movs	r4, #24
   1aa52:	fb00 4504 	mla	r5, r0, r4, r4
   1aa56:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1aa58:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1aa5c:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1aa5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1aa60:	2c01      	cmp	r4, #1
   1aa62:	d00e      	beq.n	1aa82 <SEGGER_RTT_WriteNoLock+0x36>
   1aa64:	2c02      	cmp	r4, #2
   1aa66:	d018      	beq.n	1aa9a <SEGGER_RTT_WriteNoLock+0x4e>
   1aa68:	b9e4      	cbnz	r4, 1aaa4 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1aa6a:	4628      	mov	r0, r5
   1aa6c:	f004 fb84 	bl	1f178 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1aa70:	4286      	cmp	r6, r0
   1aa72:	d804      	bhi.n	1aa7e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1aa74:	4632      	mov	r2, r6
   1aa76:	4628      	mov	r0, r5
   1aa78:	f004 fb87 	bl	1f18a <_WriteNoCheck>
   1aa7c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1aa7e:	4620      	mov	r0, r4
   1aa80:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1aa82:	4628      	mov	r0, r5
   1aa84:	f004 fb78 	bl	1f178 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1aa88:	4286      	cmp	r6, r0
   1aa8a:	4634      	mov	r4, r6
   1aa8c:	bf28      	it	cs
   1aa8e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1aa90:	4622      	mov	r2, r4
   1aa92:	4628      	mov	r0, r5
   1aa94:	f004 fb79 	bl	1f18a <_WriteNoCheck>
    break;
   1aa98:	e7f1      	b.n	1aa7e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1aa9a:	4628      	mov	r0, r5
}
   1aa9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1aaa0:	f004 bb8f 	b.w	1f1c2 <_WriteBlocking>
  switch (pRing->Flags) {
   1aaa4:	2400      	movs	r4, #0
  return Status;
   1aaa6:	e7ea      	b.n	1aa7e <SEGGER_RTT_WriteNoLock+0x32>
   1aaa8:	20002724 	.word	0x20002724

0001aaac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1aaac:	4b03      	ldr	r3, [pc, #12]	; (1aabc <SEGGER_RTT_HasDataUp+0x10>)
   1aaae:	2218      	movs	r2, #24
   1aab0:	fb02 3300 	mla	r3, r2, r0, r3
   1aab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1aab6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1aab8:	1a80      	subs	r0, r0, r2
   1aaba:	4770      	bx	lr
   1aabc:	20002724 	.word	0x20002724

0001aac0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aac0:	4b0e      	ldr	r3, [pc, #56]	; (1aafc <z_sys_init_run_level+0x3c>)
{
   1aac2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aac4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aac8:	3001      	adds	r0, #1
   1aaca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1aace:	42a6      	cmp	r6, r4
   1aad0:	d800      	bhi.n	1aad4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1aad2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1aad4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1aad8:	4628      	mov	r0, r5
   1aada:	4798      	blx	r3
		if (dev != NULL) {
   1aadc:	b165      	cbz	r5, 1aaf8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1aade:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1aae0:	b130      	cbz	r0, 1aaf0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1aae2:	2800      	cmp	r0, #0
   1aae4:	bfb8      	it	lt
   1aae6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1aae8:	28ff      	cmp	r0, #255	; 0xff
   1aaea:	bfa8      	it	ge
   1aaec:	20ff      	movge	r0, #255	; 0xff
   1aaee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1aaf0:	785a      	ldrb	r2, [r3, #1]
   1aaf2:	f042 0201 	orr.w	r2, r2, #1
   1aaf6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aaf8:	3408      	adds	r4, #8
   1aafa:	e7e8      	b.n	1aace <z_sys_init_run_level+0xe>
   1aafc:	00021730 	.word	0x00021730

0001ab00 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1ab00:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1ab02:	4605      	mov	r5, r0
   1ab04:	b910      	cbnz	r0, 1ab0c <z_impl_device_get_binding+0xc>
		return NULL;
   1ab06:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1ab08:	4620      	mov	r0, r4
   1ab0a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1ab0c:	7803      	ldrb	r3, [r0, #0]
   1ab0e:	2b00      	cmp	r3, #0
   1ab10:	d0f9      	beq.n	1ab06 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ab12:	4c0e      	ldr	r4, [pc, #56]	; (1ab4c <z_impl_device_get_binding+0x4c>)
   1ab14:	4e0e      	ldr	r6, [pc, #56]	; (1ab50 <z_impl_device_get_binding+0x50>)
   1ab16:	42b4      	cmp	r4, r6
   1ab18:	d108      	bne.n	1ab2c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ab1a:	4c0c      	ldr	r4, [pc, #48]	; (1ab4c <z_impl_device_get_binding+0x4c>)
   1ab1c:	42b4      	cmp	r4, r6
   1ab1e:	d0f2      	beq.n	1ab06 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ab20:	4620      	mov	r0, r4
   1ab22:	f004 fb7f 	bl	1f224 <z_device_ready>
   1ab26:	b950      	cbnz	r0, 1ab3e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ab28:	3418      	adds	r4, #24
   1ab2a:	e7f7      	b.n	1ab1c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ab2c:	4620      	mov	r0, r4
   1ab2e:	f004 fb79 	bl	1f224 <z_device_ready>
   1ab32:	b110      	cbz	r0, 1ab3a <z_impl_device_get_binding+0x3a>
   1ab34:	6823      	ldr	r3, [r4, #0]
   1ab36:	42ab      	cmp	r3, r5
   1ab38:	d0e6      	beq.n	1ab08 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ab3a:	3418      	adds	r4, #24
   1ab3c:	e7eb      	b.n	1ab16 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ab3e:	6821      	ldr	r1, [r4, #0]
   1ab40:	4628      	mov	r0, r5
   1ab42:	f002 fe44 	bl	1d7ce <strcmp>
   1ab46:	2800      	cmp	r0, #0
   1ab48:	d1ee      	bne.n	1ab28 <z_impl_device_get_binding+0x28>
   1ab4a:	e7dd      	b.n	1ab08 <z_impl_device_get_binding+0x8>
   1ab4c:	20000608 	.word	0x20000608
   1ab50:	20000698 	.word	0x20000698

0001ab54 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1ab54:	b510      	push	{r4, lr}
   1ab56:	4604      	mov	r4, r0
	z_impl_log_panic();
   1ab58:	f7e8 fe5e 	bl	3818 <z_impl_log_panic>
   1ab5c:	4b06      	ldr	r3, [pc, #24]	; (1ab78 <k_sys_fatal_error_handler+0x24>)
   1ab5e:	4907      	ldr	r1, [pc, #28]	; (1ab7c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1ab60:	4807      	ldr	r0, [pc, #28]	; (1ab80 <k_sys_fatal_error_handler+0x2c>)
   1ab62:	1ac9      	subs	r1, r1, r3
   1ab64:	08c9      	lsrs	r1, r1, #3
   1ab66:	0189      	lsls	r1, r1, #6
   1ab68:	f041 0101 	orr.w	r1, r1, #1
   1ab6c:	f001 ffd5 	bl	1cb1a <log_0>
	arch_system_halt(reason);
   1ab70:	4620      	mov	r0, r4
   1ab72:	f004 fb61 	bl	1f238 <arch_system_halt>
   1ab76:	bf00      	nop
   1ab78:	0001ff94 	.word	0x0001ff94
   1ab7c:	000200dc 	.word	0x000200dc
   1ab80:	00022ee9 	.word	0x00022ee9

0001ab84 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ab84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ab88:	4606      	mov	r6, r0
   1ab8a:	460f      	mov	r7, r1
	__asm__ volatile(
   1ab8c:	f04f 0320 	mov.w	r3, #32
   1ab90:	f3ef 8811 	mrs	r8, BASEPRI
   1ab94:	f383 8811 	msr	BASEPRI, r3
   1ab98:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ab9c:	f001 f81a 	bl	1bbd4 <z_impl_k_current_get>
   1aba0:	4c1f      	ldr	r4, [pc, #124]	; (1ac20 <z_fatal_error+0x9c>)
   1aba2:	4b20      	ldr	r3, [pc, #128]	; (1ac24 <z_fatal_error+0xa0>)
   1aba4:	1ae4      	subs	r4, r4, r3
   1aba6:	2e04      	cmp	r6, #4
   1aba8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1abac:	bf96      	itet	ls
   1abae:	4a1e      	ldrls	r2, [pc, #120]	; (1ac28 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1abb0:	4a1e      	ldrhi	r2, [pc, #120]	; (1ac2c <z_fatal_error+0xa8>)
   1abb2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1abb6:	01a4      	lsls	r4, r4, #6
   1abb8:	f044 0301 	orr.w	r3, r4, #1
   1abbc:	4605      	mov	r5, r0
   1abbe:	f8ad 3000 	strh.w	r3, [sp]
   1abc2:	481b      	ldr	r0, [pc, #108]	; (1ac30 <z_fatal_error+0xac>)
   1abc4:	2300      	movs	r3, #0
   1abc6:	4631      	mov	r1, r6
   1abc8:	f001 ffe1 	bl	1cb8e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1abcc:	b147      	cbz	r7, 1abe0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1abce:	69fb      	ldr	r3, [r7, #28]
   1abd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1abd4:	b123      	cbz	r3, 1abe0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1abd6:	4817      	ldr	r0, [pc, #92]	; (1ac34 <z_fatal_error+0xb0>)
   1abd8:	f044 0101 	orr.w	r1, r4, #1
   1abdc:	f001 ff9d 	bl	1cb1a <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1abe0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1abe4:	b12d      	cbz	r5, 1abf2 <z_fatal_error+0x6e>
   1abe6:	4628      	mov	r0, r5
   1abe8:	f004 fbe2 	bl	1f3b0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1abec:	b108      	cbz	r0, 1abf2 <z_fatal_error+0x6e>
   1abee:	7803      	ldrb	r3, [r0, #0]
   1abf0:	b903      	cbnz	r3, 1abf4 <z_fatal_error+0x70>
		thread_name = "unknown";
   1abf2:	4811      	ldr	r0, [pc, #68]	; (1ac38 <z_fatal_error+0xb4>)
   1abf4:	f7e8 fc96 	bl	3524 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1abf8:	4623      	mov	r3, r4
   1abfa:	4602      	mov	r2, r0
   1abfc:	4629      	mov	r1, r5
   1abfe:	480f      	ldr	r0, [pc, #60]	; (1ac3c <z_fatal_error+0xb8>)
   1ac00:	f001 ffac 	bl	1cb5c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ac04:	4639      	mov	r1, r7
   1ac06:	4630      	mov	r0, r6
   1ac08:	f7ff ffa4 	bl	1ab54 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ac0c:	f388 8811 	msr	BASEPRI, r8
   1ac10:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ac14:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ac16:	b002      	add	sp, #8
   1ac18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ac1c:	f7ea b892 	b.w	4d44 <z_impl_k_thread_abort>
   1ac20:	000200dc 	.word	0x000200dc
   1ac24:	0001ff94 	.word	0x0001ff94
   1ac28:	00021748 	.word	0x00021748
   1ac2c:	00022ef8 	.word	0x00022ef8
   1ac30:	00022f06 	.word	0x00022f06
   1ac34:	00022f2e 	.word	0x00022f2e
   1ac38:	00022026 	.word	0x00022026
   1ac3c:	00022f4f 	.word	0x00022f4f

0001ac40 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ac40:	4802      	ldr	r0, [pc, #8]	; (1ac4c <z_bss_zero+0xc>)
   1ac42:	4a03      	ldr	r2, [pc, #12]	; (1ac50 <z_bss_zero+0x10>)
   1ac44:	2100      	movs	r1, #0
   1ac46:	1a12      	subs	r2, r2, r0
   1ac48:	f002 be09 	b.w	1d85e <memset>
   1ac4c:	20000850 	.word	0x20000850
   1ac50:	20002d20 	.word	0x20002d20

0001ac54 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ac54:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1ac56:	4b0a      	ldr	r3, [pc, #40]	; (1ac80 <bg_thread_main+0x2c>)
   1ac58:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ac5a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ac5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ac5e:	f7ff ff2f 	bl	1aac0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1ac62:	f001 faa3 	bl	1c1ac <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ac66:	2003      	movs	r0, #3
   1ac68:	f7ff ff2a 	bl	1aac0 <z_sys_init_run_level>

	z_init_static_threads();
   1ac6c:	f000 f954 	bl	1af18 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1ac70:	f7e7 fe26 	bl	28c0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ac74:	4a03      	ldr	r2, [pc, #12]	; (1ac84 <bg_thread_main+0x30>)
   1ac76:	7b13      	ldrb	r3, [r2, #12]
   1ac78:	f023 0301 	bic.w	r3, r3, #1
   1ac7c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ac7e:	bd08      	pop	{r3, pc}
   1ac80:	20002d1e 	.word	0x20002d1e
   1ac84:	20001078 	.word	0x20001078

0001ac88 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1ac88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1ac8c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ac8e:	f7e8 fb81 	bl	3394 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ac92:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1ad74 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ac96:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ac9a:	4d37      	ldr	r5, [pc, #220]	; (1ad78 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1ac9c:	4e37      	ldr	r6, [pc, #220]	; (1ad7c <z_cstart+0xf4>)
   1ac9e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aca0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1ad80 <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
   1aca4:	4f37      	ldr	r7, [pc, #220]	; (1ad84 <z_cstart+0xfc>)
   1aca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1acaa:	2400      	movs	r4, #0
   1acac:	616b      	str	r3, [r5, #20]
   1acae:	23e0      	movs	r3, #224	; 0xe0
   1acb0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1acb4:	77ec      	strb	r4, [r5, #31]
   1acb6:	762c      	strb	r4, [r5, #24]
   1acb8:	766c      	strb	r4, [r5, #25]
   1acba:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1acbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1acbe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1acc2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1acc4:	f7ea f81c 	bl	4d00 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1acc8:	f7e9 fd60 	bl	478c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1accc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1acd0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1acd2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1acd4:	f7ea f8d4 	bl	4e80 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1acd8:	4d2b      	ldr	r5, [pc, #172]	; (1ad88 <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1acda:	f7ea f845 	bl	4d68 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1acde:	f240 1301 	movw	r3, #257	; 0x101
   1ace2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ace6:	ab06      	add	r3, sp, #24
   1ace8:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1acea:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1acee:	f004 fa98 	bl	1f222 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1acf2:	4620      	mov	r0, r4
   1acf4:	f7ff fee4 	bl	1aac0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1acf8:	2001      	movs	r0, #1
   1acfa:	f7ff fee1 	bl	1aac0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1acfe:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1ad02:	f000 feb9 	bl	1ba78 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ad06:	4b21      	ldr	r3, [pc, #132]	; (1ad8c <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
   1ad08:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ad0a:	4921      	ldr	r1, [pc, #132]	; (1ad90 <z_cstart+0x108>)
   1ad0c:	9305      	str	r3, [sp, #20]
   1ad0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ad12:	4653      	mov	r3, sl
   1ad14:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1ad18:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ad1c:	9400      	str	r4, [sp, #0]
   1ad1e:	4630      	mov	r0, r6
   1ad20:	f000 f89e 	bl	1ae60 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ad24:	7b73      	ldrb	r3, [r6, #13]
   1ad26:	4680      	mov	r8, r0
   1ad28:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1ad2c:	4630      	mov	r0, r6
   1ad2e:	7373      	strb	r3, [r6, #13]
   1ad30:	f004 fd99 	bl	1f866 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1ad34:	230f      	movs	r3, #15
   1ad36:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ad3a:	4916      	ldr	r1, [pc, #88]	; (1ad94 <z_cstart+0x10c>)
   1ad3c:	4b16      	ldr	r3, [pc, #88]	; (1ad98 <z_cstart+0x110>)
   1ad3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ad42:	e9cd b404 	strd	fp, r4, [sp, #16]
   1ad46:	e9cd 5400 	strd	r5, r4, [sp]
   1ad4a:	4638      	mov	r0, r7
   1ad4c:	f000 f888 	bl	1ae60 <z_setup_new_thread>
   1ad50:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ad52:	60ef      	str	r7, [r5, #12]
   1ad54:	f023 0304 	bic.w	r3, r3, #4
   1ad58:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ad5a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1ad5e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1ad62:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1ad64:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ad68:	4652      	mov	r2, sl
   1ad6a:	4641      	mov	r1, r8
   1ad6c:	4630      	mov	r0, r6
   1ad6e:	f7e9 fcfb 	bl	4768 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ad72:	bf00      	nop
   1ad74:	20004868 	.word	0x20004868
   1ad78:	e000ed00 	.word	0xe000ed00
   1ad7c:	20001078 	.word	0x20001078
   1ad80:	0001ac55 	.word	0x0001ac55
   1ad84:	20000ff8 	.word	0x20000ff8
   1ad88:	200027cc 	.word	0x200027cc
   1ad8c:	00022fb1 	.word	0x00022fb1
   1ad90:	20003b28 	.word	0x20003b28
   1ad94:	20003f28 	.word	0x20003f28
   1ad98:	0001afd1 	.word	0x0001afd1

0001ad9c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ad9c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1ad9e:	4c06      	ldr	r4, [pc, #24]	; (1adb8 <statics_init+0x1c>)
   1ada0:	4d06      	ldr	r5, [pc, #24]	; (1adbc <statics_init+0x20>)
   1ada2:	42ac      	cmp	r4, r5
   1ada4:	d301      	bcc.n	1adaa <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1ada6:	2000      	movs	r0, #0
   1ada8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1adaa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1adae:	4620      	mov	r0, r4
   1adb0:	f004 fa4b 	bl	1f24a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1adb4:	3414      	adds	r4, #20
   1adb6:	e7f4      	b.n	1ada2 <statics_init+0x6>
   1adb8:	200006ec 	.word	0x200006ec
   1adbc:	200006ec 	.word	0x200006ec

0001adc0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1adc0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1adc2:	4b0e      	ldr	r3, [pc, #56]	; (1adfc <init_mem_slab_module+0x3c>)
   1adc4:	4c0e      	ldr	r4, [pc, #56]	; (1ae00 <init_mem_slab_module+0x40>)
   1adc6:	42a3      	cmp	r3, r4
   1adc8:	d301      	bcc.n	1adce <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1adca:	2000      	movs	r0, #0
	return rc;
}
   1adcc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1adce:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1add2:	ea41 0200 	orr.w	r2, r1, r0
   1add6:	f012 0203 	ands.w	r2, r2, #3
   1adda:	d10b      	bne.n	1adf4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1addc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1adde:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ade0:	42aa      	cmp	r2, r5
   1ade2:	d101      	bne.n	1ade8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ade4:	331c      	adds	r3, #28
   1ade6:	e7ee      	b.n	1adc6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1ade8:	695e      	ldr	r6, [r3, #20]
   1adea:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1adec:	3201      	adds	r2, #1
		slab->free_list = p;
   1adee:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1adf0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1adf2:	e7f5      	b.n	1ade0 <init_mem_slab_module+0x20>
	return rc;
   1adf4:	f06f 0015 	mvn.w	r0, #21
   1adf8:	e7e8      	b.n	1adcc <init_mem_slab_module+0xc>
   1adfa:	bf00      	nop
   1adfc:	20000698 	.word	0x20000698
   1ae00:	200006ec 	.word	0x200006ec

0001ae04 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ae04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ae06:	460c      	mov	r4, r1
	__asm__ volatile(
   1ae08:	f04f 0520 	mov.w	r5, #32
   1ae0c:	f3ef 8111 	mrs	r1, BASEPRI
   1ae10:	f385 8811 	msr	BASEPRI, r5
   1ae14:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ae18:	6945      	ldr	r5, [r0, #20]
   1ae1a:	b15d      	cbz	r5, 1ae34 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1ae1c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ae1e:	682b      	ldr	r3, [r5, #0]
   1ae20:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ae22:	6983      	ldr	r3, [r0, #24]
   1ae24:	3301      	adds	r3, #1
   1ae26:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ae28:	2000      	movs	r0, #0
	__asm__ volatile(
   1ae2a:	f381 8811 	msr	BASEPRI, r1
   1ae2e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1ae32:	e011      	b.n	1ae58 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ae34:	ea52 0c03 	orrs.w	ip, r2, r3
   1ae38:	d103      	bne.n	1ae42 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1ae3a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1ae3c:	f06f 000b 	mvn.w	r0, #11
   1ae40:	e7f3      	b.n	1ae2a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ae42:	e9cd 2300 	strd	r2, r3, [sp]
   1ae46:	4602      	mov	r2, r0
   1ae48:	3008      	adds	r0, #8
   1ae4a:	f000 fc9d 	bl	1b788 <z_pend_curr>
		if (result == 0) {
   1ae4e:	b918      	cbnz	r0, 1ae58 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1ae50:	4b02      	ldr	r3, [pc, #8]	; (1ae5c <k_mem_slab_alloc+0x58>)
   1ae52:	689b      	ldr	r3, [r3, #8]
   1ae54:	695b      	ldr	r3, [r3, #20]
   1ae56:	6023      	str	r3, [r4, #0]
}
   1ae58:	b003      	add	sp, #12
   1ae5a:	bd30      	pop	{r4, r5, pc}
   1ae5c:	200027cc 	.word	0x200027cc

0001ae60 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ae60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1ae64:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1ae66:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1ae68:	2604      	movs	r6, #4
   1ae6a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1ae6c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1ae6e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ae70:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ae74:	1dd6      	adds	r6, r2, #7
   1ae76:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ae7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1ae7c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ae7e:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1ae82:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1ae86:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1ae8a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1ae8c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1ae8e:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ae90:	9202      	str	r2, [sp, #8]
   1ae92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ae94:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ae96:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ae9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ae9c:	9200      	str	r2, [sp, #0]
   1ae9e:	4642      	mov	r2, r8
{
   1aea0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1aea2:	f7e9 fc45 	bl	4730 <arch_new_thread>
	if (!_current) {
   1aea6:	4b05      	ldr	r3, [pc, #20]	; (1aebc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1aea8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1aeaa:	689b      	ldr	r3, [r3, #8]
   1aeac:	b103      	cbz	r3, 1aeb0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1aeae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1aeb0:	6763      	str	r3, [r4, #116]	; 0x74
}
   1aeb2:	4640      	mov	r0, r8
   1aeb4:	b004      	add	sp, #16
   1aeb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aeba:	bf00      	nop
   1aebc:	200027cc 	.word	0x200027cc

0001aec0 <z_impl_k_thread_create>:
{
   1aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aec2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1aec4:	2700      	movs	r7, #0
   1aec6:	9705      	str	r7, [sp, #20]
   1aec8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1aeca:	9704      	str	r7, [sp, #16]
   1aecc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1aece:	9703      	str	r7, [sp, #12]
   1aed0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1aed2:	9702      	str	r7, [sp, #8]
{
   1aed4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1aed8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1aeda:	9701      	str	r7, [sp, #4]
   1aedc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1aede:	9700      	str	r7, [sp, #0]
{
   1aee0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1aee2:	f7ff ffbd 	bl	1ae60 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1aee6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1aeea:	bf08      	it	eq
   1aeec:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1aef0:	d005      	beq.n	1aefe <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aef2:	ea55 0306 	orrs.w	r3, r5, r6
   1aef6:	d105      	bne.n	1af04 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1aef8:	4620      	mov	r0, r4
   1aefa:	f000 fd57 	bl	1b9ac <z_sched_start>
}
   1aefe:	4620      	mov	r0, r4
   1af00:	b007      	add	sp, #28
   1af02:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1af04:	4903      	ldr	r1, [pc, #12]	; (1af14 <z_impl_k_thread_create+0x54>)
   1af06:	4632      	mov	r2, r6
   1af08:	462b      	mov	r3, r5
   1af0a:	f104 0018 	add.w	r0, r4, #24
   1af0e:	f000 ff41 	bl	1bd94 <z_add_timeout>
   1af12:	e7f4      	b.n	1aefe <z_impl_k_thread_create+0x3e>
   1af14:	0001f887 	.word	0x0001f887

0001af18 <z_init_static_threads>:
{
   1af18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af1c:	4c29      	ldr	r4, [pc, #164]	; (1afc4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1af1e:	4d2a      	ldr	r5, [pc, #168]	; (1afc8 <z_init_static_threads+0xb0>)
{
   1af20:	b087      	sub	sp, #28
   1af22:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1af24:	42ae      	cmp	r6, r5
   1af26:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1af2a:	d30f      	bcc.n	1af4c <z_init_static_threads+0x34>
	k_sched_lock();
   1af2c:	f000 fbba 	bl	1b6a4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1af30:	4c24      	ldr	r4, [pc, #144]	; (1afc4 <z_init_static_threads+0xac>)
   1af32:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1afcc <z_init_static_threads+0xb4>
   1af36:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1af3a:	f240 37e7 	movw	r7, #999	; 0x3e7
   1af3e:	42ac      	cmp	r4, r5
   1af40:	d320      	bcc.n	1af84 <z_init_static_threads+0x6c>
}
   1af42:	b007      	add	sp, #28
   1af44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1af48:	f000 bc64 	b.w	1b814 <k_sched_unlock>
		z_setup_new_thread(
   1af4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1af50:	9305      	str	r3, [sp, #20]
   1af52:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1af56:	9304      	str	r3, [sp, #16]
   1af58:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1af5c:	9303      	str	r3, [sp, #12]
   1af5e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1af62:	9302      	str	r3, [sp, #8]
   1af64:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1af68:	9301      	str	r3, [sp, #4]
   1af6a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1af6e:	9300      	str	r3, [sp, #0]
   1af70:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1af74:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1af78:	f7ff ff72 	bl	1ae60 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1af7c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1af80:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1af82:	e7ce      	b.n	1af22 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1af84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af86:	1c5a      	adds	r2, r3, #1
   1af88:	d00d      	beq.n	1afa6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1af8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1af8e:	2100      	movs	r1, #0
   1af90:	4638      	mov	r0, r7
   1af92:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1af96:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1af9a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1af9e:	d104      	bne.n	1afaa <z_init_static_threads+0x92>
	z_sched_start(thread);
   1afa0:	4640      	mov	r0, r8
   1afa2:	f000 fd03 	bl	1b9ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1afa6:	3430      	adds	r4, #48	; 0x30
   1afa8:	e7c9      	b.n	1af3e <z_init_static_threads+0x26>
   1afaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1afae:	2300      	movs	r3, #0
   1afb0:	f7e5 f8a6 	bl	100 <__aeabi_uldivmod>
   1afb4:	4602      	mov	r2, r0
   1afb6:	460b      	mov	r3, r1
   1afb8:	f108 0018 	add.w	r0, r8, #24
   1afbc:	4649      	mov	r1, r9
   1afbe:	f000 fee9 	bl	1bd94 <z_add_timeout>
   1afc2:	e7f0      	b.n	1afa6 <z_init_static_threads+0x8e>
   1afc4:	20000698 	.word	0x20000698
   1afc8:	20000698 	.word	0x20000698
   1afcc:	0001f887 	.word	0x0001f887

0001afd0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1afd0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1afd2:	4c09      	ldr	r4, [pc, #36]	; (1aff8 <idle+0x28>)
	__asm__ volatile(
   1afd4:	f04f 0220 	mov.w	r2, #32
   1afd8:	f3ef 8311 	mrs	r3, BASEPRI
   1afdc:	f382 8811 	msr	BASEPRI, r2
   1afe0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1afe4:	f004 fce1 	bl	1f9aa <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1afe8:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1afea:	f7e8 ff75 	bl	3ed8 <pm_system_suspend>
   1afee:	2800      	cmp	r0, #0
   1aff0:	d1f0      	bne.n	1afd4 <idle+0x4>
	arch_cpu_idle();
   1aff2:	f7e9 fbd1 	bl	4798 <arch_cpu_idle>
}
   1aff6:	e7ed      	b.n	1afd4 <idle+0x4>
   1aff8:	200027cc 	.word	0x200027cc

0001affc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1affc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b000:	4604      	mov	r4, r0
   1b002:	4617      	mov	r7, r2
   1b004:	461e      	mov	r6, r3
   1b006:	f04f 0320 	mov.w	r3, #32
   1b00a:	f3ef 8811 	mrs	r8, BASEPRI
   1b00e:	f383 8811 	msr	BASEPRI, r3
   1b012:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b016:	68c3      	ldr	r3, [r0, #12]
   1b018:	4a32      	ldr	r2, [pc, #200]	; (1b0e4 <z_impl_k_mutex_lock+0xe8>)
   1b01a:	b16b      	cbz	r3, 1b038 <z_impl_k_mutex_lock+0x3c>
   1b01c:	6880      	ldr	r0, [r0, #8]
   1b01e:	6891      	ldr	r1, [r2, #8]
   1b020:	4288      	cmp	r0, r1
   1b022:	d019      	beq.n	1b058 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b024:	ea57 0306 	orrs.w	r3, r7, r6
   1b028:	d118      	bne.n	1b05c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b02a:	f388 8811 	msr	BASEPRI, r8
   1b02e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1b032:	f06f 000f 	mvn.w	r0, #15
   1b036:	e00c      	b.n	1b052 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b038:	6891      	ldr	r1, [r2, #8]
   1b03a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b03e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b040:	3301      	adds	r3, #1
   1b042:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b044:	6893      	ldr	r3, [r2, #8]
   1b046:	60a3      	str	r3, [r4, #8]
   1b048:	f388 8811 	msr	BASEPRI, r8
   1b04c:	f3bf 8f6f 	isb	sy
		return 0;
   1b050:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b052:	b002      	add	sp, #8
   1b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b058:	6921      	ldr	r1, [r4, #16]
   1b05a:	e7f0      	b.n	1b03e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b05c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b060:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1b064:	4299      	cmp	r1, r3
   1b066:	bfa8      	it	ge
   1b068:	4619      	movge	r1, r3
   1b06a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1b06e:	4291      	cmp	r1, r2
   1b070:	bfb8      	it	lt
   1b072:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b074:	428b      	cmp	r3, r1
   1b076:	dd2e      	ble.n	1b0d6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1b078:	f004 f9a5 	bl	1f3c6 <adjust_owner_prio.isra.0>
   1b07c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b07e:	e9cd 7600 	strd	r7, r6, [sp]
   1b082:	4819      	ldr	r0, [pc, #100]	; (1b0e8 <z_impl_k_mutex_lock+0xec>)
   1b084:	4622      	mov	r2, r4
   1b086:	4641      	mov	r1, r8
   1b088:	f000 fb7e 	bl	1b788 <z_pend_curr>
	if (got_mutex == 0) {
   1b08c:	2800      	cmp	r0, #0
   1b08e:	d0e0      	beq.n	1b052 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b090:	f04f 0320 	mov.w	r3, #32
   1b094:	f3ef 8611 	mrs	r6, BASEPRI
   1b098:	f383 8811 	msr	BASEPRI, r3
   1b09c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b0a0:	6823      	ldr	r3, [r4, #0]
   1b0a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b0a4:	429c      	cmp	r4, r3
   1b0a6:	d00a      	beq.n	1b0be <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b0a8:	b14b      	cbz	r3, 1b0be <z_impl_k_mutex_lock+0xc2>
   1b0aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b0ae:	4299      	cmp	r1, r3
   1b0b0:	bfa8      	it	ge
   1b0b2:	4619      	movge	r1, r3
   1b0b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1b0b8:	4299      	cmp	r1, r3
   1b0ba:	bfb8      	it	lt
   1b0bc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b0be:	68a0      	ldr	r0, [r4, #8]
   1b0c0:	f004 f981 	bl	1f3c6 <adjust_owner_prio.isra.0>
   1b0c4:	b900      	cbnz	r0, 1b0c8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1b0c6:	b145      	cbz	r5, 1b0da <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1b0c8:	4807      	ldr	r0, [pc, #28]	; (1b0e8 <z_impl_k_mutex_lock+0xec>)
   1b0ca:	4631      	mov	r1, r6
   1b0cc:	f000 fad8 	bl	1b680 <z_reschedule>
	return -EAGAIN;
   1b0d0:	f06f 000a 	mvn.w	r0, #10
   1b0d4:	e7bd      	b.n	1b052 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1b0d6:	2500      	movs	r5, #0
   1b0d8:	e7d1      	b.n	1b07e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1b0da:	f386 8811 	msr	BASEPRI, r6
   1b0de:	f3bf 8f6f 	isb	sy
   1b0e2:	e7f5      	b.n	1b0d0 <z_impl_k_mutex_lock+0xd4>
   1b0e4:	200027cc 	.word	0x200027cc
   1b0e8:	20002d1f 	.word	0x20002d1f

0001b0ec <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b0ec:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1b0ee:	6883      	ldr	r3, [r0, #8]
{
   1b0f0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b0f2:	2b00      	cmp	r3, #0
   1b0f4:	d032      	beq.n	1b15c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b0f6:	4a1c      	ldr	r2, [pc, #112]	; (1b168 <z_impl_k_mutex_unlock+0x7c>)
   1b0f8:	6892      	ldr	r2, [r2, #8]
   1b0fa:	4293      	cmp	r3, r2
   1b0fc:	d131      	bne.n	1b162 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1b0fe:	7bda      	ldrb	r2, [r3, #15]
   1b100:	3a01      	subs	r2, #1
   1b102:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1b104:	68c3      	ldr	r3, [r0, #12]
   1b106:	2b01      	cmp	r3, #1
   1b108:	d005      	beq.n	1b116 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b10a:	3b01      	subs	r3, #1
   1b10c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1b10e:	f000 fb81 	bl	1b814 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1b112:	2000      	movs	r0, #0
}
   1b114:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b116:	f04f 0320 	mov.w	r3, #32
   1b11a:	f3ef 8511 	mrs	r5, BASEPRI
   1b11e:	f383 8811 	msr	BASEPRI, r3
   1b122:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b126:	6901      	ldr	r1, [r0, #16]
   1b128:	6880      	ldr	r0, [r0, #8]
   1b12a:	f004 f94c 	bl	1f3c6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b12e:	4620      	mov	r0, r4
   1b130:	f004 fbe0 	bl	1f8f4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b134:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b136:	b158      	cbz	r0, 1b150 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b138:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b13c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b13e:	2200      	movs	r2, #0
   1b140:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b142:	f004 fb90 	bl	1f866 <z_ready_thread>
		z_reschedule(&lock, key);
   1b146:	4809      	ldr	r0, [pc, #36]	; (1b16c <z_impl_k_mutex_unlock+0x80>)
   1b148:	4629      	mov	r1, r5
   1b14a:	f000 fa99 	bl	1b680 <z_reschedule>
   1b14e:	e7de      	b.n	1b10e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b150:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b152:	f385 8811 	msr	BASEPRI, r5
   1b156:	f3bf 8f6f 	isb	sy
   1b15a:	e7d8      	b.n	1b10e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b15c:	f06f 0015 	mvn.w	r0, #21
   1b160:	e7d8      	b.n	1b114 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b166:	e7d5      	b.n	1b114 <z_impl_k_mutex_unlock+0x28>
   1b168:	200027cc 	.word	0x200027cc
   1b16c:	20002d1f 	.word	0x20002d1f

0001b170 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b172:	4611      	mov	r1, r2
	__asm__ volatile(
   1b174:	f04f 0220 	mov.w	r2, #32
   1b178:	f3ef 8511 	mrs	r5, BASEPRI
   1b17c:	f382 8811 	msr	BASEPRI, r2
   1b180:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1b184:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b186:	b19c      	cbz	r4, 1b1b0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b188:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b18a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b18c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b190:	4294      	cmp	r4, r2
	list->head = node;
   1b192:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b194:	bf08      	it	eq
   1b196:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b198:	2101      	movs	r1, #1
   1b19a:	4620      	mov	r0, r4
   1b19c:	f004 f97f 	bl	1f49e <z_queue_node_peek>
   1b1a0:	4604      	mov	r4, r0
	__asm__ volatile(
   1b1a2:	f385 8811 	msr	BASEPRI, r5
   1b1a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b1aa:	4620      	mov	r0, r4
   1b1ac:	b003      	add	sp, #12
   1b1ae:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b1b0:	ea51 0203 	orrs.w	r2, r1, r3
   1b1b4:	d0f5      	beq.n	1b1a2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b1b6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b1ba:	e9cd 1300 	strd	r1, r3, [sp]
   1b1be:	4610      	mov	r0, r2
   1b1c0:	4629      	mov	r1, r5
   1b1c2:	f000 fae1 	bl	1b788 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b1c6:	2800      	cmp	r0, #0
   1b1c8:	d1ef      	bne.n	1b1aa <z_impl_k_queue_get+0x3a>
   1b1ca:	4b02      	ldr	r3, [pc, #8]	; (1b1d4 <z_impl_k_queue_get+0x64>)
   1b1cc:	689b      	ldr	r3, [r3, #8]
   1b1ce:	695c      	ldr	r4, [r3, #20]
   1b1d0:	e7eb      	b.n	1b1aa <z_impl_k_queue_get+0x3a>
   1b1d2:	bf00      	nop
   1b1d4:	200027cc 	.word	0x200027cc

0001b1d8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b1d8:	b538      	push	{r3, r4, r5, lr}
   1b1da:	4604      	mov	r4, r0
	__asm__ volatile(
   1b1dc:	f04f 0320 	mov.w	r3, #32
   1b1e0:	f3ef 8511 	mrs	r5, BASEPRI
   1b1e4:	f383 8811 	msr	BASEPRI, r3
   1b1e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b1ec:	f004 fb82 	bl	1f8f4 <z_unpend_first_thread>

	if (thread != NULL) {
   1b1f0:	b148      	cbz	r0, 1b206 <z_impl_k_sem_give+0x2e>
   1b1f2:	2200      	movs	r2, #0
   1b1f4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b1f6:	f004 fb36 	bl	1f866 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b1fa:	4629      	mov	r1, r5
   1b1fc:	4808      	ldr	r0, [pc, #32]	; (1b220 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b202:	f000 ba3d 	b.w	1b680 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b206:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b20a:	429a      	cmp	r2, r3
   1b20c:	bf18      	it	ne
   1b20e:	3301      	addne	r3, #1
   1b210:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b212:	2102      	movs	r1, #2
   1b214:	f104 0010 	add.w	r0, r4, #16
   1b218:	f004 fd90 	bl	1fd3c <z_handle_obj_poll_events>
}
   1b21c:	e7ed      	b.n	1b1fa <z_impl_k_sem_give+0x22>
   1b21e:	bf00      	nop
   1b220:	20002d1f 	.word	0x20002d1f

0001b224 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b224:	b513      	push	{r0, r1, r4, lr}
   1b226:	f04f 0420 	mov.w	r4, #32
   1b22a:	f3ef 8111 	mrs	r1, BASEPRI
   1b22e:	f384 8811 	msr	BASEPRI, r4
   1b232:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b236:	6884      	ldr	r4, [r0, #8]
   1b238:	b144      	cbz	r4, 1b24c <z_impl_k_sem_take+0x28>
		sem->count--;
   1b23a:	3c01      	subs	r4, #1
   1b23c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1b23e:	f381 8811 	msr	BASEPRI, r1
   1b242:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b246:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b248:	b002      	add	sp, #8
   1b24a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b24c:	ea52 0403 	orrs.w	r4, r2, r3
   1b250:	d106      	bne.n	1b260 <z_impl_k_sem_take+0x3c>
   1b252:	f381 8811 	msr	BASEPRI, r1
   1b256:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b25a:	f06f 000f 	mvn.w	r0, #15
   1b25e:	e7f3      	b.n	1b248 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b260:	e9cd 2300 	strd	r2, r3, [sp]
   1b264:	4602      	mov	r2, r0
   1b266:	4802      	ldr	r0, [pc, #8]	; (1b270 <z_impl_k_sem_take+0x4c>)
   1b268:	f000 fa8e 	bl	1b788 <z_pend_curr>
	return ret;
   1b26c:	e7ec      	b.n	1b248 <z_impl_k_sem_take+0x24>
   1b26e:	bf00      	nop
   1b270:	20002d1f 	.word	0x20002d1f

0001b274 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1b276:	4b09      	ldr	r3, [pc, #36]	; (1b29c <k_sys_work_q_init+0x28>)
   1b278:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b27a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1b27c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1b27e:	9300      	str	r3, [sp, #0]
   1b280:	4907      	ldr	r1, [pc, #28]	; (1b2a0 <k_sys_work_q_init+0x2c>)
   1b282:	4808      	ldr	r0, [pc, #32]	; (1b2a4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1b284:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1b288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b28c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b290:	f000 f914 	bl	1b4bc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b294:	4620      	mov	r0, r4
   1b296:	b004      	add	sp, #16
   1b298:	bd10      	pop	{r4, pc}
   1b29a:	bf00      	nop
   1b29c:	00022fb9 	.word	0x00022fb9
   1b2a0:	20004868 	.word	0x20004868
   1b2a4:	200010f8 	.word	0x200010f8

0001b2a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1b2ac:	4e47      	ldr	r6, [pc, #284]	; (1b3cc <work_queue_main+0x124>)
   1b2ae:	b085      	sub	sp, #20
   1b2b0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b2b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1b2b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1b2ba:	f04f 0320 	mov.w	r3, #32
   1b2be:	f3ef 8711 	mrs	r7, BASEPRI
   1b2c2:	f383 8811 	msr	BASEPRI, r3
   1b2c6:	f3bf 8f6f 	isb	sy
   1b2ca:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1b2ce:	b98d      	cbnz	r5, 1b2f4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1b2d0:	2102      	movs	r1, #2
   1b2d2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b2d6:	f004 f95b 	bl	1f590 <flag_test_and_clear>
   1b2da:	2800      	cmp	r0, #0
   1b2dc:	d135      	bne.n	1b34a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b2de:	2300      	movs	r3, #0
   1b2e0:	e9cd 8900 	strd	r8, r9, [sp]
   1b2e4:	9302      	str	r3, [sp, #8]
   1b2e6:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b2ea:	4639      	mov	r1, r7
   1b2ec:	4838      	ldr	r0, [pc, #224]	; (1b3d0 <work_queue_main+0x128>)
   1b2ee:	f000 fcd9 	bl	1bca4 <z_sched_wait>
			continue;
   1b2f2:	e7e2      	b.n	1b2ba <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2f4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1b2f8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b2fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2fe:	4295      	cmp	r5, r2
   1b300:	d101      	bne.n	1b306 <work_queue_main+0x5e>
	list->tail = node;
   1b302:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b306:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b30a:	f043 0302 	orr.w	r3, r3, #2
   1b30e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b312:	68eb      	ldr	r3, [r5, #12]
   1b314:	f023 0304 	bic.w	r3, r3, #4
   1b318:	f043 0301 	orr.w	r3, r3, #1
   1b31c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b31e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b320:	f387 8811 	msr	BASEPRI, r7
   1b324:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1b328:	4628      	mov	r0, r5
   1b32a:	4798      	blx	r3
	__asm__ volatile(
   1b32c:	f04f 0320 	mov.w	r3, #32
   1b330:	f3ef 8b11 	mrs	fp, BASEPRI
   1b334:	f383 8811 	msr	BASEPRI, r3
   1b338:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b33c:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b33e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b340:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b344:	d40b      	bmi.n	1b35e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1b346:	60ea      	str	r2, [r5, #12]
   1b348:	e00e      	b.n	1b368 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b34a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b34e:	2200      	movs	r2, #0
   1b350:	2101      	movs	r1, #1
   1b352:	4628      	mov	r0, r5
   1b354:	f004 faf6 	bl	1f944 <z_sched_wake>
   1b358:	2800      	cmp	r0, #0
   1b35a:	d1f8      	bne.n	1b34e <work_queue_main+0xa6>
   1b35c:	e7bf      	b.n	1b2de <work_queue_main+0x36>
	return list->head;
   1b35e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b360:	f023 0303 	bic.w	r3, r3, #3
   1b364:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b366:	b970      	cbnz	r0, 1b386 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1b368:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b36c:	f023 0302 	bic.w	r3, r3, #2
   1b370:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b374:	f38b 8811 	msr	BASEPRI, fp
   1b378:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1b37c:	05d8      	lsls	r0, r3, #23
   1b37e:	d49c      	bmi.n	1b2ba <work_queue_main+0x12>
	z_impl_k_yield();
   1b380:	f000 fb86 	bl	1ba90 <z_impl_k_yield>
}
   1b384:	e799      	b.n	1b2ba <work_queue_main+0x12>
	return node->next;
   1b386:	2700      	movs	r7, #0
   1b388:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1b38c:	463b      	mov	r3, r7
		if (wc->work == work) {
   1b38e:	6842      	ldr	r2, [r0, #4]
   1b390:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1b392:	4601      	mov	r1, r0
		if (wc->work == work) {
   1b394:	d10c      	bne.n	1b3b0 <work_queue_main+0x108>
	return node->next;
   1b396:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b398:	b997      	cbnz	r7, 1b3c0 <work_queue_main+0x118>
   1b39a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b39c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b39e:	4282      	cmp	r2, r0
   1b3a0:	d100      	bne.n	1b3a4 <work_queue_main+0xfc>
	list->tail = node;
   1b3a2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b3a4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b3a8:	f7ff ff16 	bl	1b1d8 <z_impl_k_sem_give>
}
   1b3ac:	4639      	mov	r1, r7
   1b3ae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b3b0:	f1ba 0f00 	cmp.w	sl, #0
   1b3b4:	d0d8      	beq.n	1b368 <work_queue_main+0xc0>
	return node->next;
   1b3b6:	4650      	mov	r0, sl
   1b3b8:	460f      	mov	r7, r1
   1b3ba:	f8da a000 	ldr.w	sl, [sl]
   1b3be:	e7e6      	b.n	1b38e <work_queue_main+0xe6>
	return list->tail;
   1b3c0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1b3c2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b3c4:	4282      	cmp	r2, r0
	list->tail = node;
   1b3c6:	bf08      	it	eq
   1b3c8:	6077      	streq	r7, [r6, #4]
}
   1b3ca:	e7eb      	b.n	1b3a4 <work_queue_main+0xfc>
   1b3cc:	200027fc 	.word	0x200027fc
   1b3d0:	20002d1f 	.word	0x20002d1f

0001b3d4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1b3d4:	68c3      	ldr	r3, [r0, #12]
{
   1b3d6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b3d8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1b3dc:	079b      	lsls	r3, r3, #30
{
   1b3de:	4605      	mov	r5, r0
   1b3e0:	460c      	mov	r4, r1
	if (ret) {
   1b3e2:	d50d      	bpl.n	1b400 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b3e4:	2201      	movs	r2, #1
   1b3e6:	2100      	movs	r1, #0
   1b3e8:	f104 0008 	add.w	r0, r4, #8
   1b3ec:	f004 f8c0 	bl	1f570 <z_impl_k_sem_init>
	parent->next = child;
   1b3f0:	2300      	movs	r3, #0
   1b3f2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b3f4:	4b05      	ldr	r3, [pc, #20]	; (1b40c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1b3f6:	6065      	str	r5, [r4, #4]
   1b3f8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b3fa:	b91a      	cbnz	r2, 1b404 <cancel_sync_locked+0x30>
	list->head = node;
   1b3fc:	e9c3 4400 	strd	r4, r4, [r3]
}
   1b400:	4630      	mov	r0, r6
   1b402:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1b404:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b406:	605c      	str	r4, [r3, #4]
}
   1b408:	e7fa      	b.n	1b400 <cancel_sync_locked+0x2c>
   1b40a:	bf00      	nop
   1b40c:	200027fc 	.word	0x200027fc

0001b410 <submit_to_queue_locked>:
{
   1b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b412:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b414:	079a      	lsls	r2, r3, #30
{
   1b416:	4604      	mov	r4, r0
   1b418:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b41a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1b41e:	d41f      	bmi.n	1b460 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b420:	075f      	lsls	r7, r3, #29
   1b422:	d41f      	bmi.n	1b464 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1b424:	680a      	ldr	r2, [r1, #0]
   1b426:	b90a      	cbnz	r2, 1b42c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b428:	6882      	ldr	r2, [r0, #8]
   1b42a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b42c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1b42e:	bf44      	itt	mi
   1b430:	68a3      	ldrmi	r3, [r4, #8]
   1b432:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b434:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1b436:	bf4c      	ite	mi
   1b438:	2502      	movmi	r5, #2
		ret = 1;
   1b43a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1b43c:	b37f      	cbz	r7, 1b49e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b43e:	4b1b      	ldr	r3, [pc, #108]	; (1b4ac <submit_to_queue_locked+0x9c>)
   1b440:	689b      	ldr	r3, [r3, #8]
   1b442:	42bb      	cmp	r3, r7
   1b444:	d111      	bne.n	1b46a <submit_to_queue_locked+0x5a>
   1b446:	f003 ffaa 	bl	1f39e <k_is_in_isr>
   1b44a:	f080 0001 	eor.w	r0, r0, #1
   1b44e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1b450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b454:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b456:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b45a:	d523      	bpl.n	1b4a4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1b45c:	b13a      	cbz	r2, 1b46e <submit_to_queue_locked+0x5e>
   1b45e:	b940      	cbnz	r0, 1b472 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1b460:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1b464:	2300      	movs	r3, #0
   1b466:	6033      	str	r3, [r6, #0]
	return ret;
   1b468:	e013      	b.n	1b492 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b46a:	2000      	movs	r0, #0
   1b46c:	e7f0      	b.n	1b450 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1b46e:	071b      	lsls	r3, r3, #28
   1b470:	d4f6      	bmi.n	1b460 <submit_to_queue_locked+0x50>
	parent->next = child;
   1b472:	2300      	movs	r3, #0
   1b474:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1b47a:	b963      	cbnz	r3, 1b496 <submit_to_queue_locked+0x86>
	list->head = node;
   1b47c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b480:	4638      	mov	r0, r7
   1b482:	f004 f89e 	bl	1f5c2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1b486:	68e3      	ldr	r3, [r4, #12]
   1b488:	f043 0304 	orr.w	r3, r3, #4
   1b48c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b48e:	6833      	ldr	r3, [r6, #0]
   1b490:	60a3      	str	r3, [r4, #8]
}
   1b492:	4628      	mov	r0, r5
   1b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b496:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b498:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1b49c:	e7f0      	b.n	1b480 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1b49e:	f06f 0515 	mvn.w	r5, #21
   1b4a2:	e7df      	b.n	1b464 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1b4a4:	f06f 0512 	mvn.w	r5, #18
   1b4a8:	e7dc      	b.n	1b464 <submit_to_queue_locked+0x54>
   1b4aa:	bf00      	nop
   1b4ac:	200027cc 	.word	0x200027cc

0001b4b0 <k_work_submit>:
{
   1b4b0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b4b2:	4801      	ldr	r0, [pc, #4]	; (1b4b8 <k_work_submit+0x8>)
   1b4b4:	f004 b8e5 	b.w	1f682 <k_work_submit_to_queue>
   1b4b8:	200010f8 	.word	0x200010f8

0001b4bc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4be:	b089      	sub	sp, #36	; 0x24
   1b4c0:	4604      	mov	r4, r0
	list->head = NULL;
   1b4c2:	2000      	movs	r0, #0
	list->tail = NULL;
   1b4c4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b4c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b4ca:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b4ce:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b4d2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b4d6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b4da:	b31d      	cbz	r5, 1b524 <k_work_queue_start+0x68>
   1b4dc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b4de:	2800      	cmp	r0, #0
   1b4e0:	f240 1001 	movw	r0, #257	; 0x101
   1b4e4:	bf08      	it	eq
   1b4e6:	2001      	moveq	r0, #1
	*flagp = flags;
   1b4e8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b4ec:	2000      	movs	r0, #0
   1b4ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b4f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b4f6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b4fa:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b4fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b502:	4b09      	ldr	r3, [pc, #36]	; (1b528 <k_work_queue_start+0x6c>)
   1b504:	9400      	str	r4, [sp, #0]
   1b506:	4620      	mov	r0, r4
   1b508:	f7ff fcda 	bl	1aec0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b50c:	b125      	cbz	r5, 1b518 <k_work_queue_start+0x5c>
   1b50e:	6829      	ldr	r1, [r5, #0]
   1b510:	b111      	cbz	r1, 1b518 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b512:	4620      	mov	r0, r4
   1b514:	f003 ff49 	bl	1f3aa <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b518:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b51a:	b009      	add	sp, #36	; 0x24
   1b51c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b520:	f003 bf48 	b.w	1f3b4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b524:	2001      	movs	r0, #1
   1b526:	e7df      	b.n	1b4e8 <k_work_queue_start+0x2c>
   1b528:	0001b2a9 	.word	0x0001b2a9

0001b52c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b52c:	b513      	push	{r0, r1, r4, lr}
   1b52e:	9001      	str	r0, [sp, #4]
   1b530:	4608      	mov	r0, r1
	__asm__ volatile(
   1b532:	f04f 0120 	mov.w	r1, #32
   1b536:	f3ef 8411 	mrs	r4, BASEPRI
   1b53a:	f381 8811 	msr	BASEPRI, r1
   1b53e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1b542:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b544:	f011 0f0e 	tst.w	r1, #14
   1b548:	d116      	bne.n	1b578 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b54a:	ea53 0c02 	orrs.w	ip, r3, r2
   1b54e:	d108      	bne.n	1b562 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1b550:	a901      	add	r1, sp, #4
   1b552:	f7ff ff5d 	bl	1b410 <submit_to_queue_locked>
	__asm__ volatile(
   1b556:	f384 8811 	msr	BASEPRI, r4
   1b55a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b55e:	b002      	add	sp, #8
   1b560:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1b562:	f041 0108 	orr.w	r1, r1, #8
   1b566:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b568:	9901      	ldr	r1, [sp, #4]
   1b56a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b56c:	3010      	adds	r0, #16
   1b56e:	4903      	ldr	r1, [pc, #12]	; (1b57c <k_work_schedule_for_queue+0x50>)
   1b570:	f000 fc10 	bl	1bd94 <z_add_timeout>
	return ret;
   1b574:	2001      	movs	r0, #1
   1b576:	e7ee      	b.n	1b556 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b578:	2000      	movs	r0, #0
   1b57a:	e7ec      	b.n	1b556 <k_work_schedule_for_queue+0x2a>
   1b57c:	0001f633 	.word	0x0001f633

0001b580 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b580:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b582:	4801      	ldr	r0, [pc, #4]	; (1b588 <k_work_schedule+0x8>)
   1b584:	f7ff bfd2 	b.w	1b52c <k_work_schedule_for_queue>
   1b588:	200010f8 	.word	0x200010f8

0001b58c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b58e:	460c      	mov	r4, r1
   1b590:	9001      	str	r0, [sp, #4]
   1b592:	4616      	mov	r6, r2
   1b594:	461d      	mov	r5, r3
	__asm__ volatile(
   1b596:	f04f 0320 	mov.w	r3, #32
   1b59a:	f3ef 8711 	mrs	r7, BASEPRI
   1b59e:	f383 8811 	msr	BASEPRI, r3
   1b5a2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b5a6:	4608      	mov	r0, r1
   1b5a8:	f003 fffd 	bl	1f5a6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b5ac:	ea55 0306 	orrs.w	r3, r5, r6
   1b5b0:	d109      	bne.n	1b5c6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b5b2:	a901      	add	r1, sp, #4
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f7ff ff2b 	bl	1b410 <submit_to_queue_locked>
	__asm__ volatile(
   1b5ba:	f387 8811 	msr	BASEPRI, r7
   1b5be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b5c2:	b003      	add	sp, #12
   1b5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b5c6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b5c8:	4906      	ldr	r1, [pc, #24]	; (1b5e4 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b5ca:	f043 0308 	orr.w	r3, r3, #8
   1b5ce:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b5d0:	9b01      	ldr	r3, [sp, #4]
   1b5d2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b5d4:	f104 0010 	add.w	r0, r4, #16
   1b5d8:	4632      	mov	r2, r6
   1b5da:	462b      	mov	r3, r5
   1b5dc:	f000 fbda 	bl	1bd94 <z_add_timeout>
	return ret;
   1b5e0:	2001      	movs	r0, #1
   1b5e2:	e7ea      	b.n	1b5ba <k_work_reschedule_for_queue+0x2e>
   1b5e4:	0001f633 	.word	0x0001f633

0001b5e8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b5e8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b5ea:	4801      	ldr	r0, [pc, #4]	; (1b5f0 <k_work_reschedule+0x8>)
   1b5ec:	f7ff bfce 	b.w	1b58c <k_work_reschedule_for_queue>
   1b5f0:	200010f8 	.word	0x200010f8

0001b5f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b5f4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b5f6:	4c08      	ldr	r4, [pc, #32]	; (1b618 <z_reset_time_slice+0x24>)
   1b5f8:	6823      	ldr	r3, [r4, #0]
   1b5fa:	b15b      	cbz	r3, 1b614 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b5fc:	f7e8 ff6c 	bl	44d8 <sys_clock_elapsed>
   1b600:	4603      	mov	r3, r0
   1b602:	6820      	ldr	r0, [r4, #0]
   1b604:	4a05      	ldr	r2, [pc, #20]	; (1b61c <z_reset_time_slice+0x28>)
   1b606:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b60c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b60e:	2100      	movs	r1, #0
   1b610:	f004 b9db 	b.w	1f9ca <z_set_timeout_expiry>
}
   1b614:	bd10      	pop	{r4, pc}
   1b616:	bf00      	nop
   1b618:	2000280c 	.word	0x2000280c
   1b61c:	200027cc 	.word	0x200027cc

0001b620 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b622:	4604      	mov	r4, r0
   1b624:	460d      	mov	r5, r1
	__asm__ volatile(
   1b626:	f04f 0320 	mov.w	r3, #32
   1b62a:	f3ef 8611 	mrs	r6, BASEPRI
   1b62e:	f383 8811 	msr	BASEPRI, r3
   1b632:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b636:	4b0f      	ldr	r3, [pc, #60]	; (1b674 <k_sched_time_slice_set+0x54>)
   1b638:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b63a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b63e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b642:	6119      	str	r1, [r3, #16]
   1b644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b648:	2300      	movs	r3, #0
   1b64a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1b64e:	f7e4 fd57 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b652:	2c00      	cmp	r4, #0
   1b654:	4b08      	ldr	r3, [pc, #32]	; (1b678 <k_sched_time_slice_set+0x58>)
   1b656:	dc09      	bgt.n	1b66c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1b658:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b65a:	4b08      	ldr	r3, [pc, #32]	; (1b67c <k_sched_time_slice_set+0x5c>)
   1b65c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b65e:	f7ff ffc9 	bl	1b5f4 <z_reset_time_slice>
	__asm__ volatile(
   1b662:	f386 8811 	msr	BASEPRI, r6
   1b666:	f3bf 8f6f 	isb	sy
	}
}
   1b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1b66c:	2802      	cmp	r0, #2
   1b66e:	bfb8      	it	lt
   1b670:	2002      	movlt	r0, #2
   1b672:	e7f1      	b.n	1b658 <k_sched_time_slice_set+0x38>
   1b674:	200027cc 	.word	0x200027cc
   1b678:	2000280c 	.word	0x2000280c
   1b67c:	20002808 	.word	0x20002808

0001b680 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b680:	b949      	cbnz	r1, 1b696 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b682:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b686:	b930      	cbnz	r0, 1b696 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b688:	4b05      	ldr	r3, [pc, #20]	; (1b6a0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b68a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1b68c:	689b      	ldr	r3, [r3, #8]
   1b68e:	429a      	cmp	r2, r3
   1b690:	d001      	beq.n	1b696 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b692:	f7e8 bfa7 	b.w	45e4 <arch_swap>
   1b696:	f381 8811 	msr	BASEPRI, r1
   1b69a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b69e:	4770      	bx	lr
   1b6a0:	200027cc 	.word	0x200027cc

0001b6a4 <k_sched_lock>:
	__asm__ volatile(
   1b6a4:	f04f 0320 	mov.w	r3, #32
   1b6a8:	f3ef 8111 	mrs	r1, BASEPRI
   1b6ac:	f383 8811 	msr	BASEPRI, r3
   1b6b0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b6b4:	4b04      	ldr	r3, [pc, #16]	; (1b6c8 <k_sched_lock+0x24>)
   1b6b6:	689a      	ldr	r2, [r3, #8]
   1b6b8:	7bd3      	ldrb	r3, [r2, #15]
   1b6ba:	3b01      	subs	r3, #1
   1b6bc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b6be:	f381 8811 	msr	BASEPRI, r1
   1b6c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b6c6:	4770      	bx	lr
   1b6c8:	200027cc 	.word	0x200027cc

0001b6cc <update_cache>:
{
   1b6cc:	b538      	push	{r3, r4, r5, lr}
   1b6ce:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b6d0:	480c      	ldr	r0, [pc, #48]	; (1b704 <update_cache+0x38>)
   1b6d2:	4d0d      	ldr	r5, [pc, #52]	; (1b708 <update_cache+0x3c>)
   1b6d4:	f004 f897 	bl	1f806 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b6d8:	4604      	mov	r4, r0
   1b6da:	b900      	cbnz	r0, 1b6de <update_cache+0x12>
   1b6dc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b6de:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b6e0:	b94a      	cbnz	r2, 1b6f6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b6e2:	7b5a      	ldrb	r2, [r3, #13]
   1b6e4:	06d2      	lsls	r2, r2, #27
   1b6e6:	d106      	bne.n	1b6f6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b6e8:	69a2      	ldr	r2, [r4, #24]
   1b6ea:	b922      	cbnz	r2, 1b6f6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b6ec:	89da      	ldrh	r2, [r3, #14]
   1b6ee:	2a7f      	cmp	r2, #127	; 0x7f
   1b6f0:	d901      	bls.n	1b6f6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b6f2:	626b      	str	r3, [r5, #36]	; 0x24
}
   1b6f4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b6f6:	429c      	cmp	r4, r3
   1b6f8:	d001      	beq.n	1b6fe <update_cache+0x32>
			z_reset_time_slice();
   1b6fa:	f7ff ff7b 	bl	1b5f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b6fe:	626c      	str	r4, [r5, #36]	; 0x24
}
   1b700:	e7f8      	b.n	1b6f4 <update_cache+0x28>
   1b702:	bf00      	nop
   1b704:	200027f4 	.word	0x200027f4
   1b708:	200027cc 	.word	0x200027cc

0001b70c <unready_thread>:
{
   1b70c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b70e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b712:	7b43      	ldrb	r3, [r0, #13]
   1b714:	2a00      	cmp	r2, #0
{
   1b716:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b718:	da04      	bge.n	1b724 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b71e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b720:	f004 f81c 	bl	1f75c <sys_dlist_remove>
	update_cache(thread == _current);
   1b724:	4b04      	ldr	r3, [pc, #16]	; (1b738 <unready_thread+0x2c>)
   1b726:	6898      	ldr	r0, [r3, #8]
   1b728:	1a43      	subs	r3, r0, r1
   1b72a:	4258      	negs	r0, r3
   1b72c:	4158      	adcs	r0, r3
}
   1b72e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b732:	f7ff bfcb 	b.w	1b6cc <update_cache>
   1b736:	bf00      	nop
   1b738:	200027cc 	.word	0x200027cc

0001b73c <pend>:
{
   1b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b740:	4606      	mov	r6, r0
   1b742:	4615      	mov	r5, r2
   1b744:	461c      	mov	r4, r3
	__asm__ volatile(
   1b746:	f04f 0320 	mov.w	r3, #32
   1b74a:	f3ef 8711 	mrs	r7, BASEPRI
   1b74e:	f383 8811 	msr	BASEPRI, r3
   1b752:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b756:	f004 f85c 	bl	1f812 <add_to_waitq_locked>
	__asm__ volatile(
   1b75a:	f387 8811 	msr	BASEPRI, r7
   1b75e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b762:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1b766:	bf08      	it	eq
   1b768:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1b76c:	d008      	beq.n	1b780 <pend+0x44>
   1b76e:	462a      	mov	r2, r5
   1b770:	4623      	mov	r3, r4
   1b772:	f106 0018 	add.w	r0, r6, #24
   1b776:	4903      	ldr	r1, [pc, #12]	; (1b784 <pend+0x48>)
}
   1b778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b77c:	f000 bb0a 	b.w	1bd94 <z_add_timeout>
   1b780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b784:	0001f887 	.word	0x0001f887

0001b788 <z_pend_curr>:
{
   1b788:	b510      	push	{r4, lr}
	pending_current = _current;
   1b78a:	4b07      	ldr	r3, [pc, #28]	; (1b7a8 <z_pend_curr+0x20>)
   1b78c:	6898      	ldr	r0, [r3, #8]
   1b78e:	4b07      	ldr	r3, [pc, #28]	; (1b7ac <z_pend_curr+0x24>)
{
   1b790:	460c      	mov	r4, r1
	pending_current = _current;
   1b792:	6018      	str	r0, [r3, #0]
{
   1b794:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b79a:	f7ff ffcf 	bl	1b73c <pend>
   1b79e:	4620      	mov	r0, r4
}
   1b7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b7a4:	f7e8 bf1e 	b.w	45e4 <arch_swap>
   1b7a8:	200027cc 	.word	0x200027cc
   1b7ac:	20002804 	.word	0x20002804

0001b7b0 <z_impl_k_thread_suspend>:
{
   1b7b0:	b570      	push	{r4, r5, r6, lr}
   1b7b2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b7b4:	3018      	adds	r0, #24
   1b7b6:	f004 f8e2 	bl	1f97e <z_abort_timeout>
	__asm__ volatile(
   1b7ba:	f04f 0320 	mov.w	r3, #32
   1b7be:	f3ef 8611 	mrs	r6, BASEPRI
   1b7c2:	f383 8811 	msr	BASEPRI, r3
   1b7c6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b7ca:	f994 200d 	ldrsb.w	r2, [r4, #13]
   1b7ce:	7b63      	ldrb	r3, [r4, #13]
   1b7d0:	2a00      	cmp	r2, #0
   1b7d2:	da05      	bge.n	1b7e0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b7d8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b7da:	4620      	mov	r0, r4
   1b7dc:	f003 ffbe 	bl	1f75c <sys_dlist_remove>
		update_cache(thread == _current);
   1b7e0:	4d0b      	ldr	r5, [pc, #44]	; (1b810 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b7e2:	7b63      	ldrb	r3, [r4, #13]
   1b7e4:	68a8      	ldr	r0, [r5, #8]
   1b7e6:	f043 0310 	orr.w	r3, r3, #16
   1b7ea:	7363      	strb	r3, [r4, #13]
   1b7ec:	1b03      	subs	r3, r0, r4
   1b7ee:	4258      	negs	r0, r3
   1b7f0:	4158      	adcs	r0, r3
   1b7f2:	f7ff ff6b 	bl	1b6cc <update_cache>
	__asm__ volatile(
   1b7f6:	f386 8811 	msr	BASEPRI, r6
   1b7fa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b7fe:	68ab      	ldr	r3, [r5, #8]
   1b800:	42a3      	cmp	r3, r4
   1b802:	d103      	bne.n	1b80c <z_impl_k_thread_suspend+0x5c>
}
   1b804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b808:	f003 bff3 	b.w	1f7f2 <z_reschedule_unlocked>
}
   1b80c:	bd70      	pop	{r4, r5, r6, pc}
   1b80e:	bf00      	nop
   1b810:	200027cc 	.word	0x200027cc

0001b814 <k_sched_unlock>:
{
   1b814:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b816:	f04f 0320 	mov.w	r3, #32
   1b81a:	f3ef 8411 	mrs	r4, BASEPRI
   1b81e:	f383 8811 	msr	BASEPRI, r3
   1b822:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b826:	4b08      	ldr	r3, [pc, #32]	; (1b848 <k_sched_unlock+0x34>)
   1b828:	689a      	ldr	r2, [r3, #8]
   1b82a:	7bd3      	ldrb	r3, [r2, #15]
   1b82c:	3301      	adds	r3, #1
   1b82e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b830:	2000      	movs	r0, #0
   1b832:	f7ff ff4b 	bl	1b6cc <update_cache>
	__asm__ volatile(
   1b836:	f384 8811 	msr	BASEPRI, r4
   1b83a:	f3bf 8f6f 	isb	sy
}
   1b83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b842:	f003 bfd6 	b.w	1f7f2 <z_reschedule_unlocked>
   1b846:	bf00      	nop
   1b848:	200027cc 	.word	0x200027cc

0001b84c <move_thread_to_end_of_prio_q>:
{
   1b84c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b84e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b852:	7b43      	ldrb	r3, [r0, #13]
   1b854:	2a00      	cmp	r2, #0
{
   1b856:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b858:	da04      	bge.n	1b864 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b85e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b860:	f003 ff7c 	bl	1f75c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b864:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b866:	4a15      	ldr	r2, [pc, #84]	; (1b8bc <move_thread_to_end_of_prio_q+0x70>)
   1b868:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b86c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1b86e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b872:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1b876:	42ab      	cmp	r3, r5
   1b878:	d01b      	beq.n	1b8b2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b87a:	b1d3      	cbz	r3, 1b8b2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1b87c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b880:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b884:	4286      	cmp	r6, r0
   1b886:	d00f      	beq.n	1b8a8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1b888:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b88a:	2800      	cmp	r0, #0
   1b88c:	dd0c      	ble.n	1b8a8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b88e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b890:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b894:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b896:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b898:	6890      	ldr	r0, [r2, #8]
   1b89a:	1a43      	subs	r3, r0, r1
   1b89c:	4258      	negs	r0, r3
}
   1b89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b8a2:	4158      	adcs	r0, r3
   1b8a4:	f7ff bf12 	b.w	1b6cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b8a8:	42a3      	cmp	r3, r4
   1b8aa:	d002      	beq.n	1b8b2 <move_thread_to_end_of_prio_q+0x66>
   1b8ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8ae:	2b00      	cmp	r3, #0
   1b8b0:	d1e6      	bne.n	1b880 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1b8b2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1b8b6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1b8b8:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1b8ba:	e7ed      	b.n	1b898 <move_thread_to_end_of_prio_q+0x4c>
   1b8bc:	200027cc 	.word	0x200027cc

0001b8c0 <z_time_slice>:
{
   1b8c0:	b538      	push	{r3, r4, r5, lr}
   1b8c2:	4601      	mov	r1, r0
	__asm__ volatile(
   1b8c4:	f04f 0320 	mov.w	r3, #32
   1b8c8:	f3ef 8411 	mrs	r4, BASEPRI
   1b8cc:	f383 8811 	msr	BASEPRI, r3
   1b8d0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b8d4:	4b15      	ldr	r3, [pc, #84]	; (1b92c <z_time_slice+0x6c>)
   1b8d6:	4a16      	ldr	r2, [pc, #88]	; (1b930 <z_time_slice+0x70>)
   1b8d8:	6898      	ldr	r0, [r3, #8]
   1b8da:	6815      	ldr	r5, [r2, #0]
   1b8dc:	42a8      	cmp	r0, r5
   1b8de:	d106      	bne.n	1b8ee <z_time_slice+0x2e>
			z_reset_time_slice();
   1b8e0:	f7ff fe88 	bl	1b5f4 <z_reset_time_slice>
	__asm__ volatile(
   1b8e4:	f384 8811 	msr	BASEPRI, r4
   1b8e8:	f3bf 8f6f 	isb	sy
}
   1b8ec:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1b8ee:	2500      	movs	r5, #0
   1b8f0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b8f2:	4a10      	ldr	r2, [pc, #64]	; (1b934 <z_time_slice+0x74>)
   1b8f4:	6812      	ldr	r2, [r2, #0]
   1b8f6:	b1ba      	cbz	r2, 1b928 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1b8f8:	89c2      	ldrh	r2, [r0, #14]
   1b8fa:	2a7f      	cmp	r2, #127	; 0x7f
   1b8fc:	d814      	bhi.n	1b928 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1b8fe:	7b42      	ldrb	r2, [r0, #13]
   1b900:	06d2      	lsls	r2, r2, #27
   1b902:	d111      	bne.n	1b928 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b904:	4a0c      	ldr	r2, [pc, #48]	; (1b938 <z_time_slice+0x78>)
   1b906:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b90a:	6812      	ldr	r2, [r2, #0]
   1b90c:	4295      	cmp	r5, r2
   1b90e:	db0b      	blt.n	1b928 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1b910:	4a0a      	ldr	r2, [pc, #40]	; (1b93c <z_time_slice+0x7c>)
   1b912:	4290      	cmp	r0, r2
   1b914:	d008      	beq.n	1b928 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1b916:	691a      	ldr	r2, [r3, #16]
   1b918:	428a      	cmp	r2, r1
   1b91a:	dc02      	bgt.n	1b922 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1b91c:	f7ff ff96 	bl	1b84c <move_thread_to_end_of_prio_q>
   1b920:	e7de      	b.n	1b8e0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1b922:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1b924:	611a      	str	r2, [r3, #16]
   1b926:	e7dd      	b.n	1b8e4 <z_time_slice+0x24>
   1b928:	2200      	movs	r2, #0
   1b92a:	e7fb      	b.n	1b924 <z_time_slice+0x64>
   1b92c:	200027cc 	.word	0x200027cc
   1b930:	20002804 	.word	0x20002804
   1b934:	2000280c 	.word	0x2000280c
   1b938:	20002808 	.word	0x20002808
   1b93c:	20000ff8 	.word	0x20000ff8

0001b940 <ready_thread>:
{
   1b940:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b942:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b946:	7b43      	ldrb	r3, [r0, #13]
   1b948:	2a00      	cmp	r2, #0
   1b94a:	db2a      	blt.n	1b9a2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b94c:	06da      	lsls	r2, r3, #27
   1b94e:	d128      	bne.n	1b9a2 <ready_thread+0x62>
   1b950:	6982      	ldr	r2, [r0, #24]
   1b952:	bb32      	cbnz	r2, 1b9a2 <ready_thread+0x62>
	return list->head == list;
   1b954:	4a14      	ldr	r2, [pc, #80]	; (1b9a8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b956:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b95a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1b95c:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b960:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1b964:	42ab      	cmp	r3, r5
   1b966:	d017      	beq.n	1b998 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b968:	b1b3      	cbz	r3, 1b998 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1b96a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b96e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1b972:	428e      	cmp	r6, r1
   1b974:	d00b      	beq.n	1b98e <ready_thread+0x4e>
		return b2 - b1;
   1b976:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b978:	2900      	cmp	r1, #0
   1b97a:	dd08      	ble.n	1b98e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1b97c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b97e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b982:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b984:	6058      	str	r0, [r3, #4]
}
   1b986:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b988:	2000      	movs	r0, #0
   1b98a:	f7ff be9f 	b.w	1b6cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b98e:	42a3      	cmp	r3, r4
   1b990:	d002      	beq.n	1b998 <ready_thread+0x58>
   1b992:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b994:	2b00      	cmp	r3, #0
   1b996:	d1ea      	bne.n	1b96e <ready_thread+0x2e>
	node->prev = tail;
   1b998:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1b99c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1b99e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1b9a0:	e7f1      	b.n	1b986 <ready_thread+0x46>
}
   1b9a2:	bc70      	pop	{r4, r5, r6}
   1b9a4:	4770      	bx	lr
   1b9a6:	bf00      	nop
   1b9a8:	200027cc 	.word	0x200027cc

0001b9ac <z_sched_start>:
{
   1b9ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b9ae:	f04f 0220 	mov.w	r2, #32
   1b9b2:	f3ef 8411 	mrs	r4, BASEPRI
   1b9b6:	f382 8811 	msr	BASEPRI, r2
   1b9ba:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b9be:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b9c0:	0751      	lsls	r1, r2, #29
   1b9c2:	d404      	bmi.n	1b9ce <z_sched_start+0x22>
	__asm__ volatile(
   1b9c4:	f384 8811 	msr	BASEPRI, r4
   1b9c8:	f3bf 8f6f 	isb	sy
}
   1b9cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b9ce:	f022 0204 	bic.w	r2, r2, #4
   1b9d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b9d4:	f7ff ffb4 	bl	1b940 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b9d8:	4621      	mov	r1, r4
   1b9da:	4802      	ldr	r0, [pc, #8]	; (1b9e4 <z_sched_start+0x38>)
}
   1b9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b9e0:	f7ff be4e 	b.w	1b680 <z_reschedule>
   1b9e4:	20002d1f 	.word	0x20002d1f

0001b9e8 <z_set_prio>:
{
   1b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9ea:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9ec:	f04f 0320 	mov.w	r3, #32
   1b9f0:	f3ef 8611 	mrs	r6, BASEPRI
   1b9f4:	f383 8811 	msr	BASEPRI, r3
   1b9f8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1b9fc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b9fe:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1ba00:	b249      	sxtb	r1, r1
   1ba02:	d133      	bne.n	1ba6c <z_set_prio+0x84>
		if (need_sched) {
   1ba04:	6982      	ldr	r2, [r0, #24]
   1ba06:	bb8a      	cbnz	r2, 1ba6c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ba08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba0c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ba0e:	f003 fea5 	bl	1f75c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ba12:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1ba14:	4a17      	ldr	r2, [pc, #92]	; (1ba74 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1ba16:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ba18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ba1c:	7343      	strb	r3, [r0, #13]
   1ba1e:	4610      	mov	r0, r2
   1ba20:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba24:	4283      	cmp	r3, r0
   1ba26:	d01b      	beq.n	1ba60 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba28:	b1d3      	cbz	r3, 1ba60 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1ba2a:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   1ba2c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1ba30:	42a9      	cmp	r1, r5
   1ba32:	d010      	beq.n	1ba56 <z_set_prio+0x6e>
		return b2 - b1;
   1ba34:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ba36:	2d00      	cmp	r5, #0
   1ba38:	dd0d      	ble.n	1ba56 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1ba3a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ba3c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ba40:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ba42:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1ba44:	2001      	movs	r0, #1
   1ba46:	f7ff fe41 	bl	1b6cc <update_cache>
   1ba4a:	2001      	movs	r0, #1
	__asm__ volatile(
   1ba4c:	f386 8811 	msr	BASEPRI, r6
   1ba50:	f3bf 8f6f 	isb	sy
}
   1ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1ba56:	42bb      	cmp	r3, r7
   1ba58:	d002      	beq.n	1ba60 <z_set_prio+0x78>
   1ba5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba5c:	2b00      	cmp	r3, #0
   1ba5e:	d1e5      	bne.n	1ba2c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1ba60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   1ba62:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1ba66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ba68:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1ba6a:	e7eb      	b.n	1ba44 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ba6c:	73a1      	strb	r1, [r4, #14]
   1ba6e:	2000      	movs	r0, #0
   1ba70:	e7ec      	b.n	1ba4c <z_set_prio+0x64>
   1ba72:	bf00      	nop
   1ba74:	200027cc 	.word	0x200027cc

0001ba78 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ba78:	4b04      	ldr	r3, [pc, #16]	; (1ba8c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ba7a:	2100      	movs	r1, #0
   1ba7c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1ba80:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1ba84:	4608      	mov	r0, r1
   1ba86:	f7ff bdcb 	b.w	1b620 <k_sched_time_slice_set>
   1ba8a:	bf00      	nop
   1ba8c:	200027cc 	.word	0x200027cc

0001ba90 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1ba92:	f04f 0320 	mov.w	r3, #32
   1ba96:	f3ef 8511 	mrs	r5, BASEPRI
   1ba9a:	f383 8811 	msr	BASEPRI, r3
   1ba9e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1baa2:	491a      	ldr	r1, [pc, #104]	; (1bb0c <z_impl_k_yield+0x7c>)
   1baa4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1baa6:	7b43      	ldrb	r3, [r0, #13]
   1baa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1baac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1baae:	f003 fe55 	bl	1f75c <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1bab2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bab4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1bab6:	4608      	mov	r0, r1
   1bab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1babc:	735a      	strb	r2, [r3, #13]
   1babe:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bac2:	4282      	cmp	r2, r0
   1bac4:	d01c      	beq.n	1bb00 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bac6:	b1da      	cbz	r2, 1bb00 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1bac8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   1baca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1bace:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1bad2:	42a6      	cmp	r6, r4
   1bad4:	d00f      	beq.n	1baf6 <z_impl_k_yield+0x66>
		return b2 - b1;
   1bad6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bad8:	2c00      	cmp	r4, #0
   1bada:	dd0c      	ble.n	1baf6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1badc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bade:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1bae2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bae4:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1bae6:	2001      	movs	r0, #1
   1bae8:	f7ff fdf0 	bl	1b6cc <update_cache>
   1baec:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1baee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1baf2:	f7e8 bd77 	b.w	45e4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1baf6:	42ba      	cmp	r2, r7
   1baf8:	d002      	beq.n	1bb00 <z_impl_k_yield+0x70>
   1bafa:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bafc:	2a00      	cmp	r2, #0
   1bafe:	d1e6      	bne.n	1bace <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1bb00:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   1bb02:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1bb06:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bb08:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   1bb0a:	e7ec      	b.n	1bae6 <z_impl_k_yield+0x56>
   1bb0c:	200027cc 	.word	0x200027cc

0001bb10 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1bb10:	ea50 0301 	orrs.w	r3, r0, r1
{
   1bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb18:	4605      	mov	r5, r0
   1bb1a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1bb1c:	d103      	bne.n	1bb26 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1bb1e:	f7ff ffb7 	bl	1ba90 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1bb22:	2000      	movs	r0, #0
   1bb24:	e033      	b.n	1bb8e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1bb26:	f06f 0401 	mvn.w	r4, #1
   1bb2a:	1a24      	subs	r4, r4, r0
   1bb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb30:	eb63 0301 	sbc.w	r3, r3, r1
   1bb34:	2c01      	cmp	r4, #1
   1bb36:	f173 0300 	sbcs.w	r3, r3, #0
   1bb3a:	da02      	bge.n	1bb42 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1bb3c:	f003 ff5f 	bl	1f9fe <sys_clock_tick_get_32>
   1bb40:	1944      	adds	r4, r0, r5
   1bb42:	f04f 0320 	mov.w	r3, #32
   1bb46:	f3ef 8811 	mrs	r8, BASEPRI
   1bb4a:	f383 8811 	msr	BASEPRI, r3
   1bb4e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1bb52:	4f10      	ldr	r7, [pc, #64]	; (1bb94 <z_tick_sleep+0x84>)
   1bb54:	4b10      	ldr	r3, [pc, #64]	; (1bb98 <z_tick_sleep+0x88>)
   1bb56:	68b8      	ldr	r0, [r7, #8]
   1bb58:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1bb5a:	f7ff fdd7 	bl	1b70c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1bb5e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bb60:	490e      	ldr	r1, [pc, #56]	; (1bb9c <z_tick_sleep+0x8c>)
   1bb62:	462a      	mov	r2, r5
   1bb64:	4633      	mov	r3, r6
   1bb66:	3018      	adds	r0, #24
   1bb68:	f000 f914 	bl	1bd94 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bb6c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb6e:	7b53      	ldrb	r3, [r2, #13]
   1bb70:	f043 0310 	orr.w	r3, r3, #16
   1bb74:	7353      	strb	r3, [r2, #13]
   1bb76:	4640      	mov	r0, r8
   1bb78:	f7e8 fd34 	bl	45e4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1bb7c:	f003 ff3f 	bl	1f9fe <sys_clock_tick_get_32>
   1bb80:	1a20      	subs	r0, r4, r0
   1bb82:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1bb86:	2801      	cmp	r0, #1
   1bb88:	f173 0300 	sbcs.w	r3, r3, #0
   1bb8c:	dbc9      	blt.n	1bb22 <z_tick_sleep+0x12>
}
   1bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb92:	bf00      	nop
   1bb94:	200027cc 	.word	0x200027cc
   1bb98:	20002804 	.word	0x20002804
   1bb9c:	0001f887 	.word	0x0001f887

0001bba0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bba0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1bba4:	bf08      	it	eq
   1bba6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1bbaa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bbac:	d106      	bne.n	1bbbc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1bbae:	4b08      	ldr	r3, [pc, #32]	; (1bbd0 <z_impl_k_sleep+0x30>)
   1bbb0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bbb2:	f7ff fdfd 	bl	1b7b0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1bbb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1bbba:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1bbbc:	f7ff ffa8 	bl	1bb10 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1bbc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1bbc4:	fb80 0303 	smull	r0, r3, r0, r3
   1bbc8:	0bc0      	lsrs	r0, r0, #15
   1bbca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1bbce:	e7f4      	b.n	1bbba <z_impl_k_sleep+0x1a>
   1bbd0:	200027cc 	.word	0x200027cc

0001bbd4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1bbd4:	4b01      	ldr	r3, [pc, #4]	; (1bbdc <z_impl_k_current_get+0x8>)
   1bbd6:	6898      	ldr	r0, [r3, #8]
   1bbd8:	4770      	bx	lr
   1bbda:	bf00      	nop
   1bbdc:	200027cc 	.word	0x200027cc

0001bbe0 <z_impl_k_is_preempt_thread>:
   1bbe0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1bbe4:	b93b      	cbnz	r3, 1bbf6 <z_impl_k_is_preempt_thread+0x16>
   1bbe6:	4b05      	ldr	r3, [pc, #20]	; (1bbfc <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1bbe8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1bbea:	89d8      	ldrh	r0, [r3, #14]
   1bbec:	287f      	cmp	r0, #127	; 0x7f
   1bbee:	bf8c      	ite	hi
   1bbf0:	2000      	movhi	r0, #0
   1bbf2:	2001      	movls	r0, #1
   1bbf4:	4770      	bx	lr
   1bbf6:	2000      	movs	r0, #0
}
   1bbf8:	4770      	bx	lr
   1bbfa:	bf00      	nop
   1bbfc:	200027cc 	.word	0x200027cc

0001bc00 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc04:	4604      	mov	r4, r0
   1bc06:	f04f 0320 	mov.w	r3, #32
   1bc0a:	f3ef 8611 	mrs	r6, BASEPRI
   1bc0e:	f383 8811 	msr	BASEPRI, r3
   1bc12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1bc16:	7b43      	ldrb	r3, [r0, #13]
   1bc18:	071a      	lsls	r2, r3, #28
   1bc1a:	d505      	bpl.n	1bc28 <z_thread_abort+0x28>
	__asm__ volatile(
   1bc1c:	f386 8811 	msr	BASEPRI, r6
   1bc20:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bc28:	f023 0220 	bic.w	r2, r3, #32
   1bc2c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1bc30:	09d2      	lsrs	r2, r2, #7
   1bc32:	d120      	bne.n	1bc76 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bc34:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1bc36:	68a3      	ldr	r3, [r4, #8]
   1bc38:	b113      	cbz	r3, 1bc40 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1bc3a:	4620      	mov	r0, r4
   1bc3c:	f003 fd96 	bl	1f76c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1bc40:	f104 0018 	add.w	r0, r4, #24
   1bc44:	f003 fe9b 	bl	1f97e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bc48:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1bc4c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1bc50:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc52:	42bd      	cmp	r5, r7
   1bc54:	d000      	beq.n	1bc58 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bc56:	b9b5      	cbnz	r5, 1bc86 <z_thread_abort+0x86>
		update_cache(1);
   1bc58:	2001      	movs	r0, #1
   1bc5a:	f7ff fd37 	bl	1b6cc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1bc5e:	4b10      	ldr	r3, [pc, #64]	; (1bca0 <z_thread_abort+0xa0>)
   1bc60:	689b      	ldr	r3, [r3, #8]
   1bc62:	42a3      	cmp	r3, r4
   1bc64:	d1da      	bne.n	1bc1c <z_thread_abort+0x1c>
   1bc66:	f3ef 8305 	mrs	r3, IPSR
   1bc6a:	2b00      	cmp	r3, #0
   1bc6c:	d1d6      	bne.n	1bc1c <z_thread_abort+0x1c>
   1bc6e:	4630      	mov	r0, r6
   1bc70:	f7e8 fcb8 	bl	45e4 <arch_swap>
	return ret;
   1bc74:	e7d2      	b.n	1bc1c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bc76:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bc7a:	f043 0308 	orr.w	r3, r3, #8
   1bc7e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bc80:	f003 fd6c 	bl	1f75c <sys_dlist_remove>
}
   1bc84:	e7d7      	b.n	1bc36 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1bc86:	4628      	mov	r0, r5
   1bc88:	f003 fd70 	bl	1f76c <unpend_thread_no_timeout>
   1bc8c:	f105 0018 	add.w	r0, r5, #24
   1bc90:	f003 fe75 	bl	1f97e <z_abort_timeout>
   1bc94:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bc98:	4628      	mov	r0, r5
   1bc9a:	f7ff fe51 	bl	1b940 <ready_thread>
   1bc9e:	e7d7      	b.n	1bc50 <z_thread_abort+0x50>
   1bca0:	200027cc 	.word	0x200027cc

0001bca4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bca4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bca6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bcaa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bcac:	e9cd 6700 	strd	r6, r7, [sp]
   1bcb0:	f7ff fd6a 	bl	1b788 <z_pend_curr>

	if (data != NULL) {
   1bcb4:	b11c      	cbz	r4, 1bcbe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bcb6:	4b03      	ldr	r3, [pc, #12]	; (1bcc4 <z_sched_wait+0x20>)
   1bcb8:	689b      	ldr	r3, [r3, #8]
   1bcba:	695b      	ldr	r3, [r3, #20]
   1bcbc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bcbe:	b002      	add	sp, #8
   1bcc0:	bdd0      	pop	{r4, r6, r7, pc}
   1bcc2:	bf00      	nop
   1bcc4:	200027cc 	.word	0x200027cc

0001bcc8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bcc8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bcca:	4806      	ldr	r0, [pc, #24]	; (1bce4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bccc:	4a06      	ldr	r2, [pc, #24]	; (1bce8 <z_data_copy+0x20>)
   1bcce:	4907      	ldr	r1, [pc, #28]	; (1bcec <z_data_copy+0x24>)
   1bcd0:	1a12      	subs	r2, r2, r0
   1bcd2:	f001 fd99 	bl	1d808 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bcd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bcda:	4a05      	ldr	r2, [pc, #20]	; (1bcf0 <z_data_copy+0x28>)
   1bcdc:	4905      	ldr	r1, [pc, #20]	; (1bcf4 <z_data_copy+0x2c>)
   1bcde:	4806      	ldr	r0, [pc, #24]	; (1bcf8 <z_data_copy+0x30>)
   1bce0:	f001 bd92 	b.w	1d808 <memcpy>
   1bce4:	20000000 	.word	0x20000000
   1bce8:	20000850 	.word	0x20000850
   1bcec:	00023008 	.word	0x00023008
   1bcf0:	00000000 	.word	0x00000000
   1bcf4:	00023008 	.word	0x00023008
   1bcf8:	20000000 	.word	0x20000000

0001bcfc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bcfc:	4b03      	ldr	r3, [pc, #12]	; (1bd0c <elapsed+0x10>)
   1bcfe:	681b      	ldr	r3, [r3, #0]
   1bd00:	b90b      	cbnz	r3, 1bd06 <elapsed+0xa>
   1bd02:	f7e8 bbe9 	b.w	44d8 <sys_clock_elapsed>
}
   1bd06:	2000      	movs	r0, #0
   1bd08:	4770      	bx	lr
   1bd0a:	bf00      	nop
   1bd0c:	20002810 	.word	0x20002810

0001bd10 <next_timeout>:
	return list->head == list;
   1bd10:	4b11      	ldr	r3, [pc, #68]	; (1bd58 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1bd12:	b510      	push	{r4, lr}
   1bd14:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd16:	429c      	cmp	r4, r3
   1bd18:	bf08      	it	eq
   1bd1a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bd1c:	f7ff ffee 	bl	1bcfc <elapsed>
   1bd20:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1bd22:	b16c      	cbz	r4, 1bd40 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bd24:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1bd28:	1ac0      	subs	r0, r0, r3
   1bd2a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bd2e:	2801      	cmp	r0, #1
   1bd30:	f173 0200 	sbcs.w	r2, r3, #0
   1bd34:	db0d      	blt.n	1bd52 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bd36:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1bd3a:	f173 0300 	sbcs.w	r3, r3, #0
   1bd3e:	db01      	blt.n	1bd44 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1bd40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bd44:	4b05      	ldr	r3, [pc, #20]	; (1bd5c <next_timeout+0x4c>)
   1bd46:	691b      	ldr	r3, [r3, #16]
   1bd48:	b113      	cbz	r3, 1bd50 <next_timeout+0x40>
   1bd4a:	4298      	cmp	r0, r3
   1bd4c:	bfa8      	it	ge
   1bd4e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bd50:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bd52:	2000      	movs	r0, #0
   1bd54:	e7f6      	b.n	1bd44 <next_timeout+0x34>
   1bd56:	bf00      	nop
   1bd58:	20000598 	.word	0x20000598
   1bd5c:	200027cc 	.word	0x200027cc

0001bd60 <remove_timeout>:
{
   1bd60:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1bd62:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bd64:	b168      	cbz	r0, 1bd82 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1bd66:	4a0a      	ldr	r2, [pc, #40]	; (1bd90 <remove_timeout+0x30>)
   1bd68:	6852      	ldr	r2, [r2, #4]
   1bd6a:	4290      	cmp	r0, r2
   1bd6c:	d009      	beq.n	1bd82 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bd6e:	b143      	cbz	r3, 1bd82 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bd70:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bd74:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bd78:	1912      	adds	r2, r2, r4
   1bd7a:	eb41 0105 	adc.w	r1, r1, r5
   1bd7e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1bd82:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1bd84:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bd86:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bd88:	2300      	movs	r3, #0
	node->prev = NULL;
   1bd8a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bd8e:	bd30      	pop	{r4, r5, pc}
   1bd90:	20000598 	.word	0x20000598

0001bd94 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bd98:	bf08      	it	eq
   1bd9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1bd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bda0:	4604      	mov	r4, r0
   1bda2:	461f      	mov	r7, r3
   1bda4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bda6:	d067      	beq.n	1be78 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bda8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1bdaa:	f04f 0320 	mov.w	r3, #32
   1bdae:	f3ef 8611 	mrs	r6, BASEPRI
   1bdb2:	f383 8811 	msr	BASEPRI, r3
   1bdb6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bdba:	f06f 0201 	mvn.w	r2, #1
   1bdbe:	1b53      	subs	r3, r2, r5
   1bdc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1bdc4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	db1b      	blt.n	1be04 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bdcc:	4b2b      	ldr	r3, [pc, #172]	; (1be7c <z_add_timeout+0xe8>)
   1bdce:	e9d3 1300 	ldrd	r1, r3, [r3]
   1bdd2:	1a52      	subs	r2, r2, r1
   1bdd4:	eb6c 0303 	sbc.w	r3, ip, r3
   1bdd8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1bdda:	eb63 0307 	sbc.w	r3, r3, r7
   1bdde:	2d01      	cmp	r5, #1
   1bde0:	f173 0200 	sbcs.w	r2, r3, #0
   1bde4:	bfbc      	itt	lt
   1bde6:	2501      	movlt	r5, #1
   1bde8:	2300      	movlt	r3, #0
   1bdea:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1bdee:	4824      	ldr	r0, [pc, #144]	; (1be80 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1bdf0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bdf4:	4283      	cmp	r3, r0
   1bdf6:	d118      	bne.n	1be2a <z_add_timeout+0x96>
	node->prev = tail;
   1bdf8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1bdfc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1be00:	6044      	str	r4, [r0, #4]
}
   1be02:	e026      	b.n	1be52 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1be04:	f7ff ff7a 	bl	1bcfc <elapsed>
   1be08:	3501      	adds	r5, #1
   1be0a:	f147 0700 	adc.w	r7, r7, #0
   1be0e:	182d      	adds	r5, r5, r0
   1be10:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1be14:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1be18:	e7e9      	b.n	1bdee <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1be1a:	1a52      	subs	r2, r2, r1
   1be1c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1be20:	4563      	cmp	r3, ip
   1be22:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1be26:	d0e7      	beq.n	1bdf8 <z_add_timeout+0x64>
   1be28:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1be2a:	2b00      	cmp	r3, #0
   1be2c:	d0e4      	beq.n	1bdf8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1be2e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1be32:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1be36:	428a      	cmp	r2, r1
   1be38:	eb75 0e07 	sbcs.w	lr, r5, r7
   1be3c:	daed      	bge.n	1be1a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1be3e:	1a8a      	subs	r2, r1, r2
   1be40:	eb67 0505 	sbc.w	r5, r7, r5
   1be44:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1be48:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1be4a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1be4e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1be50:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1be52:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be54:	4283      	cmp	r3, r0
   1be56:	d00b      	beq.n	1be70 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1be58:	429c      	cmp	r4, r3
   1be5a:	d109      	bne.n	1be70 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1be5c:	f7ff ff58 	bl	1bd10 <next_timeout>

			if (next_time == 0 ||
   1be60:	b118      	cbz	r0, 1be6a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1be62:	4b08      	ldr	r3, [pc, #32]	; (1be84 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1be64:	691b      	ldr	r3, [r3, #16]
   1be66:	4283      	cmp	r3, r0
   1be68:	d002      	beq.n	1be70 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1be6a:	2100      	movs	r1, #0
   1be6c:	f7e8 fb02 	bl	4474 <sys_clock_set_timeout>
	__asm__ volatile(
   1be70:	f386 8811 	msr	BASEPRI, r6
   1be74:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be7a:	bf00      	nop
   1be7c:	20001198 	.word	0x20001198
   1be80:	20000598 	.word	0x20000598
   1be84:	200027cc 	.word	0x200027cc

0001be88 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1be88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be8c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1be8e:	f7ff fd17 	bl	1b8c0 <z_time_slice>
	__asm__ volatile(
   1be92:	f04f 0320 	mov.w	r3, #32
   1be96:	f3ef 8411 	mrs	r4, BASEPRI
   1be9a:	f383 8811 	msr	BASEPRI, r3
   1be9e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bea2:	4e24      	ldr	r6, [pc, #144]	; (1bf34 <sys_clock_announce+0xac>)
	return list->head == list;
   1bea4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bf38 <sys_clock_announce+0xb0>
   1bea8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1beaa:	4d24      	ldr	r5, [pc, #144]	; (1bf3c <sys_clock_announce+0xb4>)
   1beac:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1beb0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1beb2:	4540      	cmp	r0, r8
		curr_tick += dt;
   1beb4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1beb8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1bebc:	d00b      	beq.n	1bed6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bebe:	b150      	cbz	r0, 1bed6 <sys_clock_announce+0x4e>
   1bec0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1bec4:	429a      	cmp	r2, r3
   1bec6:	eb77 090c 	sbcs.w	r9, r7, ip
   1beca:	da16      	bge.n	1befa <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1becc:	1a9b      	subs	r3, r3, r2
   1bece:	eb6c 0c07 	sbc.w	ip, ip, r7
   1bed2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1bed6:	1852      	adds	r2, r2, r1
   1bed8:	eb4e 0707 	adc.w	r7, lr, r7
   1bedc:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1bee0:	2500      	movs	r5, #0
   1bee2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bee4:	f7ff ff14 	bl	1bd10 <next_timeout>
   1bee8:	4629      	mov	r1, r5
   1beea:	f7e8 fac3 	bl	4474 <sys_clock_set_timeout>
	__asm__ volatile(
   1beee:	f384 8811 	msr	BASEPRI, r4
   1bef2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1befa:	1859      	adds	r1, r3, r1
   1befc:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1bf00:	1ad3      	subs	r3, r2, r3
   1bf02:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bf04:	2200      	movs	r2, #0
   1bf06:	2300      	movs	r3, #0
   1bf08:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1bf0c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1bf10:	f7ff ff26 	bl	1bd60 <remove_timeout>
   1bf14:	f384 8811 	msr	BASEPRI, r4
   1bf18:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bf1c:	6883      	ldr	r3, [r0, #8]
   1bf1e:	4798      	blx	r3
	__asm__ volatile(
   1bf20:	f04f 0320 	mov.w	r3, #32
   1bf24:	f3ef 8411 	mrs	r4, BASEPRI
   1bf28:	f383 8811 	msr	BASEPRI, r3
   1bf2c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bf30:	e7bc      	b.n	1beac <sys_clock_announce+0x24>
   1bf32:	bf00      	nop
   1bf34:	20002810 	.word	0x20002810
   1bf38:	20000598 	.word	0x20000598
   1bf3c:	20001198 	.word	0x20001198

0001bf40 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bf40:	b510      	push	{r4, lr}
   1bf42:	f04f 0320 	mov.w	r3, #32
   1bf46:	f3ef 8411 	mrs	r4, BASEPRI
   1bf4a:	f383 8811 	msr	BASEPRI, r3
   1bf4e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1bf52:	f7e8 fac1 	bl	44d8 <sys_clock_elapsed>
   1bf56:	4a05      	ldr	r2, [pc, #20]	; (1bf6c <sys_clock_tick_get+0x2c>)
   1bf58:	e9d2 3100 	ldrd	r3, r1, [r2]
   1bf5c:	18c0      	adds	r0, r0, r3
   1bf5e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1bf62:	f384 8811 	msr	BASEPRI, r4
   1bf66:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bf6a:	bd10      	pop	{r4, pc}
   1bf6c:	20001198 	.word	0x20001198

0001bf70 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bf70:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bf72:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1bf76:	3301      	adds	r3, #1
   1bf78:	f142 0200 	adc.w	r2, r2, #0
   1bf7c:	2b02      	cmp	r3, #2
   1bf7e:	f172 0300 	sbcs.w	r3, r2, #0
{
   1bf82:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bf84:	d304      	bcc.n	1bf90 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf86:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1bf8a:	490d      	ldr	r1, [pc, #52]	; (1bfc0 <z_timer_expiration_handler+0x50>)
   1bf8c:	f7ff ff02 	bl	1bd94 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bf90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bf92:	3301      	adds	r3, #1
   1bf94:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bf96:	6a23      	ldr	r3, [r4, #32]
   1bf98:	b10b      	cbz	r3, 1bf9e <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   1bf9a:	4620      	mov	r0, r4
   1bf9c:	4798      	blx	r3
	return list->head == list;
   1bf9e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bfa2:	42a5      	cmp	r5, r4
   1bfa4:	d00a      	beq.n	1bfbc <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bfa6:	b14d      	cbz	r5, 1bfbc <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bfa8:	4628      	mov	r0, r5
   1bfaa:	f003 fbf2 	bl	1f792 <z_unpend_thread_no_timeout>
   1bfae:	2300      	movs	r3, #0
   1bfb0:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1bfb2:	4628      	mov	r0, r5
}
   1bfb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   1bfb8:	f003 bc55 	b.w	1f866 <z_ready_thread>
}
   1bfbc:	bd38      	pop	{r3, r4, r5, pc}
   1bfbe:	bf00      	nop
   1bfc0:	0001bf71 	.word	0x0001bf71

0001bfc4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfc8:	4611      	mov	r1, r2
   1bfca:	4605      	mov	r5, r0
   1bfcc:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bfce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1bfd2:	bf08      	it	eq
   1bfd4:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   1bfd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1bfdc:	4688      	mov	r8, r1
   1bfde:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bfe0:	d03c      	beq.n	1c05c <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bfe6:	bf08      	it	eq
   1bfe8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1bfec:	4614      	mov	r4, r2
   1bfee:	461e      	mov	r6, r3
   1bff0:	d013      	beq.n	1c01a <z_impl_k_timer_start+0x56>
   1bff2:	431a      	orrs	r2, r3
   1bff4:	d011      	beq.n	1c01a <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   1bff6:	f06f 0201 	mvn.w	r2, #1
   1bffa:	1b12      	subs	r2, r2, r4
   1bffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c000:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c004:	2a00      	cmp	r2, #0
   1c006:	da08      	bge.n	1c01a <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   1c008:	3c01      	subs	r4, #1
   1c00a:	f163 0600 	sbc.w	r6, r3, #0
   1c00e:	2c01      	cmp	r4, #1
   1c010:	f176 0300 	sbcs.w	r3, r6, #0
   1c014:	bfbc      	itt	lt
   1c016:	2401      	movlt	r4, #1
   1c018:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c01a:	f06f 0301 	mvn.w	r3, #1
   1c01e:	1a5b      	subs	r3, r3, r1
   1c020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c024:	eb63 0300 	sbc.w	r3, r3, r0
   1c028:	2b00      	cmp	r3, #0
   1c02a:	da08      	bge.n	1c03e <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c02c:	1e4a      	subs	r2, r1, #1
   1c02e:	f160 0700 	sbc.w	r7, r0, #0
   1c032:	2f00      	cmp	r7, #0
   1c034:	4690      	mov	r8, r2
   1c036:	bfbc      	itt	lt
   1c038:	f04f 0800 	movlt.w	r8, #0
   1c03c:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   1c03e:	4628      	mov	r0, r5
   1c040:	f003 fc9d 	bl	1f97e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c044:	2300      	movs	r3, #0
   1c046:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   1c048:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c04c:	4642      	mov	r2, r8
   1c04e:	463b      	mov	r3, r7
   1c050:	4628      	mov	r0, r5
   1c052:	4903      	ldr	r1, [pc, #12]	; (1c060 <z_impl_k_timer_start+0x9c>)
		     duration);
}
   1c054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c058:	f7ff be9c 	b.w	1bd94 <z_add_timeout>
}
   1c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c060:	0001bf71 	.word	0x0001bf71

0001c064 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c068:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c06a:	4b29      	ldr	r3, [pc, #164]	; (1c110 <z_impl_k_poll+0xac>)
   1c06c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1c06e:	2301      	movs	r3, #1
   1c070:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c074:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c078:	ea52 0305 	orrs.w	r3, r2, r5
{
   1c07c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c07e:	bf0c      	ite	eq
   1c080:	2301      	moveq	r3, #1
   1c082:	2300      	movne	r3, #0
   1c084:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1c088:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c08a:	f003 fd48 	bl	1fb1e <register_events>
   1c08e:	4681      	mov	r9, r0
	__asm__ volatile(
   1c090:	f04f 0320 	mov.w	r3, #32
   1c094:	f3ef 8a11 	mrs	sl, BASEPRI
   1c098:	f383 8811 	msr	BASEPRI, r3
   1c09c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c0a0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1c0a4:	b964      	cbnz	r4, 1c0c0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c0a6:	4601      	mov	r1, r0
   1c0a8:	4652      	mov	r2, sl
   1c0aa:	4640      	mov	r0, r8
   1c0ac:	f003 fe08 	bl	1fcc0 <clear_event_registrations>
	__asm__ volatile(
   1c0b0:	f38a 8811 	msr	BASEPRI, sl
   1c0b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c0b8:	4620      	mov	r0, r4
   1c0ba:	b002      	add	sp, #8
   1c0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c0c6:	ea56 0305 	orrs.w	r3, r6, r5
   1c0ca:	d106      	bne.n	1c0da <z_impl_k_poll+0x76>
   1c0cc:	f38a 8811 	msr	BASEPRI, sl
   1c0d0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c0d4:	f06f 040a 	mvn.w	r4, #10
   1c0d8:	e7ee      	b.n	1c0b8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c0da:	e9cd 6500 	strd	r6, r5, [sp]
   1c0de:	4a0d      	ldr	r2, [pc, #52]	; (1c114 <z_impl_k_poll+0xb0>)
   1c0e0:	480d      	ldr	r0, [pc, #52]	; (1c118 <z_impl_k_poll+0xb4>)
   1c0e2:	4651      	mov	r1, sl
   1c0e4:	f7ff fb50 	bl	1b788 <z_pend_curr>
   1c0e8:	4604      	mov	r4, r0
	__asm__ volatile(
   1c0ea:	f04f 0320 	mov.w	r3, #32
   1c0ee:	f3ef 8511 	mrs	r5, BASEPRI
   1c0f2:	f383 8811 	msr	BASEPRI, r3
   1c0f6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c0fa:	462a      	mov	r2, r5
   1c0fc:	4649      	mov	r1, r9
   1c0fe:	4640      	mov	r0, r8
   1c100:	f003 fdde 	bl	1fcc0 <clear_event_registrations>
	__asm__ volatile(
   1c104:	f385 8811 	msr	BASEPRI, r5
   1c108:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c10c:	e7d4      	b.n	1c0b8 <z_impl_k_poll+0x54>
   1c10e:	bf00      	nop
   1c110:	200027cc 	.word	0x200027cc
   1c114:	200005a0 	.word	0x200005a0
   1c118:	20002d1f 	.word	0x20002d1f

0001c11c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c11c:	b538      	push	{r3, r4, r5, lr}
   1c11e:	4603      	mov	r3, r0
	__asm__ volatile(
   1c120:	f04f 0220 	mov.w	r2, #32
   1c124:	f3ef 8511 	mrs	r5, BASEPRI
   1c128:	f382 8811 	msr	BASEPRI, r2
   1c12c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c130:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c132:	2101      	movs	r1, #1
   1c134:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c136:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c138:	4283      	cmp	r3, r0
   1c13a:	d106      	bne.n	1c14a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c13c:	f385 8811 	msr	BASEPRI, r5
   1c140:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1c144:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1c146:	4620      	mov	r0, r4
   1c148:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1c14a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c14e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c150:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c152:	2300      	movs	r3, #0
	node->prev = NULL;
   1c154:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c158:	f003 fd58 	bl	1fc0c <signal_poll_event>
	z_reschedule(&lock, key);
   1c15c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c15e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c160:	4801      	ldr	r0, [pc, #4]	; (1c168 <z_impl_k_poll_signal_raise+0x4c>)
   1c162:	f7ff fa8d 	bl	1b680 <z_reschedule>
	return rc;
   1c166:	e7ee      	b.n	1c146 <z_impl_k_poll_signal_raise+0x2a>
   1c168:	20002d1f 	.word	0x20002d1f

0001c16c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c16c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c16e:	4606      	mov	r6, r0
   1c170:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c172:	f003 f914 	bl	1f39e <k_is_in_isr>
   1c176:	b978      	cbnz	r0, 1c198 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c178:	4b0b      	ldr	r3, [pc, #44]	; (1c1a8 <z_thread_aligned_alloc+0x3c>)
   1c17a:	689b      	ldr	r3, [r3, #8]
   1c17c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c17e:	b17c      	cbz	r4, 1c1a0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c180:	1d2a      	adds	r2, r5, #4
   1c182:	d209      	bcs.n	1c198 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c184:	2000      	movs	r0, #0
   1c186:	2100      	movs	r1, #0
   1c188:	e9cd 0100 	strd	r0, r1, [sp]
   1c18c:	f046 0104 	orr.w	r1, r6, #4
   1c190:	4620      	mov	r0, r4
   1c192:	f003 f862 	bl	1f25a <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c196:	b908      	cbnz	r0, 1c19c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c198:	2400      	movs	r4, #0
	}

	return ret;
   1c19a:	e001      	b.n	1c1a0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1c19c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c19e:	1d04      	adds	r4, r0, #4
}
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	b002      	add	sp, #8
   1c1a4:	bd70      	pop	{r4, r5, r6, pc}
   1c1a6:	bf00      	nop
   1c1a8:	200027cc 	.word	0x200027cc

0001c1ac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c1ac:	4a02      	ldr	r2, [pc, #8]	; (1c1b8 <boot_banner+0xc>)
   1c1ae:	4903      	ldr	r1, [pc, #12]	; (1c1bc <boot_banner+0x10>)
   1c1b0:	4803      	ldr	r0, [pc, #12]	; (1c1c0 <boot_banner+0x14>)
   1c1b2:	f000 b873 	b.w	1c29c <printk>
   1c1b6:	bf00      	nop
   1c1b8:	00021929 	.word	0x00021929
   1c1bc:	00022fc2 	.word	0x00022fc2
   1c1c0:	00022fdf 	.word	0x00022fdf

0001c1c4 <disconnected>:
}
   1c1c4:	4770      	bx	lr

0001c1c6 <gpio_pin_set.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c1c6:	6903      	ldr	r3, [r0, #16]
   1c1c8:	681b      	ldr	r3, [r3, #0]
   1c1ca:	041b      	lsls	r3, r3, #16
		value = (value != 0) ? 0 : 1;
   1c1cc:	bf48      	it	mi
   1c1ce:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
   1c1d2:	b121      	cbz	r1, 1c1de <gpio_pin_set.constprop.0.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
   1c1d4:	6883      	ldr	r3, [r0, #8]
   1c1d6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1c1d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c1dc:	4718      	bx	r3
   1c1de:	6883      	ldr	r3, [r0, #8]
   1c1e0:	691b      	ldr	r3, [r3, #16]
   1c1e2:	e7f9      	b.n	1c1d8 <gpio_pin_set.constprop.0.isra.0+0x12>

0001c1e4 <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
   1c1e4:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1c1e6:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   1c1e8:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   1c1ea:	6906      	ldr	r6, [r0, #16]
static inline int z_impl_gpio_pin_configure(const struct device *port,
   1c1ec:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1c1ee:	d506      	bpl.n	1c1fe <z_impl_gpio_pin_configure.isra.0+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1c1f0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   1c1f4:	d003      	beq.n	1c1fe <z_impl_gpio_pin_configure.isra.0+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c1f6:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c1f8:	bf48      	it	mi
   1c1fa:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c1fe:	6834      	ldr	r4, [r6, #0]
   1c200:	2501      	movs	r5, #1
   1c202:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c204:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c208:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c20a:	bf4c      	ite	mi
   1c20c:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c20e:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   1c210:	683b      	ldr	r3, [r7, #0]
   1c212:	6034      	str	r4, [r6, #0]
}
   1c214:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   1c216:	4718      	bx	r3

0001c218 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c218:	4603      	mov	r3, r0
   1c21a:	b140      	cbz	r0, 1c22e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c21c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c21e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c222:	2a02      	cmp	r2, #2
   1c224:	d006      	beq.n	1c234 <sys_notify_validate+0x1c>
   1c226:	2a03      	cmp	r2, #3
   1c228:	d004      	beq.n	1c234 <sys_notify_validate+0x1c>
   1c22a:	2a01      	cmp	r2, #1
   1c22c:	d005      	beq.n	1c23a <sys_notify_validate+0x22>
		return -EINVAL;
   1c22e:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c232:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c234:	681a      	ldr	r2, [r3, #0]
   1c236:	2a00      	cmp	r2, #0
   1c238:	d0f9      	beq.n	1c22e <sys_notify_validate+0x16>
		notify->result = 0;
   1c23a:	2000      	movs	r0, #0
   1c23c:	6098      	str	r0, [r3, #8]
   1c23e:	4770      	bx	lr

0001c240 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c240:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c242:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c246:	2a02      	cmp	r2, #2
{
   1c248:	b510      	push	{r4, lr}
   1c24a:	4603      	mov	r3, r0
	notify->result = res;
   1c24c:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c24e:	d00a      	beq.n	1c266 <sys_notify_finalize+0x26>
   1c250:	2a03      	cmp	r2, #3
   1c252:	d10b      	bne.n	1c26c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c254:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c256:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c258:	2200      	movs	r2, #0
   1c25a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c25c:	b108      	cbz	r0, 1c262 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1c25e:	f7ff ff5d 	bl	1c11c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c262:	4620      	mov	r0, r4
   1c264:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c266:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1c268:	2400      	movs	r4, #0
		break;
   1c26a:	e7f5      	b.n	1c258 <sys_notify_finalize+0x18>
	switch (method) {
   1c26c:	2400      	movs	r4, #0
   1c26e:	4620      	mov	r0, r4
   1c270:	e7f2      	b.n	1c258 <sys_notify_finalize+0x18>

0001c272 <arch_printk_char_out>:
}
   1c272:	2000      	movs	r0, #0
   1c274:	4770      	bx	lr

0001c276 <str_out>:
{
   1c276:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c278:	688a      	ldr	r2, [r1, #8]
   1c27a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c27c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c27e:	b114      	cbz	r4, 1c286 <str_out+0x10>
   1c280:	684b      	ldr	r3, [r1, #4]
   1c282:	4293      	cmp	r3, r2
   1c284:	dc01      	bgt.n	1c28a <str_out+0x14>
		ctx->count++;
   1c286:	608d      	str	r5, [r1, #8]
}
   1c288:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c28a:	3b01      	subs	r3, #1
   1c28c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c28e:	bf08      	it	eq
   1c290:	2200      	moveq	r2, #0
   1c292:	608d      	str	r5, [r1, #8]
   1c294:	bf0c      	ite	eq
   1c296:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c298:	54a0      	strbne	r0, [r4, r2]
   1c29a:	e7f5      	b.n	1c288 <str_out+0x12>

0001c29c <printk>:
{
   1c29c:	b40f      	push	{r0, r1, r2, r3}
   1c29e:	b507      	push	{r0, r1, r2, lr}
   1c2a0:	a904      	add	r1, sp, #16
   1c2a2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c2a6:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   1c2a8:	f000 fc98 	bl	1cbdc <z_log_printk>
}
   1c2ac:	b003      	add	sp, #12
   1c2ae:	f85d eb04 	ldr.w	lr, [sp], #4
   1c2b2:	b004      	add	sp, #16
   1c2b4:	4770      	bx	lr

0001c2b6 <snprintk>:
{
   1c2b6:	b40c      	push	{r2, r3}
   1c2b8:	b507      	push	{r0, r1, r2, lr}
   1c2ba:	ab04      	add	r3, sp, #16
   1c2bc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c2c0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c2c2:	f7e6 fb7d 	bl	29c0 <vsnprintk>
}
   1c2c6:	b003      	add	sp, #12
   1c2c8:	f85d eb04 	ldr.w	lr, [sp], #4
   1c2cc:	b002      	add	sp, #8
   1c2ce:	4770      	bx	lr

0001c2d0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c2d0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c2d2:	f013 0307 	ands.w	r3, r3, #7
   1c2d6:	d105      	bne.n	1c2e4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c2d8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c2da:	2b00      	cmp	r3, #0
   1c2dc:	bf0c      	ite	eq
   1c2de:	2000      	moveq	r0, #0
   1c2e0:	2003      	movne	r0, #3
   1c2e2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c2e4:	2b02      	cmp	r3, #2
   1c2e6:	d105      	bne.n	1c2f4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c2e8:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1c2ea:	2b00      	cmp	r3, #0
   1c2ec:	bf14      	ite	ne
   1c2ee:	2000      	movne	r0, #0
   1c2f0:	2004      	moveq	r0, #4
   1c2f2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c2f4:	2b01      	cmp	r3, #1
   1c2f6:	d105      	bne.n	1c304 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c2f8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	bf0c      	ite	eq
   1c2fe:	2000      	moveq	r0, #0
   1c300:	2005      	movne	r0, #5
   1c302:	4770      	bx	lr
	int evt = EVT_NOP;
   1c304:	2000      	movs	r0, #0
}
   1c306:	4770      	bx	lr

0001c308 <notify_one>:
{
   1c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c30c:	460d      	mov	r5, r1
   1c30e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c310:	4619      	mov	r1, r3
   1c312:	1d28      	adds	r0, r5, #4
{
   1c314:	4690      	mov	r8, r2
   1c316:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c318:	f7ff ff92 	bl	1c240 <sys_notify_finalize>
	if (cb) {
   1c31c:	4604      	mov	r4, r0
   1c31e:	b138      	cbz	r0, 1c330 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c320:	4633      	mov	r3, r6
   1c322:	4642      	mov	r2, r8
   1c324:	4629      	mov	r1, r5
   1c326:	4638      	mov	r0, r7
   1c328:	46a4      	mov	ip, r4
}
   1c32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c32e:	4760      	bx	ip
}
   1c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c334 <transition_complete>:
{
   1c334:	b410      	push	{r4}
	__asm__ volatile(
   1c336:	f04f 0420 	mov.w	r4, #32
   1c33a:	f3ef 8211 	mrs	r2, BASEPRI
   1c33e:	f384 8811 	msr	BASEPRI, r4
   1c342:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c346:	6141      	str	r1, [r0, #20]
}
   1c348:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c34a:	2101      	movs	r1, #1
   1c34c:	f7e6 bb4c 	b.w	29e8 <process_event>

0001c350 <validate_args>:
{
   1c350:	b510      	push	{r4, lr}
   1c352:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c354:	b140      	cbz	r0, 1c368 <validate_args+0x18>
   1c356:	b139      	cbz	r1, 1c368 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c358:	1d08      	adds	r0, r1, #4
   1c35a:	f7ff ff5d 	bl	1c218 <sys_notify_validate>
	if ((rv == 0)
   1c35e:	b928      	cbnz	r0, 1c36c <validate_args+0x1c>
	    && ((cli->notify.flags
   1c360:	68a3      	ldr	r3, [r4, #8]
   1c362:	f033 0303 	bics.w	r3, r3, #3
   1c366:	d001      	beq.n	1c36c <validate_args+0x1c>
		rv = -EINVAL;
   1c368:	f06f 0015 	mvn.w	r0, #21
}
   1c36c:	bd10      	pop	{r4, pc}

0001c36e <onoff_manager_init>:
{
   1c36e:	b538      	push	{r3, r4, r5, lr}
   1c370:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c372:	4605      	mov	r5, r0
   1c374:	b158      	cbz	r0, 1c38e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c376:	b151      	cbz	r1, 1c38e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c378:	680b      	ldr	r3, [r1, #0]
   1c37a:	b143      	cbz	r3, 1c38e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c37c:	684b      	ldr	r3, [r1, #4]
   1c37e:	b133      	cbz	r3, 1c38e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c380:	221c      	movs	r2, #28
   1c382:	2100      	movs	r1, #0
   1c384:	f001 fa6b 	bl	1d85e <memset>
   1c388:	612c      	str	r4, [r5, #16]
	return 0;
   1c38a:	2000      	movs	r0, #0
}
   1c38c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c38e:	f06f 0015 	mvn.w	r0, #21
   1c392:	e7fb      	b.n	1c38c <onoff_manager_init+0x1e>

0001c394 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c394:	b570      	push	{r4, r5, r6, lr}
   1c396:	4604      	mov	r4, r0
   1c398:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c39a:	f7ff ffd9 	bl	1c350 <validate_args>

	if (rv < 0) {
   1c39e:	1e05      	subs	r5, r0, #0
   1c3a0:	db31      	blt.n	1c406 <onoff_request+0x72>
   1c3a2:	f04f 0320 	mov.w	r3, #32
   1c3a6:	f3ef 8111 	mrs	r1, BASEPRI
   1c3aa:	f383 8811 	msr	BASEPRI, r3
   1c3ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c3b2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c3b4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c3b6:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1c3ba:	42ab      	cmp	r3, r5
   1c3bc:	f000 0207 	and.w	r2, r0, #7
   1c3c0:	d02e      	beq.n	1c420 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1c3c2:	2a02      	cmp	r2, #2
   1c3c4:	d10e      	bne.n	1c3e4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1c3c6:	3301      	adds	r3, #1
   1c3c8:	8363      	strh	r3, [r4, #26]
	rv = state;
   1c3ca:	4615      	mov	r5, r2
		notify = true;
   1c3cc:	2301      	movs	r3, #1
	__asm__ volatile(
   1c3ce:	f381 8811 	msr	BASEPRI, r1
   1c3d2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1c3d6:	b1b3      	cbz	r3, 1c406 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1c3d8:	2300      	movs	r3, #0
   1c3da:	4631      	mov	r1, r6
   1c3dc:	4620      	mov	r0, r4
   1c3de:	f7ff ff93 	bl	1c308 <notify_one>
   1c3e2:	e010      	b.n	1c406 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1c3e4:	0783      	lsls	r3, r0, #30
   1c3e6:	d001      	beq.n	1c3ec <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1c3e8:	2a06      	cmp	r2, #6
   1c3ea:	d10e      	bne.n	1c40a <onoff_request+0x76>
	parent->next = child;
   1c3ec:	2300      	movs	r3, #0
   1c3ee:	6033      	str	r3, [r6, #0]
	return list->tail;
   1c3f0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1c3f2:	b993      	cbnz	r3, 1c41a <onoff_request+0x86>
	list->head = node;
   1c3f4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1c3f8:	4615      	mov	r5, r2
   1c3fa:	b962      	cbnz	r2, 1c416 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1c3fc:	460a      	mov	r2, r1
   1c3fe:	4620      	mov	r0, r4
   1c400:	2102      	movs	r1, #2
   1c402:	f7e6 faf1 	bl	29e8 <process_event>
		}
	}

	return rv;
}
   1c406:	4628      	mov	r0, r5
   1c408:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1c40a:	2a05      	cmp	r2, #5
   1c40c:	bf0c      	ite	eq
   1c40e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1c412:	f06f 0504 	mvnne.w	r5, #4
   1c416:	2300      	movs	r3, #0
   1c418:	e7d9      	b.n	1c3ce <onoff_request+0x3a>
	parent->next = child;
   1c41a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c41c:	6066      	str	r6, [r4, #4]
}
   1c41e:	e7eb      	b.n	1c3f8 <onoff_request+0x64>
		rv = -EAGAIN;
   1c420:	f06f 050a 	mvn.w	r5, #10
   1c424:	e7f7      	b.n	1c416 <onoff_request+0x82>

0001c426 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1c426:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c428:	f04f 0320 	mov.w	r3, #32
   1c42c:	f3ef 8211 	mrs	r2, BASEPRI
   1c430:	f383 8811 	msr	BASEPRI, r3
   1c434:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c438:	8b04      	ldrh	r4, [r0, #24]
   1c43a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1c43e:	2c02      	cmp	r4, #2
   1c440:	d00a      	beq.n	1c458 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1c442:	2c01      	cmp	r4, #1
   1c444:	bf0c      	ite	eq
   1c446:	f06f 0004 	mvneq.w	r0, #4
   1c44a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1c44e:	f382 8811 	msr	BASEPRI, r2
   1c452:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1c456:	e008      	b.n	1c46a <onoff_release+0x44>
	mgr->refs -= 1U;
   1c458:	8b43      	ldrh	r3, [r0, #26]
   1c45a:	3b01      	subs	r3, #1
   1c45c:	b29b      	uxth	r3, r3
   1c45e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1c460:	b923      	cbnz	r3, 1c46c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1c462:	4621      	mov	r1, r4
   1c464:	f7e6 fac0 	bl	29e8 <process_event>
	int rv = state;
   1c468:	4620      	mov	r0, r4
}
   1c46a:	bd10      	pop	{r4, pc}
	int rv = state;
   1c46c:	4620      	mov	r0, r4
   1c46e:	e7ee      	b.n	1c44e <onoff_release+0x28>

0001c470 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c470:	4604      	mov	r4, r0
   1c472:	b508      	push	{r3, lr}
   1c474:	4608      	mov	r0, r1
   1c476:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c478:	461a      	mov	r2, r3
   1c47a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c47c:	f7ff fbaa 	bl	1bbd4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c480:	f7e8 fc60 	bl	4d44 <z_impl_k_thread_abort>

0001c484 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c484:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c486:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1c48e:	bf2c      	ite	cs
   1c490:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1c494:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1c498:	4770      	bx	lr

0001c49a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1c49a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1c49e:	6880      	ldr	r0, [r0, #8]
   1c4a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1c4a4:	bf2c      	ite	cs
   1c4a6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1c4aa:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1c4ae:	4770      	bx	lr

0001c4b0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1c4b0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c4b2:	2201      	movs	r2, #1
   1c4b4:	f7ff ffe6 	bl	1c484 <chunk_field>
}
   1c4b8:	40d0      	lsrs	r0, r2
   1c4ba:	bd08      	pop	{r3, pc}

0001c4bc <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c4bc:	6883      	ldr	r3, [r0, #8]
   1c4be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1c4c2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c4c6:	d308      	bcc.n	1c4da <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c4c8:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1c4ca:	b11a      	cbz	r2, 1c4d4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c4cc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c4d0:	604b      	str	r3, [r1, #4]
   1c4d2:	4770      	bx	lr
   1c4d4:	f023 0301 	bic.w	r3, r3, #1
   1c4d8:	e7fa      	b.n	1c4d0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c4da:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1c4dc:	b11a      	cbz	r2, 1c4e6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c4de:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c4e2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1c4e4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c4e6:	f023 0301 	bic.w	r3, r3, #1
   1c4ea:	e7fa      	b.n	1c4e2 <set_chunk_used+0x26>

0001c4ec <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c4ec:	0053      	lsls	r3, r2, #1
   1c4ee:	2201      	movs	r2, #1
   1c4f0:	f7ff bfd3 	b.w	1c49a <chunk_set>

0001c4f4 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1c4f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c4f8:	bf2c      	ite	cs
   1c4fa:	2008      	movcs	r0, #8
   1c4fc:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1c4fe:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c500:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1c502:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   1c506:	fab0 f080 	clz	r0, r0
}
   1c50a:	f1c0 001f 	rsb	r0, r0, #31
   1c50e:	4770      	bx	lr

0001c510 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c514:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1c516:	2203      	movs	r2, #3
   1c518:	460e      	mov	r6, r1
   1c51a:	4604      	mov	r4, r0
   1c51c:	f7ff ffb2 	bl	1c484 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1c520:	4286      	cmp	r6, r0
   1c522:	4605      	mov	r5, r0
   1c524:	f107 0804 	add.w	r8, r7, #4
   1c528:	d10b      	bne.n	1c542 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   1c52a:	2301      	movs	r3, #1
   1c52c:	fa03 f707 	lsl.w	r7, r3, r7
   1c530:	68e3      	ldr	r3, [r4, #12]
   1c532:	ea23 0307 	bic.w	r3, r3, r7
   1c536:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1c538:	2300      	movs	r3, #0
   1c53a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1c53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1c542:	4631      	mov	r1, r6
   1c544:	2202      	movs	r2, #2
   1c546:	4620      	mov	r0, r4
   1c548:	f7ff ff9c 	bl	1c484 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1c54c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1c54e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1c550:	4601      	mov	r1, r0
		b->next = second;
   1c552:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1c556:	4620      	mov	r0, r4
   1c558:	2203      	movs	r2, #3
   1c55a:	f7ff ff9e 	bl	1c49a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c55e:	4633      	mov	r3, r6
   1c560:	4629      	mov	r1, r5
   1c562:	4620      	mov	r0, r4
   1c564:	2202      	movs	r2, #2
}
   1c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c56a:	f7ff bf96 	b.w	1c49a <chunk_set>

0001c56e <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   1c56e:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   1c570:	6886      	ldr	r6, [r0, #8]
   1c572:	460d      	mov	r5, r1
   1c574:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c576:	f7ff ff9b 	bl	1c4b0 <chunk_size>
   1c57a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1c57e:	4601      	mov	r1, r0
   1c580:	d301      	bcc.n	1c586 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1c582:	2801      	cmp	r0, #1
   1c584:	d009      	beq.n	1c59a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c586:	4630      	mov	r0, r6
   1c588:	f7ff ffb4 	bl	1c4f4 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1c58c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c58e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c590:	4620      	mov	r0, r4
	}
}
   1c592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1c596:	f7ff bfbb 	b.w	1c510 <free_list_remove_bidx>
}
   1c59a:	bd70      	pop	{r4, r5, r6, pc}

0001c59c <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c5a0:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   1c5a2:	6880      	ldr	r0, [r0, #8]
{
   1c5a4:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1c5a6:	f7ff ffa5 	bl	1c4f4 <bucket_idx.isra.0>
   1c5aa:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1c5ae:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1c5b0:	f8da 9010 	ldr.w	r9, [sl, #16]
   1c5b4:	f1b9 0f00 	cmp.w	r9, #0
   1c5b8:	d01b      	beq.n	1c5f2 <alloc_chunk+0x56>
   1c5ba:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1c5bc:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1c5c0:	4628      	mov	r0, r5
   1c5c2:	4621      	mov	r1, r4
   1c5c4:	f7ff ff74 	bl	1c4b0 <chunk_size>
   1c5c8:	4540      	cmp	r0, r8
   1c5ca:	d307      	bcc.n	1c5dc <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   1c5cc:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1c5ce:	4621      	mov	r1, r4
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	f7ff ff9d 	bl	1c510 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c5d6:	4620      	mov	r0, r4
   1c5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1c5dc:	2203      	movs	r2, #3
   1c5de:	4621      	mov	r1, r4
   1c5e0:	4628      	mov	r0, r5
   1c5e2:	f7ff ff4f 	bl	1c484 <chunk_field>
		} while (--i && b->next != first);
   1c5e6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1c5e8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1c5ec:	d001      	beq.n	1c5f2 <alloc_chunk+0x56>
   1c5ee:	4581      	cmp	r9, r0
   1c5f0:	d1e4      	bne.n	1c5bc <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1c5f2:	68e9      	ldr	r1, [r5, #12]
   1c5f4:	3601      	adds	r6, #1
   1c5f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c5fa:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1c5fc:	400c      	ands	r4, r1
   1c5fe:	d0ea      	beq.n	1c5d6 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   1c600:	fa94 f2a4 	rbit	r2, r4
   1c604:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c608:	1d13      	adds	r3, r2, #4
   1c60a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1c60e:	e7de      	b.n	1c5ce <alloc_chunk+0x32>

0001c610 <split_chunks>:
{
   1c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c614:	4614      	mov	r4, r2
   1c616:	4605      	mov	r5, r0
   1c618:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1c61a:	f7ff ff49 	bl	1c4b0 <chunk_size>
	chunksz_t lsz = rc - lc;
   1c61e:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1c622:	1b37      	subs	r7, r6, r4
   1c624:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1c626:	4642      	mov	r2, r8
   1c628:	4631      	mov	r1, r6
   1c62a:	4628      	mov	r0, r5
   1c62c:	f7ff ff5e 	bl	1c4ec <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1c630:	463a      	mov	r2, r7
   1c632:	4621      	mov	r1, r4
   1c634:	4628      	mov	r0, r5
   1c636:	f7ff ff59 	bl	1c4ec <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c63a:	4643      	mov	r3, r8
   1c63c:	2200      	movs	r2, #0
   1c63e:	4621      	mov	r1, r4
   1c640:	4628      	mov	r0, r5
   1c642:	f7ff ff2a 	bl	1c49a <chunk_set>
	return c + chunk_size(h, c);
   1c646:	4621      	mov	r1, r4
   1c648:	4628      	mov	r0, r5
   1c64a:	f7ff ff31 	bl	1c4b0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c64e:	463b      	mov	r3, r7
   1c650:	1821      	adds	r1, r4, r0
   1c652:	2200      	movs	r2, #0
   1c654:	4628      	mov	r0, r5
}
   1c656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c65a:	f7ff bf1e 	b.w	1c49a <chunk_set>

0001c65e <merge_chunks>:
{
   1c65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c662:	4616      	mov	r6, r2
   1c664:	4604      	mov	r4, r0
   1c666:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c668:	f7ff ff22 	bl	1c4b0 <chunk_size>
   1c66c:	4631      	mov	r1, r6
   1c66e:	4605      	mov	r5, r0
   1c670:	4620      	mov	r0, r4
   1c672:	f7ff ff1d 	bl	1c4b0 <chunk_size>
   1c676:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1c678:	462a      	mov	r2, r5
   1c67a:	4639      	mov	r1, r7
   1c67c:	4620      	mov	r0, r4
   1c67e:	f7ff ff35 	bl	1c4ec <set_chunk_size>
	return c + chunk_size(h, c);
   1c682:	4631      	mov	r1, r6
   1c684:	4620      	mov	r0, r4
   1c686:	f7ff ff13 	bl	1c4b0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c68a:	462b      	mov	r3, r5
   1c68c:	1831      	adds	r1, r6, r0
   1c68e:	2200      	movs	r2, #0
   1c690:	4620      	mov	r0, r4
}
   1c692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c696:	f7ff bf00 	b.w	1c49a <chunk_set>

0001c69a <free_list_add>:
{
   1c69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   1c69e:	6886      	ldr	r6, [r0, #8]
   1c6a0:	460d      	mov	r5, r1
   1c6a2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c6a4:	f7ff ff04 	bl	1c4b0 <chunk_size>
   1c6a8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1c6ac:	4601      	mov	r1, r0
   1c6ae:	d301      	bcc.n	1c6b4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1c6b0:	2801      	cmp	r0, #1
   1c6b2:	d033      	beq.n	1c71c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c6b4:	4630      	mov	r0, r6
   1c6b6:	f7ff ff1d 	bl	1c4f4 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1c6ba:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1c6be:	6916      	ldr	r6, [r2, #16]
   1c6c0:	b99e      	cbnz	r6, 1c6ea <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1c6c2:	2301      	movs	r3, #1
   1c6c4:	fa03 f000 	lsl.w	r0, r3, r0
   1c6c8:	68e3      	ldr	r3, [r4, #12]
   1c6ca:	4303      	orrs	r3, r0
   1c6cc:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1c6ce:	4629      	mov	r1, r5
		b->next = c;
   1c6d0:	6115      	str	r5, [r2, #16]
   1c6d2:	462b      	mov	r3, r5
   1c6d4:	2202      	movs	r2, #2
   1c6d6:	4620      	mov	r0, r4
   1c6d8:	f7ff fedf 	bl	1c49a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c6dc:	2203      	movs	r2, #3
   1c6de:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1c6e0:	4620      	mov	r0, r4
}
   1c6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c6e6:	f7ff bed8 	b.w	1c49a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1c6ea:	2202      	movs	r2, #2
   1c6ec:	4631      	mov	r1, r6
   1c6ee:	4620      	mov	r0, r4
   1c6f0:	f7ff fec8 	bl	1c484 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1c6f4:	4629      	mov	r1, r5
   1c6f6:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1c6f8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1c6fa:	4620      	mov	r0, r4
   1c6fc:	f7ff fecd 	bl	1c49a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c700:	2203      	movs	r2, #3
   1c702:	4633      	mov	r3, r6
   1c704:	4629      	mov	r1, r5
   1c706:	4620      	mov	r0, r4
   1c708:	f7ff fec7 	bl	1c49a <chunk_set>
   1c70c:	4639      	mov	r1, r7
   1c70e:	462b      	mov	r3, r5
   1c710:	4620      	mov	r0, r4
   1c712:	f7ff fec2 	bl	1c49a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c716:	2202      	movs	r2, #2
   1c718:	4631      	mov	r1, r6
   1c71a:	e7e1      	b.n	1c6e0 <free_list_add+0x46>
   1c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c720 <free_chunk>:
{
   1c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c722:	460c      	mov	r4, r1
   1c724:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1c726:	f7ff fec3 	bl	1c4b0 <chunk_size>
   1c72a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c72c:	2201      	movs	r2, #1
   1c72e:	4631      	mov	r1, r6
   1c730:	4628      	mov	r0, r5
   1c732:	f7ff fea7 	bl	1c484 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1c736:	07c3      	lsls	r3, r0, #31
   1c738:	d40c      	bmi.n	1c754 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1c73a:	4631      	mov	r1, r6
   1c73c:	4628      	mov	r0, r5
   1c73e:	f7ff ff16 	bl	1c56e <free_list_remove>
	return c + chunk_size(h, c);
   1c742:	4621      	mov	r1, r4
   1c744:	4628      	mov	r0, r5
   1c746:	f7ff feb3 	bl	1c4b0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c74a:	4621      	mov	r1, r4
   1c74c:	1822      	adds	r2, r4, r0
   1c74e:	4628      	mov	r0, r5
   1c750:	f7ff ff85 	bl	1c65e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c754:	2200      	movs	r2, #0
   1c756:	4621      	mov	r1, r4
   1c758:	4628      	mov	r0, r5
   1c75a:	f7ff fe93 	bl	1c484 <chunk_field>
   1c75e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c760:	2201      	movs	r2, #1
   1c762:	4639      	mov	r1, r7
   1c764:	4628      	mov	r0, r5
   1c766:	f7ff fe8d 	bl	1c484 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1c76a:	ea10 0602 	ands.w	r6, r0, r2
   1c76e:	d113      	bne.n	1c798 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1c770:	4639      	mov	r1, r7
   1c772:	4628      	mov	r0, r5
   1c774:	f7ff fefb 	bl	1c56e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c778:	4621      	mov	r1, r4
   1c77a:	4632      	mov	r2, r6
   1c77c:	4628      	mov	r0, r5
   1c77e:	f7ff fe81 	bl	1c484 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1c782:	4622      	mov	r2, r4
   1c784:	1a21      	subs	r1, r4, r0
   1c786:	4628      	mov	r0, r5
   1c788:	f7ff ff69 	bl	1c65e <merge_chunks>
   1c78c:	4621      	mov	r1, r4
   1c78e:	4632      	mov	r2, r6
   1c790:	4628      	mov	r0, r5
   1c792:	f7ff fe77 	bl	1c484 <chunk_field>
   1c796:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1c798:	4621      	mov	r1, r4
   1c79a:	4628      	mov	r0, r5
}
   1c79c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1c7a0:	f7ff bf7b 	b.w	1c69a <free_list_add>

0001c7a4 <sys_heap_free>:
{
   1c7a4:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1c7a6:	b191      	cbz	r1, 1c7ce <sys_heap_free+0x2a>
   1c7a8:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1c7aa:	6883      	ldr	r3, [r0, #8]
   1c7ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c7b0:	bf2c      	ite	cs
   1c7b2:	2408      	movcs	r4, #8
   1c7b4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c7b6:	1b0c      	subs	r4, r1, r4
   1c7b8:	1a24      	subs	r4, r4, r0
   1c7ba:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1c7bc:	4621      	mov	r1, r4
   1c7be:	2200      	movs	r2, #0
   1c7c0:	f7ff fe7c 	bl	1c4bc <set_chunk_used>
	free_chunk(h, c);
   1c7c4:	4621      	mov	r1, r4
}
   1c7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1c7ca:	f7ff bfa9 	b.w	1c720 <free_chunk>
}
   1c7ce:	bd10      	pop	{r4, pc}

0001c7d0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c7d0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c7d2:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1c7d4:	b909      	cbnz	r1, 1c7da <sys_heap_alloc+0xa>
		return NULL;
   1c7d6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1c7d8:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1c7da:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c7dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c7e0:	d9f9      	bls.n	1c7d6 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1c7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c7e6:	bf2c      	ite	cs
   1c7e8:	2208      	movcs	r2, #8
   1c7ea:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c7ec:	1dcc      	adds	r4, r1, #7
   1c7ee:	4414      	add	r4, r2
   1c7f0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c7f2:	4621      	mov	r1, r4
   1c7f4:	4630      	mov	r0, r6
   1c7f6:	f7ff fed1 	bl	1c59c <alloc_chunk>
	if (c == 0U) {
   1c7fa:	4605      	mov	r5, r0
   1c7fc:	2800      	cmp	r0, #0
   1c7fe:	d0ea      	beq.n	1c7d6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c800:	4601      	mov	r1, r0
   1c802:	4630      	mov	r0, r6
   1c804:	f7ff fe54 	bl	1c4b0 <chunk_size>
   1c808:	42a0      	cmp	r0, r4
   1c80a:	d909      	bls.n	1c820 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1c80c:	442c      	add	r4, r5
   1c80e:	4629      	mov	r1, r5
   1c810:	4630      	mov	r0, r6
   1c812:	4622      	mov	r2, r4
   1c814:	f7ff fefc 	bl	1c610 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c818:	4621      	mov	r1, r4
   1c81a:	4630      	mov	r0, r6
   1c81c:	f7ff ff3d 	bl	1c69a <free_list_add>
	set_chunk_used(h, c, true);
   1c820:	4629      	mov	r1, r5
   1c822:	4630      	mov	r0, r6
   1c824:	2201      	movs	r2, #1
   1c826:	f7ff fe49 	bl	1c4bc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1c82a:	68b3      	ldr	r3, [r6, #8]
   1c82c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c830:	bf2c      	ite	cs
   1c832:	2308      	movcs	r3, #8
   1c834:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c836:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1c83a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1c83c:	e7cc      	b.n	1c7d8 <sys_heap_alloc+0x8>

0001c83e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1c83e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1c842:	6806      	ldr	r6, [r0, #0]
{
   1c844:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1c846:	424a      	negs	r2, r1
   1c848:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1c84c:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   1c850:	68b5      	ldr	r5, [r6, #8]
{
   1c852:	460b      	mov	r3, r1
	if (align != rew) {
   1c854:	d00f      	beq.n	1c876 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   1c856:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1c85a:	bf34      	ite	cc
   1c85c:	2104      	movcc	r1, #4
   1c85e:	2108      	movcs	r1, #8
   1c860:	42b9      	cmp	r1, r7
   1c862:	460a      	mov	r2, r1
   1c864:	46b9      	mov	r9, r7
   1c866:	bf28      	it	cs
   1c868:	463a      	movcs	r2, r7
		align -= rew;
   1c86a:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1c86c:	b994      	cbnz	r4, 1c894 <sys_heap_aligned_alloc+0x56>
		return NULL;
   1c86e:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1c870:	4628      	mov	r0, r5
   1c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c876:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1c87a:	bf34      	ite	cc
   1c87c:	2204      	movcc	r2, #4
   1c87e:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1c880:	4291      	cmp	r1, r2
   1c882:	d804      	bhi.n	1c88e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1c884:	4621      	mov	r1, r4
}
   1c886:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1c88a:	f7ff bfa1 	b.w	1c7d0 <sys_heap_alloc>
		rew = 0;
   1c88e:	f04f 0900 	mov.w	r9, #0
   1c892:	e7eb      	b.n	1c86c <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c894:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1c898:	d9e9      	bls.n	1c86e <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1c89a:	1de1      	adds	r1, r4, #7
   1c89c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1c8a0:	4439      	add	r1, r7
   1c8a2:	bf2c      	ite	cs
   1c8a4:	2308      	movcs	r3, #8
   1c8a6:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c8a8:	1a89      	subs	r1, r1, r2
   1c8aa:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1c8ac:	08c9      	lsrs	r1, r1, #3
   1c8ae:	4630      	mov	r0, r6
   1c8b0:	f7ff fe74 	bl	1c59c <alloc_chunk>
	if (c0 == 0) {
   1c8b4:	4680      	mov	r8, r0
   1c8b6:	2800      	cmp	r0, #0
   1c8b8:	d0d9      	beq.n	1c86e <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1c8ba:	68b3      	ldr	r3, [r6, #8]
   1c8bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c8c0:	bf2c      	ite	cs
   1c8c2:	2308      	movcs	r3, #8
   1c8c4:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1c8c6:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1c8ca:	441d      	add	r5, r3
   1c8cc:	1e7a      	subs	r2, r7, #1
   1c8ce:	4435      	add	r5, r6
   1c8d0:	427f      	negs	r7, r7
   1c8d2:	4415      	add	r5, r2
   1c8d4:	403d      	ands	r5, r7
   1c8d6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c8da:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c8dc:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c8de:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c8e0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c8e2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1c8e6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1c8e8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c8ec:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1c8f0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1c8f4:	d208      	bcs.n	1c908 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1c8f6:	4601      	mov	r1, r0
   1c8f8:	463a      	mov	r2, r7
   1c8fa:	4630      	mov	r0, r6
   1c8fc:	f7ff fe88 	bl	1c610 <split_chunks>
		free_list_add(h, c0);
   1c900:	4641      	mov	r1, r8
   1c902:	4630      	mov	r0, r6
   1c904:	f7ff fec9 	bl	1c69a <free_list_add>
	return c + chunk_size(h, c);
   1c908:	4639      	mov	r1, r7
   1c90a:	4630      	mov	r0, r6
   1c90c:	f7ff fdd0 	bl	1c4b0 <chunk_size>
   1c910:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1c912:	4284      	cmp	r4, r0
   1c914:	d208      	bcs.n	1c928 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1c916:	4639      	mov	r1, r7
   1c918:	4630      	mov	r0, r6
   1c91a:	4622      	mov	r2, r4
   1c91c:	f7ff fe78 	bl	1c610 <split_chunks>
		free_list_add(h, c_end);
   1c920:	4621      	mov	r1, r4
   1c922:	4630      	mov	r0, r6
   1c924:	f7ff feb9 	bl	1c69a <free_list_add>
	set_chunk_used(h, c, true);
   1c928:	2201      	movs	r2, #1
   1c92a:	4639      	mov	r1, r7
   1c92c:	4630      	mov	r0, r6
   1c92e:	f7ff fdc5 	bl	1c4bc <set_chunk_used>
	return mem;
   1c932:	e79d      	b.n	1c870 <sys_heap_aligned_alloc+0x32>

0001c934 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1c934:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c93a:	bf2c      	ite	cs
   1c93c:	2408      	movcs	r4, #8
   1c93e:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c940:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c942:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c944:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c946:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c94a:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c94e:	1ba4      	subs	r4, r4, r6
   1c950:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1c952:	2300      	movs	r3, #0
	heap->heap = h;
   1c954:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c956:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   1c958:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   1c95a:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c95c:	4620      	mov	r0, r4
   1c95e:	f7ff fdc9 	bl	1c4f4 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c962:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c964:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c966:	1c41      	adds	r1, r0, #1
   1c968:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c96a:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   1c96e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1c970:	428b      	cmp	r3, r1
   1c972:	db2e      	blt.n	1c9d2 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1c974:	462a      	mov	r2, r5
   1c976:	4630      	mov	r0, r6
   1c978:	2100      	movs	r1, #0
   1c97a:	f7ff fdb7 	bl	1c4ec <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c97e:	2300      	movs	r3, #0
   1c980:	461a      	mov	r2, r3
   1c982:	4619      	mov	r1, r3
   1c984:	4630      	mov	r0, r6
   1c986:	f7ff fd88 	bl	1c49a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c98a:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   1c98c:	4619      	mov	r1, r3
   1c98e:	4630      	mov	r0, r6
   1c990:	2201      	movs	r2, #1
   1c992:	f7ff fd93 	bl	1c4bc <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c996:	463a      	mov	r2, r7
   1c998:	4629      	mov	r1, r5
   1c99a:	f7ff fda7 	bl	1c4ec <set_chunk_size>
   1c99e:	462b      	mov	r3, r5
   1c9a0:	2200      	movs	r2, #0
   1c9a2:	4629      	mov	r1, r5
   1c9a4:	4630      	mov	r0, r6
   1c9a6:	f7ff fd78 	bl	1c49a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1c9aa:	4621      	mov	r1, r4
   1c9ac:	4630      	mov	r0, r6
   1c9ae:	f7ff fd9d 	bl	1c4ec <set_chunk_size>
   1c9b2:	463b      	mov	r3, r7
   1c9b4:	4621      	mov	r1, r4
   1c9b6:	4630      	mov	r0, r6
   1c9b8:	2200      	movs	r2, #0
   1c9ba:	f7ff fd6e 	bl	1c49a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1c9be:	4621      	mov	r1, r4
   1c9c0:	4630      	mov	r0, r6
   1c9c2:	2201      	movs	r2, #1
   1c9c4:	f7ff fd7a 	bl	1c4bc <set_chunk_used>

	free_list_add(h, chunk0_size);
   1c9c8:	4629      	mov	r1, r5
}
   1c9ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1c9ce:	f7ff be64 	b.w	1c69a <free_list_add>
		h->buckets[i].next = 0;
   1c9d2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c9d6:	3301      	adds	r3, #1
   1c9d8:	e7ca      	b.n	1c970 <sys_heap_init+0x3c>

0001c9da <encode_uint>:
{
   1c9da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9de:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1c9e0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1c9e2:	2b6f      	cmp	r3, #111	; 0x6f
{
   1c9e4:	4680      	mov	r8, r0
   1c9e6:	460f      	mov	r7, r1
   1c9e8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1c9ea:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1c9ee:	d029      	beq.n	1ca44 <encode_uint+0x6a>
   1c9f0:	d824      	bhi.n	1ca3c <encode_uint+0x62>
		return 16;
   1c9f2:	2b58      	cmp	r3, #88	; 0x58
   1c9f4:	bf14      	ite	ne
   1c9f6:	260a      	movne	r6, #10
   1c9f8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1c9fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1c9fe:	4632      	mov	r2, r6
   1ca00:	2300      	movs	r3, #0
   1ca02:	4640      	mov	r0, r8
   1ca04:	4639      	mov	r1, r7
   1ca06:	f7e3 fb7b 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca0a:	2a09      	cmp	r2, #9
   1ca0c:	b2d4      	uxtb	r4, r2
   1ca0e:	d81e      	bhi.n	1ca4e <encode_uint+0x74>
   1ca10:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ca12:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca14:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ca16:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca1a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ca1e:	d301      	bcc.n	1ca24 <encode_uint+0x4a>
   1ca20:	45d1      	cmp	r9, sl
   1ca22:	d811      	bhi.n	1ca48 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ca24:	782b      	ldrb	r3, [r5, #0]
   1ca26:	069b      	lsls	r3, r3, #26
   1ca28:	d505      	bpl.n	1ca36 <encode_uint+0x5c>
		if (radix == 8) {
   1ca2a:	2e08      	cmp	r6, #8
   1ca2c:	d115      	bne.n	1ca5a <encode_uint+0x80>
			conv->altform_0 = true;
   1ca2e:	78ab      	ldrb	r3, [r5, #2]
   1ca30:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ca34:	70ab      	strb	r3, [r5, #2]
}
   1ca36:	4648      	mov	r0, r9
   1ca38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ca3c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ca40:	2b70      	cmp	r3, #112	; 0x70
   1ca42:	e7d7      	b.n	1c9f4 <encode_uint+0x1a>
	switch (specifier) {
   1ca44:	2608      	movs	r6, #8
   1ca46:	e7d8      	b.n	1c9fa <encode_uint+0x20>
		value /= radix;
   1ca48:	4680      	mov	r8, r0
   1ca4a:	460f      	mov	r7, r1
   1ca4c:	e7d7      	b.n	1c9fe <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca4e:	f1bb 0f19 	cmp.w	fp, #25
   1ca52:	bf94      	ite	ls
   1ca54:	3437      	addls	r4, #55	; 0x37
   1ca56:	3457      	addhi	r4, #87	; 0x57
   1ca58:	e7db      	b.n	1ca12 <encode_uint+0x38>
		} else if (radix == 16) {
   1ca5a:	2e10      	cmp	r6, #16
   1ca5c:	d1eb      	bne.n	1ca36 <encode_uint+0x5c>
			conv->altform_0c = true;
   1ca5e:	78ab      	ldrb	r3, [r5, #2]
   1ca60:	f043 0310 	orr.w	r3, r3, #16
   1ca64:	e7e6      	b.n	1ca34 <encode_uint+0x5a>

0001ca66 <outs>:
{
   1ca66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca6a:	4607      	mov	r7, r0
   1ca6c:	4688      	mov	r8, r1
   1ca6e:	4615      	mov	r5, r2
   1ca70:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ca72:	4614      	mov	r4, r2
   1ca74:	42b4      	cmp	r4, r6
   1ca76:	eba4 0005 	sub.w	r0, r4, r5
   1ca7a:	d302      	bcc.n	1ca82 <outs+0x1c>
   1ca7c:	b93e      	cbnz	r6, 1ca8e <outs+0x28>
   1ca7e:	7823      	ldrb	r3, [r4, #0]
   1ca80:	b12b      	cbz	r3, 1ca8e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1ca82:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ca86:	4641      	mov	r1, r8
   1ca88:	47b8      	blx	r7
		if (rc < 0) {
   1ca8a:	2800      	cmp	r0, #0
   1ca8c:	daf2      	bge.n	1ca74 <outs+0xe>
}
   1ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca92 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ca92:	4770      	bx	lr

0001ca94 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1ca94:	2300      	movs	r3, #0
	list->head = NULL;
   1ca96:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ca9a:	4770      	bx	lr

0001ca9c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1ca9c:	6803      	ldr	r3, [r0, #0]
   1ca9e:	b923      	cbnz	r3, 1caaa <log_list_add_tail+0xe>
		list->head = msg;
   1caa0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1caa2:	2300      	movs	r3, #0
	list->tail = msg;
   1caa4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1caa6:	600b      	str	r3, [r1, #0]
}
   1caa8:	4770      	bx	lr
		list->tail->next = msg;
   1caaa:	6843      	ldr	r3, [r0, #4]
   1caac:	6019      	str	r1, [r3, #0]
   1caae:	e7f8      	b.n	1caa2 <log_list_add_tail+0x6>

0001cab0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1cab0:	6800      	ldr	r0, [r0, #0]
   1cab2:	4770      	bx	lr

0001cab4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1cab4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1cab6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1cab8:	b108      	cbz	r0, 1cabe <log_list_head_get+0xa>
		list->head = list->head->next;
   1caba:	6802      	ldr	r2, [r0, #0]
   1cabc:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1cabe:	4770      	bx	lr

0001cac0 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1cac0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cac2:	f7e6 ff09 	bl	38d8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1cac6:	b118      	cbz	r0, 1cad0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1cac8:	2301      	movs	r3, #1
   1caca:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cacc:	2300      	movs	r3, #0
   1cace:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1cad0:	bd08      	pop	{r3, pc}

0001cad2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1cad2:	f7e7 bd0f 	b.w	44f4 <sys_clock_cycle_get_32>

0001cad6 <dummy_timestamp>:
   1cad6:	2000      	movs	r0, #0
   1cad8:	4770      	bx	lr

0001cada <z_log_get_s_mask>:
{
   1cada:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cadc:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1cade:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1cae0:	4603      	mov	r3, r0
	bool arm = false;
   1cae2:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1cae4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1cae6:	f815 4b01 	ldrb.w	r4, [r5], #1
   1caea:	b10c      	cbz	r4, 1caf0 <z_log_get_s_mask+0x16>
   1caec:	428b      	cmp	r3, r1
   1caee:	d300      	bcc.n	1caf2 <z_log_get_s_mask+0x18>
}
   1caf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1caf2:	2c25      	cmp	r4, #37	; 0x25
   1caf4:	d102      	bne.n	1cafc <z_log_get_s_mask+0x22>
			arm = !arm;
   1caf6:	f082 0201 	eor.w	r2, r2, #1
   1cafa:	e7f4      	b.n	1cae6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1cafc:	2a00      	cmp	r2, #0
   1cafe:	d0f2      	beq.n	1cae6 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1cb00:	f044 0620 	orr.w	r6, r4, #32
   1cb04:	3e61      	subs	r6, #97	; 0x61
   1cb06:	2e19      	cmp	r6, #25
   1cb08:	d8ed      	bhi.n	1cae6 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1cb0a:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1cb0c:	bf04      	itt	eq
   1cb0e:	fa07 f203 	lsleq.w	r2, r7, r3
   1cb12:	4310      	orreq	r0, r2
			arg++;
   1cb14:	3301      	adds	r3, #1
			arm = false;
   1cb16:	2200      	movs	r2, #0
   1cb18:	e7e5      	b.n	1cae6 <z_log_get_s_mask+0xc>

0001cb1a <log_0>:
{
   1cb1a:	b538      	push	{r3, r4, r5, lr}
   1cb1c:	4605      	mov	r5, r0
   1cb1e:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1cb20:	f7ff ffce 	bl	1cac0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb24:	b128      	cbz	r0, 1cb32 <log_0+0x18>
		msg->str = str;
   1cb26:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1cb28:	4621      	mov	r1, r4
}
   1cb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1cb2e:	f7e6 be11 	b.w	3754 <msg_finalize>
}
   1cb32:	bd38      	pop	{r3, r4, r5, pc}

0001cb34 <log_1>:
{
   1cb34:	b570      	push	{r4, r5, r6, lr}
   1cb36:	4606      	mov	r6, r0
   1cb38:	460d      	mov	r5, r1
   1cb3a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb3c:	f7ff ffc0 	bl	1cac0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb40:	b158      	cbz	r0, 1cb5a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1cb42:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1cb44:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1cb46:	2101      	movs	r1, #1
   1cb48:	f361 1207 	bfi	r2, r1, #4, #4
   1cb4c:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1cb4e:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1cb50:	4621      	mov	r1, r4
}
   1cb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1cb56:	f7e6 bdfd 	b.w	3754 <msg_finalize>
}
   1cb5a:	bd70      	pop	{r4, r5, r6, pc}

0001cb5c <log_2>:
{
   1cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb60:	4680      	mov	r8, r0
   1cb62:	460f      	mov	r7, r1
   1cb64:	4616      	mov	r6, r2
   1cb66:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb68:	f7ff ffaa 	bl	1cac0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb6c:	b168      	cbz	r0, 1cb8a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1cb6e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1cb70:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1cb74:	2202      	movs	r2, #2
   1cb76:	f362 1307 	bfi	r3, r2, #4, #4
   1cb7a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cb7c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1cb80:	4629      	mov	r1, r5
}
   1cb82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1cb86:	f7e6 bde5 	b.w	3754 <msg_finalize>
}
   1cb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb8e <log_3>:
{
   1cb8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb92:	4680      	mov	r8, r0
   1cb94:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1cb98:	460f      	mov	r7, r1
   1cb9a:	4616      	mov	r6, r2
   1cb9c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb9e:	f7ff ff8f 	bl	1cac0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cba2:	b170      	cbz	r0, 1cbc2 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1cba4:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1cba6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1cbaa:	2203      	movs	r2, #3
   1cbac:	f362 1307 	bfi	r3, r2, #4, #4
   1cbb0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cbb2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1cbb6:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1cbb8:	4649      	mov	r1, r9
}
   1cbba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1cbbe:	f7e6 bdc9 	b.w	3754 <msg_finalize>
}
   1cbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cbc6 <log_n>:
{
   1cbc6:	b510      	push	{r4, lr}
   1cbc8:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1cbca:	f000 f8b9 	bl	1cd40 <log_msg_create_n>
		if (msg == NULL) {
   1cbce:	b120      	cbz	r0, 1cbda <log_n+0x14>
		msg_finalize(msg, src_level);
   1cbd0:	4621      	mov	r1, r4
}
   1cbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1cbd6:	f7e6 bdbd 	b.w	3754 <msg_finalize>
}
   1cbda:	bd10      	pop	{r4, pc}

0001cbdc <z_log_printk>:
{
   1cbdc:	b500      	push	{lr}
   1cbde:	b0a3      	sub	sp, #140	; 0x8c
   1cbe0:	4602      	mov	r2, r0
   1cbe2:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   1cbe4:	a801      	add	r0, sp, #4
   1cbe6:	2181      	movs	r1, #129	; 0x81
   1cbe8:	f7e5 feea 	bl	29c0 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1cbec:	2881      	cmp	r0, #129	; 0x81
   1cbee:	4602      	mov	r2, r0
   1cbf0:	a901      	add	r1, sp, #4
   1cbf2:	bf28      	it	cs
   1cbf4:	2281      	movcs	r2, #129	; 0x81
   1cbf6:	2000      	movs	r0, #0
   1cbf8:	f000 f8fe 	bl	1cdf8 <log_msg_hexdump_create>
			if (msg == NULL) {
   1cbfc:	b118      	cbz	r0, 1cc06 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   1cbfe:	f04f 0100 	mov.w	r1, #0
   1cc02:	f7e6 fda7 	bl	3754 <msg_finalize>
}
   1cc06:	b023      	add	sp, #140	; 0x8c
   1cc08:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc0c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1cc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc10:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1cc12:	8903      	ldrh	r3, [r0, #8]
{
   1cc14:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1cc18:	460e      	mov	r6, r1
   1cc1a:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1cc1c:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1cc20:	42a2      	cmp	r2, r4
   1cc22:	d803      	bhi.n	1cc2c <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1cc24:	2300      	movs	r3, #0
   1cc26:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1cc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1cc2c:	680b      	ldr	r3, [r1, #0]
   1cc2e:	4423      	add	r3, r4
   1cc30:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1cc32:	bf84      	itt	hi
   1cc34:	1b13      	subhi	r3, r2, r4
   1cc36:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc38:	2a0c      	cmp	r2, #12
	req_len = *length;
   1cc3a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc3e:	d92a      	bls.n	1cc96 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1cc40:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1cc42:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1cc46:	d82d      	bhi.n	1cca4 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1cc48:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1cc4a:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc4c:	454a      	cmp	r2, r9
   1cc4e:	bf28      	it	cs
   1cc50:	464a      	movcs	r2, r9
   1cc52:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc54:	4420      	add	r0, r4
		if (put_op) {
   1cc56:	b317      	cbz	r7, 1cc9e <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc58:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc5a:	f000 fdd5 	bl	1d808 <memcpy>
		req_len -= cpy_len;
   1cc5e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1cc62:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1cc64:	f1b9 0f00 	cmp.w	r9, #0
   1cc68:	d0de      	beq.n	1cc28 <log_msg_hexdump_data_op+0x1c>
   1cc6a:	f1b8 0f00 	cmp.w	r8, #0
   1cc6e:	d0db      	beq.n	1cc28 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1cc70:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc74:	454d      	cmp	r5, r9
   1cc76:	bf28      	it	cs
   1cc78:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   1cc7a:	1d20      	adds	r0, r4, #4
   1cc7c:	4440      	add	r0, r8
   1cc7e:	462a      	mov	r2, r5
		if (put_op) {
   1cc80:	b1bf      	cbz	r7, 1ccb2 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1cc82:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cc84:	f000 fdc0 	bl	1d808 <memcpy>
		req_len -= cpy_len;
   1cc88:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1cc8c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1cc90:	442e      	add	r6, r5
		offset = 0;
   1cc92:	2400      	movs	r4, #0
   1cc94:	e7e6      	b.n	1cc64 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1cc96:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1cc98:	f04f 0800 	mov.w	r8, #0
   1cc9c:	e7d6      	b.n	1cc4c <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc9e:	4601      	mov	r1, r0
   1cca0:	4630      	mov	r0, r6
   1cca2:	e7da      	b.n	1cc5a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1cca4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1cca6:	2c1b      	cmp	r4, #27
   1cca8:	d9dc      	bls.n	1cc64 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1ccaa:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1ccae:	3c1c      	subs	r4, #28
   1ccb0:	e7f9      	b.n	1cca6 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ccb2:	4601      	mov	r1, r0
   1ccb4:	4630      	mov	r0, r6
   1ccb6:	e7e5      	b.n	1cc84 <log_msg_hexdump_data_op+0x78>

0001ccb8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ccb8:	3004      	adds	r0, #4
   1ccba:	f3bf 8f5b 	dmb	ish
   1ccbe:	e850 3f00 	ldrex	r3, [r0]
   1ccc2:	3301      	adds	r3, #1
   1ccc4:	e840 3200 	strex	r2, r3, [r0]
   1ccc8:	2a00      	cmp	r2, #0
   1ccca:	d1f8      	bne.n	1ccbe <log_msg_get+0x6>
   1cccc:	f3bf 8f5b 	dmb	ish
}
   1ccd0:	4770      	bx	lr

0001ccd2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1ccd2:	7a40      	ldrb	r0, [r0, #9]
}
   1ccd4:	0900      	lsrs	r0, r0, #4
   1ccd6:	4770      	bx	lr

0001ccd8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1ccd8:	7a43      	ldrb	r3, [r0, #9]
   1ccda:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1ccde:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1cce2:	d216      	bcs.n	1cd12 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cce4:	2a03      	cmp	r2, #3
   1cce6:	d803      	bhi.n	1ccf0 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1cce8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ccec:	6940      	ldr	r0, [r0, #20]
   1ccee:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ccf0:	2901      	cmp	r1, #1
   1ccf2:	d803      	bhi.n	1ccfc <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1ccf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ccf8:	6980      	ldr	r0, [r0, #24]
   1ccfa:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1ccfc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ccfe:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1cd00:	2906      	cmp	r1, #6
   1cd02:	d803      	bhi.n	1cd0c <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1cd04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1cd08:	6848      	ldr	r0, [r1, #4]
   1cd0a:	4770      	bx	lr
		cont = cont->next;
   1cd0c:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1cd0e:	3907      	subs	r1, #7
		cont = cont->next;
   1cd10:	e7f6      	b.n	1cd00 <log_msg_arg_get+0x28>
		return 0;
   1cd12:	2000      	movs	r0, #0
}
   1cd14:	4770      	bx	lr

0001cd16 <log_msg_put>:
{
   1cd16:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cd18:	1d02      	adds	r2, r0, #4
   1cd1a:	f3bf 8f5b 	dmb	ish
   1cd1e:	e852 1f00 	ldrex	r1, [r2]
   1cd22:	3901      	subs	r1, #1
   1cd24:	e842 1c00 	strex	ip, r1, [r2]
   1cd28:	f1bc 0f00 	cmp.w	ip, #0
   1cd2c:	d1f7      	bne.n	1cd1e <log_msg_put+0x8>
   1cd2e:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1cd32:	685b      	ldr	r3, [r3, #4]
   1cd34:	b90b      	cbnz	r3, 1cd3a <log_msg_put+0x24>
		msg_free(msg);
   1cd36:	f7e6 bde3 	b.w	3900 <msg_free>
}
   1cd3a:	4770      	bx	lr

0001cd3c <log_msg_str_get>:
}
   1cd3c:	6900      	ldr	r0, [r0, #16]
   1cd3e:	4770      	bx	lr

0001cd40 <log_msg_create_n>:
{
   1cd40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd44:	4680      	mov	r8, r0
   1cd46:	460f      	mov	r7, r1
   1cd48:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cd4a:	f7e6 fdc5 	bl	38d8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1cd4e:	4604      	mov	r4, r0
   1cd50:	b358      	cbz	r0, 1cdaa <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   1cd52:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1cd54:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd58:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1cd5a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cd5c:	f8a0 a008 	strh.w	sl, [r0, #8]
   1cd60:	d90c      	bls.n	1cd7c <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   1cd62:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   1cd64:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   1cd68:	f043 0302 	orr.w	r3, r3, #2
   1cd6c:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd6e:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1cd72:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   1cd76:	f1b9 0f00 	cmp.w	r9, #0
   1cd7a:	dc0e      	bgt.n	1cd9a <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   1cd7c:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1cd7e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1cd82:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd86:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1cd88:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd8a:	d819      	bhi.n	1cdc0 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   1cd8c:	00aa      	lsls	r2, r5, #2
   1cd8e:	4639      	mov	r1, r7
   1cd90:	f104 0014 	add.w	r0, r4, #20
   1cd94:	f000 fd38 	bl	1d808 <memcpy>
	while (nargs != 0U) {
   1cd98:	e007      	b.n	1cdaa <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1cd9a:	f7e6 fd9d 	bl	38d8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1cd9e:	4606      	mov	r6, r0
   1cda0:	b930      	cbnz	r0, 1cdb0 <log_msg_create_n+0x70>
			msg_free(msg);
   1cda2:	4620      	mov	r0, r4
   1cda4:	f7e6 fdac 	bl	3900 <msg_free>
			return NULL;
   1cda8:	4634      	mov	r4, r6
}
   1cdaa:	4620      	mov	r0, r4
   1cdac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1cdb0:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1cdb4:	f1a9 0907 	sub.w	r9, r9, #7
   1cdb8:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   1cdbc:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1cdbe:	e7da      	b.n	1cd76 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdc0:	4639      	mov	r1, r7
   1cdc2:	2208      	movs	r2, #8
   1cdc4:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1cdc8:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdcc:	f000 fd1c 	bl	1d808 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cdd0:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1cdd2:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1cdd4:	2d07      	cmp	r5, #7
   1cdd6:	462e      	mov	r6, r5
   1cdd8:	bf28      	it	cs
   1cdda:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1cddc:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1cde0:	4639      	mov	r1, r7
   1cde2:	f108 0004 	add.w	r0, r8, #4
   1cde6:	464a      	mov	r2, r9
   1cde8:	f000 fd0e 	bl	1d808 <memcpy>
	while (nargs != 0U) {
   1cdec:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1cdee:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   1cdf2:	444f      	add	r7, r9
	while (nargs != 0U) {
   1cdf4:	d1ee      	bne.n	1cdd4 <log_msg_create_n+0x94>
   1cdf6:	e7d8      	b.n	1cdaa <log_msg_create_n+0x6a>

0001cdf8 <log_msg_hexdump_create>:
{
   1cdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1cdfc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1ce00:	4295      	cmp	r5, r2
{
   1ce02:	4680      	mov	r8, r0
   1ce04:	460e      	mov	r6, r1
   1ce06:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1ce08:	bf28      	it	cs
   1ce0a:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1ce0c:	f7e6 fd64 	bl	38d8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1ce10:	4604      	mov	r4, r0
   1ce12:	b388      	cbz	r0, 1ce78 <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ce14:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1ce16:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1ce1a:	2301      	movs	r3, #1
   1ce1c:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ce1e:	00ab      	lsls	r3, r5, #2
   1ce20:	f043 0301 	orr.w	r3, r3, #1
   1ce24:	f002 0202 	and.w	r2, r2, #2
   1ce28:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ce2a:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ce2c:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
   1ce2e:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ce32:	d918      	bls.n	1ce66 <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
   1ce34:	4631      	mov	r1, r6
   1ce36:	2208      	movs	r2, #8
   1ce38:	3018      	adds	r0, #24
   1ce3a:	f000 fce5 	bl	1d808 <memcpy>
		msg->hdr.params.generic.ext = 1;
   1ce3e:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
   1ce40:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
   1ce44:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
   1ce48:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1ce4c:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ce4e:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ce50:	3d08      	subs	r5, #8
	while (length > 0) {
   1ce52:	b18d      	cbz	r5, 1ce78 <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1ce54:	f7e6 fd40 	bl	38d8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1ce58:	4607      	mov	r7, r0
   1ce5a:	b980      	cbnz	r0, 1ce7e <log_msg_hexdump_create+0x86>
			msg_free(msg);
   1ce5c:	4620      	mov	r0, r4
   1ce5e:	f7e6 fd4f 	bl	3900 <msg_free>
			return NULL;
   1ce62:	463c      	mov	r4, r7
   1ce64:	e008      	b.n	1ce78 <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1ce66:	462a      	mov	r2, r5
   1ce68:	4631      	mov	r1, r6
   1ce6a:	4640      	mov	r0, r8
   1ce6c:	f000 fccc 	bl	1d808 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1ce70:	7a23      	ldrb	r3, [r4, #8]
   1ce72:	f36f 0341 	bfc	r3, #1, #1
   1ce76:	7223      	strb	r3, [r4, #8]
}
   1ce78:	4620      	mov	r0, r4
   1ce7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1ce7e:	2d1c      	cmp	r5, #28
   1ce80:	462f      	mov	r7, r5
   1ce82:	bf28      	it	cs
   1ce84:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1ce86:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1ce8a:	4631      	mov	r1, r6
		cont->next = NULL;
   1ce8c:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1ce90:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1ce92:	463a      	mov	r2, r7
   1ce94:	3004      	adds	r0, #4
   1ce96:	f000 fcb7 	bl	1d808 <memcpy>
		data += chunk_length;
   1ce9a:	443e      	add	r6, r7
		length -= chunk_length;
   1ce9c:	1bed      	subs	r5, r5, r7
   1ce9e:	e7d8      	b.n	1ce52 <log_msg_hexdump_create+0x5a>

0001cea0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1cea0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1cea2:	2400      	movs	r4, #0
   1cea4:	9400      	str	r4, [sp, #0]
   1cea6:	f7ff feb1 	bl	1cc0c <log_msg_hexdump_data_op>
}
   1ceaa:	b002      	add	sp, #8
   1ceac:	bd10      	pop	{r4, pc}

0001ceae <buffer_write>:
{
   1ceae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ceb0:	4606      	mov	r6, r0
   1ceb2:	460d      	mov	r5, r1
   1ceb4:	4614      	mov	r4, r2
   1ceb6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ceb8:	4621      	mov	r1, r4
   1ceba:	4628      	mov	r0, r5
   1cebc:	463a      	mov	r2, r7
   1cebe:	47b0      	blx	r6
	} while (len != 0);
   1cec0:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cec2:	4405      	add	r5, r0
	} while (len != 0);
   1cec4:	d1f8      	bne.n	1ceb8 <buffer_write+0xa>
}
   1cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cec8 <std_print>:
{
   1cec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cecc:	b08e      	sub	sp, #56	; 0x38
   1cece:	af0e      	add	r7, sp, #56	; 0x38
   1ced0:	4680      	mov	r8, r0
   1ced2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1ced4:	f7ff ff32 	bl	1cd3c <log_msg_str_get>
   1ced8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1ceda:	4640      	mov	r0, r8
   1cedc:	f7ff fef9 	bl	1ccd2 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1cee0:	0083      	lsls	r3, r0, #2
   1cee2:	3307      	adds	r3, #7
   1cee4:	f023 0307 	bic.w	r3, r3, #7
   1cee8:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1ceec:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1ceee:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1cef0:	f04f 0900 	mov.w	r9, #0
   1cef4:	45d1      	cmp	r9, sl
   1cef6:	d116      	bne.n	1cf26 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1cef8:	4640      	mov	r0, r8
   1cefa:	f7ff feea 	bl	1ccd2 <log_msg_nargs_get>
   1cefe:	280f      	cmp	r0, #15
   1cf00:	d81e      	bhi.n	1cf40 <std_print+0x78>
   1cf02:	e8df f010 	tbh	[pc, r0, lsl #1]
   1cf06:	0019      	.short	0x0019
   1cf08:	00260020 	.word	0x00260020
   1cf0c:	0036002d 	.word	0x0036002d
   1cf10:	004e0041 	.word	0x004e0041
   1cf14:	006e005d 	.word	0x006e005d
   1cf18:	00960081 	.word	0x00960081
   1cf1c:	00c600ad 	.word	0x00c600ad
   1cf20:	00fe00e1 	.word	0x00fe00e1
   1cf24:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1cf26:	4649      	mov	r1, r9
   1cf28:	4640      	mov	r0, r8
   1cf2a:	f7ff fed5 	bl	1ccd8 <log_msg_arg_get>
   1cf2e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1cf32:	f109 0901 	add.w	r9, r9, #1
   1cf36:	e7dd      	b.n	1cef4 <std_print+0x2c>
		print_formatted(output, str);
   1cf38:	4631      	mov	r1, r6
   1cf3a:	4628      	mov	r0, r5
   1cf3c:	f7e6 fd1e 	bl	397c <print_formatted>
}
   1cf40:	46bd      	mov	sp, r7
   1cf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1cf46:	6822      	ldr	r2, [r4, #0]
   1cf48:	4631      	mov	r1, r6
   1cf4a:	4628      	mov	r0, r5
   1cf4c:	f7e6 fd16 	bl	397c <print_formatted>
		break;
   1cf50:	e7f6      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1cf52:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf56:	4631      	mov	r1, r6
   1cf58:	4628      	mov	r0, r5
   1cf5a:	f7e6 fd0f 	bl	397c <print_formatted>
		break;
   1cf5e:	e7ef      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1cf60:	68a3      	ldr	r3, [r4, #8]
   1cf62:	9300      	str	r3, [sp, #0]
   1cf64:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf68:	4631      	mov	r1, r6
   1cf6a:	4628      	mov	r0, r5
   1cf6c:	f7e6 fd06 	bl	397c <print_formatted>
		break;
   1cf70:	e7e6      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cf72:	68e3      	ldr	r3, [r4, #12]
   1cf74:	9301      	str	r3, [sp, #4]
   1cf76:	68a3      	ldr	r3, [r4, #8]
   1cf78:	9300      	str	r3, [sp, #0]
   1cf7a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf7e:	4631      	mov	r1, r6
   1cf80:	4628      	mov	r0, r5
   1cf82:	f7e6 fcfb 	bl	397c <print_formatted>
		break;
   1cf86:	e7db      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cf88:	6923      	ldr	r3, [r4, #16]
   1cf8a:	9302      	str	r3, [sp, #8]
   1cf8c:	68e3      	ldr	r3, [r4, #12]
   1cf8e:	9301      	str	r3, [sp, #4]
   1cf90:	68a3      	ldr	r3, [r4, #8]
   1cf92:	9300      	str	r3, [sp, #0]
   1cf94:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf98:	4631      	mov	r1, r6
   1cf9a:	4628      	mov	r0, r5
   1cf9c:	f7e6 fcee 	bl	397c <print_formatted>
		break;
   1cfa0:	e7ce      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cfa2:	6963      	ldr	r3, [r4, #20]
   1cfa4:	9303      	str	r3, [sp, #12]
   1cfa6:	6923      	ldr	r3, [r4, #16]
   1cfa8:	9302      	str	r3, [sp, #8]
   1cfaa:	68e3      	ldr	r3, [r4, #12]
   1cfac:	9301      	str	r3, [sp, #4]
   1cfae:	68a3      	ldr	r3, [r4, #8]
   1cfb0:	9300      	str	r3, [sp, #0]
   1cfb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfb6:	4631      	mov	r1, r6
   1cfb8:	4628      	mov	r0, r5
   1cfba:	f7e6 fcdf 	bl	397c <print_formatted>
		break;
   1cfbe:	e7bf      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cfc0:	69a3      	ldr	r3, [r4, #24]
   1cfc2:	9304      	str	r3, [sp, #16]
   1cfc4:	6963      	ldr	r3, [r4, #20]
   1cfc6:	9303      	str	r3, [sp, #12]
   1cfc8:	6923      	ldr	r3, [r4, #16]
   1cfca:	9302      	str	r3, [sp, #8]
   1cfcc:	68e3      	ldr	r3, [r4, #12]
   1cfce:	9301      	str	r3, [sp, #4]
   1cfd0:	68a3      	ldr	r3, [r4, #8]
   1cfd2:	9300      	str	r3, [sp, #0]
   1cfd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfd8:	4631      	mov	r1, r6
   1cfda:	4628      	mov	r0, r5
   1cfdc:	f7e6 fcce 	bl	397c <print_formatted>
		break;
   1cfe0:	e7ae      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cfe2:	69e3      	ldr	r3, [r4, #28]
   1cfe4:	9305      	str	r3, [sp, #20]
   1cfe6:	69a3      	ldr	r3, [r4, #24]
   1cfe8:	9304      	str	r3, [sp, #16]
   1cfea:	6963      	ldr	r3, [r4, #20]
   1cfec:	9303      	str	r3, [sp, #12]
   1cfee:	6923      	ldr	r3, [r4, #16]
   1cff0:	9302      	str	r3, [sp, #8]
   1cff2:	68e3      	ldr	r3, [r4, #12]
   1cff4:	9301      	str	r3, [sp, #4]
   1cff6:	68a3      	ldr	r3, [r4, #8]
   1cff8:	9300      	str	r3, [sp, #0]
   1cffa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cffe:	4631      	mov	r1, r6
   1d000:	4628      	mov	r0, r5
   1d002:	f7e6 fcbb 	bl	397c <print_formatted>
		break;
   1d006:	e79b      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d008:	6a23      	ldr	r3, [r4, #32]
   1d00a:	9306      	str	r3, [sp, #24]
   1d00c:	69e3      	ldr	r3, [r4, #28]
   1d00e:	9305      	str	r3, [sp, #20]
   1d010:	69a3      	ldr	r3, [r4, #24]
   1d012:	9304      	str	r3, [sp, #16]
   1d014:	6963      	ldr	r3, [r4, #20]
   1d016:	9303      	str	r3, [sp, #12]
   1d018:	6923      	ldr	r3, [r4, #16]
   1d01a:	9302      	str	r3, [sp, #8]
   1d01c:	68e3      	ldr	r3, [r4, #12]
   1d01e:	9301      	str	r3, [sp, #4]
   1d020:	68a3      	ldr	r3, [r4, #8]
   1d022:	9300      	str	r3, [sp, #0]
   1d024:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d028:	4631      	mov	r1, r6
   1d02a:	4628      	mov	r0, r5
   1d02c:	f7e6 fca6 	bl	397c <print_formatted>
		break;
   1d030:	e786      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d032:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d034:	9307      	str	r3, [sp, #28]
   1d036:	6a23      	ldr	r3, [r4, #32]
   1d038:	9306      	str	r3, [sp, #24]
   1d03a:	69e3      	ldr	r3, [r4, #28]
   1d03c:	9305      	str	r3, [sp, #20]
   1d03e:	69a3      	ldr	r3, [r4, #24]
   1d040:	9304      	str	r3, [sp, #16]
   1d042:	6963      	ldr	r3, [r4, #20]
   1d044:	9303      	str	r3, [sp, #12]
   1d046:	6923      	ldr	r3, [r4, #16]
   1d048:	9302      	str	r3, [sp, #8]
   1d04a:	68e3      	ldr	r3, [r4, #12]
   1d04c:	9301      	str	r3, [sp, #4]
   1d04e:	68a3      	ldr	r3, [r4, #8]
   1d050:	9300      	str	r3, [sp, #0]
   1d052:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d056:	4631      	mov	r1, r6
   1d058:	4628      	mov	r0, r5
   1d05a:	f7e6 fc8f 	bl	397c <print_formatted>
		break;
   1d05e:	e76f      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d062:	9308      	str	r3, [sp, #32]
   1d064:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d066:	9307      	str	r3, [sp, #28]
   1d068:	6a23      	ldr	r3, [r4, #32]
   1d06a:	9306      	str	r3, [sp, #24]
   1d06c:	69e3      	ldr	r3, [r4, #28]
   1d06e:	9305      	str	r3, [sp, #20]
   1d070:	69a3      	ldr	r3, [r4, #24]
   1d072:	9304      	str	r3, [sp, #16]
   1d074:	6963      	ldr	r3, [r4, #20]
   1d076:	9303      	str	r3, [sp, #12]
   1d078:	6923      	ldr	r3, [r4, #16]
   1d07a:	9302      	str	r3, [sp, #8]
   1d07c:	68e3      	ldr	r3, [r4, #12]
   1d07e:	9301      	str	r3, [sp, #4]
   1d080:	68a3      	ldr	r3, [r4, #8]
   1d082:	9300      	str	r3, [sp, #0]
   1d084:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d088:	4631      	mov	r1, r6
   1d08a:	4628      	mov	r0, r5
   1d08c:	f7e6 fc76 	bl	397c <print_formatted>
		break;
   1d090:	e756      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d094:	9309      	str	r3, [sp, #36]	; 0x24
   1d096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d098:	9308      	str	r3, [sp, #32]
   1d09a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d09c:	9307      	str	r3, [sp, #28]
   1d09e:	6a23      	ldr	r3, [r4, #32]
   1d0a0:	9306      	str	r3, [sp, #24]
   1d0a2:	69e3      	ldr	r3, [r4, #28]
   1d0a4:	9305      	str	r3, [sp, #20]
   1d0a6:	69a3      	ldr	r3, [r4, #24]
   1d0a8:	9304      	str	r3, [sp, #16]
   1d0aa:	6963      	ldr	r3, [r4, #20]
   1d0ac:	9303      	str	r3, [sp, #12]
   1d0ae:	6923      	ldr	r3, [r4, #16]
   1d0b0:	9302      	str	r3, [sp, #8]
   1d0b2:	68e3      	ldr	r3, [r4, #12]
   1d0b4:	9301      	str	r3, [sp, #4]
   1d0b6:	68a3      	ldr	r3, [r4, #8]
   1d0b8:	9300      	str	r3, [sp, #0]
   1d0ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d0be:	4631      	mov	r1, r6
   1d0c0:	4628      	mov	r0, r5
   1d0c2:	f7e6 fc5b 	bl	397c <print_formatted>
		break;
   1d0c6:	e73b      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d0c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d0ca:	930a      	str	r3, [sp, #40]	; 0x28
   1d0cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d0ce:	9309      	str	r3, [sp, #36]	; 0x24
   1d0d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d0d2:	9308      	str	r3, [sp, #32]
   1d0d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0d6:	9307      	str	r3, [sp, #28]
   1d0d8:	6a23      	ldr	r3, [r4, #32]
   1d0da:	9306      	str	r3, [sp, #24]
   1d0dc:	69e3      	ldr	r3, [r4, #28]
   1d0de:	9305      	str	r3, [sp, #20]
   1d0e0:	69a3      	ldr	r3, [r4, #24]
   1d0e2:	9304      	str	r3, [sp, #16]
   1d0e4:	6963      	ldr	r3, [r4, #20]
   1d0e6:	9303      	str	r3, [sp, #12]
   1d0e8:	6923      	ldr	r3, [r4, #16]
   1d0ea:	9302      	str	r3, [sp, #8]
   1d0ec:	68e3      	ldr	r3, [r4, #12]
   1d0ee:	9301      	str	r3, [sp, #4]
   1d0f0:	68a3      	ldr	r3, [r4, #8]
   1d0f2:	9300      	str	r3, [sp, #0]
   1d0f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d0f8:	4631      	mov	r1, r6
   1d0fa:	4628      	mov	r0, r5
   1d0fc:	f7e6 fc3e 	bl	397c <print_formatted>
		break;
   1d100:	e71e      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d102:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d104:	930b      	str	r3, [sp, #44]	; 0x2c
   1d106:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d108:	930a      	str	r3, [sp, #40]	; 0x28
   1d10a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d10c:	9309      	str	r3, [sp, #36]	; 0x24
   1d10e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d110:	9308      	str	r3, [sp, #32]
   1d112:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d114:	9307      	str	r3, [sp, #28]
   1d116:	6a23      	ldr	r3, [r4, #32]
   1d118:	9306      	str	r3, [sp, #24]
   1d11a:	69e3      	ldr	r3, [r4, #28]
   1d11c:	9305      	str	r3, [sp, #20]
   1d11e:	69a3      	ldr	r3, [r4, #24]
   1d120:	9304      	str	r3, [sp, #16]
   1d122:	6963      	ldr	r3, [r4, #20]
   1d124:	9303      	str	r3, [sp, #12]
   1d126:	6923      	ldr	r3, [r4, #16]
   1d128:	9302      	str	r3, [sp, #8]
   1d12a:	68e3      	ldr	r3, [r4, #12]
   1d12c:	9301      	str	r3, [sp, #4]
   1d12e:	68a3      	ldr	r3, [r4, #8]
   1d130:	9300      	str	r3, [sp, #0]
   1d132:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d136:	4631      	mov	r1, r6
   1d138:	4628      	mov	r0, r5
   1d13a:	f7e6 fc1f 	bl	397c <print_formatted>
		break;
   1d13e:	e6ff      	b.n	1cf40 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1d140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d142:	930c      	str	r3, [sp, #48]	; 0x30
   1d144:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d146:	930b      	str	r3, [sp, #44]	; 0x2c
   1d148:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d14a:	930a      	str	r3, [sp, #40]	; 0x28
   1d14c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d14e:	9309      	str	r3, [sp, #36]	; 0x24
   1d150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d152:	9308      	str	r3, [sp, #32]
   1d154:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d156:	9307      	str	r3, [sp, #28]
   1d158:	6a23      	ldr	r3, [r4, #32]
   1d15a:	9306      	str	r3, [sp, #24]
   1d15c:	69e3      	ldr	r3, [r4, #28]
   1d15e:	9305      	str	r3, [sp, #20]
   1d160:	69a3      	ldr	r3, [r4, #24]
   1d162:	9304      	str	r3, [sp, #16]
   1d164:	6963      	ldr	r3, [r4, #20]
   1d166:	9303      	str	r3, [sp, #12]
   1d168:	6923      	ldr	r3, [r4, #16]
   1d16a:	9302      	str	r3, [sp, #8]
   1d16c:	68e3      	ldr	r3, [r4, #12]
   1d16e:	9301      	str	r3, [sp, #4]
   1d170:	68a3      	ldr	r3, [r4, #8]
   1d172:	9300      	str	r3, [sp, #0]
   1d174:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d178:	4631      	mov	r1, r6
   1d17a:	4628      	mov	r0, r5
   1d17c:	f7e6 fbfe 	bl	397c <print_formatted>
}
   1d180:	e6de      	b.n	1cf40 <std_print+0x78>

0001d182 <log_output_flush>:
		     output->control_block->offset,
   1d182:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1d184:	6881      	ldr	r1, [r0, #8]
{
   1d186:	b510      	push	{r4, lr}
   1d188:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1d18a:	e9d2 2300 	ldrd	r2, r3, [r2]
   1d18e:	6800      	ldr	r0, [r0, #0]
   1d190:	f7ff fe8d 	bl	1ceae <buffer_write>
	output->control_block->offset = 0;
   1d194:	6863      	ldr	r3, [r4, #4]
   1d196:	2200      	movs	r2, #0
   1d198:	601a      	str	r2, [r3, #0]
}
   1d19a:	bd10      	pop	{r4, pc}

0001d19c <out_func>:
{
   1d19c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d19e:	684b      	ldr	r3, [r1, #4]
   1d1a0:	681a      	ldr	r2, [r3, #0]
   1d1a2:	68cb      	ldr	r3, [r1, #12]
   1d1a4:	429a      	cmp	r2, r3
{
   1d1a6:	4605      	mov	r5, r0
   1d1a8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d1aa:	d102      	bne.n	1d1b2 <out_func+0x16>
		log_output_flush(out_ctx);
   1d1ac:	4608      	mov	r0, r1
   1d1ae:	f7ff ffe8 	bl	1d182 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d1b2:	6863      	ldr	r3, [r4, #4]
   1d1b4:	f3bf 8f5b 	dmb	ish
   1d1b8:	e853 2f00 	ldrex	r2, [r3]
   1d1bc:	1c51      	adds	r1, r2, #1
   1d1be:	e843 1000 	strex	r0, r1, [r3]
   1d1c2:	2800      	cmp	r0, #0
   1d1c4:	d1f8      	bne.n	1d1b8 <out_func+0x1c>
   1d1c6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1d1ca:	68a3      	ldr	r3, [r4, #8]
   1d1cc:	549d      	strb	r5, [r3, r2]
}
   1d1ce:	2000      	movs	r0, #0
   1d1d0:	bd38      	pop	{r3, r4, r5, pc}

0001d1d2 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1d1d2:	2200      	movs	r2, #0
   1d1d4:	e9c0 2200 	strd	r2, r2, [r0]
   1d1d8:	6082      	str	r2, [r0, #8]
}
   1d1da:	4770      	bx	lr

0001d1dc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d1dc:	6903      	ldr	r3, [r0, #16]
   1d1de:	b2c9      	uxtb	r1, r1
   1d1e0:	220c      	movs	r2, #12
   1d1e2:	fb01 3302 	mla	r3, r1, r2, r3
   1d1e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1d1e8:	f000 0007 	and.w	r0, r0, #7
   1d1ec:	4770      	bx	lr

0001d1ee <set_on_state>:
	__asm__ volatile(
   1d1ee:	f04f 0320 	mov.w	r3, #32
   1d1f2:	f3ef 8211 	mrs	r2, BASEPRI
   1d1f6:	f383 8811 	msr	BASEPRI, r3
   1d1fa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d1fe:	6803      	ldr	r3, [r0, #0]
   1d200:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d204:	f043 0302 	orr.w	r3, r3, #2
   1d208:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d20a:	f382 8811 	msr	BASEPRI, r2
   1d20e:	f3bf 8f6f 	isb	sy
}
   1d212:	4770      	bx	lr

0001d214 <stop>:
{
   1d214:	4603      	mov	r3, r0
   1d216:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1d218:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1d21a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d21c:	f04f 0420 	mov.w	r4, #32
   1d220:	f3ef 8611 	mrs	r6, BASEPRI
   1d224:	f384 8811 	msr	BASEPRI, r4
   1d228:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d22c:	250c      	movs	r5, #12
   1d22e:	fb05 0401 	mla	r4, r5, r1, r0
   1d232:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d234:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1d238:	d001      	beq.n	1d23e <stop+0x2a>
   1d23a:	42a2      	cmp	r2, r4
   1d23c:	d111      	bne.n	1d262 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d23e:	fb05 0001 	mla	r0, r5, r1, r0
   1d242:	2201      	movs	r2, #1
   1d244:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1d246:	2000      	movs	r0, #0
	__asm__ volatile(
   1d248:	f386 8811 	msr	BASEPRI, r6
   1d24c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d250:	b930      	cbnz	r0, 1d260 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   1d252:	685b      	ldr	r3, [r3, #4]
   1d254:	220c      	movs	r2, #12
   1d256:	fb02 3101 	mla	r1, r2, r1, r3
   1d25a:	684b      	ldr	r3, [r1, #4]
   1d25c:	4798      	blx	r3
	return 0;
   1d25e:	2000      	movs	r0, #0
}
   1d260:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1d262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d266:	e7ef      	b.n	1d248 <stop+0x34>

0001d268 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d268:	2280      	movs	r2, #128	; 0x80
   1d26a:	f7ff bfd3 	b.w	1d214 <stop>

0001d26e <async_start>:
{
   1d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d270:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1d272:	6904      	ldr	r4, [r0, #16]
{
   1d274:	4605      	mov	r5, r0
   1d276:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d278:	f04f 0020 	mov.w	r0, #32
   1d27c:	f3ef 8c11 	mrs	ip, BASEPRI
   1d280:	f380 8811 	msr	BASEPRI, r0
   1d284:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d288:	260c      	movs	r6, #12
   1d28a:	fb06 4601 	mla	r6, r6, r1, r4
   1d28e:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d290:	f000 0e07 	and.w	lr, r0, #7
   1d294:	f1be 0f01 	cmp.w	lr, #1
   1d298:	d110      	bne.n	1d2bc <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d29a:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1d29c:	2600      	movs	r6, #0
	__asm__ volatile(
   1d29e:	f38c 8811 	msr	BASEPRI, ip
   1d2a2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d2a6:	b93e      	cbnz	r6, 1d2b8 <async_start+0x4a>
	subdata->cb = cb;
   1d2a8:	200c      	movs	r0, #12
   1d2aa:	4341      	muls	r1, r0
   1d2ac:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1d2ae:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d2b2:	686b      	ldr	r3, [r5, #4]
   1d2b4:	585b      	ldr	r3, [r3, r1]
   1d2b6:	4798      	blx	r3
}
   1d2b8:	4630      	mov	r0, r6
   1d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d2bc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1d2c0:	4287      	cmp	r7, r0
   1d2c2:	bf14      	ite	ne
   1d2c4:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1d2c8:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1d2cc:	e7e7      	b.n	1d29e <async_start+0x30>

0001d2ce <api_start>:
{
   1d2ce:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d2d0:	2480      	movs	r4, #128	; 0x80
   1d2d2:	9400      	str	r4, [sp, #0]
   1d2d4:	f7ff ffcb 	bl	1d26e <async_start>
}
   1d2d8:	b002      	add	sp, #8
   1d2da:	bd10      	pop	{r4, pc}

0001d2dc <onoff_started_callback>:
	return &data->mgr[type];
   1d2dc:	6900      	ldr	r0, [r0, #16]
{
   1d2de:	b410      	push	{r4}
	return &data->mgr[type];
   1d2e0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d2e2:	241c      	movs	r4, #28
   1d2e4:	fb03 0004 	mla	r0, r3, r4, r0
   1d2e8:	2100      	movs	r1, #0
}
   1d2ea:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d2ec:	4710      	bx	r2

0001d2ee <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d2ee:	2000      	movs	r0, #0
   1d2f0:	f001 bf16 	b.w	1f120 <nrfx_clock_start>

0001d2f4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d2f4:	2000      	movs	r0, #0
   1d2f6:	f7fd ba65 	b.w	1a7c4 <nrfx_clock_stop>

0001d2fa <blocking_start_callback>:
{
   1d2fa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d2fc:	f7fd bf6c 	b.w	1b1d8 <z_impl_k_sem_give>

0001d300 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d300:	4770      	bx	lr

0001d302 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d302:	4770      	bx	lr

0001d304 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d304:	b538      	push	{r3, r4, r5, lr}
   1d306:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d308:	42ab      	cmp	r3, r5
{
   1d30a:	4611      	mov	r1, r2
   1d30c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d30e:	d804      	bhi.n	1d31a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d310:	461a      	mov	r2, r3
   1d312:	f000 fa79 	bl	1d808 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d316:	4620      	mov	r0, r4
   1d318:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d31a:	2400      	movs	r4, #0
   1d31c:	e7fb      	b.n	1d316 <_copy+0x12>

0001d31e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d31e:	f000 ba9e 	b.w	1d85e <memset>

0001d322 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d322:	09c3      	lsrs	r3, r0, #7
   1d324:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d328:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d32c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d330:	b2c0      	uxtb	r0, r0
   1d332:	4770      	bx	lr

0001d334 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d334:	78cb      	ldrb	r3, [r1, #3]
   1d336:	7802      	ldrb	r2, [r0, #0]
   1d338:	4053      	eors	r3, r2
   1d33a:	7003      	strb	r3, [r0, #0]
   1d33c:	884b      	ldrh	r3, [r1, #2]
   1d33e:	7842      	ldrb	r2, [r0, #1]
   1d340:	4053      	eors	r3, r2
   1d342:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d344:	680a      	ldr	r2, [r1, #0]
   1d346:	7883      	ldrb	r3, [r0, #2]
   1d348:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d34c:	7083      	strb	r3, [r0, #2]
   1d34e:	680a      	ldr	r2, [r1, #0]
   1d350:	78c3      	ldrb	r3, [r0, #3]
   1d352:	4053      	eors	r3, r2
   1d354:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d356:	79cb      	ldrb	r3, [r1, #7]
   1d358:	7902      	ldrb	r2, [r0, #4]
   1d35a:	4053      	eors	r3, r2
   1d35c:	7103      	strb	r3, [r0, #4]
   1d35e:	88cb      	ldrh	r3, [r1, #6]
   1d360:	7942      	ldrb	r2, [r0, #5]
   1d362:	4053      	eors	r3, r2
   1d364:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d366:	684a      	ldr	r2, [r1, #4]
   1d368:	7983      	ldrb	r3, [r0, #6]
   1d36a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d36e:	7183      	strb	r3, [r0, #6]
   1d370:	684a      	ldr	r2, [r1, #4]
   1d372:	79c3      	ldrb	r3, [r0, #7]
   1d374:	4053      	eors	r3, r2
   1d376:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d378:	7acb      	ldrb	r3, [r1, #11]
   1d37a:	7a02      	ldrb	r2, [r0, #8]
   1d37c:	4053      	eors	r3, r2
   1d37e:	7203      	strb	r3, [r0, #8]
   1d380:	7a42      	ldrb	r2, [r0, #9]
   1d382:	894b      	ldrh	r3, [r1, #10]
   1d384:	4053      	eors	r3, r2
   1d386:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d388:	688a      	ldr	r2, [r1, #8]
   1d38a:	7a83      	ldrb	r3, [r0, #10]
   1d38c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d390:	7283      	strb	r3, [r0, #10]
   1d392:	688a      	ldr	r2, [r1, #8]
   1d394:	7ac3      	ldrb	r3, [r0, #11]
   1d396:	4053      	eors	r3, r2
   1d398:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d39a:	7bcb      	ldrb	r3, [r1, #15]
   1d39c:	7b02      	ldrb	r2, [r0, #12]
   1d39e:	4053      	eors	r3, r2
   1d3a0:	7303      	strb	r3, [r0, #12]
   1d3a2:	89cb      	ldrh	r3, [r1, #14]
   1d3a4:	7b42      	ldrb	r2, [r0, #13]
   1d3a6:	4053      	eors	r3, r2
   1d3a8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d3aa:	68ca      	ldr	r2, [r1, #12]
   1d3ac:	7b83      	ldrb	r3, [r0, #14]
   1d3ae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d3b2:	7383      	strb	r3, [r0, #14]
   1d3b4:	68ca      	ldr	r2, [r1, #12]
   1d3b6:	7bc3      	ldrb	r3, [r0, #15]
   1d3b8:	4053      	eors	r3, r2
   1d3ba:	73c3      	strb	r3, [r0, #15]
}
   1d3bc:	4770      	bx	lr

0001d3be <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d3be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d3c0:	7802      	ldrb	r2, [r0, #0]
   1d3c2:	f88d 2000 	strb.w	r2, [sp]
   1d3c6:	7942      	ldrb	r2, [r0, #5]
   1d3c8:	f88d 2001 	strb.w	r2, [sp, #1]
   1d3cc:	7a82      	ldrb	r2, [r0, #10]
   1d3ce:	f88d 2002 	strb.w	r2, [sp, #2]
   1d3d2:	7bc2      	ldrb	r2, [r0, #15]
   1d3d4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d3d8:	7902      	ldrb	r2, [r0, #4]
   1d3da:	f88d 2004 	strb.w	r2, [sp, #4]
   1d3de:	7a42      	ldrb	r2, [r0, #9]
   1d3e0:	f88d 2005 	strb.w	r2, [sp, #5]
   1d3e4:	7b82      	ldrb	r2, [r0, #14]
   1d3e6:	f88d 2006 	strb.w	r2, [sp, #6]
   1d3ea:	78c2      	ldrb	r2, [r0, #3]
   1d3ec:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d3f0:	7a02      	ldrb	r2, [r0, #8]
   1d3f2:	f88d 2008 	strb.w	r2, [sp, #8]
   1d3f6:	7b42      	ldrb	r2, [r0, #13]
   1d3f8:	f88d 2009 	strb.w	r2, [sp, #9]
   1d3fc:	7882      	ldrb	r2, [r0, #2]
   1d3fe:	f88d 200a 	strb.w	r2, [sp, #10]
   1d402:	79c2      	ldrb	r2, [r0, #7]
   1d404:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d408:	7b02      	ldrb	r2, [r0, #12]
   1d40a:	f88d 200c 	strb.w	r2, [sp, #12]
   1d40e:	7842      	ldrb	r2, [r0, #1]
   1d410:	7ac3      	ldrb	r3, [r0, #11]
   1d412:	f88d 200d 	strb.w	r2, [sp, #13]
   1d416:	7982      	ldrb	r2, [r0, #6]
   1d418:	f88d 200e 	strb.w	r2, [sp, #14]
   1d41c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d420:	2310      	movs	r3, #16
   1d422:	466a      	mov	r2, sp
   1d424:	4619      	mov	r1, r3
   1d426:	f7ff ff6d 	bl	1d304 <_copy>
}
   1d42a:	b005      	add	sp, #20
   1d42c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d430 <mult_row_column>:
{
   1d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d432:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d434:	7808      	ldrb	r0, [r1, #0]
{
   1d436:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d438:	f7ff ff73 	bl	1d322 <_double_byte>
   1d43c:	4605      	mov	r5, r0
   1d43e:	7860      	ldrb	r0, [r4, #1]
   1d440:	f7ff ff6f 	bl	1d322 <_double_byte>
   1d444:	78a2      	ldrb	r2, [r4, #2]
   1d446:	7863      	ldrb	r3, [r4, #1]
   1d448:	4053      	eors	r3, r2
   1d44a:	78e2      	ldrb	r2, [r4, #3]
   1d44c:	4053      	eors	r3, r2
   1d44e:	405d      	eors	r5, r3
   1d450:	4045      	eors	r5, r0
   1d452:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d454:	7860      	ldrb	r0, [r4, #1]
   1d456:	7827      	ldrb	r7, [r4, #0]
   1d458:	f7ff ff63 	bl	1d322 <_double_byte>
   1d45c:	4605      	mov	r5, r0
   1d45e:	78a0      	ldrb	r0, [r4, #2]
   1d460:	f7ff ff5f 	bl	1d322 <_double_byte>
   1d464:	78a3      	ldrb	r3, [r4, #2]
   1d466:	405f      	eors	r7, r3
   1d468:	78e3      	ldrb	r3, [r4, #3]
   1d46a:	405f      	eors	r7, r3
   1d46c:	407d      	eors	r5, r7
   1d46e:	4045      	eors	r5, r0
   1d470:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d472:	78a0      	ldrb	r0, [r4, #2]
   1d474:	7865      	ldrb	r5, [r4, #1]
   1d476:	7827      	ldrb	r7, [r4, #0]
   1d478:	f7ff ff53 	bl	1d322 <_double_byte>
   1d47c:	406f      	eors	r7, r5
   1d47e:	4605      	mov	r5, r0
   1d480:	78e0      	ldrb	r0, [r4, #3]
   1d482:	f7ff ff4e 	bl	1d322 <_double_byte>
   1d486:	78e3      	ldrb	r3, [r4, #3]
   1d488:	405f      	eors	r7, r3
   1d48a:	407d      	eors	r5, r7
   1d48c:	4045      	eors	r5, r0
   1d48e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d490:	7820      	ldrb	r0, [r4, #0]
   1d492:	f7ff ff46 	bl	1d322 <_double_byte>
   1d496:	7863      	ldrb	r3, [r4, #1]
   1d498:	7825      	ldrb	r5, [r4, #0]
   1d49a:	405d      	eors	r5, r3
   1d49c:	78a3      	ldrb	r3, [r4, #2]
   1d49e:	405d      	eors	r5, r3
   1d4a0:	4045      	eors	r5, r0
   1d4a2:	78e0      	ldrb	r0, [r4, #3]
   1d4a4:	f7ff ff3d 	bl	1d322 <_double_byte>
   1d4a8:	b2ed      	uxtb	r5, r5
   1d4aa:	4045      	eors	r5, r0
   1d4ac:	70f5      	strb	r5, [r6, #3]
}
   1d4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d4b0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1d4b0:	b570      	push	{r4, r5, r6, lr}
   1d4b2:	4614      	mov	r4, r2
   1d4b4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1d4b6:	4605      	mov	r5, r0
   1d4b8:	2800      	cmp	r0, #0
   1d4ba:	d049      	beq.n	1d550 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1d4bc:	2900      	cmp	r1, #0
   1d4be:	d049      	beq.n	1d554 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1d4c0:	2a00      	cmp	r2, #0
   1d4c2:	d049      	beq.n	1d558 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1d4c4:	2310      	movs	r3, #16
   1d4c6:	460a      	mov	r2, r1
   1d4c8:	4668      	mov	r0, sp
   1d4ca:	4619      	mov	r1, r3
   1d4cc:	f7ff ff1a 	bl	1d304 <_copy>
	add_round_key(state, s->words);
   1d4d0:	4621      	mov	r1, r4
   1d4d2:	4668      	mov	r0, sp
   1d4d4:	f7ff ff2e 	bl	1d334 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1d4d8:	3410      	adds	r4, #16
   1d4da:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1d4de:	4668      	mov	r0, sp
   1d4e0:	f7e7 f822 	bl	4528 <sub_bytes>
		shift_rows(state);
   1d4e4:	4668      	mov	r0, sp
   1d4e6:	f7ff ff6a 	bl	1d3be <shift_rows>
	mult_row_column(t, s);
   1d4ea:	4669      	mov	r1, sp
   1d4ec:	a804      	add	r0, sp, #16
   1d4ee:	f7ff ff9f 	bl	1d430 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1d4f2:	a901      	add	r1, sp, #4
   1d4f4:	a805      	add	r0, sp, #20
   1d4f6:	f7ff ff9b 	bl	1d430 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1d4fa:	a902      	add	r1, sp, #8
   1d4fc:	a806      	add	r0, sp, #24
   1d4fe:	f7ff ff97 	bl	1d430 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1d502:	a903      	add	r1, sp, #12
   1d504:	a807      	add	r0, sp, #28
   1d506:	f7ff ff93 	bl	1d430 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d50a:	2310      	movs	r3, #16
   1d50c:	4619      	mov	r1, r3
   1d50e:	eb0d 0203 	add.w	r2, sp, r3
   1d512:	4668      	mov	r0, sp
   1d514:	f7ff fef6 	bl	1d304 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1d518:	4621      	mov	r1, r4
   1d51a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1d51c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1d51e:	f7ff ff09 	bl	1d334 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1d522:	42a6      	cmp	r6, r4
   1d524:	d1db      	bne.n	1d4de <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1d526:	f7e6 ffff 	bl	4528 <sub_bytes>
	shift_rows(state);
   1d52a:	4668      	mov	r0, sp
   1d52c:	f7ff ff47 	bl	1d3be <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1d530:	4631      	mov	r1, r6
   1d532:	4668      	mov	r0, sp
   1d534:	f7ff fefe 	bl	1d334 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1d538:	2310      	movs	r3, #16
   1d53a:	4619      	mov	r1, r3
   1d53c:	466a      	mov	r2, sp
   1d53e:	4628      	mov	r0, r5
   1d540:	f7ff fee0 	bl	1d304 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1d544:	4668      	mov	r0, sp
   1d546:	2210      	movs	r2, #16
   1d548:	2100      	movs	r1, #0
   1d54a:	f7ff fee8 	bl	1d31e <_set>

	return TC_CRYPTO_SUCCESS;
   1d54e:	2001      	movs	r0, #1
}
   1d550:	b008      	add	sp, #32
   1d552:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d554:	4608      	mov	r0, r1
   1d556:	e7fb      	b.n	1d550 <tc_aes_encrypt+0xa0>
   1d558:	4610      	mov	r0, r2
   1d55a:	e7f9      	b.n	1d550 <tc_aes_encrypt+0xa0>

0001d55c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d55c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d55e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d560:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d562:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d566:	2b00      	cmp	r3, #0
   1d568:	bfb4      	ite	lt
   1d56a:	2387      	movlt	r3, #135	; 0x87
   1d56c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d56e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d572:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d576:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d578:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d57c:	d002      	beq.n	1d584 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d57e:	7813      	ldrb	r3, [r2, #0]
   1d580:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d582:	e7f4      	b.n	1d56e <gf_double+0x12>
	}
}
   1d584:	bd10      	pop	{r4, pc}

0001d586 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d586:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d588:	b120      	cbz	r0, 1d594 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d58a:	2258      	movs	r2, #88	; 0x58
   1d58c:	2100      	movs	r1, #0
   1d58e:	f7ff fec6 	bl	1d31e <_set>
   1d592:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d594:	bd08      	pop	{r3, pc}

0001d596 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d596:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d598:	4604      	mov	r4, r0
   1d59a:	b188      	cbz	r0, 1d5c0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d59c:	2210      	movs	r2, #16
   1d59e:	2100      	movs	r1, #0
   1d5a0:	f7ff febd 	bl	1d31e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d5a4:	2210      	movs	r2, #16
   1d5a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d5aa:	2100      	movs	r1, #0
   1d5ac:	f7ff feb7 	bl	1d31e <_set>
	s->leftover_offset = 0;
   1d5b0:	2300      	movs	r3, #0
   1d5b2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d5b4:	2200      	movs	r2, #0
   1d5b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d5ba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d5be:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d5c0:	bd10      	pop	{r4, pc}

0001d5c2 <tc_cmac_setup>:
{
   1d5c2:	b570      	push	{r4, r5, r6, lr}
   1d5c4:	460d      	mov	r5, r1
   1d5c6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d5c8:	4604      	mov	r4, r0
   1d5ca:	b310      	cbz	r0, 1d612 <tc_cmac_setup+0x50>
   1d5cc:	b311      	cbz	r1, 1d614 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d5ce:	2258      	movs	r2, #88	; 0x58
   1d5d0:	2100      	movs	r1, #0
   1d5d2:	f7ff fea4 	bl	1d31e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d5d6:	4629      	mov	r1, r5
	s->sched = sched;
   1d5d8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d5da:	4630      	mov	r0, r6
   1d5dc:	f7e6 ffb0 	bl	4540 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d5e0:	2210      	movs	r2, #16
   1d5e2:	2100      	movs	r1, #0
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	f7ff fe9a 	bl	1d31e <_set>
	gf_double (s->K1, s->iv);
   1d5ea:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d5ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d5f0:	4621      	mov	r1, r4
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	f7ff ff5c 	bl	1d4b0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d5f8:	4621      	mov	r1, r4
   1d5fa:	4628      	mov	r0, r5
   1d5fc:	f7ff ffae 	bl	1d55c <gf_double>
	gf_double (s->K2, s->K1);
   1d600:	4629      	mov	r1, r5
   1d602:	f104 0020 	add.w	r0, r4, #32
   1d606:	f7ff ffa9 	bl	1d55c <gf_double>
	tc_cmac_init(s);
   1d60a:	4620      	mov	r0, r4
   1d60c:	f7ff ffc3 	bl	1d596 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d610:	2001      	movs	r0, #1
}
   1d612:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d614:	4608      	mov	r0, r1
   1d616:	e7fc      	b.n	1d612 <tc_cmac_setup+0x50>

0001d618 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d61c:	460d      	mov	r5, r1
   1d61e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d620:	4604      	mov	r4, r0
   1d622:	2800      	cmp	r0, #0
   1d624:	d061      	beq.n	1d6ea <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d626:	b912      	cbnz	r2, 1d62e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d628:	2001      	movs	r0, #1
}
   1d62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d62e:	2900      	cmp	r1, #0
   1d630:	d05b      	beq.n	1d6ea <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1d632:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1d636:	ea53 0102 	orrs.w	r1, r3, r2
   1d63a:	d056      	beq.n	1d6ea <tc_cmac_update+0xd2>
	s->countdown--;
   1d63c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1d63e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1d642:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1d646:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d64a:	f1b8 0f00 	cmp.w	r8, #0
   1d64e:	d02a      	beq.n	1d6a6 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d650:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d654:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1d658:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d65a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1d65c:	d208      	bcs.n	1d670 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d65e:	462a      	mov	r2, r5
   1d660:	4633      	mov	r3, r6
   1d662:	4631      	mov	r1, r6
   1d664:	f7ff fe4e 	bl	1d304 <_copy>
			s->leftover_offset += data_length;
   1d668:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d66a:	4432      	add	r2, r6
   1d66c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d66e:	e7db      	b.n	1d628 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d670:	463b      	mov	r3, r7
   1d672:	462a      	mov	r2, r5
   1d674:	4639      	mov	r1, r7
   1d676:	f7ff fe45 	bl	1d304 <_copy>
		data_length -= remaining_space;
   1d67a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d67c:	2300      	movs	r3, #0
   1d67e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d680:	4446      	add	r6, r8
		data += remaining_space;
   1d682:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d684:	1e63      	subs	r3, r4, #1
   1d686:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d68a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d68e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d692:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d694:	ea82 0200 	eor.w	r2, r2, r0
   1d698:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d69a:	d1f6      	bne.n	1d68a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d69c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d69e:	4621      	mov	r1, r4
   1d6a0:	4620      	mov	r0, r4
   1d6a2:	f7ff ff05 	bl	1d4b0 <tc_aes_encrypt>
   1d6a6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d6aa:	2e10      	cmp	r6, #16
   1d6ac:	d80a      	bhi.n	1d6c4 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1d6ae:	2e00      	cmp	r6, #0
   1d6b0:	d0ba      	beq.n	1d628 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d6b2:	4633      	mov	r3, r6
   1d6b4:	462a      	mov	r2, r5
   1d6b6:	4631      	mov	r1, r6
   1d6b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d6bc:	f7ff fe22 	bl	1d304 <_copy>
		s->leftover_offset = data_length;
   1d6c0:	6466      	str	r6, [r4, #68]	; 0x44
   1d6c2:	e7b1      	b.n	1d628 <tc_cmac_update+0x10>
   1d6c4:	1e63      	subs	r3, r4, #1
   1d6c6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d6c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d6cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6d0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d6d2:	ea82 0200 	eor.w	r2, r2, r0
   1d6d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6d8:	d1f6      	bne.n	1d6c8 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d6da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d6dc:	4621      	mov	r1, r4
   1d6de:	4620      	mov	r0, r4
   1d6e0:	f7ff fee6 	bl	1d4b0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d6e4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d6e6:	3e10      	subs	r6, #16
   1d6e8:	e7df      	b.n	1d6aa <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1d6ea:	2000      	movs	r0, #0
   1d6ec:	e79d      	b.n	1d62a <tc_cmac_update+0x12>

0001d6ee <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d6ee:	b570      	push	{r4, r5, r6, lr}
   1d6f0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d6f2:	4605      	mov	r5, r0
   1d6f4:	b1e8      	cbz	r0, 1d732 <tc_cmac_final+0x44>
   1d6f6:	b369      	cbz	r1, 1d754 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d6f8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d6fa:	2a10      	cmp	r2, #16
   1d6fc:	d11a      	bne.n	1d734 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d6fe:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d700:	1e63      	subs	r3, r4, #1
   1d702:	3901      	subs	r1, #1
   1d704:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d708:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d70c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d710:	4072      	eors	r2, r6
   1d712:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d716:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d718:	ea82 0206 	eor.w	r2, r2, r6
   1d71c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d71e:	d1f3      	bne.n	1d708 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d720:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d722:	4621      	mov	r1, r4
   1d724:	4628      	mov	r0, r5
   1d726:	f7ff fec3 	bl	1d4b0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d72a:	4620      	mov	r0, r4
   1d72c:	f7ff ff2b 	bl	1d586 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d730:	2001      	movs	r0, #1
}
   1d732:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d734:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d738:	2100      	movs	r1, #0
   1d73a:	f1c2 0210 	rsb	r2, r2, #16
   1d73e:	4420      	add	r0, r4
   1d740:	f7ff fded 	bl	1d31e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d744:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d746:	4423      	add	r3, r4
   1d748:	2280      	movs	r2, #128	; 0x80
   1d74a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d74e:	f104 0120 	add.w	r1, r4, #32
   1d752:	e7d5      	b.n	1d700 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d754:	4608      	mov	r0, r1
   1d756:	e7ec      	b.n	1d732 <tc_cmac_final+0x44>

0001d758 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d758:	2100      	movs	r1, #0
   1d75a:	2001      	movs	r0, #1
   1d75c:	f7e7 b834 	b.w	47c8 <z_arm_fatal_error>

0001d760 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d760:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1d762:	6800      	ldr	r0, [r0, #0]
   1d764:	f7e7 b830 	b.w	47c8 <z_arm_fatal_error>

0001d768 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d768:	b508      	push	{r3, lr}
	handler();
   1d76a:	f7e7 f865 	bl	4838 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d76e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d772:	f7e7 bacd 	b.w	4d10 <z_arm_exc_exit>

0001d776 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d776:	3901      	subs	r1, #1
   1d778:	4603      	mov	r3, r0
   1d77a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d77e:	b90a      	cbnz	r2, 1d784 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d780:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d782:	4770      	bx	lr
		*d = *s;
   1d784:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d788:	e7f7      	b.n	1d77a <strcpy+0x4>

0001d78a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d78a:	b570      	push	{r4, r5, r6, lr}
   1d78c:	4605      	mov	r5, r0
   1d78e:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d790:	b142      	cbz	r2, 1d7a4 <strncpy+0x1a>
   1d792:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1d796:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1d798:	b92c      	cbnz	r4, 1d7a6 <strncpy+0x1c>
   1d79a:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1d79c:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1d7a0:	429a      	cmp	r2, r3
   1d7a2:	d1fb      	bne.n	1d79c <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1d7a4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d7a6:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1d7aa:	4632      	mov	r2, r6
   1d7ac:	e7ef      	b.n	1d78e <strncpy+0x4>

0001d7ae <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1d7ae:	4603      	mov	r3, r0
	size_t n = 0;
   1d7b0:	2000      	movs	r0, #0

	while (*s != '\0') {
   1d7b2:	5c1a      	ldrb	r2, [r3, r0]
   1d7b4:	b902      	cbnz	r2, 1d7b8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d7b6:	4770      	bx	lr
		n++;
   1d7b8:	3001      	adds	r0, #1
   1d7ba:	e7fa      	b.n	1d7b2 <strlen+0x4>

0001d7bc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1d7bc:	4603      	mov	r3, r0
	size_t n = 0;
   1d7be:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1d7c0:	5c1a      	ldrb	r2, [r3, r0]
   1d7c2:	b10a      	cbz	r2, 1d7c8 <strnlen+0xc>
   1d7c4:	4288      	cmp	r0, r1
   1d7c6:	d100      	bne.n	1d7ca <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1d7c8:	4770      	bx	lr
		n++;
   1d7ca:	3001      	adds	r0, #1
   1d7cc:	e7f8      	b.n	1d7c0 <strnlen+0x4>

0001d7ce <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d7ce:	1e43      	subs	r3, r0, #1
   1d7d0:	3901      	subs	r1, #1
   1d7d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d7d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1d7da:	4282      	cmp	r2, r0
   1d7dc:	d101      	bne.n	1d7e2 <strcmp+0x14>
   1d7de:	2a00      	cmp	r2, #0
   1d7e0:	d1f7      	bne.n	1d7d2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d7e2:	1a10      	subs	r0, r2, r0
   1d7e4:	4770      	bx	lr

0001d7e6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d7e6:	b510      	push	{r4, lr}
   1d7e8:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d7ea:	b15a      	cbz	r2, 1d804 <memcmp+0x1e>
   1d7ec:	3901      	subs	r1, #1
   1d7ee:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d7f0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1d7f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d7f8:	42a3      	cmp	r3, r4
   1d7fa:	d001      	beq.n	1d800 <memcmp+0x1a>
   1d7fc:	4290      	cmp	r0, r2
   1d7fe:	d0f7      	beq.n	1d7f0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d800:	1a80      	subs	r0, r0, r2
}
   1d802:	bd10      	pop	{r4, pc}
		return 0;
   1d804:	4610      	mov	r0, r2
   1d806:	e7fc      	b.n	1d802 <memcmp+0x1c>

0001d808 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d808:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d80a:	ea81 0400 	eor.w	r4, r1, r0
   1d80e:	07a5      	lsls	r5, r4, #30
   1d810:	4603      	mov	r3, r0
   1d812:	d00b      	beq.n	1d82c <memcpy+0x24>
   1d814:	3b01      	subs	r3, #1
   1d816:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d818:	4291      	cmp	r1, r2
   1d81a:	d11b      	bne.n	1d854 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d81e:	2a00      	cmp	r2, #0
   1d820:	d0fc      	beq.n	1d81c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d822:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d826:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1d82a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1d82c:	079c      	lsls	r4, r3, #30
   1d82e:	d1f6      	bne.n	1d81e <memcpy+0x16>
   1d830:	f022 0403 	bic.w	r4, r2, #3
   1d834:	1f1d      	subs	r5, r3, #4
   1d836:	0896      	lsrs	r6, r2, #2
   1d838:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d83a:	42b9      	cmp	r1, r7
   1d83c:	d105      	bne.n	1d84a <memcpy+0x42>
   1d83e:	f06f 0503 	mvn.w	r5, #3
   1d842:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   1d846:	4423      	add	r3, r4
   1d848:	e7e4      	b.n	1d814 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d84a:	f851 cb04 	ldr.w	ip, [r1], #4
   1d84e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1d852:	e7f2      	b.n	1d83a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1d854:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d858:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d85c:	e7dc      	b.n	1d818 <memcpy+0x10>

0001d85e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1d85e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1d860:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1d862:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d864:	07a3      	lsls	r3, r4, #30
   1d866:	d111      	bne.n	1d88c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d868:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d86c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d870:	f022 0303 	bic.w	r3, r2, #3
   1d874:	0896      	lsrs	r6, r2, #2
   1d876:	4423      	add	r3, r4
   1d878:	429c      	cmp	r4, r3
   1d87a:	d10d      	bne.n	1d898 <memset+0x3a>
   1d87c:	f06f 0403 	mvn.w	r4, #3
   1d880:	fb04 2206 	mla	r2, r4, r6, r2
   1d884:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d886:	4293      	cmp	r3, r2
   1d888:	d109      	bne.n	1d89e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d88a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d88c:	2a00      	cmp	r2, #0
   1d88e:	d0fc      	beq.n	1d88a <memset+0x2c>
		*(d_byte++) = c_byte;
   1d890:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1d894:	3a01      	subs	r2, #1
   1d896:	e7e5      	b.n	1d864 <memset+0x6>
		*(d_word++) = c_word;
   1d898:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1d89c:	e7ec      	b.n	1d878 <memset+0x1a>
		*(d_byte++) = c_byte;
   1d89e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d8a2:	e7f0      	b.n	1d886 <memset+0x28>

0001d8a4 <_stdout_hook_default>:
}
   1d8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d8a8:	4770      	bx	lr

0001d8aa <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1d8aa:	f7fc be91 	b.w	1a5d0 <SystemInit>

0001d8ae <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   1d8ae:	b084      	sub	sp, #16
   1d8b0:	ab04      	add	r3, sp, #16
   1d8b2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1d8b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d8ba:	2b06      	cmp	r3, #6
   1d8bc:	d108      	bne.n	1d8d0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d8be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d8c2:	2201      	movs	r2, #1
   1d8c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d8c8:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d8cc:	bf20      	wfe
    while (true)
   1d8ce:	e7fd      	b.n	1d8cc <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1d8d0:	b004      	add	sp, #16
   1d8d2:	4770      	bx	lr

0001d8d4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1d8d4:	b084      	sub	sp, #16
   1d8d6:	ab04      	add	r3, sp, #16
   1d8d8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1d8dc:	2300      	movs	r3, #0
   1d8de:	f383 8811 	msr	BASEPRI, r3
   1d8e2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d8e6:	b004      	add	sp, #16
   1d8e8:	4770      	bx	lr

0001d8ea <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1d8ea:	b530      	push	{r4, r5, lr}
   1d8ec:	b085      	sub	sp, #20
   1d8ee:	4604      	mov	r4, r0
   1d8f0:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1d8f2:	4668      	mov	r0, sp
   1d8f4:	2203      	movs	r2, #3
   1d8f6:	f7ff ff87 	bl	1d808 <memcpy>
	(void)memset(res + 3, 0, 13);
   1d8fa:	220d      	movs	r2, #13
   1d8fc:	2100      	movs	r1, #0
   1d8fe:	f10d 0003 	add.w	r0, sp, #3
   1d902:	f7ff ffac 	bl	1d85e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1d906:	4620      	mov	r0, r4
   1d908:	466a      	mov	r2, sp
   1d90a:	4669      	mov	r1, sp
   1d90c:	f7ef feca 	bl	d6a4 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1d910:	4604      	mov	r4, r0
   1d912:	b920      	cbnz	r0, 1d91e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1d914:	2203      	movs	r2, #3
   1d916:	4669      	mov	r1, sp
   1d918:	4628      	mov	r0, r5
   1d91a:	f7ff ff75 	bl	1d808 <memcpy>

	return 0;
}
   1d91e:	4620      	mov	r0, r4
   1d920:	b005      	add	sp, #20
   1d922:	bd30      	pop	{r4, r5, pc}

0001d924 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1d924:	b513      	push	{r0, r1, r4, lr}
   1d926:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1d928:	aa01      	add	r2, sp, #4
   1d92a:	3103      	adds	r1, #3
   1d92c:	f7ff ffdd 	bl	1d8ea <ah>
	if (err) {
   1d930:	b948      	cbnz	r0, 1d946 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1d932:	2203      	movs	r2, #3
   1d934:	a901      	add	r1, sp, #4
   1d936:	4620      	mov	r0, r4
   1d938:	f7ff ff55 	bl	1d7e6 <memcmp>
   1d93c:	fab0 f080 	clz	r0, r0
   1d940:	0940      	lsrs	r0, r0, #5
}
   1d942:	b002      	add	sp, #8
   1d944:	bd10      	pop	{r4, pc}
		return false;
   1d946:	2000      	movs	r0, #0
   1d948:	e7fb      	b.n	1d942 <bt_rpa_irk_matches+0x1e>

0001d94a <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1d94a:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1d94c:	1cce      	adds	r6, r1, #3
{
   1d94e:	4605      	mov	r5, r0
   1d950:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1d952:	4630      	mov	r0, r6
   1d954:	2103      	movs	r1, #3
   1d956:	f7ef fea3 	bl	d6a0 <bt_rand>
	if (err) {
   1d95a:	b960      	cbnz	r0, 1d976 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1d95c:	7963      	ldrb	r3, [r4, #5]
   1d95e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d966:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1d968:	4622      	mov	r2, r4
   1d96a:	4631      	mov	r1, r6
   1d96c:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1d96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1d972:	f7ff bfba 	b.w	1d8ea <ah>
}
   1d976:	bd70      	pop	{r4, r5, r6, pc}

0001d978 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1d978:	b510      	push	{r4, lr}
   1d97a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1d97c:	7801      	ldrb	r1, [r0, #0]
   1d97e:	7822      	ldrb	r2, [r4, #0]
   1d980:	428a      	cmp	r2, r1
{
   1d982:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1d984:	d00f      	beq.n	1d9a6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1d986:	4669      	mov	r1, sp
   1d988:	f7e7 fb32 	bl	4ff0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1d98c:	a905      	add	r1, sp, #20
   1d98e:	4620      	mov	r0, r4
   1d990:	f7e7 fb2e 	bl	4ff0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1d994:	2210      	movs	r2, #16
   1d996:	f10d 0115 	add.w	r1, sp, #21
   1d99a:	f10d 0001 	add.w	r0, sp, #1
   1d99e:	f7ff ff22 	bl	1d7e6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1d9a2:	b00a      	add	sp, #40	; 0x28
   1d9a4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1d9a6:	2a01      	cmp	r2, #1
   1d9a8:	d006      	beq.n	1d9b8 <bt_uuid_cmp+0x40>
   1d9aa:	2a02      	cmp	r2, #2
   1d9ac:	d007      	beq.n	1d9be <bt_uuid_cmp+0x46>
   1d9ae:	b972      	cbnz	r2, 1d9ce <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1d9b0:	8840      	ldrh	r0, [r0, #2]
   1d9b2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d9b4:	1ac0      	subs	r0, r0, r3
   1d9b6:	e7f4      	b.n	1d9a2 <bt_uuid_cmp+0x2a>
   1d9b8:	6840      	ldr	r0, [r0, #4]
   1d9ba:	6863      	ldr	r3, [r4, #4]
   1d9bc:	e7fa      	b.n	1d9b4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d9be:	2210      	movs	r2, #16
   1d9c0:	1c61      	adds	r1, r4, #1
   1d9c2:	3001      	adds	r0, #1
}
   1d9c4:	b00a      	add	sp, #40	; 0x28
   1d9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d9ca:	f7ff bf0c 	b.w	1d7e6 <memcmp>
	switch (u1->type) {
   1d9ce:	f06f 0015 	mvn.w	r0, #21
   1d9d2:	e7e6      	b.n	1d9a2 <bt_uuid_cmp+0x2a>

0001d9d4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1d9d4:	2a04      	cmp	r2, #4
{
   1d9d6:	b510      	push	{r4, lr}
	switch (data_len) {
   1d9d8:	d00a      	beq.n	1d9f0 <bt_uuid_create+0x1c>
   1d9da:	2a10      	cmp	r2, #16
   1d9dc:	d00d      	beq.n	1d9fa <bt_uuid_create+0x26>
   1d9de:	2a02      	cmp	r2, #2
   1d9e0:	f04f 0300 	mov.w	r3, #0
   1d9e4:	d10f      	bne.n	1da06 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1d9e6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1d9e8:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1d9ea:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1d9ec:	2001      	movs	r0, #1
}
   1d9ee:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1d9f0:	2301      	movs	r3, #1
   1d9f2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d9f4:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1d9f6:	6042      	str	r2, [r0, #4]
		break;
   1d9f8:	e7f8      	b.n	1d9ec <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1d9fa:	2302      	movs	r3, #2
   1d9fc:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1da00:	f7ff ff02 	bl	1d808 <memcpy>
		break;
   1da04:	e7f2      	b.n	1d9ec <bt_uuid_create+0x18>
	switch (data_len) {
   1da06:	4618      	mov	r0, r3
   1da08:	e7f1      	b.n	1d9ee <bt_uuid_create+0x1a>

0001da0a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1da0a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1da0c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1da0e:	2106      	movs	r1, #6
{
   1da10:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1da12:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1da16:	f7ef fe43 	bl	d6a0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1da1a:	b918      	cbnz	r0, 1da24 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1da1c:	79a3      	ldrb	r3, [r4, #6]
   1da1e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1da22:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1da24:	bd10      	pop	{r4, pc}

0001da26 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1da26:	280f      	cmp	r0, #15
   1da28:	d806      	bhi.n	1da38 <bt_hci_evt_get_flags+0x12>
   1da2a:	280d      	cmp	r0, #13
   1da2c:	d80b      	bhi.n	1da46 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1da2e:	2805      	cmp	r0, #5
   1da30:	bf14      	ite	ne
   1da32:	2002      	movne	r0, #2
   1da34:	2003      	moveq	r0, #3
   1da36:	4770      	bx	lr
	switch (evt) {
   1da38:	2813      	cmp	r0, #19
   1da3a:	d004      	beq.n	1da46 <bt_hci_evt_get_flags+0x20>
   1da3c:	281a      	cmp	r0, #26
   1da3e:	bf14      	ite	ne
   1da40:	2002      	movne	r0, #2
   1da42:	2001      	moveq	r0, #1
   1da44:	4770      	bx	lr
   1da46:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1da48:	4770      	bx	lr

0001da4a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1da4a:	2207      	movs	r2, #7
   1da4c:	f7ff bedc 	b.w	1d808 <memcpy>

0001da50 <atomic_and>:
{
   1da50:	4603      	mov	r3, r0
}
   1da52:	f3bf 8f5b 	dmb	ish
   1da56:	e853 0f00 	ldrex	r0, [r3]
   1da5a:	ea00 0201 	and.w	r2, r0, r1
   1da5e:	e843 2c00 	strex	ip, r2, [r3]
   1da62:	f1bc 0f00 	cmp.w	ip, #0
   1da66:	d1f6      	bne.n	1da56 <atomic_and+0x6>
   1da68:	f3bf 8f5b 	dmb	ish
   1da6c:	4770      	bx	lr

0001da6e <atomic_or>:
{
   1da6e:	4603      	mov	r3, r0
}
   1da70:	f3bf 8f5b 	dmb	ish
   1da74:	e853 0f00 	ldrex	r0, [r3]
   1da78:	ea40 0201 	orr.w	r2, r0, r1
   1da7c:	e843 2c00 	strex	ip, r2, [r3]
   1da80:	f1bc 0f00 	cmp.w	ip, #0
   1da84:	d1f6      	bne.n	1da74 <atomic_or+0x6>
   1da86:	f3bf 8f5b 	dmb	ish
   1da8a:	4770      	bx	lr

0001da8c <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1da8c:	f7e7 bf12 	b.w	58b4 <bt_le_create_conn_legacy>

0001da90 <bt_hci_disconnect>:
{
   1da90:	b570      	push	{r4, r5, r6, lr}
   1da92:	4606      	mov	r6, r0
   1da94:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1da96:	f240 4006 	movw	r0, #1030	; 0x406
   1da9a:	2103      	movs	r1, #3
   1da9c:	f7e7 fe2c 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
   1daa0:	4604      	mov	r4, r0
   1daa2:	b168      	cbz	r0, 1dac0 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1daa4:	2103      	movs	r1, #3
   1daa6:	3008      	adds	r0, #8
   1daa8:	f001 fa49 	bl	1ef3e <net_buf_simple_add>
	disconn->reason = reason;
   1daac:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1daae:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dab0:	4621      	mov	r1, r4
   1dab2:	2200      	movs	r2, #0
}
   1dab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dab8:	f240 4006 	movw	r0, #1030	; 0x406
   1dabc:	f7e7 be56 	b.w	576c <bt_hci_cmd_send_sync>
}
   1dac0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dac4:	bd70      	pop	{r4, r5, r6, pc}

0001dac6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1dac6:	8803      	ldrh	r3, [r0, #0]
   1dac8:	8842      	ldrh	r2, [r0, #2]
   1daca:	4293      	cmp	r3, r2
{
   1dacc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dace:	d819      	bhi.n	1db04 <bt_le_conn_params_valid+0x3e>
   1dad0:	2b05      	cmp	r3, #5
   1dad2:	d917      	bls.n	1db04 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1dad4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1dad8:	d814      	bhi.n	1db04 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1dada:	8883      	ldrh	r3, [r0, #4]
   1dadc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1dae0:	d210      	bcs.n	1db04 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dae2:	88c0      	ldrh	r0, [r0, #6]
   1dae4:	f1a0 010a 	sub.w	r1, r0, #10
   1dae8:	b289      	uxth	r1, r1
   1daea:	f640 4476 	movw	r4, #3190	; 0xc76
   1daee:	42a1      	cmp	r1, r4
   1daf0:	d808      	bhi.n	1db04 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1daf2:	3301      	adds	r3, #1
   1daf4:	b29b      	uxth	r3, r3
   1daf6:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1daf8:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1dafc:	bf34      	ite	cc
   1dafe:	2001      	movcc	r0, #1
   1db00:	2000      	movcs	r0, #0
}
   1db02:	bd10      	pop	{r4, pc}
		return false;
   1db04:	2000      	movs	r0, #0
   1db06:	e7fc      	b.n	1db02 <bt_le_conn_params_valid+0x3c>

0001db08 <bt_le_set_data_len>:
{
   1db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db0a:	4607      	mov	r7, r0
   1db0c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1db0e:	f242 0022 	movw	r0, #8226	; 0x2022
   1db12:	2106      	movs	r1, #6
{
   1db14:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1db16:	f7e7 fdef 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
   1db1a:	4604      	mov	r4, r0
   1db1c:	b170      	cbz	r0, 1db3c <bt_le_set_data_len+0x34>
   1db1e:	2106      	movs	r1, #6
   1db20:	3008      	adds	r0, #8
   1db22:	f001 fa0c 	bl	1ef3e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db26:	883b      	ldrh	r3, [r7, #0]
   1db28:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1db2a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1db2c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1db2e:	4621      	mov	r1, r4
   1db30:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1db34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1db38:	f7e7 bf2e 	b.w	5998 <bt_hci_cmd_send>
}
   1db3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1db40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001db42 <bt_le_set_phy>:
{
   1db42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db46:	4680      	mov	r8, r0
   1db48:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1db4a:	f242 0032 	movw	r0, #8242	; 0x2032
   1db4e:	2107      	movs	r1, #7
{
   1db50:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1db54:	4616      	mov	r6, r2
   1db56:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1db58:	f7e7 fdce 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
   1db5c:	4604      	mov	r4, r0
   1db5e:	b190      	cbz	r0, 1db86 <bt_le_set_phy+0x44>
   1db60:	2107      	movs	r1, #7
   1db62:	3008      	adds	r0, #8
   1db64:	f001 f9eb 	bl	1ef3e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db68:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1db6c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1db6e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1db70:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db72:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1db74:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1db78:	4621      	mov	r1, r4
   1db7a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1db7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1db82:	f7e7 bf09 	b.w	5998 <bt_hci_cmd_send>
}
   1db86:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1db8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001db8e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1db8e:	6880      	ldr	r0, [r0, #8]
   1db90:	f7e7 bfb4 	b.w	5afc <bt_hci_le_enh_conn_complete>

0001db94 <le_legacy_conn_complete>:
{
   1db94:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1db96:	6881      	ldr	r1, [r0, #8]
{
   1db98:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1db9a:	780b      	ldrb	r3, [r1, #0]
   1db9c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1dba0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1dba4:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1dba8:	78cb      	ldrb	r3, [r1, #3]
   1dbaa:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1dbae:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1dbb2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1dbb6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1dbba:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1dbbe:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1dbc2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1dbc6:	7c4b      	ldrb	r3, [r1, #17]
   1dbc8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1dbcc:	a803      	add	r0, sp, #12
   1dbce:	3104      	adds	r1, #4
   1dbd0:	f7ff ff3b 	bl	1da4a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1dbd4:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1dbd6:	4669      	mov	r1, sp
   1dbd8:	2206      	movs	r2, #6
   1dbda:	f10d 0013 	add.w	r0, sp, #19
   1dbde:	9400      	str	r4, [sp, #0]
   1dbe0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1dbe4:	f7ff fe10 	bl	1d808 <memcpy>
   1dbe8:	2206      	movs	r2, #6
   1dbea:	4669      	mov	r1, sp
   1dbec:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1dbf0:	9400      	str	r4, [sp, #0]
   1dbf2:	f8ad 4004 	strh.w	r4, [sp, #4]
   1dbf6:	f7ff fe07 	bl	1d808 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1dbfa:	a802      	add	r0, sp, #8
   1dbfc:	f7e7 ff7e 	bl	5afc <bt_hci_le_enh_conn_complete>
}
   1dc00:	b00a      	add	sp, #40	; 0x28
   1dc02:	bd10      	pop	{r4, pc}

0001dc04 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1dc04:	2000      	movs	r0, #0
   1dc06:	4770      	bx	lr

0001dc08 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1dc08:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1dc0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1dc0e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1dc10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc14:	2100      	movs	r1, #0
{
   1dc16:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1dc18:	f7e7 fa56 	bl	50c8 <bt_buf_get_evt>
   1dc1c:	2102      	movs	r1, #2
   1dc1e:	4604      	mov	r4, r0
   1dc20:	3008      	adds	r0, #8
   1dc22:	f001 f98c 	bl	1ef3e <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1dc26:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1dc28:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1dc2a:	4620      	mov	r0, r4
   1dc2c:	bd70      	pop	{r4, r5, r6, pc}

0001dc2e <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1dc2e:	3103      	adds	r1, #3
{
   1dc30:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1dc32:	b2c9      	uxtb	r1, r1
{
   1dc34:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1dc36:	200e      	movs	r0, #14
   1dc38:	f7ff ffe6 	bl	1dc08 <bt_hci_evt_create>
   1dc3c:	2103      	movs	r1, #3
   1dc3e:	4604      	mov	r4, r0
   1dc40:	3008      	adds	r0, #8
   1dc42:	f001 f97c 	bl	1ef3e <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1dc46:	2301      	movs	r3, #1
   1dc48:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1dc4a:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1dc4e:	4620      	mov	r0, r4
   1dc50:	bd38      	pop	{r3, r4, r5, pc}

0001dc52 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1dc52:	b570      	push	{r4, r5, r6, lr}
   1dc54:	4605      	mov	r5, r0
   1dc56:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1dc58:	200f      	movs	r0, #15
   1dc5a:	2104      	movs	r1, #4
   1dc5c:	f7ff ffd4 	bl	1dc08 <bt_hci_evt_create>
   1dc60:	2104      	movs	r1, #4
   1dc62:	4604      	mov	r4, r0
   1dc64:	3008      	adds	r0, #8
   1dc66:	f001 f96a 	bl	1ef3e <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1dc6a:	2201      	movs	r2, #1
	cs->status = status;
   1dc6c:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1dc6e:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1dc70:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1dc72:	4620      	mov	r0, r4
   1dc74:	bd70      	pop	{r4, r5, r6, pc}

0001dc76 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dc76:	f3bf 8f5b 	dmb	ish
   1dc7a:	6800      	ldr	r0, [r0, #0]
   1dc7c:	f3bf 8f5b 	dmb	ish
}
   1dc80:	4770      	bx	lr

0001dc82 <is_adv_using_rand_addr>:
{
   1dc82:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1dc84:	f7e9 fa30 	bl	70e8 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1dc88:	b120      	cbz	r0, 1dc94 <is_adv_using_rand_addr+0x12>
   1dc8a:	3010      	adds	r0, #16
   1dc8c:	f7ff fff3 	bl	1dc76 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1dc90:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1dc94:	bd08      	pop	{r3, pc}

0001dc96 <bt_lookup_id_addr>:
}
   1dc96:	4608      	mov	r0, r1
   1dc98:	4770      	bx	lr

0001dc9a <bt_id_set_private_addr>:
{
   1dc9a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1dc9c:	2106      	movs	r1, #6
   1dc9e:	4668      	mov	r0, sp
   1dca0:	f7ef fcfe 	bl	d6a0 <bt_rand>
	if (err) {
   1dca4:	b940      	cbnz	r0, 1dcb8 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1dca6:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1dcaa:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1dcac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dcb0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1dcb4:	f7e8 fe9c 	bl	69f0 <set_random_address>
}
   1dcb8:	b003      	add	sp, #12
   1dcba:	f85d fb04 	ldr.w	pc, [sp], #4

0001dcbe <bt_id_set_adv_private_addr>:
{
   1dcbe:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1dcc0:	2106      	movs	r1, #6
   1dcc2:	4668      	mov	r0, sp
   1dcc4:	f7ef fcec 	bl	d6a0 <bt_rand>
	if (err) {
   1dcc8:	b940      	cbnz	r0, 1dcdc <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1dcca:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dcce:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1dcd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dcd4:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dcd8:	f7e8 fe8a 	bl	69f0 <set_random_address>
}
   1dcdc:	b003      	add	sp, #12
   1dcde:	f85d fb04 	ldr.w	pc, [sp], #4

0001dce2 <bt_id_scan_random_addr_check>:
{
   1dce2:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1dce4:	f7e9 fa00 	bl	70e8 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1dce8:	b110      	cbz	r0, 1dcf0 <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dcea:	3010      	adds	r0, #16
   1dcec:	f7ff ffc3 	bl	1dc76 <atomic_get>
}
   1dcf0:	2001      	movs	r0, #1
   1dcf2:	bd08      	pop	{r3, pc}

0001dcf4 <get_adv_channel_map>:
{
   1dcf4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1dcf6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1dcfa:	bf0c      	ite	eq
   1dcfc:	2007      	moveq	r0, #7
   1dcfe:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1dd00:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1dd02:	bf48      	it	mi
   1dd04:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1dd08:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1dd0a:	bf48      	it	mi
   1dd0c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1dd10:	4770      	bx	lr

0001dd12 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dd12:	f3bf 8f5b 	dmb	ish
   1dd16:	6800      	ldr	r0, [r0, #0]
   1dd18:	f3bf 8f5b 	dmb	ish
}
   1dd1c:	4770      	bx	lr

0001dd1e <atomic_and>:
{
   1dd1e:	4603      	mov	r3, r0
}
   1dd20:	f3bf 8f5b 	dmb	ish
   1dd24:	e853 0f00 	ldrex	r0, [r3]
   1dd28:	ea00 0201 	and.w	r2, r0, r1
   1dd2c:	e843 2c00 	strex	ip, r2, [r3]
   1dd30:	f1bc 0f00 	cmp.w	ip, #0
   1dd34:	d1f6      	bne.n	1dd24 <atomic_and+0x6>
   1dd36:	f3bf 8f5b 	dmb	ish
   1dd3a:	4770      	bx	lr

0001dd3c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1dd3c:	2301      	movs	r3, #1
{
   1dd3e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1dd40:	fa03 f101 	lsl.w	r1, r3, r1
{
   1dd44:	4604      	mov	r4, r0
	if (val) {
   1dd46:	b162      	cbz	r2, 1dd62 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dd48:	f3bf 8f5b 	dmb	ish
   1dd4c:	e854 3f00 	ldrex	r3, [r4]
   1dd50:	430b      	orrs	r3, r1
   1dd52:	e844 3200 	strex	r2, r3, [r4]
   1dd56:	2a00      	cmp	r2, #0
   1dd58:	d1f8      	bne.n	1dd4c <atomic_set_bit_to+0x10>
   1dd5a:	f3bf 8f5b 	dmb	ish
	}
}
   1dd5e:	bc10      	pop	{r4}
   1dd60:	4770      	bx	lr
   1dd62:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1dd64:	43c9      	mvns	r1, r1
   1dd66:	f7ff bfda 	b.w	1dd1e <atomic_and>

0001dd6a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1dd6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd6e:	b087      	sub	sp, #28
   1dd70:	4605      	mov	r5, r0
   1dd72:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1dd76:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1dd7a:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1dd7e:	460c      	mov	r4, r1
   1dd80:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1dd82:	2100      	movs	r1, #0
   1dd84:	2210      	movs	r2, #16
   1dd86:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1dd88:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1dd8a:	f7ff fd68 	bl	1d85e <memset>
	if (use_name) {
   1dd8e:	b187      	cbz	r7, 1ddb2 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1dd90:	f7e8 fe10 	bl	69b4 <bt_get_name>
   1dd94:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1dd96:	2c00      	cmp	r4, #0
   1dd98:	d13e      	bne.n	1de18 <le_adv_update.constprop.0+0xae>
   1dd9a:	2e00      	cmp	r6, #0
   1dd9c:	d148      	bne.n	1de30 <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1dd9e:	4648      	mov	r0, r9
   1dda0:	f7ff fd05 	bl	1d7ae <strlen>
   1dda4:	2209      	movs	r2, #9
   1dda6:	f88d 2000 	strb.w	r2, [sp]
   1ddaa:	f88d 0001 	strb.w	r0, [sp, #1]
   1ddae:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1ddb2:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1ddb6:	2f00      	cmp	r7, #0
   1ddb8:	d03c      	beq.n	1de34 <le_adv_update.constprop.0+0xca>
   1ddba:	f1ba 0f00 	cmp.w	sl, #0
   1ddbe:	d002      	beq.n	1ddc6 <le_adv_update.constprop.0+0x5c>
   1ddc0:	f1b8 0f00 	cmp.w	r8, #0
   1ddc4:	d036      	beq.n	1de34 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1ddc6:	2301      	movs	r3, #1
			d[1].data = &data;
   1ddc8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1ddcc:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1ddce:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1ddd0:	a902      	add	r1, sp, #8
   1ddd2:	f242 0008 	movw	r0, #8200	; 0x2008
   1ddd6:	f7e9 f8d1 	bl	6f7c <hci_set_ad>
		if (err) {
   1ddda:	4604      	mov	r4, r0
   1dddc:	b978      	cbnz	r0, 1ddfe <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1ddde:	f1ba 0f00 	cmp.w	sl, #0
   1dde2:	d129      	bne.n	1de38 <le_adv_update.constprop.0+0xce>
   1dde4:	3510      	adds	r5, #16
   1dde6:	f3bf 8f5b 	dmb	ish
   1ddea:	e855 3f00 	ldrex	r3, [r5]
   1ddee:	f043 0304 	orr.w	r3, r3, #4
   1ddf2:	e845 3200 	strex	r2, r3, [r5]
   1ddf6:	2a00      	cmp	r2, #0
   1ddf8:	d1f7      	bne.n	1ddea <le_adv_update.constprop.0+0x80>
   1ddfa:	f3bf 8f5b 	dmb	ish
}
   1ddfe:	4620      	mov	r0, r4
   1de00:	b007      	add	sp, #28
   1de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1de06:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1de0a:	3908      	subs	r1, #8
   1de0c:	2901      	cmp	r1, #1
   1de0e:	d92a      	bls.n	1de66 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1de10:	3201      	adds	r2, #1
   1de12:	4593      	cmp	fp, r2
   1de14:	d1f7      	bne.n	1de06 <le_adv_update.constprop.0+0x9c>
   1de16:	e7c0      	b.n	1dd9a <le_adv_update.constprop.0+0x30>
   1de18:	2200      	movs	r2, #0
   1de1a:	e7fa      	b.n	1de12 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1de1c:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1de20:	3908      	subs	r1, #8
   1de22:	2901      	cmp	r1, #1
   1de24:	d91f      	bls.n	1de66 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1de26:	3201      	adds	r2, #1
   1de28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de2a:	4293      	cmp	r3, r2
   1de2c:	d1f6      	bne.n	1de1c <le_adv_update.constprop.0+0xb2>
   1de2e:	e7b6      	b.n	1dd9e <le_adv_update.constprop.0+0x34>
   1de30:	2200      	movs	r2, #0
   1de32:	e7f9      	b.n	1de28 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1de34:	2201      	movs	r2, #1
   1de36:	e7cb      	b.n	1ddd0 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1de38:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1de3a:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1de3c:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1de3e:	b187      	cbz	r7, 1de62 <le_adv_update.constprop.0+0xf8>
   1de40:	f1b8 0f00 	cmp.w	r8, #0
   1de44:	d10d      	bne.n	1de62 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1de46:	2301      	movs	r3, #1
			d[1].data = &data;
   1de48:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1de4c:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1de4e:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1de50:	a902      	add	r1, sp, #8
   1de52:	f242 0009 	movw	r0, #8201	; 0x2009
   1de56:	f7e9 f891 	bl	6f7c <hci_set_ad>
		if (err) {
   1de5a:	2800      	cmp	r0, #0
   1de5c:	d0c2      	beq.n	1dde4 <le_adv_update.constprop.0+0x7a>
   1de5e:	4604      	mov	r4, r0
   1de60:	e7cd      	b.n	1ddfe <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1de62:	2201      	movs	r2, #1
   1de64:	e7f4      	b.n	1de50 <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1de66:	f06f 0415 	mvn.w	r4, #21
   1de6a:	e7c8      	b.n	1ddfe <le_adv_update.constprop.0+0x94>

0001de6c <bt_le_adv_set_enable_legacy>:
{
   1de6c:	b570      	push	{r4, r5, r6, lr}
   1de6e:	4606      	mov	r6, r0
   1de70:	b086      	sub	sp, #24
   1de72:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1de74:	f242 000a 	movw	r0, #8202	; 0x200a
   1de78:	2101      	movs	r1, #1
   1de7a:	f7e7 fc3d 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
   1de7e:	4604      	mov	r4, r0
   1de80:	b1b0      	cbz	r0, 1deb0 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1de82:	3008      	adds	r0, #8
	if (enable) {
   1de84:	b195      	cbz	r5, 1deac <bt_le_adv_set_enable_legacy+0x40>
   1de86:	2101      	movs	r1, #1
   1de88:	f001 f868 	bl	1ef5c <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1de8c:	f106 0210 	add.w	r2, r6, #16
   1de90:	a903      	add	r1, sp, #12
   1de92:	4620      	mov	r0, r4
   1de94:	9500      	str	r5, [sp, #0]
   1de96:	2306      	movs	r3, #6
   1de98:	f7e7 fc1c 	bl	56d4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1de9c:	2200      	movs	r2, #0
   1de9e:	4621      	mov	r1, r4
   1dea0:	f242 000a 	movw	r0, #8202	; 0x200a
   1dea4:	f7e7 fc62 	bl	576c <bt_hci_cmd_send_sync>
}
   1dea8:	b006      	add	sp, #24
   1deaa:	bd70      	pop	{r4, r5, r6, pc}
   1deac:	4629      	mov	r1, r5
   1deae:	e7eb      	b.n	1de88 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1deb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1deb4:	e7f8      	b.n	1dea8 <bt_le_adv_set_enable_legacy+0x3c>

0001deb6 <atomic_and>:
{
   1deb6:	4603      	mov	r3, r0
}
   1deb8:	f3bf 8f5b 	dmb	ish
   1debc:	e853 0f00 	ldrex	r0, [r3]
   1dec0:	ea00 0201 	and.w	r2, r0, r1
   1dec4:	e843 2c00 	strex	ip, r2, [r3]
   1dec8:	f1bc 0f00 	cmp.w	ip, #0
   1decc:	d1f6      	bne.n	1debc <atomic_and+0x6>
   1dece:	f3bf 8f5b 	dmb	ish
   1ded2:	4770      	bx	lr

0001ded4 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1ded4:	f7e9 baf2 	b.w	74bc <bt_le_scan_set_enable_legacy>

0001ded8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ded8:	f3bf 8f5b 	dmb	ish
   1dedc:	6800      	ldr	r0, [r0, #0]
   1dede:	f3bf 8f5b 	dmb	ish
}
   1dee2:	4770      	bx	lr

0001dee4 <tx_notify>:
{
   1dee4:	b570      	push	{r4, r5, r6, lr}
   1dee6:	4604      	mov	r4, r0
	__asm__ volatile(
   1dee8:	f04f 0220 	mov.w	r2, #32
   1deec:	f3ef 8311 	mrs	r3, BASEPRI
   1def0:	f382 8811 	msr	BASEPRI, r2
   1def4:	f3bf 8f6f 	isb	sy
	return list->head;
   1def8:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1defa:	b920      	cbnz	r0, 1df06 <tx_notify+0x22>
	__asm__ volatile(
   1defc:	f383 8811 	msr	BASEPRI, r3
   1df00:	f3bf 8f6f 	isb	sy
}
   1df04:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df06:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1df08:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1df0a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df0c:	4288      	cmp	r0, r1
	list->tail = node;
   1df0e:	bf08      	it	eq
   1df10:	6262      	streq	r2, [r4, #36]	; 0x24
   1df12:	f383 8811 	msr	BASEPRI, r3
   1df16:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1df1a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1df1e:	f7e9 fd1b 	bl	7958 <tx_free>
		cb(conn, user_data);
   1df22:	4631      	mov	r1, r6
   1df24:	4620      	mov	r0, r4
   1df26:	47a8      	blx	r5
	while (1) {
   1df28:	e7de      	b.n	1dee8 <tx_notify+0x4>

0001df2a <tx_complete_work>:
	tx_notify(conn);
   1df2a:	3828      	subs	r0, #40	; 0x28
   1df2c:	f7ff bfda 	b.w	1dee4 <tx_notify>

0001df30 <bt_conn_get_security>:
}
   1df30:	2001      	movs	r0, #1
   1df32:	4770      	bx	lr

0001df34 <bt_conn_reset_rx_state>:
{
   1df34:	b510      	push	{r4, lr}
   1df36:	4604      	mov	r4, r0
	if (!conn->rx) {
   1df38:	6900      	ldr	r0, [r0, #16]
   1df3a:	b118      	cbz	r0, 1df44 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1df3c:	f7fb fe5a 	bl	19bf4 <net_buf_unref>
	conn->rx = NULL;
   1df40:	2300      	movs	r3, #0
   1df42:	6123      	str	r3, [r4, #16]
}
   1df44:	bd10      	pop	{r4, pc}

0001df46 <conn_cleanup>:
{
   1df46:	b570      	push	{r4, r5, r6, lr}
   1df48:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1df4a:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1df4e:	2200      	movs	r2, #0
   1df50:	2300      	movs	r3, #0
   1df52:	4630      	mov	r0, r6
   1df54:	f000 ff96 	bl	1ee84 <net_buf_get>
   1df58:	4605      	mov	r5, r0
   1df5a:	b950      	cbnz	r0, 1df72 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1df5c:	4620      	mov	r0, r4
   1df5e:	f7ff ffe9 	bl	1df34 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1df62:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1df66:	2200      	movs	r2, #0
}
   1df68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1df6c:	2300      	movs	r3, #0
   1df6e:	f7fd bb3b 	b.w	1b5e8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1df72:	6968      	ldr	r0, [r5, #20]
   1df74:	b108      	cbz	r0, 1df7a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1df76:	f7e9 fcef 	bl	7958 <tx_free>
		net_buf_unref(buf);
   1df7a:	4628      	mov	r0, r5
   1df7c:	f7fb fe3a 	bl	19bf4 <net_buf_unref>
   1df80:	e7e5      	b.n	1df4e <conn_cleanup+0x8>

0001df82 <bt_conn_connected>:
{
   1df82:	b510      	push	{r4, lr}
   1df84:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1df86:	f7ea faf3 	bl	8570 <bt_l2cap_connected>
	notify_connected(conn);
   1df8a:	4620      	mov	r0, r4
}
   1df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1df90:	f7e9 bcec 	b.w	796c <notify_connected>

0001df94 <bt_conn_is_peer_addr_le>:
{
   1df94:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1df96:	7a03      	ldrb	r3, [r0, #8]
   1df98:	428b      	cmp	r3, r1
{
   1df9a:	4604      	mov	r4, r0
   1df9c:	4615      	mov	r5, r2
	if (id != conn->id) {
   1df9e:	d115      	bne.n	1dfcc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1dfa0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1dfa4:	2207      	movs	r2, #7
   1dfa6:	4628      	mov	r0, r5
   1dfa8:	f7ff fc1d 	bl	1d7e6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1dfac:	b180      	cbz	r0, 1dfd0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1dfae:	78e3      	ldrb	r3, [r4, #3]
   1dfb0:	2207      	movs	r2, #7
   1dfb2:	b943      	cbnz	r3, 1dfc6 <bt_conn_is_peer_addr_le+0x32>
   1dfb4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1dfb8:	4628      	mov	r0, r5
   1dfba:	f7ff fc14 	bl	1d7e6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1dfbe:	fab0 f080 	clz	r0, r0
   1dfc2:	0940      	lsrs	r0, r0, #5
}
   1dfc4:	bd38      	pop	{r3, r4, r5, pc}
   1dfc6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1dfca:	e7f5      	b.n	1dfb8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1dfcc:	2000      	movs	r0, #0
   1dfce:	e7f9      	b.n	1dfc4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1dfd0:	2001      	movs	r0, #1
   1dfd2:	e7f7      	b.n	1dfc4 <bt_conn_is_peer_addr_le+0x30>

0001dfd4 <bt_conn_ref>:
{
   1dfd4:	b510      	push	{r4, lr}
   1dfd6:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1dfd8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1dfdc:	4610      	mov	r0, r2
   1dfde:	f7ff ff7b 	bl	1ded8 <atomic_get>
		if (!old) {
   1dfe2:	b180      	cbz	r0, 1e006 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1dfe4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1dfe8:	1c41      	adds	r1, r0, #1
   1dfea:	e852 4f00 	ldrex	r4, [r2]
   1dfee:	4284      	cmp	r4, r0
   1dff0:	d104      	bne.n	1dffc <bt_conn_ref+0x28>
   1dff2:	e842 1c00 	strex	ip, r1, [r2]
   1dff6:	f1bc 0f00 	cmp.w	ip, #0
   1dffa:	d1f6      	bne.n	1dfea <bt_conn_ref+0x16>
   1dffc:	f3bf 8f5b 	dmb	ish
   1e000:	d1ec      	bne.n	1dfdc <bt_conn_ref+0x8>
}
   1e002:	4618      	mov	r0, r3
   1e004:	bd10      	pop	{r4, pc}
			return NULL;
   1e006:	4603      	mov	r3, r0
   1e008:	e7fb      	b.n	1e002 <bt_conn_ref+0x2e>

0001e00a <bt_conn_unref>:
{
   1e00a:	b508      	push	{r3, lr}
   1e00c:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   1e00e:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e010:	f3bf 8f5b 	dmb	ish
   1e014:	e850 2f00 	ldrex	r2, [r0]
   1e018:	3a01      	subs	r2, #1
   1e01a:	e840 2100 	strex	r1, r2, [r0]
   1e01e:	2900      	cmp	r1, #0
   1e020:	d1f8      	bne.n	1e014 <bt_conn_unref+0xa>
   1e022:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e026:	789b      	ldrb	r3, [r3, #2]
   1e028:	2b01      	cmp	r3, #1
   1e02a:	d106      	bne.n	1e03a <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   1e02c:	f7ff ff54 	bl	1ded8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e030:	b918      	cbnz	r0, 1e03a <bt_conn_unref+0x30>
}
   1e032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1e036:	f7e9 b9f7 	b.w	7428 <bt_le_adv_resume>
}
   1e03a:	bd08      	pop	{r3, pc}

0001e03c <conn_lookup_handle>:
{
   1e03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e040:	4607      	mov	r7, r0
   1e042:	460e      	mov	r6, r1
   1e044:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e046:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e048:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e04c:	42b4      	cmp	r4, r6
   1e04e:	d103      	bne.n	1e058 <conn_lookup_handle+0x1c>
	return NULL;
   1e050:	2300      	movs	r3, #0
}
   1e052:	4618      	mov	r0, r3
   1e054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e058:	fb09 7004 	mla	r0, r9, r4, r7
   1e05c:	f7ff ffba 	bl	1dfd4 <bt_conn_ref>
   1e060:	4603      	mov	r3, r0
		if (!conn) {
   1e062:	b158      	cbz	r0, 1e07c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e064:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e066:	2d01      	cmp	r5, #1
   1e068:	d002      	beq.n	1e070 <conn_lookup_handle+0x34>
   1e06a:	3d07      	subs	r5, #7
   1e06c:	2d01      	cmp	r5, #1
   1e06e:	d803      	bhi.n	1e078 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e070:	881a      	ldrh	r2, [r3, #0]
   1e072:	4542      	cmp	r2, r8
   1e074:	d0ed      	beq.n	1e052 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e076:	4618      	mov	r0, r3
   1e078:	f7ff ffc7 	bl	1e00a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e07c:	3401      	adds	r4, #1
   1e07e:	e7e5      	b.n	1e04c <conn_lookup_handle+0x10>

0001e080 <bt_conn_get_dst>:
}
   1e080:	3088      	adds	r0, #136	; 0x88
   1e082:	4770      	bx	lr

0001e084 <bt_conn_le_conn_update>:
{
   1e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e086:	4607      	mov	r7, r0
   1e088:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e08a:	f242 0013 	movw	r0, #8211	; 0x2013
   1e08e:	210e      	movs	r1, #14
   1e090:	f7e7 fb32 	bl	56f8 <bt_hci_cmd_create>
	if (!buf) {
   1e094:	4606      	mov	r6, r0
   1e096:	b1d0      	cbz	r0, 1e0ce <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e098:	210e      	movs	r1, #14
   1e09a:	3008      	adds	r0, #8
   1e09c:	f000 ff4f 	bl	1ef3e <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e0a0:	220e      	movs	r2, #14
   1e0a2:	4604      	mov	r4, r0
   1e0a4:	2100      	movs	r1, #0
   1e0a6:	f7ff fbda 	bl	1d85e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e0aa:	883b      	ldrh	r3, [r7, #0]
   1e0ac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e0ae:	882b      	ldrh	r3, [r5, #0]
   1e0b0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e0b2:	886b      	ldrh	r3, [r5, #2]
   1e0b4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e0b6:	88ab      	ldrh	r3, [r5, #4]
   1e0b8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e0ba:	88eb      	ldrh	r3, [r5, #6]
   1e0bc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e0be:	4631      	mov	r1, r6
   1e0c0:	2200      	movs	r2, #0
}
   1e0c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e0c6:	f242 0013 	movw	r0, #8211	; 0x2013
   1e0ca:	f7e7 bb4f 	b.w	576c <bt_hci_cmd_send_sync>
}
   1e0ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e0d4 <l2cap_connected>:
}
   1e0d4:	4770      	bx	lr

0001e0d6 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e0d6:	3010      	adds	r0, #16
   1e0d8:	f001 bafc 	b.w	1f6d4 <k_work_cancel_delayable>

0001e0dc <bt_l2cap_chan_remove>:
	return list->head;
   1e0dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e0de:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e0e0:	b17b      	cbz	r3, 1e102 <bt_l2cap_chan_remove+0x26>
   1e0e2:	3b08      	subs	r3, #8
   1e0e4:	2200      	movs	r2, #0
   1e0e6:	b163      	cbz	r3, 1e102 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e0e8:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1e0ea:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1e0ee:	d10e      	bne.n	1e10e <bt_l2cap_chan_remove+0x32>
	return node->next;
   1e0f0:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1e0f2:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e0f4:	b932      	cbnz	r2, 1e104 <bt_l2cap_chan_remove+0x28>
   1e0f6:	42ac      	cmp	r4, r5
	list->head = node;
   1e0f8:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1e0fa:	d100      	bne.n	1e0fe <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e0fc:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1e0fe:	2200      	movs	r2, #0
   1e100:	609a      	str	r2, [r3, #8]
}
   1e102:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e104:	42ac      	cmp	r4, r5
	parent->next = child;
   1e106:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1e108:	bf08      	it	eq
   1e10a:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1e10c:	e7f7      	b.n	1e0fe <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e10e:	2c00      	cmp	r4, #0
   1e110:	d0f7      	beq.n	1e102 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1e112:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e114:	2b00      	cmp	r3, #0
   1e116:	d0f4      	beq.n	1e102 <bt_l2cap_chan_remove+0x26>
   1e118:	3b08      	subs	r3, #8
   1e11a:	4622      	mov	r2, r4
   1e11c:	e7e3      	b.n	1e0e6 <bt_l2cap_chan_remove+0xa>

0001e11e <bt_l2cap_chan_del>:
{
   1e11e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e120:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e124:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e126:	b123      	cbz	r3, 1e132 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e128:	686b      	ldr	r3, [r5, #4]
   1e12a:	b103      	cbz	r3, 1e12e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e12c:	4798      	blx	r3
	chan->conn = NULL;
   1e12e:	2300      	movs	r3, #0
   1e130:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e132:	68e3      	ldr	r3, [r4, #12]
   1e134:	b10b      	cbz	r3, 1e13a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e136:	4620      	mov	r0, r4
   1e138:	4798      	blx	r3
	if (ops->released) {
   1e13a:	69eb      	ldr	r3, [r5, #28]
   1e13c:	b11b      	cbz	r3, 1e146 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e13e:	4620      	mov	r0, r4
}
   1e140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e144:	4718      	bx	r3
}
   1e146:	bd70      	pop	{r4, r5, r6, pc}

0001e148 <bt_l2cap_disconnected>:
	return list->head;
   1e148:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e14a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e14c:	b18b      	cbz	r3, 1e172 <bt_l2cap_disconnected+0x2a>
   1e14e:	f1b3 0008 	subs.w	r0, r3, #8
   1e152:	d00e      	beq.n	1e172 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1e154:	681c      	ldr	r4, [r3, #0]
   1e156:	b104      	cbz	r4, 1e15a <bt_l2cap_disconnected+0x12>
   1e158:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e15a:	f7ff ffe0 	bl	1e11e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e15e:	b144      	cbz	r4, 1e172 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e160:	f114 0308 	adds.w	r3, r4, #8
   1e164:	d002      	beq.n	1e16c <bt_l2cap_disconnected+0x24>
	return node->next;
   1e166:	68a3      	ldr	r3, [r4, #8]
   1e168:	b103      	cbz	r3, 1e16c <bt_l2cap_disconnected+0x24>
   1e16a:	3b08      	subs	r3, #8
{
   1e16c:	4620      	mov	r0, r4
   1e16e:	461c      	mov	r4, r3
   1e170:	e7f3      	b.n	1e15a <bt_l2cap_disconnected+0x12>
}
   1e172:	bd10      	pop	{r4, pc}

0001e174 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e174:	3104      	adds	r1, #4
   1e176:	f7ea b88d 	b.w	8294 <bt_conn_create_pdu_timeout>

0001e17a <bt_l2cap_send_cb>:
{
   1e17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e17e:	4614      	mov	r4, r2
   1e180:	4605      	mov	r5, r0
   1e182:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e184:	f102 0008 	add.w	r0, r2, #8
   1e188:	2104      	movs	r1, #4
   1e18a:	461e      	mov	r6, r3
   1e18c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e190:	f000 feec 	bl	1ef6c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e194:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e196:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e198:	3a04      	subs	r2, #4
   1e19a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e19c:	4643      	mov	r3, r8
   1e19e:	4632      	mov	r2, r6
   1e1a0:	4621      	mov	r1, r4
   1e1a2:	4628      	mov	r0, r5
}
   1e1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e1a8:	f7e9 bdaa 	b.w	7d00 <bt_conn_send_cb>

0001e1ac <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1e1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e1ae:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e1b0:	2202      	movs	r2, #2
   1e1b2:	2001      	movs	r0, #1
   1e1b4:	f7ea f996 	bl	84e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1e1b8:	4604      	mov	r4, r0
   1e1ba:	b198      	cbz	r0, 1e1e4 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1e1bc:	2102      	movs	r1, #2
   1e1be:	3008      	adds	r0, #8
   1e1c0:	f000 febd 	bl	1ef3e <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1e1c4:	2300      	movs	r3, #0
   1e1c6:	7003      	strb	r3, [r0, #0]
   1e1c8:	7043      	strb	r3, [r0, #1]
   1e1ca:	4622      	mov	r2, r4
   1e1cc:	9300      	str	r3, [sp, #0]
   1e1ce:	2105      	movs	r1, #5
   1e1d0:	4628      	mov	r0, r5
   1e1d2:	f7ff ffd2 	bl	1e17a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1e1d6:	b128      	cbz	r0, 1e1e4 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1e1d8:	4620      	mov	r0, r4
}
   1e1da:	b003      	add	sp, #12
   1e1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1e1e0:	f7fb bd08 	b.w	19bf4 <net_buf_unref>
}
   1e1e4:	b003      	add	sp, #12
   1e1e6:	bd30      	pop	{r4, r5, pc}

0001e1e8 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1e1e8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e1ea:	b160      	cbz	r0, 1e206 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e1ec:	3808      	subs	r0, #8
   1e1ee:	b900      	cbnz	r0, 1e1f2 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e1f0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e1f2:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1e1f6:	428b      	cmp	r3, r1
   1e1f8:	d005      	beq.n	1e206 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e1fa:	f110 0308 	adds.w	r3, r0, #8
   1e1fe:	d001      	beq.n	1e204 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1e200:	6880      	ldr	r0, [r0, #8]
   1e202:	e7f2      	b.n	1e1ea <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e204:	4618      	mov	r0, r3
}
   1e206:	4770      	bx	lr

0001e208 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1e208:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e20a:	b160      	cbz	r0, 1e226 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e20c:	3808      	subs	r0, #8
   1e20e:	b900      	cbnz	r0, 1e212 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e210:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e212:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1e216:	428b      	cmp	r3, r1
   1e218:	d005      	beq.n	1e226 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e21a:	f110 0308 	adds.w	r3, r0, #8
   1e21e:	d001      	beq.n	1e224 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1e220:	6880      	ldr	r0, [r0, #8]
   1e222:	e7f2      	b.n	1e20a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e224:	4618      	mov	r0, r3
}
   1e226:	4770      	bx	lr

0001e228 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e228:	4770      	bx	lr

0001e22a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e22a:	4603      	mov	r3, r0
	return list->head;
   1e22c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e22e:	b128      	cbz	r0, 1e23c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e230:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1e232:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e234:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e236:	4288      	cmp	r0, r1
	list->tail = node;
   1e238:	bf08      	it	eq
   1e23a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e23c:	4770      	bx	lr

0001e23e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e23e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e240:	2000      	movs	r0, #0

	while (buf) {
   1e242:	b903      	cbnz	r3, 1e246 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e244:	4770      	bx	lr
		bytes += buf->len;
   1e246:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e248:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e24a:	4410      	add	r0, r2
		buf = buf->frags;
   1e24c:	e7f9      	b.n	1e242 <net_buf_frags_len+0x4>

0001e24e <att_sent>:
	if (chan->ops->sent) {
   1e24e:	684b      	ldr	r3, [r1, #4]
   1e250:	695b      	ldr	r3, [r3, #20]
{
   1e252:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1e254:	b103      	cbz	r3, 1e258 <att_sent+0xa>
		chan->ops->sent(chan);
   1e256:	4718      	bx	r3
}
   1e258:	4770      	bx	lr

0001e25a <attr_read_type_cb>:
{
   1e25a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e25c:	68d4      	ldr	r4, [r2, #12]
   1e25e:	7823      	ldrb	r3, [r4, #0]
   1e260:	3102      	adds	r1, #2
   1e262:	b913      	cbnz	r3, 1e26a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e264:	7021      	strb	r1, [r4, #0]
	return true;
   1e266:	2001      	movs	r0, #1
   1e268:	e006      	b.n	1e278 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e26a:	428b      	cmp	r3, r1
   1e26c:	d0fb      	beq.n	1e266 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e26e:	8983      	ldrh	r3, [r0, #12]
   1e270:	3b02      	subs	r3, #2
   1e272:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e274:	2000      	movs	r0, #0
   1e276:	6110      	str	r0, [r2, #16]
}
   1e278:	bd10      	pop	{r4, pc}

0001e27a <att_prepare_write_req>:
}
   1e27a:	2006      	movs	r0, #6
   1e27c:	4770      	bx	lr

0001e27e <att_op_get_type>:
	switch (op) {
   1e27e:	281e      	cmp	r0, #30
   1e280:	d816      	bhi.n	1e2b0 <att_op_get_type+0x32>
   1e282:	b308      	cbz	r0, 1e2c8 <att_op_get_type+0x4a>
   1e284:	1e43      	subs	r3, r0, #1
   1e286:	2b1d      	cmp	r3, #29
   1e288:	d81e      	bhi.n	1e2c8 <att_op_get_type+0x4a>
   1e28a:	e8df f003 	tbb	[pc, r3]
   1e28e:	2317      	.short	0x2317
   1e290:	23172317 	.word	0x23172317
   1e294:	23172317 	.word	0x23172317
   1e298:	23172317 	.word	0x23172317
   1e29c:	23172317 	.word	0x23172317
   1e2a0:	231d1d17 	.word	0x231d1d17
   1e2a4:	1d172317 	.word	0x1d172317
   1e2a8:	0f1b1d19 	.word	0x0f1b1d19
   1e2ac:	2004      	movs	r0, #4
   1e2ae:	4770      	bx	lr
   1e2b0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e2b4:	2b52      	cmp	r3, #82	; 0x52
   1e2b6:	d107      	bne.n	1e2c8 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1e2b8:	2000      	movs	r0, #0
}
   1e2ba:	4770      	bx	lr
		return ATT_RESPONSE;
   1e2bc:	2002      	movs	r0, #2
   1e2be:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e2c0:	2003      	movs	r0, #3
   1e2c2:	4770      	bx	lr
		return ATT_INDICATION;
   1e2c4:	2005      	movs	r0, #5
   1e2c6:	4770      	bx	lr
		return ATT_COMMAND;
   1e2c8:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e2cc:	bf0c      	ite	eq
   1e2ce:	2006      	moveq	r0, #6
   1e2d0:	2000      	movne	r0, #0
   1e2d2:	4770      	bx	lr
		return ATT_REQUEST;
   1e2d4:	2001      	movs	r0, #1
   1e2d6:	4770      	bx	lr

0001e2d8 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1e2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e2da:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e2de:	2300      	movs	r3, #0
   1e2e0:	9300      	str	r3, [sp, #0]
   1e2e2:	461a      	mov	r2, r3
   1e2e4:	f7eb fc2c 	bl	9b40 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1e2e8:	b005      	add	sp, #20
   1e2ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001e2ee <find_info_cb>:
{
   1e2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e2f0:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e2f2:	6817      	ldr	r7, [r2, #0]
{
   1e2f4:	4605      	mov	r5, r0
   1e2f6:	460e      	mov	r6, r1
   1e2f8:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e2fa:	b963      	cbnz	r3, 1e316 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e2fc:	6850      	ldr	r0, [r2, #4]
   1e2fe:	2101      	movs	r1, #1
   1e300:	3008      	adds	r0, #8
   1e302:	f000 fe1c 	bl	1ef3e <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e306:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e308:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e30a:	781b      	ldrb	r3, [r3, #0]
   1e30c:	2b00      	cmp	r3, #0
   1e30e:	bf0c      	ite	eq
   1e310:	2301      	moveq	r3, #1
   1e312:	2302      	movne	r3, #2
   1e314:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e316:	68a3      	ldr	r3, [r4, #8]
   1e318:	781b      	ldrb	r3, [r3, #0]
   1e31a:	2b01      	cmp	r3, #1
   1e31c:	d003      	beq.n	1e326 <find_info_cb+0x38>
   1e31e:	2b02      	cmp	r3, #2
   1e320:	d019      	beq.n	1e356 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e322:	2000      	movs	r0, #0
   1e324:	e016      	b.n	1e354 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e326:	682b      	ldr	r3, [r5, #0]
   1e328:	781b      	ldrb	r3, [r3, #0]
   1e32a:	2b00      	cmp	r3, #0
   1e32c:	d1f9      	bne.n	1e322 <find_info_cb+0x34>
   1e32e:	6860      	ldr	r0, [r4, #4]
   1e330:	2104      	movs	r1, #4
   1e332:	3008      	adds	r0, #8
   1e334:	f000 fe03 	bl	1ef3e <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e338:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e33a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e33c:	885b      	ldrh	r3, [r3, #2]
   1e33e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e340:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e342:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e344:	899b      	ldrh	r3, [r3, #12]
   1e346:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e34a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e34c:	2804      	cmp	r0, #4
   1e34e:	bf94      	ite	ls
   1e350:	2000      	movls	r0, #0
   1e352:	2001      	movhi	r0, #1
}
   1e354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e356:	682b      	ldr	r3, [r5, #0]
   1e358:	781b      	ldrb	r3, [r3, #0]
   1e35a:	2b02      	cmp	r3, #2
   1e35c:	d1e1      	bne.n	1e322 <find_info_cb+0x34>
   1e35e:	6860      	ldr	r0, [r4, #4]
   1e360:	2112      	movs	r1, #18
   1e362:	3008      	adds	r0, #8
   1e364:	f000 fdeb 	bl	1ef3e <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e368:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e36a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e36c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1e36e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e372:	3101      	adds	r1, #1
   1e374:	f7ff fa48 	bl	1d808 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e378:	6863      	ldr	r3, [r4, #4]
   1e37a:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e37e:	899b      	ldrh	r3, [r3, #12]
   1e380:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e382:	2812      	cmp	r0, #18
   1e384:	e7e3      	b.n	1e34e <find_info_cb+0x60>

0001e386 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e386:	68d0      	ldr	r0, [r2, #12]
   1e388:	7803      	ldrb	r3, [r0, #0]
   1e38a:	3104      	adds	r1, #4
   1e38c:	b913      	cbnz	r3, 1e394 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e38e:	7001      	strb	r1, [r0, #0]
	return true;
   1e390:	2001      	movs	r0, #1
}
   1e392:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e394:	428b      	cmp	r3, r1
   1e396:	d0fb      	beq.n	1e390 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e398:	6891      	ldr	r1, [r2, #8]
   1e39a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e39c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e39e:	3b04      	subs	r3, #4
   1e3a0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e3a2:	6110      	str	r0, [r2, #16]
		return false;
   1e3a4:	4770      	bx	lr

0001e3a6 <chan_req_sent>:
	if (chan->req) {
   1e3a6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e3aa:	b133      	cbz	r3, 1e3ba <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e3ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e3b0:	2300      	movs	r3, #0
   1e3b2:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1e3b6:	f7fd b917 	b.w	1b5e8 <k_work_reschedule>
}
   1e3ba:	4770      	bx	lr

0001e3bc <write_cb>:
{
   1e3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e3be:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e3c0:	4601      	mov	r1, r0
{
   1e3c2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e3c4:	222a      	movs	r2, #42	; 0x2a
   1e3c6:	6820      	ldr	r0, [r4, #0]
   1e3c8:	f000 fcd6 	bl	1ed78 <bt_gatt_check_perm>
   1e3cc:	4605      	mov	r5, r0
   1e3ce:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e3d0:	bb00      	cbnz	r0, 1e414 <write_cb+0x58>
	if (!data->req) {
   1e3d2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e3d4:	68b7      	ldr	r7, [r6, #8]
   1e3d6:	68e2      	ldr	r2, [r4, #12]
   1e3d8:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e3da:	2b00      	cmp	r3, #0
   1e3dc:	bf14      	ite	ne
   1e3de:	2300      	movne	r3, #0
   1e3e0:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e3e2:	9301      	str	r3, [sp, #4]
   1e3e4:	8a63      	ldrh	r3, [r4, #18]
   1e3e6:	9300      	str	r3, [sp, #0]
   1e3e8:	4631      	mov	r1, r6
   1e3ea:	8a23      	ldrh	r3, [r4, #16]
   1e3ec:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e3ee:	1e03      	subs	r3, r0, #0
   1e3f0:	db05      	blt.n	1e3fe <write_cb+0x42>
   1e3f2:	8a22      	ldrh	r2, [r4, #16]
   1e3f4:	4293      	cmp	r3, r2
   1e3f6:	d10b      	bne.n	1e410 <write_cb+0x54>
	data->err = 0U;
   1e3f8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e3fa:	2501      	movs	r5, #1
   1e3fc:	e005      	b.n	1e40a <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e3fe:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e402:	d305      	bcc.n	1e410 <write_cb+0x54>
		return -err;
   1e404:	425b      	negs	r3, r3
   1e406:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e408:	7523      	strb	r3, [r4, #20]
}
   1e40a:	4628      	mov	r0, r5
   1e40c:	b003      	add	sp, #12
   1e40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e410:	230e      	movs	r3, #14
   1e412:	e7f9      	b.n	1e408 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e414:	2500      	movs	r5, #0
   1e416:	e7f8      	b.n	1e40a <write_cb+0x4e>

0001e418 <att_chan_read>:
{
   1e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e41c:	4680      	mov	r8, r0
   1e41e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e420:	4610      	mov	r0, r2
{
   1e422:	4699      	mov	r9, r3
   1e424:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e426:	f7ff ff0a 	bl	1e23e <net_buf_frags_len>
   1e42a:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1e42e:	4283      	cmp	r3, r0
{
   1e430:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e432:	d97a      	bls.n	1e52a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e434:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e438:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e43a:	4630      	mov	r0, r6
   1e43c:	f000 fd51 	bl	1eee2 <net_buf_frag_last>
	size_t len, total = 0;
   1e440:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e444:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e446:	4630      	mov	r0, r6
   1e448:	f7ff fef9 	bl	1e23e <net_buf_frags_len>
   1e44c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1e450:	f105 0708 	add.w	r7, r5, #8
   1e454:	1a24      	subs	r4, r4, r0
   1e456:	4638      	mov	r0, r7
   1e458:	f000 fdb4 	bl	1efc4 <net_buf_simple_tailroom>
   1e45c:	4284      	cmp	r4, r0
   1e45e:	d211      	bcs.n	1e484 <att_chan_read+0x6c>
   1e460:	4630      	mov	r0, r6
   1e462:	f7ff feec 	bl	1e23e <net_buf_frags_len>
   1e466:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e46a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e46c:	bb34      	cbnz	r4, 1e4bc <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e46e:	79b0      	ldrb	r0, [r6, #6]
   1e470:	f7fb fb02 	bl	19a78 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e474:	2200      	movs	r2, #0
   1e476:	2300      	movs	r3, #0
   1e478:	f000 fcff 	bl	1ee7a <net_buf_alloc_fixed>
			if (!frag) {
   1e47c:	4605      	mov	r5, r0
   1e47e:	b930      	cbnz	r0, 1e48e <att_chan_read+0x76>
	return total;
   1e480:	4657      	mov	r7, sl
   1e482:	e02c      	b.n	1e4de <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e484:	4638      	mov	r0, r7
   1e486:	f000 fd9d 	bl	1efc4 <net_buf_simple_tailroom>
   1e48a:	4604      	mov	r4, r0
   1e48c:	e7ee      	b.n	1e46c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e48e:	4601      	mov	r1, r0
   1e490:	4630      	mov	r0, r6
   1e492:	f000 fd37 	bl	1ef04 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e496:	4630      	mov	r0, r6
   1e498:	f7ff fed1 	bl	1e23e <net_buf_frags_len>
   1e49c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e4a0:	f105 0708 	add.w	r7, r5, #8
   1e4a4:	1a24      	subs	r4, r4, r0
   1e4a6:	4638      	mov	r0, r7
   1e4a8:	f000 fd8c 	bl	1efc4 <net_buf_simple_tailroom>
   1e4ac:	4284      	cmp	r4, r0
   1e4ae:	d21a      	bcs.n	1e4e6 <att_chan_read+0xce>
   1e4b0:	4630      	mov	r0, r6
   1e4b2:	f7ff fec4 	bl	1e23e <net_buf_frags_len>
   1e4b6:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e4ba:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e4bc:	68a9      	ldr	r1, [r5, #8]
   1e4be:	89aa      	ldrh	r2, [r5, #12]
   1e4c0:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e4c4:	9803      	ldr	r0, [sp, #12]
   1e4c6:	f8cd 9000 	str.w	r9, [sp]
   1e4ca:	440a      	add	r2, r1
   1e4cc:	b2a3      	uxth	r3, r4
   1e4ce:	4659      	mov	r1, fp
   1e4d0:	47b8      	blx	r7
		if (read < 0) {
   1e4d2:	1e07      	subs	r7, r0, #0
   1e4d4:	da0c      	bge.n	1e4f0 <att_chan_read+0xd8>
				return total;
   1e4d6:	f1ba 0f00 	cmp.w	sl, #0
   1e4da:	bf18      	it	ne
   1e4dc:	4657      	movne	r7, sl
}
   1e4de:	4638      	mov	r0, r7
   1e4e0:	b005      	add	sp, #20
   1e4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e6:	4638      	mov	r0, r7
   1e4e8:	f000 fd6c 	bl	1efc4 <net_buf_simple_tailroom>
   1e4ec:	4604      	mov	r4, r0
   1e4ee:	e7e5      	b.n	1e4bc <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e4f2:	b993      	cbnz	r3, 1e51a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e4f4:	4639      	mov	r1, r7
   1e4f6:	f105 0008 	add.w	r0, r5, #8
   1e4fa:	f000 fd20 	bl	1ef3e <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e4fe:	4630      	mov	r0, r6
   1e500:	f7ff fe9d 	bl	1e23e <net_buf_frags_len>
   1e504:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1e508:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e50a:	4283      	cmp	r3, r0
		total += read;
   1e50c:	44ba      	add	sl, r7
		offset += read;
   1e50e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e512:	d9b5      	bls.n	1e480 <att_chan_read+0x68>
   1e514:	42a7      	cmp	r7, r4
   1e516:	d096      	beq.n	1e446 <att_chan_read+0x2e>
   1e518:	e7b2      	b.n	1e480 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e51a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e51c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e51e:	4639      	mov	r1, r7
   1e520:	4628      	mov	r0, r5
   1e522:	4798      	blx	r3
   1e524:	2800      	cmp	r0, #0
   1e526:	d1e5      	bne.n	1e4f4 <att_chan_read+0xdc>
   1e528:	e7aa      	b.n	1e480 <att_chan_read+0x68>
		return 0;
   1e52a:	2700      	movs	r7, #0
   1e52c:	e7d7      	b.n	1e4de <att_chan_read+0xc6>

0001e52e <chan_req_send>:
{
   1e52e:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e530:	688e      	ldr	r6, [r1, #8]
{
   1e532:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e534:	4630      	mov	r0, r6
   1e536:	f7ff fe82 	bl	1e23e <net_buf_frags_len>
   1e53a:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1e53e:	4283      	cmp	r3, r0
{
   1e540:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e542:	d30a      	bcc.n	1e55a <chan_req_send+0x2c>
	req->buf = NULL;
   1e544:	2200      	movs	r2, #0
	chan->req = req;
   1e546:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1e54a:	4628      	mov	r0, r5
	req->buf = NULL;
   1e54c:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e54e:	4631      	mov	r1, r6
   1e550:	f7ea fb5a 	bl	8c08 <chan_send>
	if (err) {
   1e554:	b100      	cbz	r0, 1e558 <chan_req_send+0x2a>
		req->buf = buf;
   1e556:	60a6      	str	r6, [r4, #8]
}
   1e558:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e55a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e55e:	e7fb      	b.n	1e558 <chan_req_send+0x2a>

0001e560 <process_queue>:
{
   1e560:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e562:	2200      	movs	r2, #0
{
   1e564:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e566:	2300      	movs	r3, #0
   1e568:	4608      	mov	r0, r1
{
   1e56a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e56c:	f000 fc8a 	bl	1ee84 <net_buf_get>
	if (buf) {
   1e570:	4605      	mov	r5, r0
   1e572:	b160      	cbz	r0, 1e58e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e574:	4601      	mov	r1, r0
   1e576:	2200      	movs	r2, #0
   1e578:	4620      	mov	r0, r4
   1e57a:	f7ea fb45 	bl	8c08 <chan_send>
		if (err) {
   1e57e:	4604      	mov	r4, r0
   1e580:	b118      	cbz	r0, 1e58a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e582:	4629      	mov	r1, r5
   1e584:	4630      	mov	r0, r6
   1e586:	f000 ffad 	bl	1f4e4 <k_queue_prepend>
}
   1e58a:	4620      	mov	r0, r4
   1e58c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e58e:	f06f 0401 	mvn.w	r4, #1
   1e592:	e7fa      	b.n	1e58a <process_queue+0x2a>

0001e594 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e594:	b510      	push	{r4, lr}
	return list->head;
   1e596:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e598:	2200      	movs	r2, #0
   1e59a:	b153      	cbz	r3, 1e5b2 <sys_slist_find_and_remove.isra.0+0x1e>
   1e59c:	428b      	cmp	r3, r1
   1e59e:	d10e      	bne.n	1e5be <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1e5a0:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1e5a2:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e5a4:	b932      	cbnz	r2, 1e5b4 <sys_slist_find_and_remove.isra.0+0x20>
   1e5a6:	42a1      	cmp	r1, r4
	list->head = node;
   1e5a8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e5aa:	d100      	bne.n	1e5ae <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1e5ac:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1e5ae:	2300      	movs	r3, #0
   1e5b0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e5b2:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e5b4:	42a1      	cmp	r1, r4
	parent->next = child;
   1e5b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e5b8:	bf08      	it	eq
   1e5ba:	6042      	streq	r2, [r0, #4]
}
   1e5bc:	e7f7      	b.n	1e5ae <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1e5be:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e5c0:	681b      	ldr	r3, [r3, #0]
   1e5c2:	e7ea      	b.n	1e59a <sys_slist_find_and_remove.isra.0+0x6>

0001e5c4 <att_exec_write_req>:
   1e5c4:	2006      	movs	r0, #6
   1e5c6:	4770      	bx	lr

0001e5c8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e5c8:	30f0      	adds	r0, #240	; 0xf0
   1e5ca:	f3bf 8f5b 	dmb	ish
   1e5ce:	e850 3f00 	ldrex	r3, [r0]
   1e5d2:	f023 0301 	bic.w	r3, r3, #1
   1e5d6:	e840 3200 	strex	r2, r3, [r0]
   1e5da:	2a00      	cmp	r2, #0
   1e5dc:	d1f7      	bne.n	1e5ce <chan_rsp_sent+0x6>
   1e5de:	f3bf 8f5b 	dmb	ish
}
   1e5e2:	4770      	bx	lr

0001e5e4 <chan_cfm_sent>:
   1e5e4:	30f0      	adds	r0, #240	; 0xf0
   1e5e6:	f3bf 8f5b 	dmb	ish
   1e5ea:	e850 3f00 	ldrex	r3, [r0]
   1e5ee:	f023 0302 	bic.w	r3, r3, #2
   1e5f2:	e840 3200 	strex	r2, r3, [r0]
   1e5f6:	2a00      	cmp	r2, #0
   1e5f8:	d1f7      	bne.n	1e5ea <chan_cfm_sent+0x6>
   1e5fa:	f3bf 8f5b 	dmb	ish
}
   1e5fe:	4770      	bx	lr

0001e600 <read_cb>:
{
   1e600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e604:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e608:	4606      	mov	r6, r0
	data->err = 0x00;
   1e60a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e60c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e610:	7317      	strb	r7, [r2, #12]
{
   1e612:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e614:	4631      	mov	r1, r6
   1e616:	2215      	movs	r2, #21
   1e618:	f000 fbae 	bl	1ed78 <bt_gatt_check_perm>
   1e61c:	4604      	mov	r4, r0
   1e61e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e620:	b9a0      	cbnz	r0, 1e64c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e622:	e9cd 0000 	strd	r0, r0, [sp]
   1e626:	88ab      	ldrh	r3, [r5, #4]
   1e628:	68aa      	ldr	r2, [r5, #8]
   1e62a:	4631      	mov	r1, r6
   1e62c:	4640      	mov	r0, r8
   1e62e:	f7ff fef3 	bl	1e418 <att_chan_read>
	if (ret < 0) {
   1e632:	1e03      	subs	r3, r0, #0
   1e634:	da0c      	bge.n	1e650 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e636:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e63a:	bf26      	itte	cs
   1e63c:	425b      	negcs	r3, r3
   1e63e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e640:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e642:	732b      	strb	r3, [r5, #12]
}
   1e644:	4620      	mov	r0, r4
   1e646:	b002      	add	sp, #8
   1e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e64c:	463c      	mov	r4, r7
   1e64e:	e7f9      	b.n	1e644 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e650:	2401      	movs	r4, #1
   1e652:	e7f7      	b.n	1e644 <read_cb+0x44>

0001e654 <bt_att_sent>:
{
   1e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e656:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1e65a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1e65e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e660:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e664:	b10b      	cbz	r3, 1e66a <bt_att_sent+0x16>
		chan->sent(chan);
   1e666:	4638      	mov	r0, r7
   1e668:	4798      	blx	r3
   1e66a:	f3bf 8f5b 	dmb	ish
   1e66e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1e672:	e853 2f00 	ldrex	r2, [r3]
   1e676:	f022 0210 	bic.w	r2, r2, #16
   1e67a:	e843 2100 	strex	r1, r2, [r3]
   1e67e:	2900      	cmp	r1, #0
   1e680:	d1f7      	bne.n	1e672 <bt_att_sent+0x1e>
   1e682:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1e686:	b30c      	cbz	r4, 1e6cc <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e688:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e68c:	b98b      	cbnz	r3, 1e6b2 <bt_att_sent+0x5e>
   1e68e:	6863      	ldr	r3, [r4, #4]
   1e690:	b17b      	cbz	r3, 1e6b2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e692:	1d20      	adds	r0, r4, #4
   1e694:	f7ff fdc9 	bl	1e22a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e698:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e69a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e69c:	4638      	mov	r0, r7
   1e69e:	f7ff ff46 	bl	1e52e <chan_req_send>
   1e6a2:	2800      	cmp	r0, #0
   1e6a4:	da12      	bge.n	1e6cc <bt_att_sent+0x78>
	parent->next = child;
   1e6a6:	6863      	ldr	r3, [r4, #4]
   1e6a8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e6aa:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e6ac:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e6ae:	b903      	cbnz	r3, 1e6b2 <bt_att_sent+0x5e>
	list->tail = node;
   1e6b0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e6b2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1e6b6:	4638      	mov	r0, r7
   1e6b8:	f7ff ff52 	bl	1e560 <process_queue>
	if (!err) {
   1e6bc:	b130      	cbz	r0, 1e6cc <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1e6be:	f104 010c 	add.w	r1, r4, #12
   1e6c2:	4638      	mov	r0, r7
}
   1e6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e6c8:	f7ff bf4a 	b.w	1e560 <process_queue>
}
   1e6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e6ce <att_req_send_process>:
{
   1e6ce:	b570      	push	{r4, r5, r6, lr}
   1e6d0:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1e6d2:	3004      	adds	r0, #4
   1e6d4:	f7ff fda9 	bl	1e22a <sys_slist_get>
	if (!node) {
   1e6d8:	4606      	mov	r6, r0
   1e6da:	b1c0      	cbz	r0, 1e70e <att_req_send_process+0x40>
	return list->head;
   1e6dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e6de:	b153      	cbz	r3, 1e6f6 <att_req_send_process+0x28>
   1e6e0:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e6e4:	d007      	beq.n	1e6f6 <att_req_send_process+0x28>
	return node->next;
   1e6e6:	681c      	ldr	r4, [r3, #0]
   1e6e8:	b10c      	cbz	r4, 1e6ee <att_req_send_process+0x20>
   1e6ea:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1e6ee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e6f2:	b13b      	cbz	r3, 1e704 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e6f4:	b964      	cbnz	r4, 1e710 <att_req_send_process+0x42>
	parent->next = child;
   1e6f6:	686b      	ldr	r3, [r5, #4]
   1e6f8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e6fa:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e6fc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e6fe:	b933      	cbnz	r3, 1e70e <att_req_send_process+0x40>
	list->tail = node;
   1e700:	60ae      	str	r6, [r5, #8]
}
   1e702:	e004      	b.n	1e70e <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1e704:	4631      	mov	r1, r6
   1e706:	f7ff ff12 	bl	1e52e <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e70a:	2800      	cmp	r0, #0
   1e70c:	dbf2      	blt.n	1e6f4 <att_req_send_process+0x26>
}
   1e70e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e710:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1e714:	d004      	beq.n	1e720 <att_req_send_process+0x52>
	return node->next;
   1e716:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e71a:	b10b      	cbz	r3, 1e720 <att_req_send_process+0x52>
   1e71c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1e720:	4620      	mov	r0, r4
   1e722:	461c      	mov	r4, r3
   1e724:	e7e3      	b.n	1e6ee <att_req_send_process+0x20>

0001e726 <bt_att_status>:
{
   1e726:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e728:	f3bf 8f5b 	dmb	ish
   1e72c:	680b      	ldr	r3, [r1, #0]
   1e72e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e732:	07db      	lsls	r3, r3, #31
{
   1e734:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e736:	d519      	bpl.n	1e76c <bt_att_status+0x46>
	if (!chan->att) {
   1e738:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e73c:	b1b0      	cbz	r0, 1e76c <bt_att_status+0x46>
	if (chan->req) {
   1e73e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e742:	b99b      	cbnz	r3, 1e76c <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1e744:	3004      	adds	r0, #4
   1e746:	f7ff fd70 	bl	1e22a <sys_slist_get>
	if (!node) {
   1e74a:	4604      	mov	r4, r0
   1e74c:	b170      	cbz	r0, 1e76c <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1e74e:	4601      	mov	r1, r0
   1e750:	f1a5 0008 	sub.w	r0, r5, #8
   1e754:	f7ff feeb 	bl	1e52e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e758:	2800      	cmp	r0, #0
   1e75a:	da07      	bge.n	1e76c <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1e75c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1e760:	685a      	ldr	r2, [r3, #4]
   1e762:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e764:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e766:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e768:	b902      	cbnz	r2, 1e76c <bt_att_status+0x46>
	list->tail = node;
   1e76a:	609c      	str	r4, [r3, #8]
}
   1e76c:	bd38      	pop	{r3, r4, r5, pc}

0001e76e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e772:	4688      	mov	r8, r1
   1e774:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e776:	2101      	movs	r1, #1
   1e778:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e77a:	4605      	mov	r5, r0
   1e77c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e77e:	f7ea fb45 	bl	8e0c <bt_att_chan_create_pdu>
	if (!buf) {
   1e782:	4604      	mov	r4, r0
   1e784:	b170      	cbz	r0, 1e7a4 <send_err_rsp.part.0+0x36>
   1e786:	2104      	movs	r1, #4
   1e788:	3008      	adds	r0, #8
   1e78a:	f000 fbd8 	bl	1ef3e <net_buf_simple_add>
	rsp->request = req;
   1e78e:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1e792:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1e794:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e798:	4621      	mov	r1, r4
   1e79a:	4628      	mov	r0, r5
}
   1e79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e7a0:	f7ea baa0 	b.w	8ce4 <bt_att_chan_send_rsp.constprop.0>
}
   1e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e7a8 <att_write_req>:
{
   1e7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e7aa:	460c      	mov	r4, r1
   1e7ac:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1e7ae:	f101 0008 	add.w	r0, r1, #8
   1e7b2:	f000 fbfb 	bl	1efac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1e7b6:	89a2      	ldrh	r2, [r4, #12]
   1e7b8:	9201      	str	r2, [sp, #4]
   1e7ba:	68a2      	ldr	r2, [r4, #8]
   1e7bc:	9200      	str	r2, [sp, #0]
   1e7be:	4603      	mov	r3, r0
   1e7c0:	2213      	movs	r2, #19
   1e7c2:	2112      	movs	r1, #18
   1e7c4:	4628      	mov	r0, r5
   1e7c6:	f7ea fc15 	bl	8ff4 <att_write_rsp.constprop.0>
}
   1e7ca:	b003      	add	sp, #12
   1e7cc:	bd30      	pop	{r4, r5, pc}

0001e7ce <att_write_cmd>:
{
   1e7ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e7d0:	460c      	mov	r4, r1
   1e7d2:	4605      	mov	r5, r0
   1e7d4:	f101 0008 	add.w	r0, r1, #8
   1e7d8:	f000 fbe8 	bl	1efac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1e7dc:	89a2      	ldrh	r2, [r4, #12]
   1e7de:	9201      	str	r2, [sp, #4]
   1e7e0:	68a2      	ldr	r2, [r4, #8]
   1e7e2:	9200      	str	r2, [sp, #0]
   1e7e4:	2200      	movs	r2, #0
   1e7e6:	4603      	mov	r3, r0
   1e7e8:	4611      	mov	r1, r2
   1e7ea:	4628      	mov	r0, r5
   1e7ec:	f7ea fc02 	bl	8ff4 <att_write_rsp.constprop.0>
}
   1e7f0:	b003      	add	sp, #12
   1e7f2:	bd30      	pop	{r4, r5, pc}

0001e7f4 <att_read_blob_req>:
{
   1e7f4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e7f6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e7f8:	8813      	ldrh	r3, [r2, #0]
   1e7fa:	8852      	ldrh	r2, [r2, #2]
   1e7fc:	9200      	str	r2, [sp, #0]
   1e7fe:	210c      	movs	r1, #12
   1e800:	220d      	movs	r2, #13
   1e802:	f7ea fd55 	bl	92b0 <att_read_rsp>
}
   1e806:	b003      	add	sp, #12
   1e808:	f85d fb04 	ldr.w	pc, [sp], #4

0001e80c <att_read_req>:
{
   1e80c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1e80e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e810:	2200      	movs	r2, #0
   1e812:	881b      	ldrh	r3, [r3, #0]
   1e814:	9200      	str	r2, [sp, #0]
   1e816:	210a      	movs	r1, #10
   1e818:	220b      	movs	r2, #11
   1e81a:	f7ea fd49 	bl	92b0 <att_read_rsp>
}
   1e81e:	b003      	add	sp, #12
   1e820:	f85d fb04 	ldr.w	pc, [sp], #4

0001e824 <att_mtu_req>:
{
   1e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1e826:	6803      	ldr	r3, [r0, #0]
{
   1e828:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1e82a:	6818      	ldr	r0, [r3, #0]
   1e82c:	f3bf 8f5b 	dmb	ish
   1e830:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   1e834:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1e838:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1e83c:	071b      	lsls	r3, r3, #28
   1e83e:	d41a      	bmi.n	1e876 <att_mtu_req+0x52>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1e840:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1e842:	881b      	ldrh	r3, [r3, #0]
   1e844:	2b16      	cmp	r3, #22
   1e846:	d918      	bls.n	1e87a <att_mtu_req+0x56>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1e848:	2202      	movs	r2, #2
   1e84a:	2103      	movs	r1, #3
   1e84c:	f7ea fc34 	bl	90b8 <bt_att_create_pdu>
	if (!pdu) {
   1e850:	4606      	mov	r6, r0
   1e852:	b1a0      	cbz	r0, 1e87e <att_mtu_req+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1e854:	2102      	movs	r1, #2
   1e856:	3008      	adds	r0, #8
   1e858:	f000 fb71 	bl	1ef3e <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1e85c:	2717      	movs	r7, #23
   1e85e:	7007      	strb	r7, [r0, #0]
   1e860:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1e862:	4631      	mov	r1, r6
   1e864:	4628      	mov	r0, r5
   1e866:	f7ea fa3d 	bl	8ce4 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1e86a:	f8a5 707a 	strh.w	r7, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1e86e:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
	return 0;
   1e872:	4620      	mov	r0, r4
}
   1e874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1e876:	2006      	movs	r0, #6
   1e878:	e7fc      	b.n	1e874 <att_mtu_req+0x50>
		return BT_ATT_ERR_INVALID_PDU;
   1e87a:	2004      	movs	r0, #4
   1e87c:	e7fa      	b.n	1e874 <att_mtu_req+0x50>
		return BT_ATT_ERR_UNLIKELY;
   1e87e:	200e      	movs	r0, #14
   1e880:	e7f8      	b.n	1e874 <att_mtu_req+0x50>

0001e882 <bt_att_init>:
	bt_gatt_init();
   1e882:	f7eb b8dd 	b.w	9a40 <bt_gatt_init>

0001e886 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e886:	898a      	ldrh	r2, [r1, #12]
   1e888:	6889      	ldr	r1, [r1, #8]
   1e88a:	2300      	movs	r3, #0
   1e88c:	f7ea be82 	b.w	9594 <att_handle_rsp>

0001e890 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1e890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e894:	4607      	mov	r7, r0
   1e896:	460d      	mov	r5, r1
   1e898:	4616      	mov	r6, r2
   1e89a:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1e89c:	f7e9 fffc 	bl	8898 <att_get>
	if (!att) {
   1e8a0:	4604      	mov	r4, r0
   1e8a2:	b938      	cbnz	r0, 1e8b4 <bt_att_send+0x24>
		net_buf_unref(buf);
   1e8a4:	4628      	mov	r0, r5
   1e8a6:	f7fb f9a5 	bl	19bf4 <net_buf_unref>
		return -ENOTCONN;
   1e8aa:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1e8ae:	b002      	add	sp, #8
   1e8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1e8b4:	b146      	cbz	r6, 1e8c8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1e8b6:	f8cd 8000 	str.w	r8, [sp]
   1e8ba:	4633      	mov	r3, r6
   1e8bc:	462a      	mov	r2, r5
   1e8be:	2104      	movs	r1, #4
   1e8c0:	4638      	mov	r0, r7
   1e8c2:	f7ff fc5a 	bl	1e17a <bt_l2cap_send_cb>
   1e8c6:	e7f2      	b.n	1e8ae <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1e8c8:	f100 060c 	add.w	r6, r0, #12
   1e8cc:	4629      	mov	r1, r5
   1e8ce:	4630      	mov	r0, r6
   1e8d0:	f000 faf6 	bl	1eec0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1e8d4:	2200      	movs	r2, #0
   1e8d6:	2300      	movs	r3, #0
   1e8d8:	4630      	mov	r0, r6
   1e8da:	f000 fad3 	bl	1ee84 <net_buf_get>
	if (!buf) {
   1e8de:	4605      	mov	r5, r0
   1e8e0:	b908      	cbnz	r0, 1e8e6 <bt_att_send+0x56>
	return 0;
   1e8e2:	2000      	movs	r0, #0
   1e8e4:	e7e3      	b.n	1e8ae <bt_att_send+0x1e>
	return list->head;
   1e8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e8e8:	b1c3      	cbz	r3, 1e91c <bt_att_send+0x8c>
   1e8ea:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e8ee:	d015      	beq.n	1e91c <bt_att_send+0x8c>
	return node->next;
   1e8f0:	681c      	ldr	r4, [r3, #0]
   1e8f2:	b10c      	cbz	r4, 1e8f8 <bt_att_send+0x68>
   1e8f4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1e8f8:	2200      	movs	r2, #0
   1e8fa:	4629      	mov	r1, r5
   1e8fc:	f7ea f984 	bl	8c08 <chan_send>
		if (err >= 0) {
   1e900:	2800      	cmp	r0, #0
   1e902:	daee      	bge.n	1e8e2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e904:	b154      	cbz	r4, 1e91c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e906:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1e90a:	d004      	beq.n	1e916 <bt_att_send+0x86>
	return node->next;
   1e90c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1e910:	b10b      	cbz	r3, 1e916 <bt_att_send+0x86>
   1e912:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1e916:	4620      	mov	r0, r4
   1e918:	461c      	mov	r4, r3
   1e91a:	e7ed      	b.n	1e8f8 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1e91c:	4629      	mov	r1, r5
   1e91e:	4630      	mov	r0, r6
   1e920:	f000 fde0 	bl	1f4e4 <k_queue_prepend>
   1e924:	e7dd      	b.n	1e8e2 <bt_att_send+0x52>

0001e926 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1e926:	b510      	push	{r4, lr}
   1e928:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1e92a:	f7e9 ffb5 	bl	8898 <att_get>
	if (!att) {
   1e92e:	b160      	cbz	r0, 1e94a <bt_att_req_send+0x24>
	parent->next = child;
   1e930:	2300      	movs	r3, #0
   1e932:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e934:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1e936:	b92b      	cbnz	r3, 1e944 <bt_att_req_send+0x1e>
	list->head = node;
   1e938:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1e93c:	f7ff fec7 	bl	1e6ce <att_req_send_process>

	return 0;
   1e940:	2000      	movs	r0, #0
}
   1e942:	bd10      	pop	{r4, pc}
	parent->next = child;
   1e944:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e946:	6084      	str	r4, [r0, #8]
}
   1e948:	e7f8      	b.n	1e93c <bt_att_req_send+0x16>
		return -ENOTCONN;
   1e94a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e94e:	e7f8      	b.n	1e942 <bt_att_req_send+0x1c>

0001e950 <gatt_ccc_changed>:
{
   1e950:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1e952:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1e954:	895a      	ldrh	r2, [r3, #10]
   1e956:	428a      	cmp	r2, r1
   1e958:	d003      	beq.n	1e962 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1e95a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1e95c:	68db      	ldr	r3, [r3, #12]
   1e95e:	b103      	cbz	r3, 1e962 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1e960:	4718      	bx	r3
}
   1e962:	4770      	bx	lr

0001e964 <gatt_indicate_rsp>:
{
   1e964:	b510      	push	{r4, lr}
   1e966:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1e968:	68a3      	ldr	r3, [r4, #8]
{
   1e96a:	460a      	mov	r2, r1
	if (params->func) {
   1e96c:	b10b      	cbz	r3, 1e972 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1e96e:	4621      	mov	r1, r4
   1e970:	4798      	blx	r3
	params->_ref--;
   1e972:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e974:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1e976:	3b01      	subs	r3, #1
   1e978:	b2db      	uxtb	r3, r3
   1e97a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e97c:	b122      	cbz	r2, 1e988 <gatt_indicate_rsp+0x24>
   1e97e:	b91b      	cbnz	r3, 1e988 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1e980:	4620      	mov	r0, r4
}
   1e982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1e986:	4710      	bx	r2
}
   1e988:	bd10      	pop	{r4, pc}

0001e98a <match_uuid>:
	data->attr = attr;
   1e98a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1e98c:	8091      	strh	r1, [r2, #4]
}
   1e98e:	2000      	movs	r0, #0
   1e990:	4770      	bx	lr

0001e992 <gen_hash_m>:
{
   1e992:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e994:	6807      	ldr	r7, [r0, #0]
   1e996:	783d      	ldrb	r5, [r7, #0]
{
   1e998:	b089      	sub	sp, #36	; 0x24
   1e99a:	4606      	mov	r6, r0
   1e99c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e99e:	b10d      	cbz	r5, 1e9a4 <gen_hash_m+0x12>
	switch (u16->val) {
   1e9a0:	2501      	movs	r5, #1
   1e9a2:	e014      	b.n	1e9ce <gen_hash_m+0x3c>
   1e9a4:	887b      	ldrh	r3, [r7, #2]
   1e9a6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1e9aa:	d004      	beq.n	1e9b6 <gen_hash_m+0x24>
   1e9ac:	d812      	bhi.n	1e9d4 <gen_hash_m+0x42>
   1e9ae:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1e9b2:	2b03      	cmp	r3, #3
   1e9b4:	d8f4      	bhi.n	1e9a0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e9b6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9ba:	2202      	movs	r2, #2
   1e9bc:	f10d 010e 	add.w	r1, sp, #14
   1e9c0:	4620      	mov	r0, r4
   1e9c2:	f7fe fe29 	bl	1d618 <tc_cmac_update>
   1e9c6:	b9e0      	cbnz	r0, 1ea02 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1e9c8:	f06f 0315 	mvn.w	r3, #21
   1e9cc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1e9ce:	4628      	mov	r0, r5
   1e9d0:	b009      	add	sp, #36	; 0x24
   1e9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1e9d4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1e9d8:	33ff      	adds	r3, #255	; 0xff
   1e9da:	b29b      	uxth	r3, r3
   1e9dc:	2b04      	cmp	r3, #4
   1e9de:	d8df      	bhi.n	1e9a0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e9e0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9e4:	2202      	movs	r2, #2
   1e9e6:	f10d 010e 	add.w	r1, sp, #14
   1e9ea:	4620      	mov	r0, r4
   1e9ec:	f7fe fe14 	bl	1d618 <tc_cmac_update>
   1e9f0:	2800      	cmp	r0, #0
   1e9f2:	d0e9      	beq.n	1e9c8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1e9f4:	887b      	ldrh	r3, [r7, #2]
   1e9f6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9fa:	2202      	movs	r2, #2
   1e9fc:	f10d 010e 	add.w	r1, sp, #14
   1ea00:	e017      	b.n	1ea32 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ea02:	887b      	ldrh	r3, [r7, #2]
   1ea04:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea08:	2202      	movs	r2, #2
   1ea0a:	f10d 010e 	add.w	r1, sp, #14
   1ea0e:	4620      	mov	r0, r4
   1ea10:	f7fe fe02 	bl	1d618 <tc_cmac_update>
   1ea14:	2800      	cmp	r0, #0
   1ea16:	d0d7      	beq.n	1e9c8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ea18:	2000      	movs	r0, #0
   1ea1a:	2310      	movs	r3, #16
   1ea1c:	eb0d 0203 	add.w	r2, sp, r3
   1ea20:	6877      	ldr	r7, [r6, #4]
   1ea22:	9000      	str	r0, [sp, #0]
   1ea24:	4631      	mov	r1, r6
   1ea26:	47b8      	blx	r7
		if (len < 0) {
   1ea28:	1e02      	subs	r2, r0, #0
   1ea2a:	da01      	bge.n	1ea30 <gen_hash_m+0x9e>
			state->err = len;
   1ea2c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ea2e:	e7ce      	b.n	1e9ce <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ea30:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea32:	4620      	mov	r0, r4
   1ea34:	f7fe fdf0 	bl	1d618 <tc_cmac_update>
   1ea38:	2800      	cmp	r0, #0
   1ea3a:	d1b1      	bne.n	1e9a0 <gen_hash_m+0xe>
   1ea3c:	e7c4      	b.n	1e9c8 <gen_hash_m+0x36>

0001ea3e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ea3e:	2207      	movs	r2, #7
   1ea40:	f7fe bee2 	b.w	1d808 <memcpy>

0001ea44 <clear_cf_cfg>:
{
   1ea44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ea46:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ea48:	2500      	movs	r5, #0
   1ea4a:	4669      	mov	r1, sp
   1ea4c:	3001      	adds	r0, #1
   1ea4e:	9500      	str	r5, [sp, #0]
   1ea50:	f8cd 5003 	str.w	r5, [sp, #3]
   1ea54:	f7ff fff3 	bl	1ea3e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ea58:	f104 0008 	add.w	r0, r4, #8
   1ea5c:	2201      	movs	r2, #1
   1ea5e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ea60:	340c      	adds	r4, #12
   1ea62:	f7fe fefc 	bl	1d85e <memset>
   1ea66:	f3bf 8f5b 	dmb	ish
   1ea6a:	e854 3f00 	ldrex	r3, [r4]
   1ea6e:	e844 5200 	strex	r2, r5, [r4]
   1ea72:	2a00      	cmp	r2, #0
   1ea74:	d1f9      	bne.n	1ea6a <clear_cf_cfg+0x26>
   1ea76:	f3bf 8f5b 	dmb	ish
}
   1ea7a:	b003      	add	sp, #12
   1ea7c:	bd30      	pop	{r4, r5, pc}

0001ea7e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ea7e:	2301      	movs	r3, #1
   1ea80:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ea82:	f3bf 8f5b 	dmb	ish
   1ea86:	e850 2f00 	ldrex	r2, [r0]
   1ea8a:	431a      	orrs	r2, r3
   1ea8c:	e840 2100 	strex	r1, r2, [r0]
   1ea90:	2900      	cmp	r1, #0
   1ea92:	d1f8      	bne.n	1ea86 <atomic_set_bit+0x8>
   1ea94:	f3bf 8f5b 	dmb	ish
}
   1ea98:	4770      	bx	lr

0001ea9a <sc_restore_rsp>:
{
   1ea9a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1ea9c:	f7ea fe32 	bl	9704 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1eaa0:	b140      	cbz	r0, 1eab4 <sc_restore_rsp+0x1a>
   1eaa2:	7a03      	ldrb	r3, [r0, #8]
   1eaa4:	07db      	lsls	r3, r3, #31
   1eaa6:	d505      	bpl.n	1eab4 <sc_restore_rsp+0x1a>
}
   1eaa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1eaac:	2100      	movs	r1, #0
   1eaae:	300c      	adds	r0, #12
   1eab0:	f7ff bfe5 	b.w	1ea7e <atomic_set_bit>
}
   1eab4:	bd08      	pop	{r3, pc}

0001eab6 <read_ppcp>:
{
   1eab6:	b513      	push	{r0, r1, r4, lr}
   1eab8:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1eaba:	2218      	movs	r2, #24
{
   1eabc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1eac0:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1eac4:	2228      	movs	r2, #40	; 0x28
   1eac6:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1eaca:	2200      	movs	r2, #0
   1eacc:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1ead0:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1ead2:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1ead6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1eada:	d80b      	bhi.n	1eaf4 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1eadc:	f1c1 0408 	rsb	r4, r1, #8
   1eae0:	429c      	cmp	r4, r3
   1eae2:	bfa8      	it	ge
   1eae4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1eae6:	4622      	mov	r2, r4
   1eae8:	4469      	add	r1, sp
   1eaea:	f7fe fe8d 	bl	1d808 <memcpy>
}
   1eaee:	4620      	mov	r0, r4
   1eaf0:	b002      	add	sp, #8
   1eaf2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eaf4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1eaf8:	e7f9      	b.n	1eaee <read_ppcp+0x38>

0001eafa <read_appearance>:
{
   1eafa:	b513      	push	{r0, r1, r4, lr}
   1eafc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1eb00:	4610      	mov	r0, r2
	if (offset > value_len) {
   1eb02:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1eb04:	f04f 0200 	mov.w	r2, #0
   1eb08:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1eb0c:	d80d      	bhi.n	1eb2a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1eb0e:	f1c1 0402 	rsb	r4, r1, #2
   1eb12:	429c      	cmp	r4, r3
   1eb14:	bfa8      	it	ge
   1eb16:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb18:	f10d 0306 	add.w	r3, sp, #6
   1eb1c:	4622      	mov	r2, r4
   1eb1e:	4419      	add	r1, r3
   1eb20:	f7fe fe72 	bl	1d808 <memcpy>
}
   1eb24:	4620      	mov	r0, r4
   1eb26:	b002      	add	sp, #8
   1eb28:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1eb2e:	e7f9      	b.n	1eb24 <read_appearance+0x2a>

0001eb30 <read_name>:
{
   1eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb34:	4698      	mov	r8, r3
   1eb36:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1eb3a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1eb3c:	f7e7 ff3a 	bl	69b4 <bt_get_name>
   1eb40:	4607      	mov	r7, r0
				 strlen(name));
   1eb42:	f7fe fe34 	bl	1d7ae <strlen>
	if (offset > value_len) {
   1eb46:	b283      	uxth	r3, r0
   1eb48:	42b3      	cmp	r3, r6
   1eb4a:	d30c      	bcc.n	1eb66 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1eb4c:	1b9c      	subs	r4, r3, r6
   1eb4e:	4544      	cmp	r4, r8
   1eb50:	bfa8      	it	ge
   1eb52:	4644      	movge	r4, r8
   1eb54:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb56:	4622      	mov	r2, r4
   1eb58:	19b9      	adds	r1, r7, r6
   1eb5a:	4628      	mov	r0, r5
   1eb5c:	f7fe fe54 	bl	1d808 <memcpy>
}
   1eb60:	4620      	mov	r0, r4
   1eb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb66:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1eb6a:	e7f9      	b.n	1eb60 <read_name+0x30>

0001eb6c <cf_read>:
{
   1eb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eb6e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1eb70:	2300      	movs	r3, #0
{
   1eb72:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1eb76:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1eb7a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1eb7c:	f7ea fdc2 	bl	9704 <find_cf_cfg>
	if (cfg) {
   1eb80:	b128      	cbz	r0, 1eb8e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1eb82:	f100 0108 	add.w	r1, r0, #8
   1eb86:	2201      	movs	r2, #1
   1eb88:	a801      	add	r0, sp, #4
   1eb8a:	f7fe fe3d 	bl	1d808 <memcpy>
	if (offset > value_len) {
   1eb8e:	2e01      	cmp	r6, #1
   1eb90:	d80d      	bhi.n	1ebae <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1eb92:	f1c6 0401 	rsb	r4, r6, #1
   1eb96:	42bc      	cmp	r4, r7
   1eb98:	bfa8      	it	ge
   1eb9a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb9c:	ab01      	add	r3, sp, #4
   1eb9e:	4622      	mov	r2, r4
   1eba0:	1999      	adds	r1, r3, r6
   1eba2:	4628      	mov	r0, r5
   1eba4:	f7fe fe30 	bl	1d808 <memcpy>
}
   1eba8:	4620      	mov	r0, r4
   1ebaa:	b003      	add	sp, #12
   1ebac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ebae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ebb2:	e7f9      	b.n	1eba8 <cf_read+0x3c>

0001ebb4 <bt_gatt_attr_read_service>:
{
   1ebb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1ebb6:	68c9      	ldr	r1, [r1, #12]
{
   1ebb8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1ebbc:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1ebbe:	780b      	ldrb	r3, [r1, #0]
{
   1ebc0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1ebc2:	b993      	cbnz	r3, 1ebea <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ebc4:	884b      	ldrh	r3, [r1, #2]
   1ebc6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1ebca:	2d02      	cmp	r5, #2
   1ebcc:	d819      	bhi.n	1ec02 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ebce:	f1c5 0202 	rsb	r2, r5, #2
   1ebd2:	4294      	cmp	r4, r2
   1ebd4:	bfa8      	it	ge
   1ebd6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ebd8:	f10d 0306 	add.w	r3, sp, #6
   1ebdc:	4622      	mov	r2, r4
   1ebde:	1959      	adds	r1, r3, r5
   1ebe0:	f7fe fe12 	bl	1d808 <memcpy>
}
   1ebe4:	4620      	mov	r0, r4
   1ebe6:	b003      	add	sp, #12
   1ebe8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1ebea:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1ebec:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1ebf0:	d807      	bhi.n	1ec02 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ebf2:	f1c5 0210 	rsb	r2, r5, #16
   1ebf6:	4294      	cmp	r4, r2
   1ebf8:	bfa8      	it	ge
   1ebfa:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ebfc:	4622      	mov	r2, r4
   1ebfe:	4429      	add	r1, r5
   1ec00:	e7ee      	b.n	1ebe0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ec02:	f06f 0406 	mvn.w	r4, #6
   1ec06:	e7ed      	b.n	1ebe4 <bt_gatt_attr_read_service+0x30>

0001ec08 <find_ccc_cfg>:
{
   1ec08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ec0a:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1ec0c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1ec0e:	b148      	cbz	r0, 1ec24 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ec10:	7809      	ldrb	r1, [r1, #0]
   1ec12:	462a      	mov	r2, r5
   1ec14:	f7ff f9be 	bl	1df94 <bt_conn_is_peer_addr_le>
	return NULL;
   1ec18:	2800      	cmp	r0, #0
   1ec1a:	bf08      	it	eq
   1ec1c:	2400      	moveq	r4, #0
}
   1ec1e:	4620      	mov	r0, r4
   1ec20:	b003      	add	sp, #12
   1ec22:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ec24:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1ec26:	2207      	movs	r2, #7
   1ec28:	f8cd 0003 	str.w	r0, [sp, #3]
   1ec2c:	4669      	mov	r1, sp
   1ec2e:	4628      	mov	r0, r5
   1ec30:	f7fe fdd9 	bl	1d7e6 <memcmp>
	return NULL;
   1ec34:	2800      	cmp	r0, #0
   1ec36:	bf18      	it	ne
   1ec38:	2400      	movne	r4, #0
   1ec3a:	e7f0      	b.n	1ec1e <find_ccc_cfg+0x16>

0001ec3c <bt_gatt_attr_read_ccc>:
{
   1ec3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1ec3e:	68c9      	ldr	r1, [r1, #12]
{
   1ec40:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1ec44:	4615      	mov	r5, r2
   1ec46:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1ec48:	f7ff ffde 	bl	1ec08 <find_ccc_cfg>
	if (cfg) {
   1ec4c:	b100      	cbz	r0, 1ec50 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1ec4e:	8900      	ldrh	r0, [r0, #8]
   1ec50:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1ec54:	2e02      	cmp	r6, #2
   1ec56:	d80e      	bhi.n	1ec76 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1ec58:	f1c6 0402 	rsb	r4, r6, #2
   1ec5c:	42bc      	cmp	r4, r7
   1ec5e:	bfa8      	it	ge
   1ec60:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec62:	f10d 0306 	add.w	r3, sp, #6
   1ec66:	4622      	mov	r2, r4
   1ec68:	1999      	adds	r1, r3, r6
   1ec6a:	4628      	mov	r0, r5
   1ec6c:	f7fe fdcc 	bl	1d808 <memcpy>
}
   1ec70:	4620      	mov	r0, r4
   1ec72:	b003      	add	sp, #12
   1ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ec76:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1ec7a:	e7f9      	b.n	1ec70 <bt_gatt_attr_read_ccc+0x34>

0001ec7c <sc_clear>:
{
   1ec7c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ec7e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1ec82:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ec84:	4631      	mov	r1, r6
   1ec86:	7a00      	ldrb	r0, [r0, #8]
   1ec88:	f7fe ffbc 	bl	1dc04 <bt_addr_le_is_bonded>
   1ec8c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1ec8e:	4631      	mov	r1, r6
   1ec90:	f7ea fe12 	bl	98b8 <find_sc_cfg>
	if (!cfg) {
   1ec94:	b128      	cbz	r0, 1eca2 <sc_clear+0x26>
}
   1ec96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ec9a:	220c      	movs	r2, #12
   1ec9c:	2100      	movs	r1, #0
   1ec9e:	f7fe bdde 	b.w	1d85e <memset>
}
   1eca2:	bd70      	pop	{r4, r5, r6, pc}

0001eca4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1eca4:	2a02      	cmp	r2, #2
{
   1eca6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1eca8:	d108      	bne.n	1ecbc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1ecaa:	2300      	movs	r3, #0
   1ecac:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ecb0:	461a      	mov	r2, r3
   1ecb2:	7a00      	ldrb	r0, [r0, #8]
   1ecb4:	f7ea fe10 	bl	98d8 <sc_save>
}
   1ecb8:	2002      	movs	r0, #2
   1ecba:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1ecbc:	f7ff ffde 	bl	1ec7c <sc_clear>
   1ecc0:	e7fa      	b.n	1ecb8 <sc_ccc_cfg_write+0x14>

0001ecc2 <bt_gatt_attr_value_handle>:
{
   1ecc2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ecc4:	4604      	mov	r4, r0
   1ecc6:	b910      	cbnz	r0, 1ecce <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1ecc8:	2000      	movs	r0, #0
}
   1ecca:	b002      	add	sp, #8
   1eccc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ecce:	2300      	movs	r3, #0
   1ecd0:	f88d 3004 	strb.w	r3, [sp, #4]
   1ecd4:	6800      	ldr	r0, [r0, #0]
   1ecd6:	f642 0303 	movw	r3, #10243	; 0x2803
   1ecda:	a901      	add	r1, sp, #4
   1ecdc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ece0:	f7fe fe4a 	bl	1d978 <bt_uuid_cmp>
   1ece4:	2800      	cmp	r0, #0
   1ece6:	d1ef      	bne.n	1ecc8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ece8:	68e3      	ldr	r3, [r4, #12]
   1ecea:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ecec:	2800      	cmp	r0, #0
   1ecee:	d1ec      	bne.n	1ecca <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ecf0:	4620      	mov	r0, r4
   1ecf2:	f7ea fef5 	bl	9ae0 <bt_gatt_attr_get_handle>
   1ecf6:	3001      	adds	r0, #1
   1ecf8:	b280      	uxth	r0, r0
	return handle;
   1ecfa:	e7e6      	b.n	1ecca <bt_gatt_attr_value_handle+0x8>

0001ecfc <bt_gatt_attr_read_chrc>:
{
   1ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ecfe:	68cf      	ldr	r7, [r1, #12]
{
   1ed00:	b087      	sub	sp, #28
   1ed02:	4608      	mov	r0, r1
   1ed04:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ed06:	79bb      	ldrb	r3, [r7, #6]
   1ed08:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ed0c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1ed10:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ed12:	f7ff ffd6 	bl	1ecc2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ed16:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ed18:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ed1c:	780b      	ldrb	r3, [r1, #0]
   1ed1e:	b99b      	cbnz	r3, 1ed48 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ed20:	884b      	ldrh	r3, [r1, #2]
   1ed22:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1ed26:	2105      	movs	r1, #5
	if (offset > value_len) {
   1ed28:	42b1      	cmp	r1, r6
   1ed2a:	d315      	bcc.n	1ed58 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ed2c:	1b89      	subs	r1, r1, r6
   1ed2e:	42a1      	cmp	r1, r4
   1ed30:	bfa8      	it	ge
   1ed32:	4621      	movge	r1, r4
   1ed34:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1ed36:	ab01      	add	r3, sp, #4
   1ed38:	4622      	mov	r2, r4
   1ed3a:	1999      	adds	r1, r3, r6
   1ed3c:	4628      	mov	r0, r5
   1ed3e:	f7fe fd63 	bl	1d808 <memcpy>
}
   1ed42:	4620      	mov	r0, r4
   1ed44:	b007      	add	sp, #28
   1ed46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ed48:	3101      	adds	r1, #1
   1ed4a:	2210      	movs	r2, #16
   1ed4c:	f10d 0007 	add.w	r0, sp, #7
   1ed50:	f7fe fd5a 	bl	1d808 <memcpy>
		value_len += 16U;
   1ed54:	2113      	movs	r1, #19
   1ed56:	e7e7      	b.n	1ed28 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ed5c:	e7f1      	b.n	1ed42 <bt_gatt_attr_read_chrc+0x46>

0001ed5e <bt_gatt_foreach_attr>:
{
   1ed5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ed60:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ed64:	2300      	movs	r3, #0
   1ed66:	9300      	str	r3, [sp, #0]
   1ed68:	461a      	mov	r2, r3
   1ed6a:	f7ea fee9 	bl	9b40 <bt_gatt_foreach_attr_type>
}
   1ed6e:	b005      	add	sp, #20
   1ed70:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed74 <db_hash_process>:
	db_hash_gen(true);
   1ed74:	f7ea bf3e 	b.w	9bf4 <db_hash_gen.constprop.0>

0001ed78 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ed78:	07d3      	lsls	r3, r2, #31
{
   1ed7a:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ed7c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ed7e:	d504      	bpl.n	1ed8a <bt_gatt_check_perm+0x12>
   1ed80:	f014 0f15 	tst.w	r4, #21
   1ed84:	d017      	beq.n	1edb6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ed86:	684b      	ldr	r3, [r1, #4]
   1ed88:	b1ab      	cbz	r3, 1edb6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ed8a:	0793      	lsls	r3, r2, #30
   1ed8c:	d504      	bpl.n	1ed98 <bt_gatt_check_perm+0x20>
   1ed8e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1ed92:	d012      	beq.n	1edba <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ed94:	688b      	ldr	r3, [r1, #8]
   1ed96:	b183      	cbz	r3, 1edba <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1ed98:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ed9a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ed9e:	d104      	bne.n	1edaa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1eda0:	f014 000c 	ands.w	r0, r4, #12
   1eda4:	bf18      	it	ne
   1eda6:	200f      	movne	r0, #15
}
   1eda8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1edaa:	f7ff f8c1 	bl	1df30 <bt_conn_get_security>
   1edae:	2802      	cmp	r0, #2
   1edb0:	d8f6      	bhi.n	1eda0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1edb2:	2005      	movs	r0, #5
   1edb4:	e7f8      	b.n	1eda8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1edb6:	2002      	movs	r0, #2
   1edb8:	e7f6      	b.n	1eda8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1edba:	2003      	movs	r0, #3
   1edbc:	e7f4      	b.n	1eda8 <bt_gatt_check_perm+0x30>

0001edbe <bt_gatt_change_aware>:
{
   1edbe:	b510      	push	{r4, lr}
   1edc0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1edc2:	f7ea fc9f 	bl	9704 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1edc6:	4603      	mov	r3, r0
   1edc8:	b910      	cbnz	r0, 1edd0 <bt_gatt_change_aware+0x12>
		return true;
   1edca:	2401      	movs	r4, #1
}
   1edcc:	4620      	mov	r0, r4
   1edce:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1edd0:	7a02      	ldrb	r2, [r0, #8]
   1edd2:	07d2      	lsls	r2, r2, #31
   1edd4:	d5f9      	bpl.n	1edca <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1edd6:	f3bf 8f5b 	dmb	ish
   1edda:	68d9      	ldr	r1, [r3, #12]
   1eddc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ede0:	f011 0101 	ands.w	r1, r1, #1
   1ede4:	f100 000c 	add.w	r0, r0, #12
   1ede8:	d1ef      	bne.n	1edca <bt_gatt_change_aware+0xc>
	if (!req) {
   1edea:	2c00      	cmp	r4, #0
   1edec:	d0ee      	beq.n	1edcc <bt_gatt_change_aware+0xe>
   1edee:	f3bf 8f5b 	dmb	ish
   1edf2:	68db      	ldr	r3, [r3, #12]
   1edf4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1edf8:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1edfc:	079b      	lsls	r3, r3, #30
   1edfe:	d50e      	bpl.n	1ee1e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee00:	f3bf 8f5b 	dmb	ish
   1ee04:	e850 3f00 	ldrex	r3, [r0]
   1ee08:	f023 0302 	bic.w	r3, r3, #2
   1ee0c:	e840 3200 	strex	r2, r3, [r0]
   1ee10:	2a00      	cmp	r2, #0
   1ee12:	d1f7      	bne.n	1ee04 <bt_gatt_change_aware+0x46>
   1ee14:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ee18:	f7ff fe31 	bl	1ea7e <atomic_set_bit>
	return false;
   1ee1c:	e7d6      	b.n	1edcc <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ee1e:	2101      	movs	r1, #1
   1ee20:	e7fa      	b.n	1ee18 <bt_gatt_change_aware+0x5a>

0001ee22 <bt_smp_recv>:
{
   1ee22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ee24:	2100      	movs	r1, #0
   1ee26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ee2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1ee2e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ee30:	4608      	mov	r0, r1
   1ee32:	f7ff f99f 	bl	1e174 <bt_l2cap_create_pdu_timeout>
   1ee36:	f100 0608 	add.w	r6, r0, #8
   1ee3a:	4604      	mov	r4, r0
   1ee3c:	2101      	movs	r1, #1
   1ee3e:	4630      	mov	r0, r6
   1ee40:	f000 f87d 	bl	1ef3e <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1ee44:	2505      	movs	r5, #5
   1ee46:	7005      	strb	r5, [r0, #0]
   1ee48:	2101      	movs	r1, #1
   1ee4a:	4630      	mov	r0, r6
   1ee4c:	f000 f877 	bl	1ef3e <net_buf_simple_add>
   1ee50:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1ee52:	7005      	strb	r5, [r0, #0]
   1ee54:	4622      	mov	r2, r4
   1ee56:	9300      	str	r3, [sp, #0]
   1ee58:	2106      	movs	r1, #6
   1ee5a:	4638      	mov	r0, r7
   1ee5c:	f7ff f98d 	bl	1e17a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1ee60:	b110      	cbz	r0, 1ee68 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1ee62:	4620      	mov	r0, r4
   1ee64:	f7fa fec6 	bl	19bf4 <net_buf_unref>
}
   1ee68:	2000      	movs	r0, #0
   1ee6a:	b003      	add	sp, #12
   1ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ee6e <bt_smp_sign>:
   1ee6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ee72:	4770      	bx	lr

0001ee74 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1ee74:	2000      	movs	r0, #0
   1ee76:	4770      	bx	lr

0001ee78 <fixed_data_unref>:
}
   1ee78:	4770      	bx	lr

0001ee7a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ee7a:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ee7c:	6849      	ldr	r1, [r1, #4]
   1ee7e:	6809      	ldr	r1, [r1, #0]
   1ee80:	f7fa be2a 	b.w	19ad8 <net_buf_alloc_len>

0001ee84 <net_buf_get>:
{
   1ee84:	b570      	push	{r4, r5, r6, lr}
   1ee86:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1ee88:	f7fc f972 	bl	1b170 <z_impl_k_queue_get>
	if (!buf) {
   1ee8c:	4605      	mov	r5, r0
   1ee8e:	b128      	cbz	r0, 1ee9c <net_buf_get+0x18>
   1ee90:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ee92:	7963      	ldrb	r3, [r4, #5]
   1ee94:	f013 0301 	ands.w	r3, r3, #1
   1ee98:	d102      	bne.n	1eea0 <net_buf_get+0x1c>
	frag->frags = NULL;
   1ee9a:	6023      	str	r3, [r4, #0]
}
   1ee9c:	4628      	mov	r0, r5
   1ee9e:	bd70      	pop	{r4, r5, r6, pc}
   1eea0:	2300      	movs	r3, #0
   1eea2:	2200      	movs	r2, #0
   1eea4:	4630      	mov	r0, r6
   1eea6:	f7fc f963 	bl	1b170 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1eeaa:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1eeac:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1eeae:	f023 0301 	bic.w	r3, r3, #1
   1eeb2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1eeb4:	4604      	mov	r4, r0
   1eeb6:	e7ec      	b.n	1ee92 <net_buf_get+0xe>

0001eeb8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1eeb8:	6883      	ldr	r3, [r0, #8]
   1eeba:	440b      	add	r3, r1
   1eebc:	6003      	str	r3, [r0, #0]
}
   1eebe:	4770      	bx	lr

0001eec0 <net_buf_put>:
{
   1eec0:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1eec2:	460a      	mov	r2, r1
   1eec4:	6814      	ldr	r4, [r2, #0]
   1eec6:	b914      	cbnz	r4, 1eece <net_buf_put+0xe>
}
   1eec8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1eeca:	f000 bb15 	b.w	1f4f8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1eece:	7953      	ldrb	r3, [r2, #5]
   1eed0:	f043 0301 	orr.w	r3, r3, #1
   1eed4:	7153      	strb	r3, [r2, #5]
   1eed6:	4622      	mov	r2, r4
   1eed8:	e7f4      	b.n	1eec4 <net_buf_put+0x4>

0001eeda <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1eeda:	7902      	ldrb	r2, [r0, #4]
   1eedc:	3201      	adds	r2, #1
   1eede:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1eee0:	4770      	bx	lr

0001eee2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1eee2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1eee4:	4618      	mov	r0, r3
   1eee6:	681b      	ldr	r3, [r3, #0]
   1eee8:	2b00      	cmp	r3, #0
   1eeea:	d1fb      	bne.n	1eee4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1eeec:	4770      	bx	lr

0001eeee <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1eeee:	6802      	ldr	r2, [r0, #0]
{
   1eef0:	b510      	push	{r4, lr}
	if (parent->frags) {
   1eef2:	b12a      	cbz	r2, 1ef00 <net_buf_frag_insert+0x12>
   1eef4:	460b      	mov	r3, r1
	while (buf->frags) {
   1eef6:	461c      	mov	r4, r3
   1eef8:	681b      	ldr	r3, [r3, #0]
   1eefa:	2b00      	cmp	r3, #0
   1eefc:	d1fb      	bne.n	1eef6 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1eefe:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ef00:	6001      	str	r1, [r0, #0]
}
   1ef02:	bd10      	pop	{r4, pc}

0001ef04 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ef04:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1ef06:	4604      	mov	r4, r0
   1ef08:	b920      	cbnz	r0, 1ef14 <net_buf_frag_add+0x10>
	buf->ref++;
   1ef0a:	790b      	ldrb	r3, [r1, #4]
   1ef0c:	3301      	adds	r3, #1
   1ef0e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1ef10:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1ef12:	bd10      	pop	{r4, pc}
   1ef14:	4603      	mov	r3, r0
	while (buf->frags) {
   1ef16:	4618      	mov	r0, r3
   1ef18:	681b      	ldr	r3, [r3, #0]
   1ef1a:	2b00      	cmp	r3, #0
   1ef1c:	d1fb      	bne.n	1ef16 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ef1e:	f7ff ffe6 	bl	1eeee <net_buf_frag_insert>
   1ef22:	4620      	mov	r0, r4
   1ef24:	e7f5      	b.n	1ef12 <net_buf_frag_add+0xe>

0001ef26 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ef26:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1ef28:	b108      	cbz	r0, 1ef2e <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1ef2a:	680b      	ldr	r3, [r1, #0]
   1ef2c:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1ef2e:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1ef30:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1ef32:	4608      	mov	r0, r1
	frag->frags = NULL;
   1ef34:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1ef36:	f7fa fe5d 	bl	19bf4 <net_buf_unref>
#endif

	return next_frag;
}
   1ef3a:	4620      	mov	r0, r4
   1ef3c:	bd10      	pop	{r4, pc}

0001ef3e <net_buf_simple_add>:
	return buf->data + buf->len;
   1ef3e:	8883      	ldrh	r3, [r0, #4]
   1ef40:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ef42:	4419      	add	r1, r3
   1ef44:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ef46:	18d0      	adds	r0, r2, r3
   1ef48:	4770      	bx	lr

0001ef4a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1ef4a:	b430      	push	{r4, r5}
   1ef4c:	8884      	ldrh	r4, [r0, #4]
   1ef4e:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1ef50:	18a3      	adds	r3, r4, r2
   1ef52:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ef54:	1928      	adds	r0, r5, r4
}
   1ef56:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ef58:	f7fe bc56 	b.w	1d808 <memcpy>

0001ef5c <net_buf_simple_add_u8>:
   1ef5c:	8883      	ldrh	r3, [r0, #4]
   1ef5e:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1ef60:	b510      	push	{r4, lr}
	buf->len += len;
   1ef62:	1c5c      	adds	r4, r3, #1
   1ef64:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1ef66:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1ef68:	18d0      	adds	r0, r2, r3
   1ef6a:	bd10      	pop	{r4, pc}

0001ef6c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1ef6c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ef6e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1ef70:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1ef72:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1ef74:	4411      	add	r1, r2
	buf->data -= len;
   1ef76:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1ef78:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1ef7a:	4770      	bx	lr

0001ef7c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ef7c:	8882      	ldrh	r2, [r0, #4]
   1ef7e:	1a52      	subs	r2, r2, r1
{
   1ef80:	4603      	mov	r3, r0
	buf->len -= len;
   1ef82:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1ef84:	6800      	ldr	r0, [r0, #0]
   1ef86:	4408      	add	r0, r1
   1ef88:	6018      	str	r0, [r3, #0]
}
   1ef8a:	4770      	bx	lr

0001ef8c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1ef8c:	4603      	mov	r3, r0
	void *data = buf->data;
   1ef8e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ef90:	889a      	ldrh	r2, [r3, #4]
   1ef92:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1ef94:	4401      	add	r1, r0
	buf->len -= len;
   1ef96:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1ef98:	6019      	str	r1, [r3, #0]

	return data;
}
   1ef9a:	4770      	bx	lr

0001ef9c <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1ef9c:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1ef9e:	6803      	ldr	r3, [r0, #0]
   1efa0:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1efa2:	2101      	movs	r1, #1
   1efa4:	f7ff ffea 	bl	1ef7c <net_buf_simple_pull>

	return val;
}
   1efa8:	4620      	mov	r0, r4
   1efaa:	bd10      	pop	{r4, pc}

0001efac <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1efac:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1efae:	6803      	ldr	r3, [r0, #0]
   1efb0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1efb2:	2102      	movs	r1, #2
   1efb4:	f7ff ffe2 	bl	1ef7c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1efb8:	4620      	mov	r0, r4
   1efba:	bd10      	pop	{r4, pc}

0001efbc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1efbc:	6802      	ldr	r2, [r0, #0]
   1efbe:	6880      	ldr	r0, [r0, #8]
}
   1efc0:	1a10      	subs	r0, r2, r0
   1efc2:	4770      	bx	lr

0001efc4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1efc4:	8883      	ldrh	r3, [r0, #4]
   1efc6:	88c2      	ldrh	r2, [r0, #6]
   1efc8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1efca:	6803      	ldr	r3, [r0, #0]
   1efcc:	6880      	ldr	r0, [r0, #8]
   1efce:	1a18      	subs	r0, r3, r0
}
   1efd0:	1a10      	subs	r0, r2, r0
   1efd2:	4770      	bx	lr

0001efd4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efd4:	6843      	ldr	r3, [r0, #4]
   1efd6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1efd8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1efdc:	600b      	str	r3, [r1, #0]
}
   1efde:	2000      	movs	r0, #0
   1efe0:	4770      	bx	lr

0001efe2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efe2:	6843      	ldr	r3, [r0, #4]
   1efe4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1efe6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1efea:	4042      	eors	r2, r0
   1efec:	400a      	ands	r2, r1
   1efee:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1eff0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1eff4:	2000      	movs	r0, #0
   1eff6:	4770      	bx	lr

0001eff8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1eff8:	6843      	ldr	r3, [r0, #4]
   1effa:	685b      	ldr	r3, [r3, #4]
}
   1effc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1effe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f002:	4770      	bx	lr

0001f004 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f004:	6843      	ldr	r3, [r0, #4]
   1f006:	685b      	ldr	r3, [r3, #4]
}
   1f008:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f00a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1f00e:	4770      	bx	lr

0001f010 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f010:	6843      	ldr	r3, [r0, #4]
   1f012:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f014:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f018:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1f01a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1f01e:	2000      	movs	r0, #0
   1f020:	4770      	bx	lr

0001f022 <gpio_nrfx_manage_callback>:
	return port->data;
   1f022:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1f024:	6858      	ldr	r0, [r3, #4]
{
   1f026:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1f028:	b158      	cbz	r0, 1f042 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f02a:	2400      	movs	r4, #0
   1f02c:	4281      	cmp	r1, r0
   1f02e:	d112      	bne.n	1f056 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1f030:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1f032:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1f034:	b954      	cbnz	r4, 1f04c <gpio_nrfx_manage_callback+0x2a>
   1f036:	428d      	cmp	r5, r1
	list->head = node;
   1f038:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f03a:	d100      	bne.n	1f03e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f03c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f03e:	2000      	movs	r0, #0
   1f040:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1f042:	b96a      	cbnz	r2, 1f060 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f044:	2000      	movs	r0, #0
}
   1f046:	bd30      	pop	{r4, r5, pc}
   1f048:	4628      	mov	r0, r5
   1f04a:	e7ef      	b.n	1f02c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1f04c:	428d      	cmp	r5, r1
	parent->next = child;
   1f04e:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1f050:	bf08      	it	eq
   1f052:	609c      	streq	r4, [r3, #8]
}
   1f054:	e7f3      	b.n	1f03e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1f056:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f058:	4604      	mov	r4, r0
   1f05a:	2d00      	cmp	r5, #0
   1f05c:	d1f4      	bne.n	1f048 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f05e:	b13a      	cbz	r2, 1f070 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1f060:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1f062:	685a      	ldr	r2, [r3, #4]
   1f064:	600a      	str	r2, [r1, #0]
	list->head = node;
   1f066:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f068:	2800      	cmp	r0, #0
   1f06a:	d1eb      	bne.n	1f044 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f06c:	6099      	str	r1, [r3, #8]
}
   1f06e:	e7ea      	b.n	1f046 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f070:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f074:	e7e7      	b.n	1f046 <gpio_nrfx_manage_callback+0x24>

0001f076 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   1f076:	b570      	push	{r4, r5, r6, lr}
   1f078:	460e      	mov	r6, r1
   1f07a:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f07c:	4601      	mov	r1, r0
   1f07e:	b150      	cbz	r0, 1f096 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   1f080:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   1f082:	688a      	ldr	r2, [r1, #8]
   1f084:	402a      	ands	r2, r5
   1f086:	d002      	beq.n	1f08e <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1f088:	684b      	ldr	r3, [r1, #4]
   1f08a:	4630      	mov	r0, r6
   1f08c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f08e:	b114      	cbz	r4, 1f096 <gpio_fire_callbacks.isra.0+0x20>
   1f090:	4621      	mov	r1, r4
   1f092:	6824      	ldr	r4, [r4, #0]
   1f094:	e7f5      	b.n	1f082 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   1f096:	bd70      	pop	{r4, r5, r6, pc}

0001f098 <cfg_level_pins>:
{
   1f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   1f09c:	6907      	ldr	r7, [r0, #16]
	return port->config;
   1f09e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1f0a2:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1f0a4:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1f0a8:	4313      	orrs	r3, r2
   1f0aa:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1f0ae:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1f0b0:	2500      	movs	r5, #0
	while (level_pins) {
   1f0b2:	b90c      	cbnz	r4, 1f0b8 <cfg_level_pins+0x20>
}
   1f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1f0b8:	4226      	tst	r6, r4
   1f0ba:	d010      	beq.n	1f0de <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f0bc:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f0be:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f0c2:	40e9      	lsrs	r1, r5
   1f0c4:	f001 0101 	and.w	r1, r1, #1
   1f0c8:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f0cc:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f0d0:	b2c9      	uxtb	r1, r1
   1f0d2:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1f0d6:	f7fa fe39 	bl	19d4c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1f0da:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1f0de:	3501      	adds	r5, #1
		bit <<= 1;
   1f0e0:	0076      	lsls	r6, r6, #1
   1f0e2:	e7e6      	b.n	1f0b2 <cfg_level_pins+0x1a>

0001f0e4 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f0e4:	6902      	ldr	r2, [r0, #16]
{
   1f0e6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f0e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   1f0ec:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f0f0:	2000      	movs	r0, #0
   1f0f2:	4770      	bx	lr

0001f0f4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f0f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1f0f8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   1f0fc:	f1a0 0308 	sub.w	r3, r0, #8
   1f100:	4258      	negs	r0, r3
   1f102:	4158      	adcs	r0, r3
   1f104:	4770      	bx	lr

0001f106 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1f106:	4700      	bx	r0

0001f108 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1f108:	f000 bc7f 	b.w	1fa0a <z_impl_k_busy_wait>

0001f10c <nrfx_clock_enable>:
{
   1f10c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1f10e:	2000      	movs	r0, #0
   1f110:	f7e5 fada 	bl	46c8 <arch_irq_is_enabled>
   1f114:	b918      	cbnz	r0, 1f11e <nrfx_clock_enable+0x12>
}
   1f116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1f11a:	f7e5 bab1 	b.w	4680 <arch_irq_enable>
   1f11e:	bd08      	pop	{r3, pc}

0001f120 <nrfx_clock_start>:
    switch (domain)
   1f120:	b110      	cbz	r0, 1f128 <nrfx_clock_start+0x8>
   1f122:	2801      	cmp	r0, #1
   1f124:	d01d      	beq.n	1f162 <nrfx_clock_start+0x42>
   1f126:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f12c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f130:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1f134:	03c9      	lsls	r1, r1, #15
   1f136:	d512      	bpl.n	1f15e <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1f138:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1f13c:	2a01      	cmp	r2, #1
   1f13e:	d10e      	bne.n	1f15e <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f140:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f148:	2200      	movs	r2, #0
   1f14a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f14e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1f152:	2202      	movs	r2, #2
   1f154:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f158:	2201      	movs	r2, #1
   1f15a:	609a      	str	r2, [r3, #8]
}
   1f15c:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f15e:	2200      	movs	r2, #0
   1f160:	e7ee      	b.n	1f140 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f166:	2200      	movs	r2, #0
   1f168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f16c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f170:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f174:	6018      	str	r0, [r3, #0]
}
   1f176:	4770      	bx	lr

0001f178 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1f178:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1f17a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1f17c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f17e:	bf9c      	itt	ls
   1f180:	6880      	ldrls	r0, [r0, #8]
   1f182:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1f184:	3b01      	subs	r3, #1
   1f186:	1a98      	subs	r0, r3, r2
}
   1f188:	4770      	bx	lr

0001f18a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f18a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1f18e:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f192:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1f194:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f198:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1f19a:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f19c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f19e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1f1a0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1f1a2:	d904      	bls.n	1f1ae <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1f1a4:	f7fe fb30 	bl	1d808 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1f1a8:	60ec      	str	r4, [r5, #12]
}
   1f1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1f1ae:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1f1b0:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1f1b4:	f7fe fb28 	bl	1d808 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1f1b8:	6868      	ldr	r0, [r5, #4]
   1f1ba:	4622      	mov	r2, r4
   1f1bc:	eb07 0108 	add.w	r1, r7, r8
   1f1c0:	e7f0      	b.n	1f1a4 <_WriteNoCheck+0x1a>

0001f1c2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f1c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1f1c6:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f1c8:	4606      	mov	r6, r0
   1f1ca:	4689      	mov	r9, r1
   1f1cc:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1f1ce:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1f1d2:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f1d4:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f1d6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1f1d8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f1da:	bf28      	it	cs
   1f1dc:	18e4      	addcs	r4, r4, r3
   1f1de:	3c01      	subs	r4, #1
   1f1e0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1f1e2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1f1e4:	42bc      	cmp	r4, r7
   1f1e6:	bf28      	it	cs
   1f1e8:	463c      	movcs	r4, r7
   1f1ea:	4294      	cmp	r4, r2
   1f1ec:	bf28      	it	cs
   1f1ee:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1f1f0:	4649      	mov	r1, r9
   1f1f2:	4428      	add	r0, r5
   1f1f4:	4622      	mov	r2, r4
   1f1f6:	f7fe fb07 	bl	1d808 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1f1fa:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1f1fc:	4425      	add	r5, r4
      WrOff = 0u;
   1f1fe:	42ab      	cmp	r3, r5
   1f200:	bf08      	it	eq
   1f202:	2500      	moveq	r5, #0
  } while (NumBytes);
   1f204:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1f206:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1f208:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1f20a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1f20c:	d1e1      	bne.n	1f1d2 <_WriteBlocking+0x10>
}
   1f20e:	4640      	mov	r0, r8
   1f210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f214 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1f214:	f7fb bb9e 	b.w	1a954 <_DoInit>

0001f218 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1f218:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1f21a:	f7ff fffb 	bl	1f214 <SEGGER_RTT_Init>

	return 0;
}
   1f21e:	2000      	movs	r0, #0
   1f220:	bd08      	pop	{r3, pc}

0001f222 <z_device_state_init>:
}
   1f222:	4770      	bx	lr

0001f224 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1f224:	b138      	cbz	r0, 1f236 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1f226:	68c3      	ldr	r3, [r0, #12]
   1f228:	8818      	ldrh	r0, [r3, #0]
   1f22a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1f22e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1f232:	4258      	negs	r0, r3
   1f234:	4158      	adcs	r0, r3
}
   1f236:	4770      	bx	lr

0001f238 <arch_system_halt>:
	__asm__ volatile(
   1f238:	f04f 0220 	mov.w	r2, #32
   1f23c:	f3ef 8311 	mrs	r3, BASEPRI
   1f240:	f382 8811 	msr	BASEPRI, r2
   1f244:	f3bf 8f6f 	isb	sy
	for (;;) {
   1f248:	e7fe      	b.n	1f248 <arch_system_halt+0x10>

0001f24a <k_heap_init>:
{
   1f24a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1f24c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1f250:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1f254:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1f256:	f7fd bb6d 	b.w	1c934 <sys_heap_init>

0001f25a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f25e:	b085      	sub	sp, #20
   1f260:	4606      	mov	r6, r0
   1f262:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1f268:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f26a:	f000 fbd2 	bl	1fa12 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f26e:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f272:	4605      	mov	r5, r0
   1f274:	460f      	mov	r7, r1
   1f276:	f04f 0320 	mov.w	r3, #32
   1f27a:	f3ef 8411 	mrs	r4, BASEPRI
   1f27e:	f383 8811 	msr	BASEPRI, r3
   1f282:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f286:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f28a:	464a      	mov	r2, r9
   1f28c:	4641      	mov	r1, r8
   1f28e:	4630      	mov	r0, r6
   1f290:	f7fd fad5 	bl	1c83e <sys_heap_aligned_alloc>
   1f294:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1f296:	f7fc fe53 	bl	1bf40 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f29a:	9b03      	ldr	r3, [sp, #12]
   1f29c:	b13b      	cbz	r3, 1f2ae <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1f29e:	f384 8811 	msr	BASEPRI, r4
   1f2a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f2a6:	4618      	mov	r0, r3
   1f2a8:	b005      	add	sp, #20
   1f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1f2ae:	1a28      	subs	r0, r5, r0
   1f2b0:	eb67 0101 	sbc.w	r1, r7, r1
   1f2b4:	2801      	cmp	r0, #1
   1f2b6:	f171 0200 	sbcs.w	r2, r1, #0
   1f2ba:	dbf0      	blt.n	1f29e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f2bc:	e9cd 0100 	strd	r0, r1, [sp]
   1f2c0:	465a      	mov	r2, fp
   1f2c2:	4621      	mov	r1, r4
   1f2c4:	4650      	mov	r0, sl
   1f2c6:	f7fc fa5f 	bl	1b788 <z_pend_curr>
	__asm__ volatile(
   1f2ca:	f04f 0320 	mov.w	r3, #32
   1f2ce:	f3ef 8411 	mrs	r4, BASEPRI
   1f2d2:	f383 8811 	msr	BASEPRI, r3
   1f2d6:	f3bf 8f6f 	isb	sy
   1f2da:	e7d6      	b.n	1f28a <k_heap_aligned_alloc+0x30>

0001f2dc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f2dc:	b538      	push	{r3, r4, r5, lr}
   1f2de:	4604      	mov	r4, r0
   1f2e0:	f04f 0320 	mov.w	r3, #32
   1f2e4:	f3ef 8511 	mrs	r5, BASEPRI
   1f2e8:	f383 8811 	msr	BASEPRI, r3
   1f2ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1f2f0:	f7fd fa58 	bl	1c7a4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f2f4:	f104 000c 	add.w	r0, r4, #12
   1f2f8:	f000 fb14 	bl	1f924 <z_unpend_all>
   1f2fc:	b130      	cbz	r0, 1f30c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1f2fe:	4629      	mov	r1, r5
   1f300:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1f308:	f7fc b9ba 	b.w	1b680 <z_reschedule>
	__asm__ volatile(
   1f30c:	f385 8811 	msr	BASEPRI, r5
   1f310:	f3bf 8f6f 	isb	sy
}
   1f314:	bd38      	pop	{r3, r4, r5, pc}

0001f316 <k_mem_slab_init>:
{
   1f316:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1f318:	2400      	movs	r4, #0
   1f31a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f31c:	ea41 0402 	orr.w	r4, r1, r2
   1f320:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1f324:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1f328:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f32a:	d10c      	bne.n	1f346 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1f32c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f32e:	42a3      	cmp	r3, r4
   1f330:	d103      	bne.n	1f33a <k_mem_slab_init+0x24>
   1f332:	e9c0 0000 	strd	r0, r0, [r0]
}
   1f336:	2000      	movs	r0, #0
}
   1f338:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1f33a:	6945      	ldr	r5, [r0, #20]
   1f33c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f33e:	3401      	adds	r4, #1
		slab->free_list = p;
   1f340:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1f342:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1f344:	e7f3      	b.n	1f32e <k_mem_slab_init+0x18>
		return -EINVAL;
   1f346:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f34a:	e7f5      	b.n	1f338 <k_mem_slab_init+0x22>

0001f34c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f34e:	4604      	mov	r4, r0
   1f350:	460d      	mov	r5, r1
	__asm__ volatile(
   1f352:	f04f 0320 	mov.w	r3, #32
   1f356:	f3ef 8611 	mrs	r6, BASEPRI
   1f35a:	f383 8811 	msr	BASEPRI, r3
   1f35e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f362:	6947      	ldr	r7, [r0, #20]
   1f364:	b977      	cbnz	r7, 1f384 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f366:	f000 fac5 	bl	1f8f4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f36a:	b158      	cbz	r0, 1f384 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f36c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f36e:	6142      	str	r2, [r0, #20]
   1f370:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1f372:	f000 fa78 	bl	1f866 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f376:	4631      	mov	r1, r6
   1f378:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f37c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1f380:	f7fc b97e 	b.w	1b680 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f384:	682b      	ldr	r3, [r5, #0]
   1f386:	6962      	ldr	r2, [r4, #20]
   1f388:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f38a:	682b      	ldr	r3, [r5, #0]
   1f38c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f38e:	69a3      	ldr	r3, [r4, #24]
   1f390:	3b01      	subs	r3, #1
   1f392:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f394:	f386 8811 	msr	BASEPRI, r6
   1f398:	f3bf 8f6f 	isb	sy
}
   1f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f39e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f39e:	f3ef 8005 	mrs	r0, IPSR
}
   1f3a2:	3800      	subs	r0, #0
   1f3a4:	bf18      	it	ne
   1f3a6:	2001      	movne	r0, #1
   1f3a8:	4770      	bx	lr

0001f3aa <z_impl_k_thread_name_set>:
}
   1f3aa:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1f3ae:	4770      	bx	lr

0001f3b0 <k_thread_name_get>:
}
   1f3b0:	2000      	movs	r0, #0
   1f3b2:	4770      	bx	lr

0001f3b4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1f3b4:	f7fc bafa 	b.w	1b9ac <z_sched_start>

0001f3b8 <z_pm_save_idle_exit>:
{
   1f3b8:	b508      	push	{r3, lr}
	pm_system_resume();
   1f3ba:	f7e4 fd77 	bl	3eac <pm_system_resume>
}
   1f3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1f3c2:	f7fd bf9e 	b.w	1d302 <sys_clock_idle_exit>

0001f3c6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1f3c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f3ca:	428b      	cmp	r3, r1
   1f3cc:	d001      	beq.n	1f3d2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1f3ce:	f7fc bb0b 	b.w	1b9e8 <z_set_prio>
}
   1f3d2:	2000      	movs	r0, #0
   1f3d4:	4770      	bx	lr

0001f3d6 <queue_insert>:
{
   1f3d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f3da:	4699      	mov	r9, r3
   1f3dc:	4604      	mov	r4, r0
   1f3de:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f3e2:	460d      	mov	r5, r1
   1f3e4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f3e6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1f3ea:	f04f 0220 	mov.w	r2, #32
   1f3ee:	f3ef 8711 	mrs	r7, BASEPRI
   1f3f2:	f382 8811 	msr	BASEPRI, r2
   1f3f6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1f3fa:	b103      	cbz	r3, 1f3fe <queue_insert+0x28>
	return list->tail;
   1f3fc:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f3fe:	4630      	mov	r0, r6
   1f400:	f000 fa78 	bl	1f8f4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f404:	b158      	cbz	r0, 1f41e <queue_insert+0x48>
   1f406:	2400      	movs	r4, #0
   1f408:	67c4      	str	r4, [r0, #124]	; 0x7c
   1f40a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1f40e:	f000 fa2a 	bl	1f866 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1f412:	4630      	mov	r0, r6
   1f414:	4639      	mov	r1, r7
   1f416:	f7fc f933 	bl	1b680 <z_reschedule>
	return 0;
   1f41a:	2000      	movs	r0, #0
   1f41c:	e00c      	b.n	1f438 <queue_insert+0x62>
	if (alloc) {
   1f41e:	f1b9 0f00 	cmp.w	r9, #0
   1f422:	d01b      	beq.n	1f45c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1f424:	2108      	movs	r1, #8
   1f426:	f7fc fea1 	bl	1c16c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f42a:	b938      	cbnz	r0, 1f43c <queue_insert+0x66>
	__asm__ volatile(
   1f42c:	f387 8811 	msr	BASEPRI, r7
   1f430:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f434:	f06f 000b 	mvn.w	r0, #11
}
   1f438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1f43c:	2301      	movs	r3, #1
		anode->data = data;
   1f43e:	f8c0 8004 	str.w	r8, [r0, #4]
   1f442:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f444:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f446:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1f44a:	b95d      	cbnz	r5, 1f464 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f44c:	6823      	ldr	r3, [r4, #0]
   1f44e:	4313      	orrs	r3, r2
   1f450:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f452:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1f454:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f456:	b973      	cbnz	r3, 1f476 <queue_insert+0xa0>
	list->tail = node;
   1f458:	6060      	str	r0, [r4, #4]
}
   1f45a:	e00c      	b.n	1f476 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1f45c:	f8c8 9000 	str.w	r9, [r8]
}
   1f460:	4640      	mov	r0, r8
   1f462:	e7ef      	b.n	1f444 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f464:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f466:	f033 0303 	bics.w	r3, r3, #3
   1f46a:	d110      	bne.n	1f48e <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f46c:	6002      	str	r2, [r0, #0]
	return list->tail;
   1f46e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f470:	b93a      	cbnz	r2, 1f482 <queue_insert+0xac>
	list->head = node;
   1f472:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f476:	2104      	movs	r1, #4
   1f478:	f104 0010 	add.w	r0, r4, #16
   1f47c:	f000 fc5e 	bl	1fd3c <z_handle_obj_poll_events>
   1f480:	e7c7      	b.n	1f412 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f482:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f484:	f003 0303 	and.w	r3, r3, #3
   1f488:	4303      	orrs	r3, r0
   1f48a:	6013      	str	r3, [r2, #0]
   1f48c:	e7e4      	b.n	1f458 <queue_insert+0x82>
   1f48e:	4313      	orrs	r3, r2
   1f490:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f492:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f494:	f003 0303 	and.w	r3, r3, #3
   1f498:	4303      	orrs	r3, r0
   1f49a:	602b      	str	r3, [r5, #0]
}
   1f49c:	e7eb      	b.n	1f476 <queue_insert+0xa0>

0001f49e <z_queue_node_peek>:
{
   1f49e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f4a0:	4604      	mov	r4, r0
   1f4a2:	b130      	cbz	r0, 1f4b2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f4a4:	6802      	ldr	r2, [r0, #0]
   1f4a6:	0793      	lsls	r3, r2, #30
   1f4a8:	d003      	beq.n	1f4b2 <z_queue_node_peek+0x14>
		ret = anode->data;
   1f4aa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f4ac:	b109      	cbz	r1, 1f4b2 <z_queue_node_peek+0x14>
			k_free(anode);
   1f4ae:	f000 fc53 	bl	1fd58 <k_free>
}
   1f4b2:	4620      	mov	r0, r4
   1f4b4:	bd10      	pop	{r4, pc}

0001f4b6 <z_impl_k_queue_init>:
	list->head = NULL;
   1f4b6:	2300      	movs	r3, #0
	list->tail = NULL;
   1f4b8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1f4bc:	f100 0308 	add.w	r3, r0, #8
   1f4c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1f4c4:	f100 0310 	add.w	r3, r0, #16
   1f4c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1f4cc:	4770      	bx	lr

0001f4ce <k_queue_append>:
{
   1f4ce:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f4d0:	2301      	movs	r3, #1
   1f4d2:	9300      	str	r3, [sp, #0]
   1f4d4:	2300      	movs	r3, #0
{
   1f4d6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f4d8:	4619      	mov	r1, r3
   1f4da:	f7ff ff7c 	bl	1f3d6 <queue_insert>
}
   1f4de:	b003      	add	sp, #12
   1f4e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4e4 <k_queue_prepend>:
{
   1f4e4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1f4e6:	2300      	movs	r3, #0
{
   1f4e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f4ea:	9300      	str	r3, [sp, #0]
   1f4ec:	4619      	mov	r1, r3
   1f4ee:	f7ff ff72 	bl	1f3d6 <queue_insert>
}
   1f4f2:	b003      	add	sp, #12
   1f4f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4f8 <k_queue_append_list>:
{
   1f4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f4fc:	4605      	mov	r5, r0
   1f4fe:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1f500:	460c      	mov	r4, r1
   1f502:	b391      	cbz	r1, 1f56a <k_queue_append_list+0x72>
   1f504:	b38a      	cbz	r2, 1f56a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f506:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1f50a:	f04f 0320 	mov.w	r3, #32
   1f50e:	f3ef 8811 	mrs	r8, BASEPRI
   1f512:	f383 8811 	msr	BASEPRI, r3
   1f516:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1f51a:	4638      	mov	r0, r7
   1f51c:	f000 f9ea 	bl	1f8f4 <z_unpend_first_thread>
   1f520:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1f524:	b920      	cbnz	r0, 1f530 <k_queue_append_list+0x38>
	return list->tail;
   1f526:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f528:	b9ca      	cbnz	r2, 1f55e <k_queue_append_list+0x66>
	list->head = node;
   1f52a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1f52c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f52e:	e00a      	b.n	1f546 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1f530:	6144      	str	r4, [r0, #20]
   1f532:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1f536:	f000 f996 	bl	1f866 <z_ready_thread>
		head = *(void **)head;
   1f53a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1f53c:	4638      	mov	r0, r7
   1f53e:	f000 f9d9 	bl	1f8f4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1f542:	2c00      	cmp	r4, #0
   1f544:	d1ee      	bne.n	1f524 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f546:	2104      	movs	r1, #4
   1f548:	f105 0010 	add.w	r0, r5, #16
   1f54c:	f000 fbf6 	bl	1fd3c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f550:	4638      	mov	r0, r7
   1f552:	4641      	mov	r1, r8
   1f554:	f7fc f894 	bl	1b680 <z_reschedule>
	return 0;
   1f558:	2000      	movs	r0, #0
}
   1f55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f55e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f560:	f003 0303 	and.w	r3, r3, #3
   1f564:	431c      	orrs	r4, r3
   1f566:	6014      	str	r4, [r2, #0]
}
   1f568:	e7e0      	b.n	1f52c <k_queue_append_list+0x34>
		return -EINVAL;
   1f56a:	f06f 0015 	mvn.w	r0, #21
   1f56e:	e7f4      	b.n	1f55a <k_queue_append_list+0x62>

0001f570 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f570:	b15a      	cbz	r2, 1f58a <z_impl_k_sem_init+0x1a>
   1f572:	428a      	cmp	r2, r1
   1f574:	d309      	bcc.n	1f58a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1f576:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f57a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1f57e:	e9c0 0000 	strd	r0, r0, [r0]
   1f582:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1f586:	2000      	movs	r0, #0
   1f588:	4770      	bx	lr
		return -EINVAL;
   1f58a:	f06f 0015 	mvn.w	r0, #21
}
   1f58e:	4770      	bx	lr

0001f590 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1f590:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1f592:	2301      	movs	r3, #1
   1f594:	408b      	lsls	r3, r1
   1f596:	ea22 0303 	bic.w	r3, r2, r3
   1f59a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f59c:	fa22 f001 	lsr.w	r0, r2, r1
}
   1f5a0:	f000 0001 	and.w	r0, r0, #1
   1f5a4:	4770      	bx	lr

0001f5a6 <unschedule_locked>:
{
   1f5a6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f5a8:	2103      	movs	r1, #3
{
   1f5aa:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f5ac:	300c      	adds	r0, #12
   1f5ae:	f7ff ffef 	bl	1f590 <flag_test_and_clear>
   1f5b2:	4604      	mov	r4, r0
   1f5b4:	b118      	cbz	r0, 1f5be <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1f5b6:	f105 0010 	add.w	r0, r5, #16
   1f5ba:	f000 f9e0 	bl	1f97e <z_abort_timeout>
}
   1f5be:	4620      	mov	r0, r4
   1f5c0:	bd38      	pop	{r3, r4, r5, pc}

0001f5c2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1f5c2:	b120      	cbz	r0, 1f5ce <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f5c4:	2200      	movs	r2, #0
   1f5c6:	4611      	mov	r1, r2
   1f5c8:	3088      	adds	r0, #136	; 0x88
   1f5ca:	f000 b9bb 	b.w	1f944 <z_sched_wake>
}
   1f5ce:	4770      	bx	lr

0001f5d0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1f5d0:	68c3      	ldr	r3, [r0, #12]
{
   1f5d2:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f5d4:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1f5d8:	079b      	lsls	r3, r3, #30
{
   1f5da:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f5dc:	d416      	bmi.n	1f60c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1f5de:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f5e0:	2102      	movs	r1, #2
   1f5e2:	300c      	adds	r0, #12
   1f5e4:	f7ff ffd4 	bl	1f590 <flag_test_and_clear>
   1f5e8:	b180      	cbz	r0, 1f60c <cancel_async_locked+0x3c>
	return list->head;
   1f5ea:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5ee:	b16a      	cbz	r2, 1f60c <cancel_async_locked+0x3c>
   1f5f0:	4294      	cmp	r4, r2
   1f5f2:	d11b      	bne.n	1f62c <cancel_async_locked+0x5c>
	return node->next;
   1f5f4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1f5f6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1f5fa:	b98d      	cbnz	r5, 1f620 <cancel_async_locked+0x50>
   1f5fc:	428c      	cmp	r4, r1
	list->head = node;
   1f5fe:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1f602:	d101      	bne.n	1f608 <cancel_async_locked+0x38>
	list->tail = node;
   1f604:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1f608:	2300      	movs	r3, #0
   1f60a:	6023      	str	r3, [r4, #0]
	return *flagp;
   1f60c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1f60e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1f612:	bf1e      	ittt	ne
   1f614:	f043 0302 	orrne.w	r3, r3, #2
   1f618:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f61a:	f003 000f 	andne.w	r0, r3, #15
}
   1f61e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f620:	428c      	cmp	r4, r1
	parent->next = child;
   1f622:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1f624:	bf08      	it	eq
   1f626:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1f62a:	e7ed      	b.n	1f608 <cancel_async_locked+0x38>
	return node->next;
   1f62c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f62e:	6812      	ldr	r2, [r2, #0]
   1f630:	e7dd      	b.n	1f5ee <cancel_async_locked+0x1e>

0001f632 <work_timeout>:
{
   1f632:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f634:	4604      	mov	r4, r0
   1f636:	f04f 0320 	mov.w	r3, #32
   1f63a:	f3ef 8511 	mrs	r5, BASEPRI
   1f63e:	f383 8811 	msr	BASEPRI, r3
   1f642:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1f646:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f648:	f1a0 0610 	sub.w	r6, r0, #16
   1f64c:	2103      	movs	r1, #3
   1f64e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1f650:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f652:	f7ff ff9d 	bl	1f590 <flag_test_and_clear>
   1f656:	b128      	cbz	r0, 1f664 <work_timeout+0x32>
		queue = dw->queue;
   1f658:	69a3      	ldr	r3, [r4, #24]
   1f65a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f65c:	a901      	add	r1, sp, #4
   1f65e:	4630      	mov	r0, r6
   1f660:	f7fb fed6 	bl	1b410 <submit_to_queue_locked>
	__asm__ volatile(
   1f664:	f385 8811 	msr	BASEPRI, r5
   1f668:	f3bf 8f6f 	isb	sy
}
   1f66c:	b002      	add	sp, #8
   1f66e:	bd70      	pop	{r4, r5, r6, pc}

0001f670 <k_work_init>:
{
   1f670:	b538      	push	{r3, r4, r5, lr}
   1f672:	4604      	mov	r4, r0
   1f674:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1f676:	2210      	movs	r2, #16
   1f678:	2100      	movs	r1, #0
   1f67a:	f7fe f8f0 	bl	1d85e <memset>
   1f67e:	6065      	str	r5, [r4, #4]
}
   1f680:	bd38      	pop	{r3, r4, r5, pc}

0001f682 <k_work_submit_to_queue>:
{
   1f682:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f684:	9001      	str	r0, [sp, #4]
   1f686:	4608      	mov	r0, r1
	__asm__ volatile(
   1f688:	f04f 0320 	mov.w	r3, #32
   1f68c:	f3ef 8511 	mrs	r5, BASEPRI
   1f690:	f383 8811 	msr	BASEPRI, r3
   1f694:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1f698:	a901      	add	r1, sp, #4
   1f69a:	f7fb feb9 	bl	1b410 <submit_to_queue_locked>
   1f69e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f6a0:	f385 8811 	msr	BASEPRI, r5
   1f6a4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1f6a8:	2800      	cmp	r0, #0
   1f6aa:	dd04      	ble.n	1f6b6 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1f6ac:	f7fc fa98 	bl	1bbe0 <z_impl_k_is_preempt_thread>
   1f6b0:	b108      	cbz	r0, 1f6b6 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1f6b2:	f7fc f9ed 	bl	1ba90 <z_impl_k_yield>
}
   1f6b6:	4620      	mov	r0, r4
   1f6b8:	b003      	add	sp, #12
   1f6ba:	bd30      	pop	{r4, r5, pc}

0001f6bc <k_work_init_delayable>:
{
   1f6bc:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1f6be:	2230      	movs	r2, #48	; 0x30
{
   1f6c0:	4604      	mov	r4, r0
   1f6c2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1f6c4:	2100      	movs	r1, #0
   1f6c6:	f7fe f8ca 	bl	1d85e <memset>
   1f6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f6ce:	6065      	str	r5, [r4, #4]
   1f6d0:	60e3      	str	r3, [r4, #12]
}
   1f6d2:	bd38      	pop	{r3, r4, r5, pc}

0001f6d4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1f6d4:	b538      	push	{r3, r4, r5, lr}
   1f6d6:	4604      	mov	r4, r0
	__asm__ volatile(
   1f6d8:	f04f 0320 	mov.w	r3, #32
   1f6dc:	f3ef 8511 	mrs	r5, BASEPRI
   1f6e0:	f383 8811 	msr	BASEPRI, r3
   1f6e4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1f6e8:	f7ff ff5d 	bl	1f5a6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f6ec:	4620      	mov	r0, r4
   1f6ee:	f7ff ff6f 	bl	1f5d0 <cancel_async_locked>
	__asm__ volatile(
   1f6f2:	f385 8811 	msr	BASEPRI, r5
   1f6f6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1f6fa:	bd38      	pop	{r3, r4, r5, pc}

0001f6fc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f6fe:	4604      	mov	r4, r0
   1f700:	460d      	mov	r5, r1
	__asm__ volatile(
   1f702:	f04f 0320 	mov.w	r3, #32
   1f706:	f3ef 8711 	mrs	r7, BASEPRI
   1f70a:	f383 8811 	msr	BASEPRI, r3
   1f70e:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f712:	f3bf 8f5b 	dmb	ish
   1f716:	68c3      	ldr	r3, [r0, #12]
   1f718:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1f71c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1f720:	2b00      	cmp	r3, #0
   1f722:	bf14      	ite	ne
   1f724:	2601      	movne	r6, #1
   1f726:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1f728:	d009      	beq.n	1f73e <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   1f72a:	f7ff ff3c 	bl	1f5a6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f72e:	4620      	mov	r0, r4
   1f730:	f7ff ff4e 	bl	1f5d0 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1f734:	4629      	mov	r1, r5
   1f736:	4620      	mov	r0, r4
   1f738:	f7fb fe4c 	bl	1b3d4 <cancel_sync_locked>
   1f73c:	4603      	mov	r3, r0
	__asm__ volatile(
   1f73e:	f387 8811 	msr	BASEPRI, r7
   1f742:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1f746:	b13b      	cbz	r3, 1f758 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   1f748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f750:	f105 0008 	add.w	r0, r5, #8
   1f754:	f7fb fd66 	bl	1b224 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1f758:	4630      	mov	r0, r6
   1f75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f75c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1f75c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f760:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f762:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f764:	2300      	movs	r3, #0
	node->prev = NULL;
   1f766:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f76a:	4770      	bx	lr

0001f76c <unpend_thread_no_timeout>:
{
   1f76c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f76e:	f7ff fff5 	bl	1f75c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f772:	7b43      	ldrb	r3, [r0, #13]
   1f774:	f023 0302 	bic.w	r3, r3, #2
   1f778:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1f77a:	2300      	movs	r3, #0
   1f77c:	6083      	str	r3, [r0, #8]
}
   1f77e:	bd08      	pop	{r3, pc}

0001f780 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f780:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f784:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f788:	4283      	cmp	r3, r0
		return b2 - b1;
   1f78a:	bf14      	ite	ne
   1f78c:	1ac0      	subne	r0, r0, r3
	return 0;
   1f78e:	2000      	moveq	r0, #0
}
   1f790:	4770      	bx	lr

0001f792 <z_unpend_thread_no_timeout>:
{
   1f792:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f794:	f04f 0320 	mov.w	r3, #32
   1f798:	f3ef 8111 	mrs	r1, BASEPRI
   1f79c:	f383 8811 	msr	BASEPRI, r3
   1f7a0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1f7a4:	f7ff ffe2 	bl	1f76c <unpend_thread_no_timeout>
	__asm__ volatile(
   1f7a8:	f381 8811 	msr	BASEPRI, r1
   1f7ac:	f3bf 8f6f 	isb	sy
}
   1f7b0:	bd08      	pop	{r3, pc}

0001f7b2 <z_unpend_thread>:
{
   1f7b2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f7b4:	f04f 0320 	mov.w	r3, #32
   1f7b8:	f3ef 8411 	mrs	r4, BASEPRI
   1f7bc:	f383 8811 	msr	BASEPRI, r3
   1f7c0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1f7c4:	f7ff ffd2 	bl	1f76c <unpend_thread_no_timeout>
	__asm__ volatile(
   1f7c8:	f384 8811 	msr	BASEPRI, r4
   1f7cc:	f3bf 8f6f 	isb	sy
}
   1f7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f7d4:	3018      	adds	r0, #24
   1f7d6:	f000 b8d2 	b.w	1f97e <z_abort_timeout>

0001f7da <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f7da:	4603      	mov	r3, r0
   1f7dc:	b920      	cbnz	r0, 1f7e8 <z_reschedule_irqlock+0xe>
   1f7de:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1f7e2:	b90a      	cbnz	r2, 1f7e8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1f7e4:	f7e4 befe 	b.w	45e4 <arch_swap>
   1f7e8:	f383 8811 	msr	BASEPRI, r3
   1f7ec:	f3bf 8f6f 	isb	sy
}
   1f7f0:	4770      	bx	lr

0001f7f2 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f7f2:	f04f 0320 	mov.w	r3, #32
   1f7f6:	f3ef 8011 	mrs	r0, BASEPRI
   1f7fa:	f383 8811 	msr	BASEPRI, r3
   1f7fe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f802:	f7ff bfea 	b.w	1f7da <z_reschedule_irqlock>

0001f806 <z_priq_dumb_best>:
{
   1f806:	4603      	mov	r3, r0
	return list->head == list;
   1f808:	6800      	ldr	r0, [r0, #0]
}
   1f80a:	4283      	cmp	r3, r0
   1f80c:	bf08      	it	eq
   1f80e:	2000      	moveq	r0, #0
   1f810:	4770      	bx	lr

0001f812 <add_to_waitq_locked>:
{
   1f812:	b538      	push	{r3, r4, r5, lr}
   1f814:	4604      	mov	r4, r0
   1f816:	460d      	mov	r5, r1
	unready_thread(thread);
   1f818:	f7fb ff78 	bl	1b70c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1f81c:	7b63      	ldrb	r3, [r4, #13]
   1f81e:	f043 0302 	orr.w	r3, r3, #2
   1f822:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1f824:	b195      	cbz	r5, 1f84c <add_to_waitq_locked+0x3a>
   1f826:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1f828:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f82a:	429d      	cmp	r5, r3
   1f82c:	d015      	beq.n	1f85a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f82e:	b1a3      	cbz	r3, 1f85a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1f830:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1f834:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1f838:	4291      	cmp	r1, r2
   1f83a:	d008      	beq.n	1f84e <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1f83c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f83e:	2a00      	cmp	r2, #0
   1f840:	dd05      	ble.n	1f84e <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1f842:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f844:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1f848:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f84a:	605c      	str	r4, [r3, #4]
}
   1f84c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1f84e:	686a      	ldr	r2, [r5, #4]
   1f850:	4293      	cmp	r3, r2
   1f852:	d002      	beq.n	1f85a <add_to_waitq_locked+0x48>
   1f854:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f856:	2b00      	cmp	r3, #0
   1f858:	d1ec      	bne.n	1f834 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1f85a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1f85c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1f860:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f862:	606c      	str	r4, [r5, #4]
}
   1f864:	e7f2      	b.n	1f84c <add_to_waitq_locked+0x3a>

0001f866 <z_ready_thread>:
{
   1f866:	b510      	push	{r4, lr}
   1f868:	f04f 0320 	mov.w	r3, #32
   1f86c:	f3ef 8411 	mrs	r4, BASEPRI
   1f870:	f383 8811 	msr	BASEPRI, r3
   1f874:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1f878:	f7fc f862 	bl	1b940 <ready_thread>
	__asm__ volatile(
   1f87c:	f384 8811 	msr	BASEPRI, r4
   1f880:	f3bf 8f6f 	isb	sy
}
   1f884:	bd10      	pop	{r4, pc}

0001f886 <z_thread_timeout>:
{
   1f886:	b510      	push	{r4, lr}
   1f888:	4601      	mov	r1, r0
	__asm__ volatile(
   1f88a:	f04f 0320 	mov.w	r3, #32
   1f88e:	f3ef 8411 	mrs	r4, BASEPRI
   1f892:	f383 8811 	msr	BASEPRI, r3
   1f896:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1f89a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1f89e:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f8a2:	d10d      	bne.n	1f8c0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1f8a4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1f8a8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1f8aa:	b10b      	cbz	r3, 1f8b0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1f8ac:	f7ff ff5e 	bl	1f76c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1f8b0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1f8b4:	f023 0314 	bic.w	r3, r3, #20
   1f8b8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1f8bc:	f7fc f840 	bl	1b940 <ready_thread>
	__asm__ volatile(
   1f8c0:	f384 8811 	msr	BASEPRI, r4
   1f8c4:	f3bf 8f6f 	isb	sy
}
   1f8c8:	bd10      	pop	{r4, pc}

0001f8ca <z_unpend1_no_timeout>:
{
   1f8ca:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f8cc:	f04f 0320 	mov.w	r3, #32
   1f8d0:	f3ef 8411 	mrs	r4, BASEPRI
   1f8d4:	f383 8811 	msr	BASEPRI, r3
   1f8d8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1f8dc:	f7ff ff93 	bl	1f806 <z_priq_dumb_best>
		if (thread != NULL) {
   1f8e0:	4601      	mov	r1, r0
   1f8e2:	b108      	cbz	r0, 1f8e8 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1f8e4:	f7ff ff42 	bl	1f76c <unpend_thread_no_timeout>
	__asm__ volatile(
   1f8e8:	f384 8811 	msr	BASEPRI, r4
   1f8ec:	f3bf 8f6f 	isb	sy
}
   1f8f0:	4608      	mov	r0, r1
   1f8f2:	bd10      	pop	{r4, pc}

0001f8f4 <z_unpend_first_thread>:
{
   1f8f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f8f6:	f04f 0320 	mov.w	r3, #32
   1f8fa:	f3ef 8511 	mrs	r5, BASEPRI
   1f8fe:	f383 8811 	msr	BASEPRI, r3
   1f902:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1f906:	f7ff ff7e 	bl	1f806 <z_priq_dumb_best>
		if (thread != NULL) {
   1f90a:	4604      	mov	r4, r0
   1f90c:	b120      	cbz	r0, 1f918 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1f90e:	f7ff ff2d 	bl	1f76c <unpend_thread_no_timeout>
   1f912:	3018      	adds	r0, #24
   1f914:	f000 f833 	bl	1f97e <z_abort_timeout>
	__asm__ volatile(
   1f918:	f385 8811 	msr	BASEPRI, r5
   1f91c:	f3bf 8f6f 	isb	sy
}
   1f920:	4620      	mov	r0, r4
   1f922:	bd38      	pop	{r3, r4, r5, pc}

0001f924 <z_unpend_all>:
{
   1f924:	b538      	push	{r3, r4, r5, lr}
   1f926:	4605      	mov	r5, r0
	int need_sched = 0;
   1f928:	2000      	movs	r0, #0
	return list->head == list;
   1f92a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f92c:	42a5      	cmp	r5, r4
   1f92e:	d000      	beq.n	1f932 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f930:	b904      	cbnz	r4, 1f934 <z_unpend_all+0x10>
}
   1f932:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f934:	4620      	mov	r0, r4
   1f936:	f7ff ff3c 	bl	1f7b2 <z_unpend_thread>
		z_ready_thread(thread);
   1f93a:	4620      	mov	r0, r4
   1f93c:	f7ff ff93 	bl	1f866 <z_ready_thread>
		need_sched = 1;
   1f940:	2001      	movs	r0, #1
   1f942:	e7f2      	b.n	1f92a <z_unpend_all+0x6>

0001f944 <z_sched_wake>:
{
   1f944:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f946:	f04f 0320 	mov.w	r3, #32
   1f94a:	f3ef 8511 	mrs	r5, BASEPRI
   1f94e:	f383 8811 	msr	BASEPRI, r3
   1f952:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1f956:	f7ff ff56 	bl	1f806 <z_priq_dumb_best>
		if (thread != NULL) {
   1f95a:	4604      	mov	r4, r0
   1f95c:	b150      	cbz	r0, 1f974 <z_sched_wake+0x30>
   1f95e:	67c1      	str	r1, [r0, #124]	; 0x7c
   1f960:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1f962:	f7ff ff03 	bl	1f76c <unpend_thread_no_timeout>
   1f966:	3018      	adds	r0, #24
   1f968:	f000 f809 	bl	1f97e <z_abort_timeout>
			ready_thread(thread);
   1f96c:	4620      	mov	r0, r4
   1f96e:	f7fb ffe7 	bl	1b940 <ready_thread>
			ret = true;
   1f972:	2001      	movs	r0, #1
	__asm__ volatile(
   1f974:	f385 8811 	msr	BASEPRI, r5
   1f978:	f3bf 8f6f 	isb	sy
}
   1f97c:	bd38      	pop	{r3, r4, r5, pc}

0001f97e <z_abort_timeout>:
{
   1f97e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f980:	f04f 0220 	mov.w	r2, #32
   1f984:	f3ef 8411 	mrs	r4, BASEPRI
   1f988:	f382 8811 	msr	BASEPRI, r2
   1f98c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1f990:	6803      	ldr	r3, [r0, #0]
   1f992:	b13b      	cbz	r3, 1f9a4 <z_abort_timeout+0x26>
			remove_timeout(to);
   1f994:	f7fc f9e4 	bl	1bd60 <remove_timeout>
			ret = 0;
   1f998:	2000      	movs	r0, #0
	__asm__ volatile(
   1f99a:	f384 8811 	msr	BASEPRI, r4
   1f99e:	f3bf 8f6f 	isb	sy
}
   1f9a2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1f9a4:	f06f 0015 	mvn.w	r0, #21
   1f9a8:	e7f7      	b.n	1f99a <z_abort_timeout+0x1c>

0001f9aa <z_get_next_timeout_expiry>:
{
   1f9aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f9ac:	f04f 0320 	mov.w	r3, #32
   1f9b0:	f3ef 8411 	mrs	r4, BASEPRI
   1f9b4:	f383 8811 	msr	BASEPRI, r3
   1f9b8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1f9bc:	f7fc f9a8 	bl	1bd10 <next_timeout>
	__asm__ volatile(
   1f9c0:	f384 8811 	msr	BASEPRI, r4
   1f9c4:	f3bf 8f6f 	isb	sy
}
   1f9c8:	bd10      	pop	{r4, pc}

0001f9ca <z_set_timeout_expiry>:
{
   1f9ca:	b570      	push	{r4, r5, r6, lr}
   1f9cc:	4604      	mov	r4, r0
   1f9ce:	460d      	mov	r5, r1
	__asm__ volatile(
   1f9d0:	f04f 0320 	mov.w	r3, #32
   1f9d4:	f3ef 8611 	mrs	r6, BASEPRI
   1f9d8:	f383 8811 	msr	BASEPRI, r3
   1f9dc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1f9e0:	f7fc f996 	bl	1bd10 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1f9e4:	2801      	cmp	r0, #1
   1f9e6:	dd05      	ble.n	1f9f4 <z_set_timeout_expiry+0x2a>
   1f9e8:	42a0      	cmp	r0, r4
   1f9ea:	db03      	blt.n	1f9f4 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1f9ec:	4629      	mov	r1, r5
   1f9ee:	4620      	mov	r0, r4
   1f9f0:	f7e4 fd40 	bl	4474 <sys_clock_set_timeout>
	__asm__ volatile(
   1f9f4:	f386 8811 	msr	BASEPRI, r6
   1f9f8:	f3bf 8f6f 	isb	sy
}
   1f9fc:	bd70      	pop	{r4, r5, r6, pc}

0001f9fe <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f9fe:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1fa00:	f7fc fa9e 	bl	1bf40 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1fa04:	bd08      	pop	{r3, pc}

0001fa06 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1fa06:	f7fc ba9b 	b.w	1bf40 <sys_clock_tick_get>

0001fa0a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1fa0a:	b108      	cbz	r0, 1fa10 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1fa0c:	f7e5 ba86 	b.w	4f1c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1fa10:	4770      	bx	lr

0001fa12 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fa12:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1fa16:	bf08      	it	eq
   1fa18:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1fa1c:	b538      	push	{r3, r4, r5, lr}
   1fa1e:	4605      	mov	r5, r0
   1fa20:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fa22:	d01d      	beq.n	1fa60 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fa24:	ea51 0300 	orrs.w	r3, r1, r0
   1fa28:	d103      	bne.n	1fa32 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1fa2e:	f7fc ba87 	b.w	1bf40 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1fa32:	f06f 0301 	mvn.w	r3, #1
   1fa36:	1a18      	subs	r0, r3, r0
   1fa38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa3c:	eb63 0101 	sbc.w	r1, r3, r1
   1fa40:	2900      	cmp	r1, #0
   1fa42:	da0c      	bge.n	1fa5e <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1fa44:	f7fc fa7c 	bl	1bf40 <sys_clock_tick_get>
   1fa48:	2d01      	cmp	r5, #1
   1fa4a:	4622      	mov	r2, r4
   1fa4c:	f174 0400 	sbcs.w	r4, r4, #0
   1fa50:	462b      	mov	r3, r5
   1fa52:	bfbc      	itt	lt
   1fa54:	2301      	movlt	r3, #1
   1fa56:	2200      	movlt	r2, #0
   1fa58:	1818      	adds	r0, r3, r0
   1fa5a:	eb41 0102 	adc.w	r1, r1, r2
}
   1fa5e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1fa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fa64:	4601      	mov	r1, r0
   1fa66:	e7fa      	b.n	1fa5e <sys_clock_timeout_end_calc+0x4c>

0001fa68 <k_timer_init>:
	timer->status = 0U;
   1fa68:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1fa6a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1fa6e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1fa72:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1fa76:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1fa7a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1fa7c:	6343      	str	r3, [r0, #52]	; 0x34
}
   1fa7e:	4770      	bx	lr

0001fa80 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1fa80:	b510      	push	{r4, lr}
   1fa82:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1fa84:	f7ff ff7b 	bl	1f97e <z_abort_timeout>

	if (inactive) {
   1fa88:	b9b0      	cbnz	r0, 1fab8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1fa8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fa8c:	b10b      	cbz	r3, 1fa92 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1fa8e:	4620      	mov	r0, r4
   1fa90:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1fa92:	f104 0018 	add.w	r0, r4, #24
   1fa96:	f7ff ff18 	bl	1f8ca <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1fa9a:	b168      	cbz	r0, 1fab8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1fa9c:	f7ff fee3 	bl	1f866 <z_ready_thread>
	__asm__ volatile(
   1faa0:	f04f 0320 	mov.w	r3, #32
   1faa4:	f3ef 8011 	mrs	r0, BASEPRI
   1faa8:	f383 8811 	msr	BASEPRI, r3
   1faac:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1fab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fab4:	f7ff be91 	b.w	1f7da <z_reschedule_irqlock>
   1fab8:	bd10      	pop	{r4, pc}

0001faba <add_event>:
{
   1faba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fabc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1fabe:	e9d0 2300 	ldrd	r2, r3, [r0]
   1fac2:	4290      	cmp	r0, r2
   1fac4:	4604      	mov	r4, r0
   1fac6:	460d      	mov	r5, r1
   1fac8:	d105      	bne.n	1fad6 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1faca:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1facc:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1fad0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1fad2:	6065      	str	r5, [r4, #4]
}
   1fad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1fad6:	2b00      	cmp	r3, #0
   1fad8:	d0f7      	beq.n	1faca <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1fada:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fadc:	b100      	cbz	r0, 1fae0 <add_event+0x26>
   1fade:	3860      	subs	r0, #96	; 0x60
   1fae0:	b107      	cbz	r7, 1fae4 <add_event+0x2a>
   1fae2:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1fae4:	4639      	mov	r1, r7
   1fae6:	f7ff fe4b 	bl	1f780 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1faea:	2800      	cmp	r0, #0
   1faec:	dced      	bgt.n	1faca <add_event+0x10>
	return list->head == list;
   1faee:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1faf0:	42b4      	cmp	r4, r6
   1faf2:	d0ea      	beq.n	1faca <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1faf4:	2e00      	cmp	r6, #0
   1faf6:	d0e8      	beq.n	1faca <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1faf8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fafa:	b101      	cbz	r1, 1fafe <add_event+0x44>
   1fafc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1fafe:	4638      	mov	r0, r7
   1fb00:	f7ff fe3e 	bl	1f780 <z_sched_prio_cmp>
   1fb04:	2800      	cmp	r0, #0
   1fb06:	dd05      	ble.n	1fb14 <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   1fb08:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1fb0a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1fb0e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1fb10:	6075      	str	r5, [r6, #4]
			return;
   1fb12:	e7df      	b.n	1fad4 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1fb14:	6863      	ldr	r3, [r4, #4]
   1fb16:	429e      	cmp	r6, r3
   1fb18:	d0d7      	beq.n	1faca <add_event+0x10>
   1fb1a:	6836      	ldr	r6, [r6, #0]
   1fb1c:	e7ea      	b.n	1faf4 <add_event+0x3a>

0001fb1e <register_events>:
{
   1fb1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1fb22:	2500      	movs	r5, #0
{
   1fb24:	468b      	mov	fp, r1
   1fb26:	4614      	mov	r4, r2
   1fb28:	461f      	mov	r7, r3
   1fb2a:	4682      	mov	sl, r0
	int events_registered = 0;
   1fb2c:	462e      	mov	r6, r5
	event->poller = NULL;
   1fb2e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1fb30:	455d      	cmp	r5, fp
   1fb32:	db02      	blt.n	1fb3a <register_events+0x1c>
}
   1fb34:	4630      	mov	r0, r6
   1fb36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb3a:	f04f 0320 	mov.w	r3, #32
   1fb3e:	f3ef 8911 	mrs	r9, BASEPRI
   1fb42:	f383 8811 	msr	BASEPRI, r3
   1fb46:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1fb4a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1fb4e:	f003 031f 	and.w	r3, r3, #31
   1fb52:	3b01      	subs	r3, #1
   1fb54:	2b07      	cmp	r3, #7
   1fb56:	d80f      	bhi.n	1fb78 <register_events+0x5a>
   1fb58:	e8df f003 	tbb	[pc, r3]
   1fb5c:	0a0e041e 	.word	0x0a0e041e
   1fb60:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1fb64:	f8da 3010 	ldr.w	r3, [sl, #16]
   1fb68:	689b      	ldr	r3, [r3, #8]
   1fb6a:	b12b      	cbz	r3, 1fb78 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1fb6c:	2302      	movs	r3, #2
   1fb6e:	e020      	b.n	1fbb2 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1fb70:	f8da 3010 	ldr.w	r3, [sl, #16]
   1fb74:	681b      	ldr	r3, [r3, #0]
   1fb76:	bb8b      	cbnz	r3, 1fbdc <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1fb78:	bb47      	cbnz	r7, 1fbcc <register_events+0xae>
   1fb7a:	7823      	ldrb	r3, [r4, #0]
   1fb7c:	b333      	cbz	r3, 1fbcc <register_events+0xae>
	switch (event->type) {
   1fb7e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1fb82:	f003 031f 	and.w	r3, r3, #31
   1fb86:	3b01      	subs	r3, #1
   1fb88:	2b07      	cmp	r3, #7
   1fb8a:	d830      	bhi.n	1fbee <register_events+0xd0>
   1fb8c:	e8df f003 	tbb	[pc, r3]
   1fb90:	282f2833 	.word	0x282f2833
   1fb94:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1fb98:	f8da 3010 	ldr.w	r3, [sl, #16]
   1fb9c:	689b      	ldr	r3, [r3, #8]
   1fb9e:	2b00      	cmp	r3, #0
   1fba0:	d0ea      	beq.n	1fb78 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1fba2:	2301      	movs	r3, #1
   1fba4:	e005      	b.n	1fbb2 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1fba6:	f8da 3010 	ldr.w	r3, [sl, #16]
   1fbaa:	6a1b      	ldr	r3, [r3, #32]
   1fbac:	2b00      	cmp	r3, #0
   1fbae:	d0e3      	beq.n	1fb78 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1fbb0:	2310      	movs	r3, #16
	event->state |= state;
   1fbb2:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1fbb6:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1fbba:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1fbbe:	430b      	orrs	r3, r1
   1fbc0:	f363 3252 	bfi	r2, r3, #13, #6
   1fbc4:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1fbc8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1fbcc:	f389 8811 	msr	BASEPRI, r9
   1fbd0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1fbd4:	3501      	adds	r5, #1
   1fbd6:	f10a 0a14 	add.w	sl, sl, #20
   1fbda:	e7a9      	b.n	1fb30 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1fbdc:	2304      	movs	r3, #4
   1fbde:	e7e8      	b.n	1fbb2 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1fbe0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1fbe4:	4622      	mov	r2, r4
   1fbe6:	4651      	mov	r1, sl
   1fbe8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1fbea:	f7ff ff66 	bl	1faba <add_event>
	event->poller = poller;
   1fbee:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1fbf2:	3601      	adds	r6, #1
   1fbf4:	e7ea      	b.n	1fbcc <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1fbf6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1fbfa:	4622      	mov	r2, r4
   1fbfc:	4651      	mov	r1, sl
   1fbfe:	e7f4      	b.n	1fbea <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1fc00:	f8da 0010 	ldr.w	r0, [sl, #16]
   1fc04:	4622      	mov	r2, r4
   1fc06:	4651      	mov	r1, sl
   1fc08:	3024      	adds	r0, #36	; 0x24
   1fc0a:	e7ee      	b.n	1fbea <register_events+0xcc>

0001fc0c <signal_poll_event>:
{
   1fc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1fc10:	6884      	ldr	r4, [r0, #8]
{
   1fc12:	4605      	mov	r5, r0
   1fc14:	460e      	mov	r6, r1
	if (poller != NULL) {
   1fc16:	b144      	cbz	r4, 1fc2a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1fc18:	7863      	ldrb	r3, [r4, #1]
   1fc1a:	2b01      	cmp	r3, #1
   1fc1c:	d136      	bne.n	1fc8c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1fc1e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1fc22:	f013 0302 	ands.w	r3, r3, #2
   1fc26:	d10a      	bne.n	1fc3e <signal_poll_event+0x32>
		poller->is_polling = false;
   1fc28:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1fc2a:	68eb      	ldr	r3, [r5, #12]
   1fc2c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1fc30:	430e      	orrs	r6, r1
	event->poller = NULL;
   1fc32:	2000      	movs	r0, #0
	event->state |= state;
   1fc34:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1fc38:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1fc3a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1fc3c:	e00b      	b.n	1fc56 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1fc3e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1fc42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1fc46:	bf08      	it	eq
   1fc48:	f112 0f02 	cmneq.w	r2, #2
   1fc4c:	d105      	bne.n	1fc5a <signal_poll_event+0x4e>
		poller->is_polling = false;
   1fc4e:	2300      	movs	r3, #0
   1fc50:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1fc52:	f06f 000a 	mvn.w	r0, #10
}
   1fc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fc5a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1fc5e:	4640      	mov	r0, r8
   1fc60:	f7ff fda7 	bl	1f7b2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1fc64:	2e08      	cmp	r6, #8
   1fc66:	bf0c      	ite	eq
   1fc68:	f06f 0303 	mvneq.w	r3, #3
   1fc6c:	2300      	movne	r3, #0
   1fc6e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fc70:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1fc74:	06db      	lsls	r3, r3, #27
   1fc76:	d102      	bne.n	1fc7e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1fc78:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1fc7c:	b10f      	cbz	r7, 1fc82 <signal_poll_event+0x76>
		poller->is_polling = false;
   1fc7e:	2300      	movs	r3, #0
   1fc80:	e7d2      	b.n	1fc28 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1fc82:	4640      	mov	r0, r8
   1fc84:	f7ff fdef 	bl	1f866 <z_ready_thread>
		poller->is_polling = false;
   1fc88:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1fc8a:	e7ce      	b.n	1fc2a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1fc8c:	2b02      	cmp	r3, #2
   1fc8e:	d1f6      	bne.n	1fc7e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1fc90:	7823      	ldrb	r3, [r4, #0]
   1fc92:	2b00      	cmp	r3, #0
   1fc94:	d0c9      	beq.n	1fc2a <signal_poll_event+0x1e>
   1fc96:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1fc9a:	2f00      	cmp	r7, #0
   1fc9c:	d0f4      	beq.n	1fc88 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1fc9e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1fca2:	f1a4 0914 	sub.w	r9, r4, #20
   1fca6:	f104 0014 	add.w	r0, r4, #20
   1fcaa:	f7ff fe68 	bl	1f97e <z_abort_timeout>
		twork->poll_result = 0;
   1fcae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1fcb2:	4649      	mov	r1, r9
   1fcb4:	4638      	mov	r0, r7
   1fcb6:	f7ff fce4 	bl	1f682 <k_work_submit_to_queue>
		poller->is_polling = false;
   1fcba:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1fcbe:	e7b4      	b.n	1fc2a <signal_poll_event+0x1e>

0001fcc0 <clear_event_registrations>:
	while (num_events--) {
   1fcc0:	2314      	movs	r3, #20
{
   1fcc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fcc4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1fcc8:	2400      	movs	r4, #0
   1fcca:	2601      	movs	r6, #1
	while (num_events--) {
   1fccc:	b901      	cbnz	r1, 1fcd0 <clear_event_registrations+0x10>
}
   1fcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1fcd0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1fcd4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1fcd8:	f003 031f 	and.w	r3, r3, #31
   1fcdc:	2b08      	cmp	r3, #8
   1fcde:	f1a0 0714 	sub.w	r7, r0, #20
   1fce2:	d80d      	bhi.n	1fd00 <clear_event_registrations+0x40>
   1fce4:	fa06 f303 	lsl.w	r3, r6, r3
   1fce8:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1fcec:	d008      	beq.n	1fd00 <clear_event_registrations+0x40>
	return node->next != NULL;
   1fcee:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1fcf2:	b12b      	cbz	r3, 1fd00 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1fcf4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1fcf8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1fcfa:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1fcfc:	e940 4405 	strd	r4, r4, [r0, #-20]
   1fd00:	f382 8811 	msr	BASEPRI, r2
   1fd04:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fd08:	f04f 0320 	mov.w	r3, #32
   1fd0c:	f3ef 8211 	mrs	r2, BASEPRI
   1fd10:	f383 8811 	msr	BASEPRI, r3
   1fd14:	f3bf 8f6f 	isb	sy
   1fd18:	3901      	subs	r1, #1
   1fd1a:	4638      	mov	r0, r7
   1fd1c:	e7d6      	b.n	1fccc <clear_event_registrations+0xc>

0001fd1e <k_poll_event_init>:
{
   1fd1e:	b510      	push	{r4, lr}
	event->type = type;
   1fd20:	04d2      	lsls	r2, r2, #19
   1fd22:	0209      	lsls	r1, r1, #8
   1fd24:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1fd28:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1fd2c:	430a      	orrs	r2, r1
   1fd2e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1fd30:	2400      	movs	r4, #0
	event->type = type;
   1fd32:	430a      	orrs	r2, r1
	event->obj = obj;
   1fd34:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1fd38:	6084      	str	r4, [r0, #8]
}
   1fd3a:	bd10      	pop	{r4, pc}

0001fd3c <z_handle_obj_poll_events>:
{
   1fd3c:	4603      	mov	r3, r0
	return list->head == list;
   1fd3e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1fd40:	4283      	cmp	r3, r0
   1fd42:	d008      	beq.n	1fd56 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1fd44:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1fd48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1fd4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fd4c:	2300      	movs	r3, #0
	node->prev = NULL;
   1fd4e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1fd52:	f7ff bf5b 	b.w	1fc0c <signal_poll_event>
}
   1fd56:	4770      	bx	lr

0001fd58 <k_free>:
	if (ptr != NULL) {
   1fd58:	b120      	cbz	r0, 1fd64 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1fd5a:	1f01      	subs	r1, r0, #4
   1fd5c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1fd60:	f7ff babc 	b.w	1f2dc <k_heap_free>
}
   1fd64:	4770      	bx	lr

0001fd66 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1fd66:	4770      	bx	lr
